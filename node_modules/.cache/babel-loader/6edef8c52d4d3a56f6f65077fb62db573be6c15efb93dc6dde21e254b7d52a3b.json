{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/pointer/observer.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { each } from \"../../core/utils/iterator\";\nimport readyCallbacks from \"../../core/utils/ready_callbacks\";\nimport domAdapter from \"../../core/dom_adapter\";\nvar addEventsListener = function (events, handler) {\n  readyCallbacks.add(function () {\n    events.split(\" \").forEach(function (event) {\n      domAdapter.listen(domAdapter.getDocument(), event, handler, true);\n    });\n  });\n};\nvar Observer = function (eventMap, pointerEquals, onPointerAdding) {\n  onPointerAdding = onPointerAdding || function () {};\n  var pointers = [];\n  var getPointerIndex = function (e) {\n    var index = -1;\n    each(pointers, function (i, pointer) {\n      if (!pointerEquals(e, pointer)) {\n        return true;\n      }\n      index = i;\n      return false;\n    });\n    return index;\n  };\n  var removePointer = function (e) {\n    var index = getPointerIndex(e);\n    if (index > -1) {\n      pointers.splice(index, 1);\n    }\n  };\n  addEventsListener(eventMap.dxpointerdown, function (e) {\n    if (-1 === getPointerIndex(e)) {\n      onPointerAdding(e);\n      pointers.push(e);\n    }\n  });\n  addEventsListener(eventMap.dxpointermove, function (e) {\n    pointers[getPointerIndex(e)] = e;\n  });\n  addEventsListener(eventMap.dxpointerup, removePointer);\n  addEventsListener(eventMap.dxpointercancel, removePointer);\n  this.pointers = function () {\n    return pointers;\n  };\n  this.reset = function () {\n    pointers = [];\n  };\n};\nexport default Observer;","map":{"version":3,"names":["each","readyCallbacks","domAdapter","addEventsListener","events","handler","add","split","forEach","event","listen","getDocument","Observer","eventMap","pointerEquals","onPointerAdding","pointers","getPointerIndex","e","index","i","pointer","removePointer","splice","dxpointerdown","push","dxpointermove","dxpointerup","dxpointercancel","reset"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/node_modules/devextreme/esm/events/pointer/observer.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/events/pointer/observer.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport readyCallbacks from \"../../core/utils/ready_callbacks\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nvar addEventsListener = function(events, handler) {\r\n    readyCallbacks.add((function() {\r\n        events.split(\" \").forEach((function(event) {\r\n            domAdapter.listen(domAdapter.getDocument(), event, handler, true)\r\n        }))\r\n    }))\r\n};\r\nvar Observer = function(eventMap, pointerEquals, onPointerAdding) {\r\n    onPointerAdding = onPointerAdding || function() {};\r\n    var pointers = [];\r\n    var getPointerIndex = function(e) {\r\n        var index = -1;\r\n        each(pointers, (function(i, pointer) {\r\n            if (!pointerEquals(e, pointer)) {\r\n                return true\r\n            }\r\n            index = i;\r\n            return false\r\n        }));\r\n        return index\r\n    };\r\n    var removePointer = function(e) {\r\n        var index = getPointerIndex(e);\r\n        if (index > -1) {\r\n            pointers.splice(index, 1)\r\n        }\r\n    };\r\n    addEventsListener(eventMap.dxpointerdown, (function(e) {\r\n        if (-1 === getPointerIndex(e)) {\r\n            onPointerAdding(e);\r\n            pointers.push(e)\r\n        }\r\n    }));\r\n    addEventsListener(eventMap.dxpointermove, (function(e) {\r\n        pointers[getPointerIndex(e)] = e\r\n    }));\r\n    addEventsListener(eventMap.dxpointerup, removePointer);\r\n    addEventsListener(eventMap.dxpointercancel, removePointer);\r\n    this.pointers = function() {\r\n        return pointers\r\n    };\r\n    this.reset = function() {\r\n        pointers = []\r\n    }\r\n};\r\nexport default Observer;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,IAAI,QACD,2BAA2B;AAClC,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,IAAIC,iBAAiB,GAAG,SAAAA,CAASC,MAAM,EAAEC,OAAO,EAAE;EAC9CJ,cAAc,CAACK,GAAG,CAAE,YAAW;IAC3BF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAE,UAASC,KAAK,EAAE;MACvCP,UAAU,CAACQ,MAAM,CAACR,UAAU,CAACS,WAAW,CAAC,CAAC,EAAEF,KAAK,EAAEJ,OAAO,EAAE,IAAI,CAAC;IACrE,CAAE,CAAC;EACP,CAAE,CAAC;AACP,CAAC;AACD,IAAIO,QAAQ,GAAG,SAAAA,CAASC,QAAQ,EAAEC,aAAa,EAAEC,eAAe,EAAE;EAC9DA,eAAe,GAAGA,eAAe,IAAI,YAAW,CAAC,CAAC;EAClD,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,eAAe,GAAG,SAAAA,CAASC,CAAC,EAAE;IAC9B,IAAIC,KAAK,GAAG,CAAC,CAAC;IACdnB,IAAI,CAACgB,QAAQ,EAAG,UAASI,CAAC,EAAEC,OAAO,EAAE;MACjC,IAAI,CAACP,aAAa,CAACI,CAAC,EAAEG,OAAO,CAAC,EAAE;QAC5B,OAAO,IAAI;MACf;MACAF,KAAK,GAAGC,CAAC;MACT,OAAO,KAAK;IAChB,CAAE,CAAC;IACH,OAAOD,KAAK;EAChB,CAAC;EACD,IAAIG,aAAa,GAAG,SAAAA,CAASJ,CAAC,EAAE;IAC5B,IAAIC,KAAK,GAAGF,eAAe,CAACC,CAAC,CAAC;IAC9B,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAE;MACZH,QAAQ,CAACO,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;IAC7B;EACJ,CAAC;EACDhB,iBAAiB,CAACU,QAAQ,CAACW,aAAa,EAAG,UAASN,CAAC,EAAE;IACnD,IAAI,CAAC,CAAC,KAAKD,eAAe,CAACC,CAAC,CAAC,EAAE;MAC3BH,eAAe,CAACG,CAAC,CAAC;MAClBF,QAAQ,CAACS,IAAI,CAACP,CAAC,CAAC;IACpB;EACJ,CAAE,CAAC;EACHf,iBAAiB,CAACU,QAAQ,CAACa,aAAa,EAAG,UAASR,CAAC,EAAE;IACnDF,QAAQ,CAACC,eAAe,CAACC,CAAC,CAAC,CAAC,GAAGA,CAAC;EACpC,CAAE,CAAC;EACHf,iBAAiB,CAACU,QAAQ,CAACc,WAAW,EAAEL,aAAa,CAAC;EACtDnB,iBAAiB,CAACU,QAAQ,CAACe,eAAe,EAAEN,aAAa,CAAC;EAC1D,IAAI,CAACN,QAAQ,GAAG,YAAW;IACvB,OAAOA,QAAQ;EACnB,CAAC;EACD,IAAI,CAACa,KAAK,GAAG,YAAW;IACpBb,QAAQ,GAAG,EAAE;EACjB,CAAC;AACL,CAAC;AACD,eAAeJ,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}