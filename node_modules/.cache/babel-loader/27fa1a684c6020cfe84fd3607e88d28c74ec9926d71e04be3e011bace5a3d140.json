{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_chooser.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { deferUpdate, noop } from \"../../core/utils/common\";\nimport modules from \"./ui.grid_core.modules\";\nimport { ColumnsView } from \"./ui.grid_core.columns_view\";\nimport messageLocalization from \"../../localization/message\";\nimport { isMaterial as isMaterialTheme, isGeneric, current } from \"../themes\";\nimport TreeView from \"../tree_view\";\nimport devices from \"../../core/devices\";\nimport Popup from \"../popup/ui.popup\";\nimport Button from \"../button\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nvar COLUMN_CHOOSER_CLASS = \"column-chooser\";\nvar COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\";\nvar NOTOUCH_ACTION_CLASS = \"notouch-action\";\nvar COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\";\nvar COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\";\nvar COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\";\nvar COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\";\nvar COLUMN_CHOOSER_ICON_NAME = \"column-chooser\";\nvar COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\";\nvar TREEVIEW_NODE_SELECTOR = \".dx-treeview-node\";\nvar CHECKBOX_SELECTOR = \".dx-checkbox\";\nvar CLICK_TIMEOUT = 300;\nvar processItems = function (that, chooserColumns) {\n  var items = [];\n  var isSelectMode = \"select\" === that.option(\"columnChooser.mode\");\n  if (chooserColumns.length) {\n    each(chooserColumns, function (index, column) {\n      var item = {\n        text: column.caption,\n        cssClass: column.cssClass,\n        allowHiding: column.allowHiding,\n        expanded: true,\n        id: column.index,\n        disabled: false,\n        disableCheckBox: false === column.allowHiding,\n        parentId: isDefined(column.ownerBand) ? column.ownerBand : null\n      };\n      if (isSelectMode) {\n        item.selected = column.visible;\n      }\n      items.push(item);\n    });\n  }\n  return items;\n};\nvar columnChooserControllerMembers = {\n  renderShowColumnChooserButton: function ($element) {\n    var that = this;\n    var columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS);\n    var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n    var $showColumnChooserButton = $element.find(\".\" + columnChooserButtonClass);\n    var $columnChooserButton;\n    if (columnChooserEnabled) {\n      if (!$showColumnChooserButton.length) {\n        $columnChooserButton = $(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\n        that._createComponent($columnChooserButton, Button, {\n          icon: COLUMN_CHOOSER_ICON_NAME,\n          onClick: function () {\n            that.getView(\"columnChooserView\").showColumnChooser();\n          },\n          hint: that.option(\"columnChooser.title\"),\n          integrationOptions: {}\n        });\n      } else {\n        $showColumnChooserButton.show();\n      }\n    } else {\n      $showColumnChooserButton.hide();\n    }\n  },\n  getPosition: function () {\n    var rowsView = this.getView(\"rowsView\");\n    return {\n      my: \"right bottom\",\n      at: \"right bottom\",\n      of: rowsView && rowsView.element(),\n      collision: \"fit\",\n      offset: \"-2 -2\",\n      boundaryOffset: \"2 2\"\n    };\n  }\n};\nvar ColumnChooserController = modules.ViewController.inherit(columnChooserControllerMembers);\nvar columnChooserMembers = {\n  _resizeCore: noop,\n  _isWinDevice: function () {\n    return !!devices.real().win;\n  },\n  _updateList: function (change) {\n    var items;\n    var $popupContent = this._popupContainer.$content();\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    var columnChooserList = this._columnChooserList;\n    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n    this._popupContainer.setAria({\n      role: \"dialog\",\n      label: messageLocalization.format(\"dxDataGrid-columnChooserTitle\")\n    });\n    if (isSelectMode && columnChooserList && change && \"selection\" === change.changeType) {\n      items = processItems(this, chooserColumns);\n      for (var i = 0; i < items.length; i++) {\n        var selected = items[i].selected;\n        var id = items[i].id;\n        if (id === change.columnIndex) {\n          if (selected) {\n            columnChooserList.selectItem(id, selected);\n          } else {\n            columnChooserList.unselectItem(id, selected);\n          }\n        }\n      }\n    } else if (!isSelectMode || !columnChooserList || \"full\" === change) {\n      this._popupContainer.$wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\n      items = processItems(this, chooserColumns);\n      this._renderTreeView($popupContent, items);\n    }\n  },\n  _initializePopupContainer: function () {\n    var that = this;\n    var columnChooserClass = that.addWidgetPrefix(COLUMN_CHOOSER_CLASS);\n    var $element = that.element().addClass(columnChooserClass);\n    var columnChooserOptions = that.option(\"columnChooser\");\n    var themeName = current();\n    var isGenericTheme = isGeneric(themeName);\n    var isMaterial = isMaterialTheme(themeName);\n    var dxPopupOptions = {\n      visible: false,\n      shading: false,\n      showCloseButton: false,\n      dragEnabled: true,\n      resizeEnabled: true,\n      wrapperAttr: {\n        class: columnChooserClass\n      },\n      toolbarItems: [{\n        text: columnChooserOptions.title,\n        toolbar: \"top\",\n        location: isGenericTheme || isMaterial ? \"before\" : \"center\"\n      }],\n      position: that.getController(\"columnChooser\").getPosition(),\n      width: columnChooserOptions.width,\n      height: columnChooserOptions.height,\n      rtlEnabled: that.option(\"rtlEnabled\"),\n      onHidden: function () {\n        if (that._isWinDevice()) {\n          $(\"body\").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n        }\n      },\n      container: columnChooserOptions.container\n    };\n    if (isGenericTheme || isMaterial) {\n      extend(dxPopupOptions, {\n        showCloseButton: true\n      });\n    } else {\n      dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\n        shortcut: \"cancel\"\n      };\n    }\n    if (!isDefined(this._popupContainer)) {\n      that._popupContainer = that._createComponent($element, Popup, dxPopupOptions);\n      that._popupContainer.on(\"optionChanged\", function (args) {\n        if (\"visible\" === args.name) {\n          that.renderCompleted.fire();\n        }\n      });\n    } else {\n      this._popupContainer.option(dxPopupOptions);\n    }\n  },\n  _renderCore: function (change) {\n    if (this._popupContainer) {\n      this._updateList(change);\n    }\n  },\n  _renderTreeView: function ($container, items) {\n    var that = this;\n    var columnChooser = this.option(\"columnChooser\");\n    var isSelectMode = \"select\" === columnChooser.mode;\n    var treeViewConfig = {\n      items: items,\n      dataStructure: \"plain\",\n      activeStateEnabled: true,\n      focusStateEnabled: true,\n      hoverStateEnabled: true,\n      itemTemplate: \"item\",\n      showCheckBoxesMode: \"none\",\n      rootValue: null,\n      searchEnabled: columnChooser.allowSearch,\n      searchTimeout: columnChooser.searchTimeout,\n      onItemRendered: function (e) {\n        if (e.itemData.disableCheckBox) {\n          var $treeViewNode = $(e.itemElement).closest(TREEVIEW_NODE_SELECTOR);\n          var $checkBox;\n          if ($treeViewNode.length) {\n            $checkBox = $treeViewNode.find(CHECKBOX_SELECTOR);\n            if ($checkBox.length) {\n              var checkBoxInstance = $checkBox.data(\"dxCheckBox\");\n              checkBoxInstance && checkBoxInstance.option(\"disabled\", true);\n            }\n          }\n        }\n      }\n    };\n    var scrollableInstance = $container.find(\".dx-scrollable\").data(\"dxScrollable\");\n    var scrollTop = scrollableInstance && scrollableInstance.scrollTop();\n    if (isSelectMode && !this._columnsController.isBandColumnsUsed()) {\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS));\n    }\n    treeViewConfig.onContentReady = function (e) {\n      deferUpdate(function () {\n        if (scrollTop) {\n          var scrollable = $(e.element).find(\".dx-scrollable\").data(\"dxScrollable\");\n          scrollable && scrollable.scrollTo({\n            y: scrollTop\n          });\n        }\n        that.renderCompleted.fire();\n      });\n    };\n    if (this._isWinDevice()) {\n      treeViewConfig.useNativeScrolling = false;\n    }\n    extend(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\n    if (this._columnChooserList) {\n      if (!treeViewConfig.searchEnabled) {\n        treeViewConfig.searchValue = \"\";\n      }\n      this._columnChooserList.option(treeViewConfig);\n    } else {\n      this._columnChooserList = this._createComponent($container, TreeView, treeViewConfig);\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS));\n    }\n  },\n  _prepareDragModeConfig: function () {\n    var columnChooserOptions = this.option(\"columnChooser\");\n    return {\n      noDataText: columnChooserOptions.emptyPanelText,\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      itemTemplate: function (data, index, item) {\n        $(item).text(data.text).parent().addClass(data.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS);\n      }\n    };\n  },\n  _prepareSelectModeConfig: function () {\n    var that = this;\n    return {\n      selectNodesRecursive: false,\n      showCheckBoxesMode: \"normal\",\n      onItemSelectionChanged: function (e) {\n        var visibleColumns = that._columnsController.getVisibleColumns().filter(function (item) {\n          return !item.command;\n        });\n        var isLastColumnUnselected = 1 === visibleColumns.length && !e.itemData.selected;\n        if (isLastColumnUnselected) {\n          e.component.selectItem(e.itemElement);\n        } else {\n          setTimeout(function () {\n            that._columnsController.columnOption(e.itemData.id, \"visible\", e.itemData.selected);\n          }, CLICK_TIMEOUT);\n        }\n      }\n    };\n  },\n  _columnOptionChanged: function (e) {\n    var changeTypes = e.changeTypes;\n    var optionNames = e.optionNames;\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    this.callBase(e);\n    if (isSelectMode) {\n      var needPartialRender = optionNames.visible && 1 === optionNames.length && void 0 !== e.columnIndex;\n      var needFullRender = optionNames.showInColumnChooser || optionNames.caption || optionNames.visible || changeTypes.columns && optionNames.all;\n      if (needPartialRender) {\n        this.render(null, {\n          changeType: \"selection\",\n          columnIndex: e.columnIndex\n        });\n      } else if (needFullRender) {\n        this.render(null, \"full\");\n      }\n    }\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"columnChooser\":\n        this._initializePopupContainer();\n        this.render(null, \"full\");\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  getColumnElements: function () {\n    var result = [];\n    var $node;\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n    var $content = this._popupContainer && this._popupContainer.$content();\n    var $nodes = $content && $content.find(\".dx-treeview-node\");\n    if ($nodes) {\n      chooserColumns.forEach(function (column) {\n        $node = $nodes.filter(\"[data-item-id = '\" + column.index + \"']\");\n        var item = $node.length ? $node.children(\".\" + COLUMN_CHOOSER_ITEM_CLASS).get(0) : null;\n        result.push(item);\n      });\n    }\n    return $(result);\n  },\n  getName: function () {\n    return \"columnChooser\";\n  },\n  getColumns: function () {\n    return this._columnsController.getChooserColumns();\n  },\n  allowDragging: function (column, sourceLocation) {\n    var columnVisible = column && column.allowHiding && (\"columnChooser\" !== sourceLocation || !column.visible && this._columnsController.isParentColumnVisible(column.index));\n    return this.isColumnChooserVisible() && columnVisible;\n  },\n  getBoundingRect: function () {\n    var container = this._popupContainer && this._popupContainer.$overlayContent();\n    if (container && container.is(\":visible\")) {\n      var offset = container.offset();\n      return {\n        left: offset.left,\n        top: offset.top,\n        right: offset.left + getOuterWidth(container),\n        bottom: offset.top + getOuterHeight(container)\n      };\n    }\n    return null;\n  },\n  showColumnChooser: function () {\n    if (!this._popupContainer) {\n      this._initializePopupContainer();\n      this.render();\n    }\n    this._popupContainer.show();\n    if (this._isWinDevice()) {\n      $(\"body\").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n    }\n  },\n  hideColumnChooser: function () {\n    if (this._popupContainer) {\n      this._popupContainer.hide();\n    }\n  },\n  isColumnChooserVisible: function () {\n    var popupContainer = this._popupContainer;\n    return popupContainer && popupContainer.option(\"visible\");\n  },\n  publicMethods: function () {\n    return [\"showColumnChooser\", \"hideColumnChooser\"];\n  }\n};\nvar ColumnChooserView = ColumnsView.inherit(columnChooserMembers);\nexport var columnChooserModule = {\n  defaultOptions: function () {\n    return {\n      columnChooser: {\n        enabled: false,\n        allowSearch: false,\n        searchTimeout: 500,\n        mode: \"dragAndDrop\",\n        width: 250,\n        height: 260,\n        title: messageLocalization.format(\"dxDataGrid-columnChooserTitle\"),\n        emptyPanelText: messageLocalization.format(\"dxDataGrid-columnChooserEmptyText\"),\n        container: void 0\n      }\n    };\n  },\n  controllers: {\n    columnChooser: ColumnChooserController\n  },\n  views: {\n    columnChooserView: ColumnChooserView\n  },\n  extenders: {\n    views: {\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          return this._appendColumnChooserItem(items);\n        },\n        _appendColumnChooserItem: function (items) {\n          var that = this;\n          var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n          if (columnChooserEnabled) {\n            var hintText = that.option(\"columnChooser.title\");\n            var toolbarItem = {\n              widget: \"dxButton\",\n              options: {\n                icon: COLUMN_CHOOSER_ICON_NAME,\n                onClick: function () {\n                  that.component.getView(\"columnChooserView\").showColumnChooser();\n                },\n                hint: hintText,\n                text: hintText,\n                onInitialized: function (e) {\n                  $(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)));\n                },\n                elementAttr: {\n                  \"aria-haspopup\": \"dialog\"\n                }\n              },\n              showText: \"inMenu\",\n              location: \"after\",\n              name: \"columnChooserButton\",\n              locateInMenu: \"auto\",\n              sortIndex: 40\n            };\n            items.push(toolbarItem);\n          }\n          return items;\n        },\n        optionChanged: function (args) {\n          switch (args.name) {\n            case \"columnChooser\":\n              this._invalidate();\n              args.handled = true;\n              break;\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var columnChooserEnabled = this.option(\"columnChooser.enabled\");\n          return this.callBase() || columnChooserEnabled;\n        }\n      }\n    },\n    controllers: {\n      columns: {\n        allowMoveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var columnChooserMode = this.option(\"columnChooser.mode\");\n          var isMoveColumnDisallowed = \"select\" === columnChooserMode && \"columnChooser\" === targetLocation;\n          return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["getOuterWidth","getOuterHeight","$","deferUpdate","noop","modules","ColumnsView","messageLocalization","isMaterial","isMaterialTheme","isGeneric","current","TreeView","devices","Popup","Button","isDefined","extend","each","COLUMN_CHOOSER_CLASS","COLUMN_CHOOSER_BUTTON_CLASS","NOTOUCH_ACTION_CLASS","COLUMN_CHOOSER_LIST_CLASS","COLUMN_CHOOSER_PLAIN_CLASS","COLUMN_CHOOSER_DRAG_CLASS","COLUMN_CHOOSER_SELECT_CLASS","COLUMN_CHOOSER_ICON_NAME","COLUMN_CHOOSER_ITEM_CLASS","TREEVIEW_NODE_SELECTOR","CHECKBOX_SELECTOR","CLICK_TIMEOUT","processItems","that","chooserColumns","items","isSelectMode","option","length","index","column","item","text","caption","cssClass","allowHiding","expanded","id","disabled","disableCheckBox","parentId","ownerBand","selected","visible","push","columnChooserControllerMembers","renderShowColumnChooserButton","$element","columnChooserButtonClass","addWidgetPrefix","columnChooserEnabled","$showColumnChooserButton","find","$columnChooserButton","addClass","appendTo","_createComponent","icon","onClick","getView","showColumnChooser","hint","integrationOptions","show","hide","getPosition","rowsView","my","at","of","element","collision","offset","boundaryOffset","ColumnChooserController","ViewController","inherit","columnChooserMembers","_resizeCore","_isWinDevice","real","win","_updateList","change","$popupContent","_popupContainer","$content","columnChooserList","_columnChooserList","_columnsController","getChooserColumns","setAria","role","label","format","changeType","i","columnIndex","selectItem","unselectItem","$wrapper","toggleClass","_renderTreeView","_initializePopupContainer","columnChooserClass","columnChooserOptions","themeName","isGenericTheme","dxPopupOptions","shading","showCloseButton","dragEnabled","resizeEnabled","wrapperAttr","class","toolbarItems","title","toolbar","location","position","getController","width","height","rtlEnabled","onHidden","removeClass","container","shortcut","on","args","name","renderCompleted","fire","_renderCore","$container","columnChooser","mode","treeViewConfig","dataStructure","activeStateEnabled","focusStateEnabled","hoverStateEnabled","itemTemplate","showCheckBoxesMode","rootValue","searchEnabled","allowSearch","searchTimeout","onItemRendered","e","itemData","$treeViewNode","itemElement","closest","$checkBox","checkBoxInstance","data","scrollableInstance","scrollTop","isBandColumnsUsed","onContentReady","scrollable","scrollTo","y","useNativeScrolling","_prepareSelectModeConfig","_prepareDragModeConfig","searchValue","noDataText","emptyPanelText","parent","selectNodesRecursive","onItemSelectionChanged","visibleColumns","getVisibleColumns","filter","command","isLastColumnUnselected","component","setTimeout","columnOption","_columnOptionChanged","changeTypes","optionNames","callBase","needPartialRender","needFullRender","showInColumnChooser","columns","all","render","optionChanged","getColumnElements","result","$node","$nodes","forEach","children","get","getName","getColumns","allowDragging","sourceLocation","columnVisible","isParentColumnVisible","isColumnChooserVisible","getBoundingRect","$overlayContent","is","left","top","right","bottom","hideColumnChooser","popupContainer","publicMethods","ColumnChooserView","columnChooserModule","defaultOptions","enabled","controllers","views","columnChooserView","extenders","headerPanel","_getToolbarItems","_appendColumnChooserItem","hintText","toolbarItem","widget","options","onInitialized","_getToolbarButtonClass","elementAttr","showText","locateInMenu","sortIndex","_invalidate","handled","isVisible","allowMoveColumn","fromVisibleIndex","toVisibleIndex","targetLocation","columnChooserMode","isMoveColumnDisallowed"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_chooser.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_chooser.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterWidth,\r\n    getOuterHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    deferUpdate,\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    ColumnsView\r\n} from \"./ui.grid_core.columns_view\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    isMaterial as isMaterialTheme,\r\n    isGeneric,\r\n    current\r\n} from \"../themes\";\r\nimport TreeView from \"../tree_view\";\r\nimport devices from \"../../core/devices\";\r\nimport Popup from \"../popup/ui.popup\";\r\nimport Button from \"../button\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nvar COLUMN_CHOOSER_CLASS = \"column-chooser\";\r\nvar COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\";\r\nvar NOTOUCH_ACTION_CLASS = \"notouch-action\";\r\nvar COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\";\r\nvar COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\";\r\nvar COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\";\r\nvar COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\";\r\nvar COLUMN_CHOOSER_ICON_NAME = \"column-chooser\";\r\nvar COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\";\r\nvar TREEVIEW_NODE_SELECTOR = \".dx-treeview-node\";\r\nvar CHECKBOX_SELECTOR = \".dx-checkbox\";\r\nvar CLICK_TIMEOUT = 300;\r\nvar processItems = function(that, chooserColumns) {\r\n    var items = [];\r\n    var isSelectMode = \"select\" === that.option(\"columnChooser.mode\");\r\n    if (chooserColumns.length) {\r\n        each(chooserColumns, (function(index, column) {\r\n            var item = {\r\n                text: column.caption,\r\n                cssClass: column.cssClass,\r\n                allowHiding: column.allowHiding,\r\n                expanded: true,\r\n                id: column.index,\r\n                disabled: false,\r\n                disableCheckBox: false === column.allowHiding,\r\n                parentId: isDefined(column.ownerBand) ? column.ownerBand : null\r\n            };\r\n            if (isSelectMode) {\r\n                item.selected = column.visible\r\n            }\r\n            items.push(item)\r\n        }))\r\n    }\r\n    return items\r\n};\r\nvar columnChooserControllerMembers = {\r\n    renderShowColumnChooserButton: function($element) {\r\n        var that = this;\r\n        var columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS);\r\n        var columnChooserEnabled = that.option(\"columnChooser.enabled\");\r\n        var $showColumnChooserButton = $element.find(\".\" + columnChooserButtonClass);\r\n        var $columnChooserButton;\r\n        if (columnChooserEnabled) {\r\n            if (!$showColumnChooserButton.length) {\r\n                $columnChooserButton = $(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\r\n                that._createComponent($columnChooserButton, Button, {\r\n                    icon: COLUMN_CHOOSER_ICON_NAME,\r\n                    onClick: function() {\r\n                        that.getView(\"columnChooserView\").showColumnChooser()\r\n                    },\r\n                    hint: that.option(\"columnChooser.title\"),\r\n                    integrationOptions: {}\r\n                })\r\n            } else {\r\n                $showColumnChooserButton.show()\r\n            }\r\n        } else {\r\n            $showColumnChooserButton.hide()\r\n        }\r\n    },\r\n    getPosition: function() {\r\n        var rowsView = this.getView(\"rowsView\");\r\n        return {\r\n            my: \"right bottom\",\r\n            at: \"right bottom\",\r\n            of: rowsView && rowsView.element(),\r\n            collision: \"fit\",\r\n            offset: \"-2 -2\",\r\n            boundaryOffset: \"2 2\"\r\n        }\r\n    }\r\n};\r\nvar ColumnChooserController = modules.ViewController.inherit(columnChooserControllerMembers);\r\nvar columnChooserMembers = {\r\n    _resizeCore: noop,\r\n    _isWinDevice: function() {\r\n        return !!devices.real().win\r\n    },\r\n    _updateList: function(change) {\r\n        var items;\r\n        var $popupContent = this._popupContainer.$content();\r\n        var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        var columnChooserList = this._columnChooserList;\r\n        var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\r\n        this._popupContainer.setAria({\r\n            role: \"dialog\",\r\n            label: messageLocalization.format(\"dxDataGrid-columnChooserTitle\")\r\n        });\r\n        if (isSelectMode && columnChooserList && change && \"selection\" === change.changeType) {\r\n            items = processItems(this, chooserColumns);\r\n            for (var i = 0; i < items.length; i++) {\r\n                var selected = items[i].selected;\r\n                var id = items[i].id;\r\n                if (id === change.columnIndex) {\r\n                    if (selected) {\r\n                        columnChooserList.selectItem(id, selected)\r\n                    } else {\r\n                        columnChooserList.unselectItem(id, selected)\r\n                    }\r\n                }\r\n            }\r\n        } else if (!isSelectMode || !columnChooserList || \"full\" === change) {\r\n            this._popupContainer.$wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\r\n            items = processItems(this, chooserColumns);\r\n            this._renderTreeView($popupContent, items)\r\n        }\r\n    },\r\n    _initializePopupContainer: function() {\r\n        var that = this;\r\n        var columnChooserClass = that.addWidgetPrefix(COLUMN_CHOOSER_CLASS);\r\n        var $element = that.element().addClass(columnChooserClass);\r\n        var columnChooserOptions = that.option(\"columnChooser\");\r\n        var themeName = current();\r\n        var isGenericTheme = isGeneric(themeName);\r\n        var isMaterial = isMaterialTheme(themeName);\r\n        var dxPopupOptions = {\r\n            visible: false,\r\n            shading: false,\r\n            showCloseButton: false,\r\n            dragEnabled: true,\r\n            resizeEnabled: true,\r\n            wrapperAttr: {\r\n                class: columnChooserClass\r\n            },\r\n            toolbarItems: [{\r\n                text: columnChooserOptions.title,\r\n                toolbar: \"top\",\r\n                location: isGenericTheme || isMaterial ? \"before\" : \"center\"\r\n            }],\r\n            position: that.getController(\"columnChooser\").getPosition(),\r\n            width: columnChooserOptions.width,\r\n            height: columnChooserOptions.height,\r\n            rtlEnabled: that.option(\"rtlEnabled\"),\r\n            onHidden: function() {\r\n                if (that._isWinDevice()) {\r\n                    $(\"body\").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS))\r\n                }\r\n            },\r\n            container: columnChooserOptions.container\r\n        };\r\n        if (isGenericTheme || isMaterial) {\r\n            extend(dxPopupOptions, {\r\n                showCloseButton: true\r\n            })\r\n        } else {\r\n            dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\r\n                shortcut: \"cancel\"\r\n            }\r\n        }\r\n        if (!isDefined(this._popupContainer)) {\r\n            that._popupContainer = that._createComponent($element, Popup, dxPopupOptions);\r\n            that._popupContainer.on(\"optionChanged\", (function(args) {\r\n                if (\"visible\" === args.name) {\r\n                    that.renderCompleted.fire()\r\n                }\r\n            }))\r\n        } else {\r\n            this._popupContainer.option(dxPopupOptions)\r\n        }\r\n    },\r\n    _renderCore: function(change) {\r\n        if (this._popupContainer) {\r\n            this._updateList(change)\r\n        }\r\n    },\r\n    _renderTreeView: function($container, items) {\r\n        var that = this;\r\n        var columnChooser = this.option(\"columnChooser\");\r\n        var isSelectMode = \"select\" === columnChooser.mode;\r\n        var treeViewConfig = {\r\n            items: items,\r\n            dataStructure: \"plain\",\r\n            activeStateEnabled: true,\r\n            focusStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            itemTemplate: \"item\",\r\n            showCheckBoxesMode: \"none\",\r\n            rootValue: null,\r\n            searchEnabled: columnChooser.allowSearch,\r\n            searchTimeout: columnChooser.searchTimeout,\r\n            onItemRendered: function(e) {\r\n                if (e.itemData.disableCheckBox) {\r\n                    var $treeViewNode = $(e.itemElement).closest(TREEVIEW_NODE_SELECTOR);\r\n                    var $checkBox;\r\n                    if ($treeViewNode.length) {\r\n                        $checkBox = $treeViewNode.find(CHECKBOX_SELECTOR);\r\n                        if ($checkBox.length) {\r\n                            var checkBoxInstance = $checkBox.data(\"dxCheckBox\");\r\n                            checkBoxInstance && checkBoxInstance.option(\"disabled\", true)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        var scrollableInstance = $container.find(\".dx-scrollable\").data(\"dxScrollable\");\r\n        var scrollTop = scrollableInstance && scrollableInstance.scrollTop();\r\n        if (isSelectMode && !this._columnsController.isBandColumnsUsed()) {\r\n            $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS))\r\n        }\r\n        treeViewConfig.onContentReady = function(e) {\r\n            deferUpdate((function() {\r\n                if (scrollTop) {\r\n                    var scrollable = $(e.element).find(\".dx-scrollable\").data(\"dxScrollable\");\r\n                    scrollable && scrollable.scrollTo({\r\n                        y: scrollTop\r\n                    })\r\n                }\r\n                that.renderCompleted.fire()\r\n            }))\r\n        };\r\n        if (this._isWinDevice()) {\r\n            treeViewConfig.useNativeScrolling = false\r\n        }\r\n        extend(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\r\n        if (this._columnChooserList) {\r\n            if (!treeViewConfig.searchEnabled) {\r\n                treeViewConfig.searchValue = \"\"\r\n            }\r\n            this._columnChooserList.option(treeViewConfig)\r\n        } else {\r\n            this._columnChooserList = this._createComponent($container, TreeView, treeViewConfig);\r\n            $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS))\r\n        }\r\n    },\r\n    _prepareDragModeConfig: function() {\r\n        var columnChooserOptions = this.option(\"columnChooser\");\r\n        return {\r\n            noDataText: columnChooserOptions.emptyPanelText,\r\n            activeStateEnabled: false,\r\n            focusStateEnabled: false,\r\n            hoverStateEnabled: false,\r\n            itemTemplate: function(data, index, item) {\r\n                $(item).text(data.text).parent().addClass(data.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS)\r\n            }\r\n        }\r\n    },\r\n    _prepareSelectModeConfig: function() {\r\n        var that = this;\r\n        return {\r\n            selectNodesRecursive: false,\r\n            showCheckBoxesMode: \"normal\",\r\n            onItemSelectionChanged: function(e) {\r\n                var visibleColumns = that._columnsController.getVisibleColumns().filter((function(item) {\r\n                    return !item.command\r\n                }));\r\n                var isLastColumnUnselected = 1 === visibleColumns.length && !e.itemData.selected;\r\n                if (isLastColumnUnselected) {\r\n                    e.component.selectItem(e.itemElement)\r\n                } else {\r\n                    setTimeout((function() {\r\n                        that._columnsController.columnOption(e.itemData.id, \"visible\", e.itemData.selected)\r\n                    }), CLICK_TIMEOUT)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _columnOptionChanged: function(e) {\r\n        var changeTypes = e.changeTypes;\r\n        var optionNames = e.optionNames;\r\n        var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        this.callBase(e);\r\n        if (isSelectMode) {\r\n            var needPartialRender = optionNames.visible && 1 === optionNames.length && void 0 !== e.columnIndex;\r\n            var needFullRender = optionNames.showInColumnChooser || optionNames.caption || optionNames.visible || changeTypes.columns && optionNames.all;\r\n            if (needPartialRender) {\r\n                this.render(null, {\r\n                    changeType: \"selection\",\r\n                    columnIndex: e.columnIndex\r\n                })\r\n            } else if (needFullRender) {\r\n                this.render(null, \"full\")\r\n            }\r\n        }\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"columnChooser\":\r\n                this._initializePopupContainer();\r\n                this.render(null, \"full\");\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    getColumnElements: function() {\r\n        var result = [];\r\n        var $node;\r\n        var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\r\n        var $content = this._popupContainer && this._popupContainer.$content();\r\n        var $nodes = $content && $content.find(\".dx-treeview-node\");\r\n        if ($nodes) {\r\n            chooserColumns.forEach((function(column) {\r\n                $node = $nodes.filter(\"[data-item-id = '\" + column.index + \"']\");\r\n                var item = $node.length ? $node.children(\".\" + COLUMN_CHOOSER_ITEM_CLASS).get(0) : null;\r\n                result.push(item)\r\n            }))\r\n        }\r\n        return $(result)\r\n    },\r\n    getName: function() {\r\n        return \"columnChooser\"\r\n    },\r\n    getColumns: function() {\r\n        return this._columnsController.getChooserColumns()\r\n    },\r\n    allowDragging: function(column, sourceLocation) {\r\n        var columnVisible = column && column.allowHiding && (\"columnChooser\" !== sourceLocation || !column.visible && this._columnsController.isParentColumnVisible(column.index));\r\n        return this.isColumnChooserVisible() && columnVisible\r\n    },\r\n    getBoundingRect: function() {\r\n        var container = this._popupContainer && this._popupContainer.$overlayContent();\r\n        if (container && container.is(\":visible\")) {\r\n            var offset = container.offset();\r\n            return {\r\n                left: offset.left,\r\n                top: offset.top,\r\n                right: offset.left + getOuterWidth(container),\r\n                bottom: offset.top + getOuterHeight(container)\r\n            }\r\n        }\r\n        return null\r\n    },\r\n    showColumnChooser: function() {\r\n        if (!this._popupContainer) {\r\n            this._initializePopupContainer();\r\n            this.render()\r\n        }\r\n        this._popupContainer.show();\r\n        if (this._isWinDevice()) {\r\n            $(\"body\").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS))\r\n        }\r\n    },\r\n    hideColumnChooser: function() {\r\n        if (this._popupContainer) {\r\n            this._popupContainer.hide()\r\n        }\r\n    },\r\n    isColumnChooserVisible: function() {\r\n        var popupContainer = this._popupContainer;\r\n        return popupContainer && popupContainer.option(\"visible\")\r\n    },\r\n    publicMethods: function() {\r\n        return [\"showColumnChooser\", \"hideColumnChooser\"]\r\n    }\r\n};\r\nvar ColumnChooserView = ColumnsView.inherit(columnChooserMembers);\r\nexport var columnChooserModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            columnChooser: {\r\n                enabled: false,\r\n                allowSearch: false,\r\n                searchTimeout: 500,\r\n                mode: \"dragAndDrop\",\r\n                width: 250,\r\n                height: 260,\r\n                title: messageLocalization.format(\"dxDataGrid-columnChooserTitle\"),\r\n                emptyPanelText: messageLocalization.format(\"dxDataGrid-columnChooserEmptyText\"),\r\n                container: void 0\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        columnChooser: ColumnChooserController\r\n    },\r\n    views: {\r\n        columnChooserView: ColumnChooserView\r\n    },\r\n    extenders: {\r\n        views: {\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    return this._appendColumnChooserItem(items)\r\n                },\r\n                _appendColumnChooserItem: function(items) {\r\n                    var that = this;\r\n                    var columnChooserEnabled = that.option(\"columnChooser.enabled\");\r\n                    if (columnChooserEnabled) {\r\n                        var hintText = that.option(\"columnChooser.title\");\r\n                        var toolbarItem = {\r\n                            widget: \"dxButton\",\r\n                            options: {\r\n                                icon: COLUMN_CHOOSER_ICON_NAME,\r\n                                onClick: function() {\r\n                                    that.component.getView(\"columnChooserView\").showColumnChooser()\r\n                                },\r\n                                hint: hintText,\r\n                                text: hintText,\r\n                                onInitialized: function(e) {\r\n                                    $(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)))\r\n                                },\r\n                                elementAttr: {\r\n                                    \"aria-haspopup\": \"dialog\"\r\n                                }\r\n                            },\r\n                            showText: \"inMenu\",\r\n                            location: \"after\",\r\n                            name: \"columnChooserButton\",\r\n                            locateInMenu: \"auto\",\r\n                            sortIndex: 40\r\n                        };\r\n                        items.push(toolbarItem)\r\n                    }\r\n                    return items\r\n                },\r\n                optionChanged: function(args) {\r\n                    switch (args.name) {\r\n                        case \"columnChooser\":\r\n                            this._invalidate();\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var columnChooserEnabled = this.option(\"columnChooser.enabled\");\r\n                    return this.callBase() || columnChooserEnabled\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            columns: {\r\n                allowMoveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var columnChooserMode = this.option(\"columnChooser.mode\");\r\n                    var isMoveColumnDisallowed = \"select\" === columnChooserMode && \"columnChooser\" === targetLocation;\r\n                    return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}