{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getHeight, getOuterHeight, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { deferRender, deferUpdate } from \"../../core/utils/common\";\nimport { setHeight } from \"../../core/utils/style\";\nimport { isDefined, isNumeric, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getBoundingRect, getDefaultAlignment } from \"../../core/utils/position\";\nimport { isEmpty } from \"../../core/utils/string\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { ColumnsView } from \"./ui.grid_core.columns_view\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport { removeEvent } from \"../../events/remove\";\nimport messageLocalization from \"../../localization/message\";\nimport browser from \"../../core/utils/browser\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar CONTENT_CLASS = \"content\";\nvar NOWRAP_CLASS = \"nowrap\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar FREE_SPACE_CLASS = \"dx-freespace-row\";\nvar ROW_LINES_CLASS = \"dx-row-lines\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar ROW_ALTERNATION_CLASS = \"dx-row-alt\";\nvar LAST_ROW_BORDER = \"dx-last-row-border\";\nvar EMPTY_CLASS = \"dx-empty\";\nvar ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\nvar LOADPANEL_HIDE_TIMEOUT = 200;\nfunction getMaxHorizontalScrollOffset(scrollable) {\n  return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0;\n}\nfunction isGroupRow(_ref) {\n  var {\n    rowType: rowType,\n    column: column\n  } = _ref;\n  return \"group\" === rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command;\n}\nexport var rowsModule = {\n  defaultOptions: function () {\n    return {\n      hoverStateEnabled: false,\n      scrolling: {\n        useNative: \"auto\"\n      },\n      loadPanel: {\n        enabled: \"auto\",\n        text: messageLocalization.format(\"Loading\"),\n        width: 200,\n        height: 90,\n        showIndicator: true,\n        indicatorSrc: \"\",\n        showPane: true\n      },\n      dataRowTemplate: null,\n      columnAutoWidth: false,\n      noDataText: messageLocalization.format(\"dxDataGrid-noDataText\"),\n      wordWrapEnabled: false,\n      showColumnLines: true,\n      showRowLines: false,\n      rowAlternationEnabled: false,\n      activeStateEnabled: false,\n      twoWayBindingEnabled: true\n    };\n  },\n  views: {\n    rowsView: ColumnsView.inherit(function () {\n      var defaultCellTemplate = function ($container, options) {\n        var isDataTextEmpty = isEmpty(options.text) && \"data\" === options.rowType;\n        var text = options.text;\n        var container = $container.get(0);\n        if (isDataTextEmpty) {\n          gridCoreUtils.setEmptyText($container);\n        } else if (options.column.encodeHtml) {\n          container.textContent = text;\n        } else {\n          container.innerHTML = text;\n        }\n      };\n      var members = {\n        _getDefaultTemplate: function (column) {\n          switch (column.command) {\n            case \"empty\":\n              return function (container) {\n                container.html(\"&nbsp;\");\n              };\n            default:\n              return defaultCellTemplate;\n          }\n        },\n        _getDefaultGroupTemplate: function (column) {\n          var summaryTexts = this.option(\"summary.texts\");\n          return function ($container, options) {\n            var data = options.data;\n            var text = options.column.caption + \": \" + options.text;\n            var container = $container.get(0);\n            if (options.summaryItems && options.summaryItems.length) {\n              text += \" \" + gridCoreUtils.getGroupRowSummaryText(options.summaryItems, summaryTexts);\n            }\n            if (data) {\n              if (options.groupContinuedMessage && options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\";\n              } else if (options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuesMessage + \")\";\n              } else if (options.groupContinuedMessage) {\n                text += \" (\" + options.groupContinuedMessage + \")\";\n              }\n            }\n            if (column.encodeHtml) {\n              container.textContent = text;\n            } else {\n              container.innerHTML = text;\n            }\n          };\n        },\n        _update: function () {},\n        _updateCell: function ($cell, options) {\n          if (isGroupRow(options)) {\n            $cell.addClass(GROUP_CELL_CLASS);\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _getCellTemplate: function (options) {\n          var column = options.column;\n          var template;\n          if (isGroupRow(options)) {\n            template = column.groupCellTemplate || {\n              allowRenderToDetachedContainer: true,\n              render: this._getDefaultGroupTemplate(column)\n            };\n          } else if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\n            template = column.cellTemplate;\n          } else {\n            template = {\n              allowRenderToDetachedContainer: true,\n              render: this._getDefaultTemplate(column)\n            };\n          }\n          return template;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n          if (row) {\n            var isGroup = \"group\" === row.rowType;\n            var isDataRow = \"data\" === row.rowType;\n            isDataRow && $row.addClass(DATA_ROW_CLASS);\n            isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\n            this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\n            if (false === row.visible) {\n              $row.hide();\n            }\n            if (isGroup) {\n              $row.addClass(GROUP_ROW_CLASS);\n              var isRowExpanded = row.isExpanded;\n              this.setAria(\"role\", \"row\", $row);\n              this.setAria(\"expanded\", isDefined(isRowExpanded) && isRowExpanded.toString(), $row);\n            }\n          }\n          return $row;\n        },\n        _rowPrepared: function ($row, rowOptions, row) {\n          if (\"data\" === rowOptions.rowType) {\n            if (this.option(\"rowAlternationEnabled\")) {\n              this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);\n              rowOptions.watch && rowOptions.watch(() => this._isAltRow(row), value => {\n                $row.toggleClass(ROW_ALTERNATION_CLASS, value);\n              });\n            }\n            this._setAriaRowIndex(rowOptions, $row);\n            rowOptions.watch && rowOptions.watch(() => rowOptions.rowIndex, () => this._setAriaRowIndex(rowOptions, $row));\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _setAriaRowIndex: function (row, $row) {\n          var component = this.component;\n          var isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && !gridCoreUtils.isVirtualRowRendering(component);\n          var rowIndex = row.rowIndex + 1;\n          if (isPagerMode) {\n            rowIndex = component.pageIndex() * component.pageSize() + rowIndex;\n          } else {\n            rowIndex += this._dataController.getRowIndexOffset();\n          }\n          this.setAria(\"rowindex\", rowIndex, $row);\n        },\n        _afterRowPrepared: function (e) {\n          var arg = e.args[0];\n          var dataController = this._dataController;\n          var row = dataController.getVisibleRows()[arg.rowIndex];\n          var watch = this.option(\"integrationOptions.watchMethod\");\n          if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\n            return;\n          }\n          var dispose = watch(() => dataController.generateDataValues(arg.data, arg.columns), () => {\n            dataController.repaintRows([row.rowIndex], this.option(\"repaintChangesOnly\"));\n          }, {\n            deep: true,\n            skipImmediate: true\n          });\n          eventsEngine.on(arg.rowElement, removeEvent, dispose);\n        },\n        _renderScrollable: function (force) {\n          var $element = this.element();\n          if (!$element.children().length) {\n            $element.append(\"<div>\");\n          }\n          if (force || !this._loadPanel) {\n            this._renderLoadPanel($element, $element.parent(), this._dataController.isLocalStore());\n          }\n          if ((force || !this.getScrollable()) && this._dataController.isLoaded()) {\n            var columns = this.getColumns();\n            var allColumnsHasWidth = true;\n            for (var i = 0; i < columns.length; i++) {\n              if (!columns[i].width && !columns[i].minWidth) {\n                allColumnsHasWidth = false;\n                break;\n              }\n            }\n            if (this.option(\"columnAutoWidth\") || this._hasHeight || allColumnsHasWidth || this._columnsController._isColumnFixing()) {\n              this._renderScrollableCore($element);\n            }\n          }\n        },\n        _handleScroll: function (e) {\n          var rtlEnabled = this.option(\"rtlEnabled\");\n          var isNativeScrolling = e.component.option(\"useNative\");\n          this._scrollTop = e.scrollOffset.top;\n          this._scrollLeft = e.scrollOffset.left;\n          var scrollLeft = e.scrollOffset.left;\n          if (rtlEnabled) {\n            this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\n            if (isNativeScrolling) {\n              scrollLeft = -this._scrollRight;\n            }\n            if (!this.isScrollbarVisible(true)) {\n              this._scrollLeft = -1;\n            }\n          }\n          this.scrollChanged.fire(_extends({}, e.scrollOffset, {\n            left: scrollLeft\n          }), this.name);\n        },\n        _renderScrollableCore: function ($element) {\n          var dxScrollableOptions = this._createScrollableOptions();\n          var scrollHandler = this._handleScroll.bind(this);\n          dxScrollableOptions.onScroll = scrollHandler;\n          this._scrollable = this._createComponent($element, Scrollable, dxScrollableOptions);\n          this._scrollableContainer = this._scrollable && $(this._scrollable.container());\n        },\n        _renderLoadPanel: gridCoreUtils.renderLoadPanel,\n        _renderContent: function (contentElement, tableElement) {\n          contentElement.empty().append(tableElement);\n          return this._findContentElement();\n        },\n        _updateContent: function (newTableElement, change, isFixedTableRendering) {\n          this._contentChanges.push({\n            newTableElement: newTableElement,\n            change: change,\n            isFixedTableRendering: isFixedTableRendering\n          });\n          return this.waitAsyncTemplates().done(() => {\n            var contentChanges = this._contentChanges;\n            this._contentChanges = [];\n            contentChanges.forEach(_ref2 => {\n              var {\n                newTableElement: newTableElement,\n                change: change,\n                isFixedTableRendering: isFixedTableRendering\n              } = _ref2;\n              var tableElement = this.getTableElement(isFixedTableRendering);\n              var contentElement = this._findContentElement(isFixedTableRendering);\n              var changeType = null === change || void 0 === change ? void 0 : change.changeType;\n              var executors = [];\n              var highlightChanges = this.option(\"highlightChanges\");\n              var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\n              switch (changeType) {\n                case \"update\":\n                  each(change.rowIndices, (index, rowIndex) => {\n                    var _change$changeTypes;\n                    var $newRowElement = this._getRowElements(newTableElement).eq(index);\n                    var dataChangeType = null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes[index];\n                    var item = change.items && change.items[index];\n                    executors.push(() => {\n                      var $rowElements = this._getRowElements(tableElement);\n                      var $rowElement = $rowElements.eq(rowIndex);\n                      switch (dataChangeType) {\n                        case \"update\":\n                          if (item) {\n                            var _change$columnIndices;\n                            var columnIndices = null === (_change$columnIndices = change.columnIndices) || void 0 === _change$columnIndices ? void 0 : _change$columnIndices[index];\n                            if (isDefined(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\n                              $rowElement.toggle(item.visible);\n                            } else if (columnIndices) {\n                              this._updateCells($rowElement, $newRowElement, columnIndices);\n                            } else {\n                              $rowElement.replaceWith($newRowElement);\n                            }\n                          }\n                          break;\n                        case \"insert\":\n                          if (!$rowElements.length) {\n                            if (tableElement) {\n                              var target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\n                              $newRowElement.prependTo(target);\n                            }\n                          } else if ($rowElement.length) {\n                            $newRowElement.insertBefore($rowElement);\n                          } else {\n                            $newRowElement.insertAfter($rowElements.last());\n                          }\n                          if (highlightChanges && change.isLiveUpdate) {\n                            $newRowElement.addClass(rowInsertedClass);\n                          }\n                          break;\n                        case \"remove\":\n                          $rowElement.remove();\n                      }\n                    });\n                  });\n                  each(executors, function () {\n                    this();\n                  });\n                  newTableElement.remove();\n                  break;\n                default:\n                  this.setTableElement(newTableElement, isFixedTableRendering);\n                  contentElement.addClass(this.addWidgetPrefix(CONTENT_CLASS));\n                  this._renderContent(contentElement, newTableElement, isFixedTableRendering);\n              }\n            });\n          }).fail(() => {\n            this._contentChanges = [];\n          });\n        },\n        _createEmptyRow: function (className, isFixed, height) {\n          var $cell;\n          var $row = this._createRow();\n          var columns = isFixed ? this.getFixedColumns() : this.getColumns();\n          $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\n          for (var i = 0; i < columns.length; i++) {\n            $cell = this._createCell({\n              column: columns[i],\n              rowType: \"freeSpace\",\n              columnIndex: i,\n              columns: columns\n            });\n            isNumeric(height) && $cell.css(\"height\", height);\n            $row.append($cell);\n          }\n          this.setAria(\"role\", \"presentation\", $row);\n          return $row;\n        },\n        _appendEmptyRow: function ($table, $emptyRow, location) {\n          var $tBodies = this._getBodies($table);\n          var isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\n          var $container = isTableContainer ? $table : $tBodies;\n          if (\"top\" === location) {\n            $container.first().prepend($emptyRow);\n            if (isTableContainer) {\n              var $colgroup = $container.children(\"colgroup\");\n              $container.prepend($colgroup);\n            }\n          } else {\n            $container.last().append($emptyRow);\n          }\n        },\n        _renderFreeSpaceRow: function ($tableElement, change) {\n          var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\n          $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement, \"refresh\" === (null === change || void 0 === change ? void 0 : change.changeType));\n          this._appendEmptyRow($tableElement, $freeSpaceRowElement);\n        },\n        _checkRowKeys: function (options) {\n          var that = this;\n          var rows = that._getRows(options);\n          var keyExpr = that._dataController.store() && that._dataController.store().key();\n          keyExpr && rows.some(function (row) {\n            if (\"data\" === row.rowType && void 0 === row.key) {\n              that._dataController.fireError(\"E1046\", keyExpr);\n              return true;\n            }\n          });\n        },\n        _needUpdateRowHeight: function (itemsCount) {\n          return itemsCount > 0 && !this._rowHeight;\n        },\n        _getRowsHeight: function ($tableElement) {\n          $tableElement = $tableElement || this._tableElement;\n          var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\n          return $rowElements.toArray().reduce(function (sum, row) {\n            return sum + getBoundingRect(row).height;\n          }, 0);\n        },\n        _updateRowHeight: function () {\n          var $tableElement = this.getTableElement();\n          var itemsCount = this._dataController.items().length;\n          if ($tableElement && this._needUpdateRowHeight(itemsCount)) {\n            var rowsHeight = this._getRowsHeight($tableElement);\n            this._rowHeight = rowsHeight / itemsCount;\n          }\n        },\n        _findContentElement: function () {\n          var $content = this.element();\n          var scrollable = this.getScrollable();\n          if ($content) {\n            if (scrollable) {\n              $content = $(scrollable.content());\n            }\n            return $content.children().first();\n          }\n        },\n        _getRowElements: function (tableElement) {\n          var $rows = this.callBase(tableElement);\n          return $rows && $rows.not(\".\" + FREE_SPACE_CLASS);\n        },\n        _getFreeSpaceRowElements: function ($table) {\n          var tableElements = $table || this.getTableElements();\n          return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS);\n        },\n        _getNoDataText: function () {\n          return this.option(\"noDataText\");\n        },\n        _rowClick: function (e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowClick\", extend({\n            evaluate: function (expr) {\n              var getter = compileGetter(expr);\n              return getter(item.data);\n            }\n          }, e, item));\n        },\n        _rowDblClick: function (e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowDblClick\", extend({}, e, item));\n        },\n        _getColumnsCountBeforeGroups: function (columns) {\n          for (var i = 0; i < columns.length; i++) {\n            if (\"groupExpand\" === columns[i].type) {\n              return i;\n            }\n          }\n          return 0;\n        },\n        _getGroupCellOptions: function (options) {\n          var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\n          var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\n          return {\n            columnIndex: columnIndex,\n            colspan: options.columns.length - columnIndex - 1\n          };\n        },\n        _needWrapRow: function () {\n          return this.callBase.apply(this, arguments) || !!this.option(\"dataRowTemplate\");\n        },\n        _renderCells: function ($row, options) {\n          if (\"group\" === options.row.rowType) {\n            this._renderGroupedCells($row, options);\n          } else if (options.row.values) {\n            this.callBase($row, options);\n          }\n        },\n        _renderGroupedCells: function ($row, options) {\n          var row = options.row;\n          var expandColumn;\n          var columns = options.columns;\n          var rowIndex = row.rowIndex;\n          var isExpanded;\n          var groupCellOptions = this._getGroupCellOptions(options);\n          for (var i = 0; i <= groupCellOptions.columnIndex; i++) {\n            if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\n              isExpanded = !!row.isExpanded;\n              expandColumn = columns[i];\n            } else {\n              isExpanded = null;\n              expandColumn = {\n                command: \"expand\",\n                cssClass: columns[i].cssClass\n              };\n            }\n            if (this._needRenderCell(i, options.columnIndices)) {\n              this._renderCell($row, {\n                value: isExpanded,\n                row: row,\n                rowIndex: rowIndex,\n                column: expandColumn,\n                columnIndex: i,\n                columnIndices: options.columnIndices,\n                change: options.change\n              });\n            }\n          }\n          var groupColumnAlignment = getDefaultAlignment(this.option(\"rtlEnabled\"));\n          var groupColumn = extend({}, columns[groupCellOptions.columnIndex], {\n            command: null,\n            type: null,\n            cssClass: null,\n            width: null,\n            showWhenGrouped: false,\n            alignment: groupColumnAlignment\n          });\n          if (groupCellOptions.colspan > 1) {\n            groupColumn.colspan = groupCellOptions.colspan;\n          }\n          if (this._needRenderCell(groupCellOptions.columnIndex + 1, options.columnIndices)) {\n            this._renderCell($row, {\n              value: row.values[row.groupIndex],\n              row: row,\n              rowIndex: rowIndex,\n              column: groupColumn,\n              columnIndex: groupCellOptions.columnIndex + 1,\n              columnIndices: options.columnIndices,\n              change: options.change\n            });\n          }\n        },\n        _renderRows: function ($table, options) {\n          var scrollingMode = this.option(\"scrolling.mode\");\n          this.callBase($table, extend({\n            scrollingMode: scrollingMode\n          }, options));\n          this._checkRowKeys(options.change);\n          this._renderFreeSpaceRow($table, options.change);\n          if (!this._hasHeight) {\n            this.updateFreeSpaceRowHeight($table);\n          }\n        },\n        _renderDataRowByTemplate($table, options, dataRowTemplate) {\n          var row = options.row;\n          var rowOptions = extend({\n            columns: options.columns\n          }, row);\n          var $tbody = this._createRow(row, \"tbody\");\n          $tbody.appendTo($table);\n          this.renderTemplate($tbody, dataRowTemplate, rowOptions, true, options.change);\n          this._rowPrepared($tbody, rowOptions, options.row);\n        },\n        _renderRow: function ($table, options) {\n          var row = options.row;\n          var rowTemplate = this.option().rowTemplate;\n          var dataRowTemplate = this.option(\"dataRowTemplate\");\n          if (\"data\" === row.rowType && dataRowTemplate) {\n            this._renderDataRowByTemplate($table, options, dataRowTemplate);\n          } else if ((\"data\" === row.rowType || \"group\" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {\n            this.renderTemplate($table, rowTemplate, extend({\n              columns: options.columns\n            }, row), true);\n          } else {\n            this.callBase($table, options);\n          }\n        },\n        _renderTable: function (options) {\n          var that = this;\n          var $table = that.callBase(options);\n          if (!isDefined(that.getTableElement())) {\n            that.setTableElement($table);\n            that._renderScrollable(true);\n            that.resizeCompleted.add(function resizeCompletedHandler() {\n              var scrollableInstance = that.getScrollable();\n              if (scrollableInstance && that.element().closest(getWindow().document).length) {\n                that.resizeCompleted.remove(resizeCompletedHandler);\n                scrollableInstance._visibilityChanged(true);\n              }\n            });\n          } else {\n            that._renderScrollable();\n          }\n          return $table;\n        },\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n          if (this.option().rowTemplate || this.option().dataRowTemplate) {\n            $table.appendTo(this.component.$element());\n          }\n          return $table;\n        },\n        _renderCore: function (change) {\n          var $element = this.element();\n          $element.addClass(this.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS), !this.option(\"wordWrapEnabled\"));\n          $element.toggleClass(EMPTY_CLASS, this._dataController.isEmpty());\n          this.setAria(\"role\", \"presentation\", $element);\n          var $table = this._renderTable({\n            change: change\n          });\n          var deferred = this._updateContent($table, change);\n          this.callBase(change);\n          this._lastColumnWidths = null;\n          return deferred;\n        },\n        _getRows: function (change) {\n          return change && change.items || this._dataController.items();\n        },\n        _getCellOptions: function (options) {\n          var column = options.column;\n          var row = options.row;\n          var data = row.data;\n          var summaryCells = row && row.summaryCells;\n          var value = options.value;\n          var displayValue = gridCoreUtils.getDisplayValue(column, value, data, row.rowType);\n          var parameters = this.callBase(options);\n          parameters.value = value;\n          parameters.oldValue = options.oldValue;\n          parameters.displayValue = displayValue;\n          parameters.row = row;\n          parameters.key = row.key;\n          parameters.data = data;\n          parameters.rowType = row.rowType;\n          parameters.values = row.values;\n          parameters.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\n          parameters.rowIndex = row.rowIndex;\n          parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\n          parameters.resized = column.resizedCallbacks;\n          if (isDefined(column.groupIndex) && !column.command) {\n            var groupingTextsOptions = this.option(\"grouping.texts\");\n            var scrollingMode = this.option(\"scrolling.mode\");\n            if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n              parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\n              parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage;\n            }\n          }\n          return parameters;\n        },\n        _setRowsOpacityCore: function ($rows, visibleColumns, columnIndex, value) {\n          var columnsController = this._columnsController;\n          var columns = columnsController.getColumns();\n          var column = columns && columns[columnIndex];\n          var columnID = column && column.isBand && column.index;\n          each($rows, function (rowIndex, row) {\n            if (!$(row).hasClass(GROUP_ROW_CLASS)) {\n              for (var i = 0; i < visibleColumns.length; i++) {\n                if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\n                  $rows.eq(rowIndex).children().eq(i).css({\n                    opacity: value\n                  });\n                  if (!isNumeric(columnID)) {\n                    break;\n                  }\n                }\n              }\n            }\n          });\n        },\n        _getDevicePixelRatio: function () {\n          return getWindow().devicePixelRatio;\n        },\n        renderNoDataText: gridCoreUtils.renderNoDataText,\n        getCellOptions: function (rowIndex, columnIdentifier) {\n          var rowOptions = this._dataController.items()[rowIndex];\n          var cellOptions;\n          var column;\n          if (rowOptions) {\n            if (isString(columnIdentifier)) {\n              column = this._columnsController.columnOption(columnIdentifier);\n            } else {\n              column = this._columnsController.getVisibleColumns()[columnIdentifier];\n            }\n            if (column) {\n              cellOptions = this._getCellOptions({\n                value: column.calculateCellValue(rowOptions.data),\n                rowIndex: rowOptions.rowIndex,\n                row: rowOptions,\n                column: column\n              });\n            }\n          }\n          return cellOptions;\n        },\n        getRow: function (index) {\n          if (index >= 0) {\n            var rows = this._getRowElements();\n            if (rows.length > index) {\n              return $(rows[index]);\n            }\n          }\n        },\n        updateFreeSpaceRowHeight: function ($table) {\n          var dataController = this._dataController;\n          var itemCount = dataController.items(true).length;\n          var contentElement = this._findContentElement();\n          var freeSpaceRowElements = this._getFreeSpaceRowElements($table);\n          if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\n            var isFreeSpaceRowVisible = false;\n            if (itemCount > 0) {\n              if (!this._hasHeight) {\n                var freeSpaceRowCount = dataController.pageSize() - itemCount;\n                var scrollingMode = this.option(\"scrolling.mode\");\n                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n                  setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\n                  isFreeSpaceRowVisible = true;\n                }\n                if (!isFreeSpaceRowVisible && $table) {\n                  setHeight(freeSpaceRowElements, 0);\n                } else {\n                  freeSpaceRowElements.toggle(isFreeSpaceRowVisible);\n                }\n                this._updateLastRowBorder(isFreeSpaceRowVisible);\n              } else {\n                freeSpaceRowElements.hide();\n                deferUpdate(() => {\n                  var scrollbarWidth = this.getScrollbarWidth(true);\n                  var elementHeightWithoutScrollbar = getHeight(this.element()) - scrollbarWidth;\n                  var contentHeight = getOuterHeight(contentElement);\n                  var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\n                  var rowsHeight = this._getRowsHeight(contentElement.children().first());\n                  var $tableElement = $table || this.getTableElements();\n                  var borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\n                  var heightCorrection = this._getHeightCorrection();\n                  var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\n                  if (showFreeSpaceRow) {\n                    deferRender(() => {\n                      freeSpaceRowElements.css(\"height\", resultHeight);\n                      isFreeSpaceRowVisible = true;\n                      freeSpaceRowElements.show();\n                    });\n                  }\n                  deferRender(() => this._updateLastRowBorder(isFreeSpaceRowVisible));\n                });\n              }\n            } else {\n              freeSpaceRowElements.css(\"height\", 0);\n              freeSpaceRowElements.show();\n              this._updateLastRowBorder(true);\n            }\n          }\n        },\n        _getHeightCorrection: function () {\n          var isZoomedWebkit = browser.webkit && this._getDevicePixelRatio() >= 2;\n          var isChromeLatest = browser.chrome && browser.version >= 91;\n          var hasExtraBorderTop = browser.mozilla && browser.version >= 70 && !this.option(\"showRowLines\");\n          return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0;\n        },\n        _columnOptionChanged: function (e) {\n          var optionNames = e.optionNames;\n          if (e.changeTypes.grouping) {\n            return;\n          }\n          if (optionNames.width || optionNames.visibleWidth) {\n            this.callBase(e);\n            this._fireColumnResizedCallbacks();\n          }\n        },\n        getScrollable: function () {\n          return this._scrollable;\n        },\n        init: function () {\n          var that = this;\n          var dataController = that.getController(\"data\");\n          that.callBase();\n          that._editorFactoryController = that.getController(\"editorFactory\");\n          that._rowHeight = 0;\n          that._scrollTop = 0;\n          that._scrollLeft = -1;\n          that._scrollRight = 0;\n          that._hasHeight = false;\n          that._contentChanges = [];\n          dataController.loadingChanged.add(function (isLoading, messageText) {\n            that.setLoading(isLoading, messageText);\n          });\n          dataController.dataSourceChanged.add(() => {\n            if (this._scrollLeft >= 0 && !this._dataController.isLoading()) {\n              this._handleScroll({\n                component: this.getScrollable(),\n                forceUpdateScrollPosition: true,\n                scrollOffset: {\n                  top: this._scrollTop,\n                  left: this._scrollLeft\n                }\n              });\n            }\n          });\n        },\n        _handleDataChanged: function (change) {\n          switch (change.changeType) {\n            case \"refresh\":\n            case \"prepend\":\n            case \"append\":\n            case \"update\":\n              this.render(null, change);\n              break;\n            default:\n              this._update(change);\n          }\n        },\n        publicMethods: function () {\n          return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"];\n        },\n        contentWidth: function () {\n          return getWidth(this.element()) - this.getScrollbarWidth();\n        },\n        getScrollbarWidth: function (isHorizontal) {\n          var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\n          var scrollbarWidth = 0;\n          if (scrollableContainer) {\n            if (!isHorizontal) {\n              scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0;\n            } else {\n              scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\n              scrollbarWidth += (that = this, scrollable = that.getScrollable(), scrollable ? Math.ceil(parseFloat($(scrollable.content()).css(\"paddingBottom\"))) : 0);\n            }\n          }\n          var that, scrollable;\n          return scrollbarWidth > 0 ? scrollbarWidth : 0;\n        },\n        _fireColumnResizedCallbacks: function () {\n          var lastColumnWidths = this._lastColumnWidths || [];\n          var columnWidths = [];\n          var columns = this.getColumns();\n          for (var i = 0; i < columns.length; i++) {\n            columnWidths[i] = columns[i].visibleWidth;\n            if (columns[i].resizedCallbacks && !isDefined(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\n              columns[i].resizedCallbacks.fire(columnWidths[i]);\n            }\n          }\n          this._lastColumnWidths = columnWidths;\n        },\n        _updateLastRowBorder: function (isFreeSpaceRowVisible) {\n          if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\n            this.element().addClass(LAST_ROW_BORDER);\n          } else {\n            this.element().removeClass(LAST_ROW_BORDER);\n          }\n        },\n        _updateScrollable: function () {\n          var scrollable = Scrollable.getInstance(this.element());\n          if (scrollable) {\n            scrollable.update();\n            if (scrollable.option(\"useNative\") || !(null !== scrollable && void 0 !== scrollable && scrollable.isRenovated())) {\n              this._updateHorizontalScrollPosition();\n            }\n          }\n        },\n        _updateHorizontalScrollPosition: function () {\n          var scrollable = this.getScrollable();\n          var scrollLeft = scrollable && scrollable.scrollOffset().left;\n          var rtlEnabled = this.option(\"rtlEnabled\");\n          if (rtlEnabled) {\n            var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\n            var scrollRight = maxHorizontalScrollOffset - scrollLeft;\n            if (scrollRight !== this._scrollRight) {\n              this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight;\n            }\n          }\n          if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\n            scrollable.scrollTo({\n              x: this._scrollLeft\n            });\n          }\n        },\n        _resizeCore: function () {\n          var that = this;\n          that._fireColumnResizedCallbacks();\n          that._updateRowHeight();\n          deferRender(function () {\n            that._renderScrollable();\n            that.renderNoDataText();\n            that.updateFreeSpaceRowHeight();\n            deferUpdate(function () {\n              that._updateScrollable();\n            });\n          });\n        },\n        scrollTo: function (location) {\n          var $element = this.element();\n          var dxScrollable = $element && Scrollable.getInstance($element);\n          if (dxScrollable) {\n            dxScrollable.scrollTo(location);\n          }\n        },\n        height: function (_height) {\n          var that = this;\n          var $element = this.element();\n          if (0 === arguments.length) {\n            return $element ? getOuterHeight($element, true) : 0;\n          }\n          if (isDefined(_height) && $element) {\n            that.hasHeight(\"auto\" !== _height);\n            setHeight($element, _height);\n          }\n        },\n        hasHeight: function (_hasHeight) {\n          if (0 === arguments.length) {\n            return !!this._hasHeight;\n          }\n          this._hasHeight = _hasHeight;\n        },\n        setLoading: function (isLoading, messageText) {\n          var loadPanel = this._loadPanel;\n          var dataController = this._dataController;\n          var loadPanelOptions = this.option(\"loadPanel\") || {};\n          var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\n          var $element = this.element();\n          if (!hasWindow()) {\n            return;\n          }\n          if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\n            this._renderLoadPanel($element, $element.parent());\n            loadPanel = this._loadPanel;\n          }\n          if (loadPanel) {\n            var visibilityOptions = {\n              message: messageText || loadPanelOptions.text,\n              animation: animation,\n              visible: isLoading\n            };\n            if (isLoading) {\n              visibilityOptions.position = gridCoreUtils.calculateLoadPanelPosition($element);\n            }\n            clearTimeout(this._hideLoadingTimeoutID);\n            if (loadPanel.option(\"visible\") && !isLoading) {\n              this._hideLoadingTimeoutID = setTimeout(function () {\n                loadPanel.option(visibilityOptions);\n              }, LOADPANEL_HIDE_TIMEOUT);\n            } else {\n              loadPanel.option(visibilityOptions);\n            }\n          }\n        },\n        setRowsOpacity: function (columnIndex, value) {\n          var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\n          this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value);\n        },\n        _getCellElementsCore: function (rowIndex) {\n          var $cells = this.callBase.apply(this, arguments);\n          if ($cells) {\n            var groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\n            if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\n              return $cells.slice(0, groupCellIndex + 1);\n            }\n          }\n          return $cells;\n        },\n        _getBoundaryVisibleItemIndex: function (isTop, isFloor) {\n          var itemIndex = 0;\n          var prevOffset = 0;\n          var offset = 0;\n          var viewportBoundary = this._scrollTop;\n          var $contentElement = this._findContentElement();\n          var contentElementOffsetTop = $contentElement && $contentElement.offset().top;\n          var dataController = this.getController(\"data\");\n          var items = dataController.items();\n          var tableElement = this.getTableElement();\n          if (items.length && tableElement) {\n            var rowElements = this._getRowElements(tableElement).filter(\":visible\");\n            if (!isTop) {\n              var height = getOuterHeight(this._hasHeight ? this.element() : getWindow());\n              viewportBoundary += height;\n            }\n            for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\n              prevOffset = offset;\n              var $rowElement = $(rowElements).eq(itemIndex);\n              if ($rowElement.length) {\n                offset = $rowElement.offset();\n                offset = (isTop ? offset.top : offset.top + getOuterHeight($rowElement)) - contentElementOffsetTop;\n                if (offset > viewportBoundary) {\n                  if (itemIndex) {\n                    if (isFloor || 2 * viewportBoundary < Math.round(offset + prevOffset)) {\n                      itemIndex--;\n                    }\n                  }\n                  break;\n                }\n              }\n            }\n            if (itemIndex && itemIndex === items.length) {\n              itemIndex--;\n            }\n          }\n          return itemIndex;\n        },\n        getTopVisibleItemIndex: function (isFloor) {\n          return this._getBoundaryVisibleItemIndex(true, isFloor);\n        },\n        getBottomVisibleItemIndex: function (isFloor) {\n          return this._getBoundaryVisibleItemIndex(false, isFloor);\n        },\n        getTopVisibleRowData: function () {\n          var itemIndex = this.getTopVisibleItemIndex();\n          var items = this._dataController.items();\n          if (items[itemIndex]) {\n            return items[itemIndex].data;\n          }\n        },\n        _scrollToElement: function ($element, offset) {\n          var scrollable = this.getScrollable();\n          scrollable && scrollable.scrollToElement($element, offset);\n        },\n        optionChanged: function (args) {\n          this.callBase(args);\n          switch (args.name) {\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n            case \"showRowLines\":\n            case \"rowAlternationEnabled\":\n            case \"rowTemplate\":\n            case \"dataRowTemplate\":\n            case \"twoWayBindingEnabled\":\n              this._invalidate(true, true);\n              args.handled = true;\n              break;\n            case \"scrolling\":\n              this._rowHeight = null;\n              this._tableElement = null;\n              args.handled = true;\n              break;\n            case \"rtlEnabled\":\n              this._rowHeight = null;\n              this._tableElement = null;\n              break;\n            case \"loadPanel\":\n              this._tableElement = null;\n              this._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\n              args.handled = true;\n              break;\n            case \"noDataText\":\n              this.renderNoDataText();\n              args.handled = true;\n          }\n        },\n        dispose: function () {\n          this.callBase();\n          clearTimeout(this._hideLoadingTimeoutID);\n          this._scrollable && this._scrollable.dispose();\n        },\n        setScrollerSpacing: function () {},\n        _restoreErrorRow: function () {}\n      };\n      return members;\n    }())\n  }\n};","map":{"version":3,"names":["_extends","getHeight","getOuterHeight","getWidth","$","getWindow","hasWindow","eventsEngine","deferRender","deferUpdate","setHeight","isDefined","isNumeric","isString","each","extend","getBoundingRect","getDefaultAlignment","isEmpty","compileGetter","gridCoreUtils","ColumnsView","Scrollable","removeEvent","messageLocalization","browser","ROWS_VIEW_CLASS","CONTENT_CLASS","NOWRAP_CLASS","GROUP_ROW_CLASS","GROUP_CELL_CLASS","DATA_ROW_CLASS","FREE_SPACE_CLASS","ROW_LINES_CLASS","COLUMN_LINES_CLASS","ROW_ALTERNATION_CLASS","LAST_ROW_BORDER","EMPTY_CLASS","ROW_INSERTED_ANIMATION_CLASS","LOADPANEL_HIDE_TIMEOUT","getMaxHorizontalScrollOffset","scrollable","Math","round","scrollWidth","clientWidth","isGroupRow","_ref","rowType","column","groupIndex","showWhenGrouped","command","rowsModule","defaultOptions","hoverStateEnabled","scrolling","useNative","loadPanel","enabled","text","format","width","height","showIndicator","indicatorSrc","showPane","dataRowTemplate","columnAutoWidth","noDataText","wordWrapEnabled","showColumnLines","showRowLines","rowAlternationEnabled","activeStateEnabled","twoWayBindingEnabled","views","rowsView","inherit","defaultCellTemplate","$container","options","isDataTextEmpty","container","get","setEmptyText","encodeHtml","textContent","innerHTML","members","_getDefaultTemplate","html","_getDefaultGroupTemplate","summaryTexts","option","data","caption","summaryItems","length","getGroupRowSummaryText","groupContinuedMessage","groupContinuesMessage","_update","_updateCell","$cell","addClass","callBase","apply","arguments","_getCellTemplate","template","groupCellTemplate","allowRenderToDetachedContainer","render","cellTemplate","_createRow","row","$row","isGroup","isDataRow","visible","hide","isRowExpanded","isExpanded","setAria","toString","_rowPrepared","rowOptions","_isAltRow","watch","value","toggleClass","_setAriaRowIndex","rowIndex","component","isPagerMode","isVirtualRowRendering","pageIndex","pageSize","_dataController","getRowIndexOffset","_afterRowPrepared","e","arg","args","dataController","getVisibleRows","isNewRow","dispose","generateDataValues","columns","repaintRows","deep","skipImmediate","on","rowElement","_renderScrollable","force","$element","element","children","append","_loadPanel","_renderLoadPanel","parent","isLocalStore","getScrollable","isLoaded","getColumns","allColumnsHasWidth","i","minWidth","_hasHeight","_columnsController","_isColumnFixing","_renderScrollableCore","_handleScroll","rtlEnabled","isNativeScrolling","_scrollTop","scrollOffset","top","_scrollLeft","left","scrollLeft","_scrollRight","isScrollbarVisible","scrollChanged","fire","name","dxScrollableOptions","_createScrollableOptions","scrollHandler","bind","onScroll","_scrollable","_createComponent","_scrollableContainer","renderLoadPanel","_renderContent","contentElement","tableElement","empty","_findContentElement","_updateContent","newTableElement","change","isFixedTableRendering","_contentChanges","push","waitAsyncTemplates","done","contentChanges","forEach","_ref2","getTableElement","changeType","executors","highlightChanges","rowInsertedClass","addWidgetPrefix","rowIndices","index","_change$changeTypes","$newRowElement","_getRowElements","eq","dataChangeType","changeTypes","item","items","$rowElements","$rowElement","_change$columnIndices","columnIndices","is","toggle","_updateCells","replaceWith","target","prependTo","insertBefore","insertAfter","last","isLiveUpdate","remove","setTableElement","fail","_createEmptyRow","className","isFixed","getFixedColumns","_createCell","columnIndex","css","_appendEmptyRow","$table","$emptyRow","location","$tBodies","_getBodies","isTableContainer","first","prepend","$colgroup","_renderFreeSpaceRow","$tableElement","$freeSpaceRowElement","_wrapRowIfNeed","_checkRowKeys","that","rows","_getRows","keyExpr","store","key","some","fireError","_needUpdateRowHeight","itemsCount","_rowHeight","_getRowsHeight","_tableElement","not","toArray","reduce","sum","_updateRowHeight","rowsHeight","$content","content","$rows","_getFreeSpaceRowElements","tableElements","getTableElements","_getNoDataText","_rowClick","executeAction","evaluate","expr","getter","_rowDblClick","_getColumnsCountBeforeGroups","type","_getGroupCellOptions","columnsCountBeforeGroups","colspan","_needWrapRow","_renderCells","_renderGroupedCells","values","expandColumn","groupCellOptions","allowCollapsing","scrollingMode","cssClass","_needRenderCell","_renderCell","groupColumnAlignment","groupColumn","alignment","_renderRows","updateFreeSpaceRowHeight","_renderDataRowByTemplate","$tbody","appendTo","renderTemplate","_renderRow","rowTemplate","_renderTable","resizeCompleted","add","resizeCompletedHandler","scrollableInstance","closest","document","_visibilityChanged","_createTable","_renderCore","deferred","_lastColumnWidths","_getCellOptions","summaryCells","displayValue","getDisplayValue","parameters","oldValue","formatValue","resized","resizedCallbacks","groupingTextsOptions","isContinuationOnNextPage","isContinuation","_setRowsOpacityCore","visibleColumns","columnsController","columnID","isBand","hasClass","isParentBandColumn","opacity","_getDevicePixelRatio","devicePixelRatio","renderNoDataText","getCellOptions","columnIdentifier","cellOptions","columnOption","getVisibleColumns","calculateCellValue","getRow","itemCount","freeSpaceRowElements","totalCount","isFreeSpaceRowVisible","freeSpaceRowCount","pageCount","_updateLastRowBorder","scrollbarWidth","getScrollbarWidth","elementHeightWithoutScrollbar","contentHeight","showFreeSpaceRow","borderTopWidth","ceil","parseFloat","heightCorrection","_getHeightCorrection","resultHeight","show","isZoomedWebkit","webkit","isChromeLatest","chrome","version","hasExtraBorderTop","mozilla","_columnOptionChanged","optionNames","grouping","visibleWidth","_fireColumnResizedCallbacks","init","getController","_editorFactoryController","loadingChanged","isLoading","messageText","setLoading","dataSourceChanged","forceUpdateScrollPosition","_handleDataChanged","publicMethods","contentWidth","isHorizontal","scrollableContainer","offsetWidth","clientHeight","offsetHeight","lastColumnWidths","columnWidths","removeClass","_updateScrollable","getInstance","update","isRenovated","_updateHorizontalScrollPosition","maxHorizontalScrollOffset","scrollRight","scrollTo","x","_resizeCore","dxScrollable","_height","hasHeight","loadPanelOptions","animation","visibilityOptions","message","position","calculateLoadPanelPosition","clearTimeout","_hideLoadingTimeoutID","setTimeout","setRowsOpacity","_getCellElementsCore","$cells","groupCellIndex","filter","slice","_getBoundaryVisibleItemIndex","isTop","isFloor","itemIndex","prevOffset","offset","viewportBoundary","$contentElement","contentElementOffsetTop","rowElements","getTopVisibleItemIndex","getBottomVisibleItemIndex","getTopVisibleRowData","_scrollToElement","scrollToElement","optionChanged","_invalidate","handled","fullName","setScrollerSpacing","_restoreErrorRow"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.rows.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    getHeight,\r\n    getOuterHeight,\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    deferRender,\r\n    deferUpdate\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    setHeight\r\n} from \"../../core/utils/style\";\r\nimport {\r\n    isDefined,\r\n    isNumeric,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect,\r\n    getDefaultAlignment\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    isEmpty\r\n} from \"../../core/utils/string\";\r\nimport {\r\n    compileGetter\r\n} from \"../../core/utils/data\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    ColumnsView\r\n} from \"./ui.grid_core.columns_view\";\r\nimport Scrollable from \"../scroll_view/ui.scrollable\";\r\nimport {\r\n    removeEvent\r\n} from \"../../events/remove\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport browser from \"../../core/utils/browser\";\r\nvar ROWS_VIEW_CLASS = \"rowsview\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar NOWRAP_CLASS = \"nowrap\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar FREE_SPACE_CLASS = \"dx-freespace-row\";\r\nvar ROW_LINES_CLASS = \"dx-row-lines\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar ROW_ALTERNATION_CLASS = \"dx-row-alt\";\r\nvar LAST_ROW_BORDER = \"dx-last-row-border\";\r\nvar EMPTY_CLASS = \"dx-empty\";\r\nvar ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\r\nvar LOADPANEL_HIDE_TIMEOUT = 200;\r\n\r\nfunction getMaxHorizontalScrollOffset(scrollable) {\r\n    return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0\r\n}\r\n\r\nfunction isGroupRow(_ref) {\r\n    var {\r\n        rowType: rowType,\r\n        column: column\r\n    } = _ref;\r\n    return \"group\" === rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command\r\n}\r\nexport var rowsModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            hoverStateEnabled: false,\r\n            scrolling: {\r\n                useNative: \"auto\"\r\n            },\r\n            loadPanel: {\r\n                enabled: \"auto\",\r\n                text: messageLocalization.format(\"Loading\"),\r\n                width: 200,\r\n                height: 90,\r\n                showIndicator: true,\r\n                indicatorSrc: \"\",\r\n                showPane: true\r\n            },\r\n            dataRowTemplate: null,\r\n            columnAutoWidth: false,\r\n            noDataText: messageLocalization.format(\"dxDataGrid-noDataText\"),\r\n            wordWrapEnabled: false,\r\n            showColumnLines: true,\r\n            showRowLines: false,\r\n            rowAlternationEnabled: false,\r\n            activeStateEnabled: false,\r\n            twoWayBindingEnabled: true\r\n        }\r\n    },\r\n    views: {\r\n        rowsView: ColumnsView.inherit(function() {\r\n            var defaultCellTemplate = function($container, options) {\r\n                var isDataTextEmpty = isEmpty(options.text) && \"data\" === options.rowType;\r\n                var text = options.text;\r\n                var container = $container.get(0);\r\n                if (isDataTextEmpty) {\r\n                    gridCoreUtils.setEmptyText($container)\r\n                } else if (options.column.encodeHtml) {\r\n                    container.textContent = text\r\n                } else {\r\n                    container.innerHTML = text\r\n                }\r\n            };\r\n            var members = {\r\n                _getDefaultTemplate: function(column) {\r\n                    switch (column.command) {\r\n                        case \"empty\":\r\n                            return function(container) {\r\n                                container.html(\"&nbsp;\")\r\n                            };\r\n                        default:\r\n                            return defaultCellTemplate\r\n                    }\r\n                },\r\n                _getDefaultGroupTemplate: function(column) {\r\n                    var summaryTexts = this.option(\"summary.texts\");\r\n                    return function($container, options) {\r\n                        var data = options.data;\r\n                        var text = options.column.caption + \": \" + options.text;\r\n                        var container = $container.get(0);\r\n                        if (options.summaryItems && options.summaryItems.length) {\r\n                            text += \" \" + gridCoreUtils.getGroupRowSummaryText(options.summaryItems, summaryTexts)\r\n                        }\r\n                        if (data) {\r\n                            if (options.groupContinuedMessage && options.groupContinuesMessage) {\r\n                                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\"\r\n                            } else if (options.groupContinuesMessage) {\r\n                                text += \" (\" + options.groupContinuesMessage + \")\"\r\n                            } else if (options.groupContinuedMessage) {\r\n                                text += \" (\" + options.groupContinuedMessage + \")\"\r\n                            }\r\n                        }\r\n                        if (column.encodeHtml) {\r\n                            container.textContent = text\r\n                        } else {\r\n                            container.innerHTML = text\r\n                        }\r\n                    }\r\n                },\r\n                _update: function() {},\r\n                _updateCell: function($cell, options) {\r\n                    if (isGroupRow(options)) {\r\n                        $cell.addClass(GROUP_CELL_CLASS)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    var column = options.column;\r\n                    var template;\r\n                    if (isGroupRow(options)) {\r\n                        template = column.groupCellTemplate || {\r\n                            allowRenderToDetachedContainer: true,\r\n                            render: this._getDefaultGroupTemplate(column)\r\n                        }\r\n                    } else if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\r\n                        template = column.cellTemplate\r\n                    } else {\r\n                        template = {\r\n                            allowRenderToDetachedContainer: true,\r\n                            render: this._getDefaultTemplate(column)\r\n                        }\r\n                    }\r\n                    return template\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var isGroup = \"group\" === row.rowType;\r\n                        var isDataRow = \"data\" === row.rowType;\r\n                        isDataRow && $row.addClass(DATA_ROW_CLASS);\r\n                        isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\r\n                        this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\r\n                        if (false === row.visible) {\r\n                            $row.hide()\r\n                        }\r\n                        if (isGroup) {\r\n                            $row.addClass(GROUP_ROW_CLASS);\r\n                            var isRowExpanded = row.isExpanded;\r\n                            this.setAria(\"role\", \"row\", $row);\r\n                            this.setAria(\"expanded\", isDefined(isRowExpanded) && isRowExpanded.toString(), $row)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _rowPrepared: function($row, rowOptions, row) {\r\n                    if (\"data\" === rowOptions.rowType) {\r\n                        if (this.option(\"rowAlternationEnabled\")) {\r\n                            this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);\r\n                            rowOptions.watch && rowOptions.watch(() => this._isAltRow(row), value => {\r\n                                $row.toggleClass(ROW_ALTERNATION_CLASS, value)\r\n                            })\r\n                        }\r\n                        this._setAriaRowIndex(rowOptions, $row);\r\n                        rowOptions.watch && rowOptions.watch(() => rowOptions.rowIndex, () => this._setAriaRowIndex(rowOptions, $row))\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _setAriaRowIndex: function(row, $row) {\r\n                    var component = this.component;\r\n                    var isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && !gridCoreUtils.isVirtualRowRendering(component);\r\n                    var rowIndex = row.rowIndex + 1;\r\n                    if (isPagerMode) {\r\n                        rowIndex = component.pageIndex() * component.pageSize() + rowIndex\r\n                    } else {\r\n                        rowIndex += this._dataController.getRowIndexOffset()\r\n                    }\r\n                    this.setAria(\"rowindex\", rowIndex, $row)\r\n                },\r\n                _afterRowPrepared: function(e) {\r\n                    var arg = e.args[0];\r\n                    var dataController = this._dataController;\r\n                    var row = dataController.getVisibleRows()[arg.rowIndex];\r\n                    var watch = this.option(\"integrationOptions.watchMethod\");\r\n                    if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\r\n                        return\r\n                    }\r\n                    var dispose = watch(() => dataController.generateDataValues(arg.data, arg.columns), () => {\r\n                        dataController.repaintRows([row.rowIndex], this.option(\"repaintChangesOnly\"))\r\n                    }, {\r\n                        deep: true,\r\n                        skipImmediate: true\r\n                    });\r\n                    eventsEngine.on(arg.rowElement, removeEvent, dispose)\r\n                },\r\n                _renderScrollable: function(force) {\r\n                    var $element = this.element();\r\n                    if (!$element.children().length) {\r\n                        $element.append(\"<div>\")\r\n                    }\r\n                    if (force || !this._loadPanel) {\r\n                        this._renderLoadPanel($element, $element.parent(), this._dataController.isLocalStore())\r\n                    }\r\n                    if ((force || !this.getScrollable()) && this._dataController.isLoaded()) {\r\n                        var columns = this.getColumns();\r\n                        var allColumnsHasWidth = true;\r\n                        for (var i = 0; i < columns.length; i++) {\r\n                            if (!columns[i].width && !columns[i].minWidth) {\r\n                                allColumnsHasWidth = false;\r\n                                break\r\n                            }\r\n                        }\r\n                        if (this.option(\"columnAutoWidth\") || this._hasHeight || allColumnsHasWidth || this._columnsController._isColumnFixing()) {\r\n                            this._renderScrollableCore($element)\r\n                        }\r\n                    }\r\n                },\r\n                _handleScroll: function(e) {\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    var isNativeScrolling = e.component.option(\"useNative\");\r\n                    this._scrollTop = e.scrollOffset.top;\r\n                    this._scrollLeft = e.scrollOffset.left;\r\n                    var scrollLeft = e.scrollOffset.left;\r\n                    if (rtlEnabled) {\r\n                        this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\r\n                        if (isNativeScrolling) {\r\n                            scrollLeft = -this._scrollRight\r\n                        }\r\n                        if (!this.isScrollbarVisible(true)) {\r\n                            this._scrollLeft = -1\r\n                        }\r\n                    }\r\n                    this.scrollChanged.fire(_extends({}, e.scrollOffset, {\r\n                        left: scrollLeft\r\n                    }), this.name)\r\n                },\r\n                _renderScrollableCore: function($element) {\r\n                    var dxScrollableOptions = this._createScrollableOptions();\r\n                    var scrollHandler = this._handleScroll.bind(this);\r\n                    dxScrollableOptions.onScroll = scrollHandler;\r\n                    this._scrollable = this._createComponent($element, Scrollable, dxScrollableOptions);\r\n                    this._scrollableContainer = this._scrollable && $(this._scrollable.container())\r\n                },\r\n                _renderLoadPanel: gridCoreUtils.renderLoadPanel,\r\n                _renderContent: function(contentElement, tableElement) {\r\n                    contentElement.empty().append(tableElement);\r\n                    return this._findContentElement()\r\n                },\r\n                _updateContent: function(newTableElement, change, isFixedTableRendering) {\r\n                    this._contentChanges.push({\r\n                        newTableElement: newTableElement,\r\n                        change: change,\r\n                        isFixedTableRendering: isFixedTableRendering\r\n                    });\r\n                    return this.waitAsyncTemplates().done(() => {\r\n                        var contentChanges = this._contentChanges;\r\n                        this._contentChanges = [];\r\n                        contentChanges.forEach(_ref2 => {\r\n                            var {\r\n                                newTableElement: newTableElement,\r\n                                change: change,\r\n                                isFixedTableRendering: isFixedTableRendering\r\n                            } = _ref2;\r\n                            var tableElement = this.getTableElement(isFixedTableRendering);\r\n                            var contentElement = this._findContentElement(isFixedTableRendering);\r\n                            var changeType = null === change || void 0 === change ? void 0 : change.changeType;\r\n                            var executors = [];\r\n                            var highlightChanges = this.option(\"highlightChanges\");\r\n                            var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\r\n                            switch (changeType) {\r\n                                case \"update\":\r\n                                    each(change.rowIndices, (index, rowIndex) => {\r\n                                        var _change$changeTypes;\r\n                                        var $newRowElement = this._getRowElements(newTableElement).eq(index);\r\n                                        var dataChangeType = null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes[index];\r\n                                        var item = change.items && change.items[index];\r\n                                        executors.push(() => {\r\n                                            var $rowElements = this._getRowElements(tableElement);\r\n                                            var $rowElement = $rowElements.eq(rowIndex);\r\n                                            switch (dataChangeType) {\r\n                                                case \"update\":\r\n                                                    if (item) {\r\n                                                        var _change$columnIndices;\r\n                                                        var columnIndices = null === (_change$columnIndices = change.columnIndices) || void 0 === _change$columnIndices ? void 0 : _change$columnIndices[index];\r\n                                                        if (isDefined(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\r\n                                                            $rowElement.toggle(item.visible)\r\n                                                        } else if (columnIndices) {\r\n                                                            this._updateCells($rowElement, $newRowElement, columnIndices)\r\n                                                        } else {\r\n                                                            $rowElement.replaceWith($newRowElement)\r\n                                                        }\r\n                                                    }\r\n                                                    break;\r\n                                                case \"insert\":\r\n                                                    if (!$rowElements.length) {\r\n                                                        if (tableElement) {\r\n                                                            var target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\r\n                                                            $newRowElement.prependTo(target)\r\n                                                        }\r\n                                                    } else if ($rowElement.length) {\r\n                                                        $newRowElement.insertBefore($rowElement)\r\n                                                    } else {\r\n                                                        $newRowElement.insertAfter($rowElements.last())\r\n                                                    }\r\n                                                    if (highlightChanges && change.isLiveUpdate) {\r\n                                                        $newRowElement.addClass(rowInsertedClass)\r\n                                                    }\r\n                                                    break;\r\n                                                case \"remove\":\r\n                                                    $rowElement.remove()\r\n                                            }\r\n                                        })\r\n                                    });\r\n                                    each(executors, (function() {\r\n                                        this()\r\n                                    }));\r\n                                    newTableElement.remove();\r\n                                    break;\r\n                                default:\r\n                                    this.setTableElement(newTableElement, isFixedTableRendering);\r\n                                    contentElement.addClass(this.addWidgetPrefix(CONTENT_CLASS));\r\n                                    this._renderContent(contentElement, newTableElement, isFixedTableRendering)\r\n                            }\r\n                        })\r\n                    }).fail(() => {\r\n                        this._contentChanges = []\r\n                    })\r\n                },\r\n                _createEmptyRow: function(className, isFixed, height) {\r\n                    var $cell;\r\n                    var $row = this._createRow();\r\n                    var columns = isFixed ? this.getFixedColumns() : this.getColumns();\r\n                    $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        $cell = this._createCell({\r\n                            column: columns[i],\r\n                            rowType: \"freeSpace\",\r\n                            columnIndex: i,\r\n                            columns: columns\r\n                        });\r\n                        isNumeric(height) && $cell.css(\"height\", height);\r\n                        $row.append($cell)\r\n                    }\r\n                    this.setAria(\"role\", \"presentation\", $row);\r\n                    return $row\r\n                },\r\n                _appendEmptyRow: function($table, $emptyRow, location) {\r\n                    var $tBodies = this._getBodies($table);\r\n                    var isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\r\n                    var $container = isTableContainer ? $table : $tBodies;\r\n                    if (\"top\" === location) {\r\n                        $container.first().prepend($emptyRow);\r\n                        if (isTableContainer) {\r\n                            var $colgroup = $container.children(\"colgroup\");\r\n                            $container.prepend($colgroup)\r\n                        }\r\n                    } else {\r\n                        $container.last().append($emptyRow)\r\n                    }\r\n                },\r\n                _renderFreeSpaceRow: function($tableElement, change) {\r\n                    var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\r\n                    $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement, \"refresh\" === (null === change || void 0 === change ? void 0 : change.changeType));\r\n                    this._appendEmptyRow($tableElement, $freeSpaceRowElement)\r\n                },\r\n                _checkRowKeys: function(options) {\r\n                    var that = this;\r\n                    var rows = that._getRows(options);\r\n                    var keyExpr = that._dataController.store() && that._dataController.store().key();\r\n                    keyExpr && rows.some((function(row) {\r\n                        if (\"data\" === row.rowType && void 0 === row.key) {\r\n                            that._dataController.fireError(\"E1046\", keyExpr);\r\n                            return true\r\n                        }\r\n                    }))\r\n                },\r\n                _needUpdateRowHeight: function(itemsCount) {\r\n                    return itemsCount > 0 && !this._rowHeight\r\n                },\r\n                _getRowsHeight: function($tableElement) {\r\n                    $tableElement = $tableElement || this._tableElement;\r\n                    var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\r\n                    return $rowElements.toArray().reduce((function(sum, row) {\r\n                        return sum + getBoundingRect(row).height\r\n                    }), 0)\r\n                },\r\n                _updateRowHeight: function() {\r\n                    var $tableElement = this.getTableElement();\r\n                    var itemsCount = this._dataController.items().length;\r\n                    if ($tableElement && this._needUpdateRowHeight(itemsCount)) {\r\n                        var rowsHeight = this._getRowsHeight($tableElement);\r\n                        this._rowHeight = rowsHeight / itemsCount\r\n                    }\r\n                },\r\n                _findContentElement: function() {\r\n                    var $content = this.element();\r\n                    var scrollable = this.getScrollable();\r\n                    if ($content) {\r\n                        if (scrollable) {\r\n                            $content = $(scrollable.content())\r\n                        }\r\n                        return $content.children().first()\r\n                    }\r\n                },\r\n                _getRowElements: function(tableElement) {\r\n                    var $rows = this.callBase(tableElement);\r\n                    return $rows && $rows.not(\".\" + FREE_SPACE_CLASS)\r\n                },\r\n                _getFreeSpaceRowElements: function($table) {\r\n                    var tableElements = $table || this.getTableElements();\r\n                    return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS)\r\n                },\r\n                _getNoDataText: function() {\r\n                    return this.option(\"noDataText\")\r\n                },\r\n                _rowClick: function(e) {\r\n                    var item = this._dataController.items()[e.rowIndex] || {};\r\n                    this.executeAction(\"onRowClick\", extend({\r\n                        evaluate: function(expr) {\r\n                            var getter = compileGetter(expr);\r\n                            return getter(item.data)\r\n                        }\r\n                    }, e, item))\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    var item = this._dataController.items()[e.rowIndex] || {};\r\n                    this.executeAction(\"onRowDblClick\", extend({}, e, item))\r\n                },\r\n                _getColumnsCountBeforeGroups: function(columns) {\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        if (\"groupExpand\" === columns[i].type) {\r\n                            return i\r\n                        }\r\n                    }\r\n                    return 0\r\n                },\r\n                _getGroupCellOptions: function(options) {\r\n                    var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\r\n                    var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\r\n                    return {\r\n                        columnIndex: columnIndex,\r\n                        colspan: options.columns.length - columnIndex - 1\r\n                    }\r\n                },\r\n                _needWrapRow: function() {\r\n                    return this.callBase.apply(this, arguments) || !!this.option(\"dataRowTemplate\")\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    if (\"group\" === options.row.rowType) {\r\n                        this._renderGroupedCells($row, options)\r\n                    } else if (options.row.values) {\r\n                        this.callBase($row, options)\r\n                    }\r\n                },\r\n                _renderGroupedCells: function($row, options) {\r\n                    var row = options.row;\r\n                    var expandColumn;\r\n                    var columns = options.columns;\r\n                    var rowIndex = row.rowIndex;\r\n                    var isExpanded;\r\n                    var groupCellOptions = this._getGroupCellOptions(options);\r\n                    for (var i = 0; i <= groupCellOptions.columnIndex; i++) {\r\n                        if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\r\n                            isExpanded = !!row.isExpanded;\r\n                            expandColumn = columns[i]\r\n                        } else {\r\n                            isExpanded = null;\r\n                            expandColumn = {\r\n                                command: \"expand\",\r\n                                cssClass: columns[i].cssClass\r\n                            }\r\n                        }\r\n                        if (this._needRenderCell(i, options.columnIndices)) {\r\n                            this._renderCell($row, {\r\n                                value: isExpanded,\r\n                                row: row,\r\n                                rowIndex: rowIndex,\r\n                                column: expandColumn,\r\n                                columnIndex: i,\r\n                                columnIndices: options.columnIndices,\r\n                                change: options.change\r\n                            })\r\n                        }\r\n                    }\r\n                    var groupColumnAlignment = getDefaultAlignment(this.option(\"rtlEnabled\"));\r\n                    var groupColumn = extend({}, columns[groupCellOptions.columnIndex], {\r\n                        command: null,\r\n                        type: null,\r\n                        cssClass: null,\r\n                        width: null,\r\n                        showWhenGrouped: false,\r\n                        alignment: groupColumnAlignment\r\n                    });\r\n                    if (groupCellOptions.colspan > 1) {\r\n                        groupColumn.colspan = groupCellOptions.colspan\r\n                    }\r\n                    if (this._needRenderCell(groupCellOptions.columnIndex + 1, options.columnIndices)) {\r\n                        this._renderCell($row, {\r\n                            value: row.values[row.groupIndex],\r\n                            row: row,\r\n                            rowIndex: rowIndex,\r\n                            column: groupColumn,\r\n                            columnIndex: groupCellOptions.columnIndex + 1,\r\n                            columnIndices: options.columnIndices,\r\n                            change: options.change\r\n                        })\r\n                    }\r\n                },\r\n                _renderRows: function($table, options) {\r\n                    var scrollingMode = this.option(\"scrolling.mode\");\r\n                    this.callBase($table, extend({\r\n                        scrollingMode: scrollingMode\r\n                    }, options));\r\n                    this._checkRowKeys(options.change);\r\n                    this._renderFreeSpaceRow($table, options.change);\r\n                    if (!this._hasHeight) {\r\n                        this.updateFreeSpaceRowHeight($table)\r\n                    }\r\n                },\r\n                _renderDataRowByTemplate($table, options, dataRowTemplate) {\r\n                    var row = options.row;\r\n                    var rowOptions = extend({\r\n                        columns: options.columns\r\n                    }, row);\r\n                    var $tbody = this._createRow(row, \"tbody\");\r\n                    $tbody.appendTo($table);\r\n                    this.renderTemplate($tbody, dataRowTemplate, rowOptions, true, options.change);\r\n                    this._rowPrepared($tbody, rowOptions, options.row)\r\n                },\r\n                _renderRow: function($table, options) {\r\n                    var row = options.row;\r\n                    var rowTemplate = this.option().rowTemplate;\r\n                    var dataRowTemplate = this.option(\"dataRowTemplate\");\r\n                    if (\"data\" === row.rowType && dataRowTemplate) {\r\n                        this._renderDataRowByTemplate($table, options, dataRowTemplate)\r\n                    } else if ((\"data\" === row.rowType || \"group\" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {\r\n                        this.renderTemplate($table, rowTemplate, extend({\r\n                            columns: options.columns\r\n                        }, row), true)\r\n                    } else {\r\n                        this.callBase($table, options)\r\n                    }\r\n                },\r\n                _renderTable: function(options) {\r\n                    var that = this;\r\n                    var $table = that.callBase(options);\r\n                    if (!isDefined(that.getTableElement())) {\r\n                        that.setTableElement($table);\r\n                        that._renderScrollable(true);\r\n                        that.resizeCompleted.add((function resizeCompletedHandler() {\r\n                            var scrollableInstance = that.getScrollable();\r\n                            if (scrollableInstance && that.element().closest(getWindow().document).length) {\r\n                                that.resizeCompleted.remove(resizeCompletedHandler);\r\n                                scrollableInstance._visibilityChanged(true)\r\n                            }\r\n                        }))\r\n                    } else {\r\n                        that._renderScrollable()\r\n                    }\r\n                    return $table\r\n                },\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    if (this.option().rowTemplate || this.option().dataRowTemplate) {\r\n                        $table.appendTo(this.component.$element())\r\n                    }\r\n                    return $table\r\n                },\r\n                _renderCore: function(change) {\r\n                    var $element = this.element();\r\n                    $element.addClass(this.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS), !this.option(\"wordWrapEnabled\"));\r\n                    $element.toggleClass(EMPTY_CLASS, this._dataController.isEmpty());\r\n                    this.setAria(\"role\", \"presentation\", $element);\r\n                    var $table = this._renderTable({\r\n                        change: change\r\n                    });\r\n                    var deferred = this._updateContent($table, change);\r\n                    this.callBase(change);\r\n                    this._lastColumnWidths = null;\r\n                    return deferred\r\n                },\r\n                _getRows: function(change) {\r\n                    return change && change.items || this._dataController.items()\r\n                },\r\n                _getCellOptions: function(options) {\r\n                    var column = options.column;\r\n                    var row = options.row;\r\n                    var data = row.data;\r\n                    var summaryCells = row && row.summaryCells;\r\n                    var value = options.value;\r\n                    var displayValue = gridCoreUtils.getDisplayValue(column, value, data, row.rowType);\r\n                    var parameters = this.callBase(options);\r\n                    parameters.value = value;\r\n                    parameters.oldValue = options.oldValue;\r\n                    parameters.displayValue = displayValue;\r\n                    parameters.row = row;\r\n                    parameters.key = row.key;\r\n                    parameters.data = data;\r\n                    parameters.rowType = row.rowType;\r\n                    parameters.values = row.values;\r\n                    parameters.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\r\n                    parameters.rowIndex = row.rowIndex;\r\n                    parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\r\n                    parameters.resized = column.resizedCallbacks;\r\n                    if (isDefined(column.groupIndex) && !column.command) {\r\n                        var groupingTextsOptions = this.option(\"grouping.texts\");\r\n                        var scrollingMode = this.option(\"scrolling.mode\");\r\n                        if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                            parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\r\n                            parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage\r\n                        }\r\n                    }\r\n                    return parameters\r\n                },\r\n                _setRowsOpacityCore: function($rows, visibleColumns, columnIndex, value) {\r\n                    var columnsController = this._columnsController;\r\n                    var columns = columnsController.getColumns();\r\n                    var column = columns && columns[columnIndex];\r\n                    var columnID = column && column.isBand && column.index;\r\n                    each($rows, (function(rowIndex, row) {\r\n                        if (!$(row).hasClass(GROUP_ROW_CLASS)) {\r\n                            for (var i = 0; i < visibleColumns.length; i++) {\r\n                                if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\r\n                                    $rows.eq(rowIndex).children().eq(i).css({\r\n                                        opacity: value\r\n                                    });\r\n                                    if (!isNumeric(columnID)) {\r\n                                        break\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }))\r\n                },\r\n                _getDevicePixelRatio: function() {\r\n                    return getWindow().devicePixelRatio\r\n                },\r\n                renderNoDataText: gridCoreUtils.renderNoDataText,\r\n                getCellOptions: function(rowIndex, columnIdentifier) {\r\n                    var rowOptions = this._dataController.items()[rowIndex];\r\n                    var cellOptions;\r\n                    var column;\r\n                    if (rowOptions) {\r\n                        if (isString(columnIdentifier)) {\r\n                            column = this._columnsController.columnOption(columnIdentifier)\r\n                        } else {\r\n                            column = this._columnsController.getVisibleColumns()[columnIdentifier]\r\n                        }\r\n                        if (column) {\r\n                            cellOptions = this._getCellOptions({\r\n                                value: column.calculateCellValue(rowOptions.data),\r\n                                rowIndex: rowOptions.rowIndex,\r\n                                row: rowOptions,\r\n                                column: column\r\n                            })\r\n                        }\r\n                    }\r\n                    return cellOptions\r\n                },\r\n                getRow: function(index) {\r\n                    if (index >= 0) {\r\n                        var rows = this._getRowElements();\r\n                        if (rows.length > index) {\r\n                            return $(rows[index])\r\n                        }\r\n                    }\r\n                },\r\n                updateFreeSpaceRowHeight: function($table) {\r\n                    var dataController = this._dataController;\r\n                    var itemCount = dataController.items(true).length;\r\n                    var contentElement = this._findContentElement();\r\n                    var freeSpaceRowElements = this._getFreeSpaceRowElements($table);\r\n                    if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\r\n                        var isFreeSpaceRowVisible = false;\r\n                        if (itemCount > 0) {\r\n                            if (!this._hasHeight) {\r\n                                var freeSpaceRowCount = dataController.pageSize() - itemCount;\r\n                                var scrollingMode = this.option(\"scrolling.mode\");\r\n                                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                                    setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\r\n                                    isFreeSpaceRowVisible = true\r\n                                }\r\n                                if (!isFreeSpaceRowVisible && $table) {\r\n                                    setHeight(freeSpaceRowElements, 0)\r\n                                } else {\r\n                                    freeSpaceRowElements.toggle(isFreeSpaceRowVisible)\r\n                                }\r\n                                this._updateLastRowBorder(isFreeSpaceRowVisible)\r\n                            } else {\r\n                                freeSpaceRowElements.hide();\r\n                                deferUpdate(() => {\r\n                                    var scrollbarWidth = this.getScrollbarWidth(true);\r\n                                    var elementHeightWithoutScrollbar = getHeight(this.element()) - scrollbarWidth;\r\n                                    var contentHeight = getOuterHeight(contentElement);\r\n                                    var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\r\n                                    var rowsHeight = this._getRowsHeight(contentElement.children().first());\r\n                                    var $tableElement = $table || this.getTableElements();\r\n                                    var borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\r\n                                    var heightCorrection = this._getHeightCorrection();\r\n                                    var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\r\n                                    if (showFreeSpaceRow) {\r\n                                        deferRender(() => {\r\n                                            freeSpaceRowElements.css(\"height\", resultHeight);\r\n                                            isFreeSpaceRowVisible = true;\r\n                                            freeSpaceRowElements.show()\r\n                                        })\r\n                                    }\r\n                                    deferRender(() => this._updateLastRowBorder(isFreeSpaceRowVisible))\r\n                                })\r\n                            }\r\n                        } else {\r\n                            freeSpaceRowElements.css(\"height\", 0);\r\n                            freeSpaceRowElements.show();\r\n                            this._updateLastRowBorder(true)\r\n                        }\r\n                    }\r\n                },\r\n                _getHeightCorrection: function() {\r\n                    var isZoomedWebkit = browser.webkit && this._getDevicePixelRatio() >= 2;\r\n                    var isChromeLatest = browser.chrome && browser.version >= 91;\r\n                    var hasExtraBorderTop = browser.mozilla && browser.version >= 70 && !this.option(\"showRowLines\");\r\n                    return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0\r\n                },\r\n                _columnOptionChanged: function(e) {\r\n                    var optionNames = e.optionNames;\r\n                    if (e.changeTypes.grouping) {\r\n                        return\r\n                    }\r\n                    if (optionNames.width || optionNames.visibleWidth) {\r\n                        this.callBase(e);\r\n                        this._fireColumnResizedCallbacks()\r\n                    }\r\n                },\r\n                getScrollable: function() {\r\n                    return this._scrollable\r\n                },\r\n                init: function() {\r\n                    var that = this;\r\n                    var dataController = that.getController(\"data\");\r\n                    that.callBase();\r\n                    that._editorFactoryController = that.getController(\"editorFactory\");\r\n                    that._rowHeight = 0;\r\n                    that._scrollTop = 0;\r\n                    that._scrollLeft = -1;\r\n                    that._scrollRight = 0;\r\n                    that._hasHeight = false;\r\n                    that._contentChanges = [];\r\n                    dataController.loadingChanged.add((function(isLoading, messageText) {\r\n                        that.setLoading(isLoading, messageText)\r\n                    }));\r\n                    dataController.dataSourceChanged.add(() => {\r\n                        if (this._scrollLeft >= 0 && !this._dataController.isLoading()) {\r\n                            this._handleScroll({\r\n                                component: this.getScrollable(),\r\n                                forceUpdateScrollPosition: true,\r\n                                scrollOffset: {\r\n                                    top: this._scrollTop,\r\n                                    left: this._scrollLeft\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                },\r\n                _handleDataChanged: function(change) {\r\n                    switch (change.changeType) {\r\n                        case \"refresh\":\r\n                        case \"prepend\":\r\n                        case \"append\":\r\n                        case \"update\":\r\n                            this.render(null, change);\r\n                            break;\r\n                        default:\r\n                            this._update(change)\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"]\r\n                },\r\n                contentWidth: function() {\r\n                    return getWidth(this.element()) - this.getScrollbarWidth()\r\n                },\r\n                getScrollbarWidth: function(isHorizontal) {\r\n                    var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\r\n                    var scrollbarWidth = 0;\r\n                    if (scrollableContainer) {\r\n                        if (!isHorizontal) {\r\n                            scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0\r\n                        } else {\r\n                            scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\r\n                            scrollbarWidth += (that = this, scrollable = that.getScrollable(), scrollable ? Math.ceil(parseFloat($(scrollable.content()).css(\"paddingBottom\"))) : 0)\r\n                        }\r\n                    }\r\n                    var that, scrollable;\r\n                    return scrollbarWidth > 0 ? scrollbarWidth : 0\r\n                },\r\n                _fireColumnResizedCallbacks: function() {\r\n                    var lastColumnWidths = this._lastColumnWidths || [];\r\n                    var columnWidths = [];\r\n                    var columns = this.getColumns();\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        columnWidths[i] = columns[i].visibleWidth;\r\n                        if (columns[i].resizedCallbacks && !isDefined(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\r\n                            columns[i].resizedCallbacks.fire(columnWidths[i])\r\n                        }\r\n                    }\r\n                    this._lastColumnWidths = columnWidths\r\n                },\r\n                _updateLastRowBorder: function(isFreeSpaceRowVisible) {\r\n                    if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\r\n                        this.element().addClass(LAST_ROW_BORDER)\r\n                    } else {\r\n                        this.element().removeClass(LAST_ROW_BORDER)\r\n                    }\r\n                },\r\n                _updateScrollable: function() {\r\n                    var scrollable = Scrollable.getInstance(this.element());\r\n                    if (scrollable) {\r\n                        scrollable.update();\r\n                        if (scrollable.option(\"useNative\") || !(null !== scrollable && void 0 !== scrollable && scrollable.isRenovated())) {\r\n                            this._updateHorizontalScrollPosition()\r\n                        }\r\n                    }\r\n                },\r\n                _updateHorizontalScrollPosition: function() {\r\n                    var scrollable = this.getScrollable();\r\n                    var scrollLeft = scrollable && scrollable.scrollOffset().left;\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (rtlEnabled) {\r\n                        var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\r\n                        var scrollRight = maxHorizontalScrollOffset - scrollLeft;\r\n                        if (scrollRight !== this._scrollRight) {\r\n                            this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight\r\n                        }\r\n                    }\r\n                    if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\r\n                        scrollable.scrollTo({\r\n                            x: this._scrollLeft\r\n                        })\r\n                    }\r\n                },\r\n                _resizeCore: function() {\r\n                    var that = this;\r\n                    that._fireColumnResizedCallbacks();\r\n                    that._updateRowHeight();\r\n                    deferRender((function() {\r\n                        that._renderScrollable();\r\n                        that.renderNoDataText();\r\n                        that.updateFreeSpaceRowHeight();\r\n                        deferUpdate((function() {\r\n                            that._updateScrollable()\r\n                        }))\r\n                    }))\r\n                },\r\n                scrollTo: function(location) {\r\n                    var $element = this.element();\r\n                    var dxScrollable = $element && Scrollable.getInstance($element);\r\n                    if (dxScrollable) {\r\n                        dxScrollable.scrollTo(location)\r\n                    }\r\n                },\r\n                height: function(_height) {\r\n                    var that = this;\r\n                    var $element = this.element();\r\n                    if (0 === arguments.length) {\r\n                        return $element ? getOuterHeight($element, true) : 0\r\n                    }\r\n                    if (isDefined(_height) && $element) {\r\n                        that.hasHeight(\"auto\" !== _height);\r\n                        setHeight($element, _height)\r\n                    }\r\n                },\r\n                hasHeight: function(_hasHeight) {\r\n                    if (0 === arguments.length) {\r\n                        return !!this._hasHeight\r\n                    }\r\n                    this._hasHeight = _hasHeight\r\n                },\r\n                setLoading: function(isLoading, messageText) {\r\n                    var loadPanel = this._loadPanel;\r\n                    var dataController = this._dataController;\r\n                    var loadPanelOptions = this.option(\"loadPanel\") || {};\r\n                    var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\r\n                    var $element = this.element();\r\n                    if (!hasWindow()) {\r\n                        return\r\n                    }\r\n                    if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\r\n                        this._renderLoadPanel($element, $element.parent());\r\n                        loadPanel = this._loadPanel\r\n                    }\r\n                    if (loadPanel) {\r\n                        var visibilityOptions = {\r\n                            message: messageText || loadPanelOptions.text,\r\n                            animation: animation,\r\n                            visible: isLoading\r\n                        };\r\n                        if (isLoading) {\r\n                            visibilityOptions.position = gridCoreUtils.calculateLoadPanelPosition($element)\r\n                        }\r\n                        clearTimeout(this._hideLoadingTimeoutID);\r\n                        if (loadPanel.option(\"visible\") && !isLoading) {\r\n                            this._hideLoadingTimeoutID = setTimeout((function() {\r\n                                loadPanel.option(visibilityOptions)\r\n                            }), LOADPANEL_HIDE_TIMEOUT)\r\n                        } else {\r\n                            loadPanel.option(visibilityOptions)\r\n                        }\r\n                    }\r\n                },\r\n                setRowsOpacity: function(columnIndex, value) {\r\n                    var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\r\n                    this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value)\r\n                },\r\n                _getCellElementsCore: function(rowIndex) {\r\n                    var $cells = this.callBase.apply(this, arguments);\r\n                    if ($cells) {\r\n                        var groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\r\n                        if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\r\n                            return $cells.slice(0, groupCellIndex + 1)\r\n                        }\r\n                    }\r\n                    return $cells\r\n                },\r\n                _getBoundaryVisibleItemIndex: function(isTop, isFloor) {\r\n                    var itemIndex = 0;\r\n                    var prevOffset = 0;\r\n                    var offset = 0;\r\n                    var viewportBoundary = this._scrollTop;\r\n                    var $contentElement = this._findContentElement();\r\n                    var contentElementOffsetTop = $contentElement && $contentElement.offset().top;\r\n                    var dataController = this.getController(\"data\");\r\n                    var items = dataController.items();\r\n                    var tableElement = this.getTableElement();\r\n                    if (items.length && tableElement) {\r\n                        var rowElements = this._getRowElements(tableElement).filter(\":visible\");\r\n                        if (!isTop) {\r\n                            var height = getOuterHeight(this._hasHeight ? this.element() : getWindow());\r\n                            viewportBoundary += height\r\n                        }\r\n                        for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\r\n                            prevOffset = offset;\r\n                            var $rowElement = $(rowElements).eq(itemIndex);\r\n                            if ($rowElement.length) {\r\n                                offset = $rowElement.offset();\r\n                                offset = (isTop ? offset.top : offset.top + getOuterHeight($rowElement)) - contentElementOffsetTop;\r\n                                if (offset > viewportBoundary) {\r\n                                    if (itemIndex) {\r\n                                        if (isFloor || 2 * viewportBoundary < Math.round(offset + prevOffset)) {\r\n                                            itemIndex--\r\n                                        }\r\n                                    }\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                        if (itemIndex && itemIndex === items.length) {\r\n                            itemIndex--\r\n                        }\r\n                    }\r\n                    return itemIndex\r\n                },\r\n                getTopVisibleItemIndex: function(isFloor) {\r\n                    return this._getBoundaryVisibleItemIndex(true, isFloor)\r\n                },\r\n                getBottomVisibleItemIndex: function(isFloor) {\r\n                    return this._getBoundaryVisibleItemIndex(false, isFloor)\r\n                },\r\n                getTopVisibleRowData: function() {\r\n                    var itemIndex = this.getTopVisibleItemIndex();\r\n                    var items = this._dataController.items();\r\n                    if (items[itemIndex]) {\r\n                        return items[itemIndex].data\r\n                    }\r\n                },\r\n                _scrollToElement: function($element, offset) {\r\n                    var scrollable = this.getScrollable();\r\n                    scrollable && scrollable.scrollToElement($element, offset)\r\n                },\r\n                optionChanged: function(args) {\r\n                    this.callBase(args);\r\n                    switch (args.name) {\r\n                        case \"wordWrapEnabled\":\r\n                        case \"showColumnLines\":\r\n                        case \"showRowLines\":\r\n                        case \"rowAlternationEnabled\":\r\n                        case \"rowTemplate\":\r\n                        case \"dataRowTemplate\":\r\n                        case \"twoWayBindingEnabled\":\r\n                            this._invalidate(true, true);\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"scrolling\":\r\n                            this._rowHeight = null;\r\n                            this._tableElement = null;\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            this._rowHeight = null;\r\n                            this._tableElement = null;\r\n                            break;\r\n                        case \"loadPanel\":\r\n                            this._tableElement = null;\r\n                            this._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"noDataText\":\r\n                            this.renderNoDataText();\r\n                            args.handled = true\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    this.callBase();\r\n                    clearTimeout(this._hideLoadingTimeoutID);\r\n                    this._scrollable && this._scrollable.dispose()\r\n                },\r\n                setScrollerSpacing: function() {},\r\n                _restoreErrorRow: function() {}\r\n            };\r\n            return members\r\n        }())\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}