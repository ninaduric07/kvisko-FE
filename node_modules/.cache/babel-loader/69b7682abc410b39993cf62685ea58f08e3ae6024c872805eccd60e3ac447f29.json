{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/validating/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getWidth, getOuterHeight, setHeight } from \"../../../../core/utils/size\";\nimport $ from \"../../../../core/renderer\";\nimport eventsEngine from \"../../../../events/core/events_engine\";\nimport { createObjectWithChanges } from \"../../../../data/array_utils\";\nimport { deferUpdate, equalByValue, getKeyHash } from \"../../../../core/utils/common\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { isDefined, isEmptyObject, isObject } from \"../../../../core/utils/type\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { focused } from \"../../../../ui/widget/selectors\";\nimport messageLocalization from \"../../../../localization/message\";\nimport Button from \"../../../../ui/button\";\nimport pointerEvents from \"../../../../events/pointer\";\nimport ValidationEngine from \"../../../../ui/validation_engine\";\nimport Validator from \"../../../../ui/validator\";\nimport Overlay from \"../../../../ui/overlay/ui.overlay\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport { Deferred, when, fromPromise } from \"../../../../core/utils/deferred\";\nimport LoadIndicator from \"../../../../ui/load_indicator\";\nimport { encodeHtml } from \"../../../../core/utils/string\";\nimport browser from \"../../../../core/utils/browser\";\nimport gridCoreUtils from \"../module_utils\";\nimport modules from \"../modules\";\nconst INVALIDATE_CLASS = \"invalid\";\nconst REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nconst INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\nconst WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\nconst INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\nconst REVERT_BUTTON_CLASS = \"dx-revert-button\";\nconst VALIDATOR_CLASS = \"validator\";\nconst PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\nconst VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\nconst CONTENT_CLASS = \"content\";\nconst INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nconst PADDING_BETWEEN_TOOLTIPS = 2;\nconst EDIT_MODE_ROW = \"row\";\nconst EDIT_MODE_FORM = \"form\";\nconst EDIT_MODE_BATCH = \"batch\";\nconst EDIT_MODE_CELL = \"cell\";\nconst EDIT_MODE_POPUP = \"popup\";\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\nconst FORM_BASED_MODES = [\"popup\", \"form\"];\nconst COMMAND_TRANSPARENT = \"transparent\";\nconst VALIDATION_STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\nconst EDIT_DATA_INSERT_TYPE = \"insert\";\nconst EDIT_DATA_REMOVE_TYPE = \"remove\";\nconst VALIDATION_CANCELLED = \"cancel\";\nconst validationResultIsValid = function (result) {\n  return isDefined(result) && \"cancel\" !== result;\n};\nconst cellValueShouldBeValidated = function (value, rowOptions) {\n  return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow;\n};\nconst ValidatingController = modules.Controller.inherit({\n  init() {\n    this._editingController = this.getController(\"editing\");\n    this.createAction(\"onRowValidating\");\n    if (!this._validationState) {\n      this.initValidationState();\n    }\n  },\n  initValidationState() {\n    this._validationState = [];\n    this._validationStateCache = {};\n  },\n  _rowIsValidated(change) {\n    const validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n    return !!validationData && !!validationData.validated;\n  },\n  _getValidationData(key, create) {\n    const keyHash = getKeyHash(key);\n    const isObjectKeyHash = isObject(keyHash);\n    let validationData;\n    if (isObjectKeyHash) {\n      validationData = this._validationState.filter(data => equalByValue(data.key, key))[0];\n    } else {\n      validationData = this._validationStateCache[keyHash];\n    }\n    if (!validationData && create) {\n      validationData = {\n        key: key,\n        isValid: true\n      };\n      this._validationState.push(validationData);\n      if (!isObjectKeyHash) {\n        this._validationStateCache[keyHash] = validationData;\n      }\n    }\n    return validationData;\n  },\n  _getBrokenRules(validationData, validationResults) {\n    let brokenRules;\n    if (validationResults) {\n      brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule];\n    } else {\n      brokenRules = validationData.brokenRules || [];\n    }\n    return brokenRules;\n  },\n  _rowValidating(validationData, validationResults) {\n    const deferred = new Deferred();\n    const change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n    const brokenRules = this._getBrokenRules(validationData, validationResults);\n    const isValid = validationResults ? validationResults.isValid : validationData.isValid;\n    const parameters = {\n      brokenRules: brokenRules,\n      isValid: isValid,\n      key: change.key,\n      newData: change.data,\n      oldData: this._editingController._getOldData(change.key),\n      promise: null,\n      errorText: this.getHiddenValidatorsErrorText(brokenRules)\n    };\n    this.executeAction(\"onRowValidating\", parameters);\n    when(fromPromise(parameters.promise)).always(() => {\n      validationData.isValid = parameters.isValid;\n      validationData.errorText = parameters.errorText;\n      deferred.resolve(parameters);\n    });\n    return deferred.promise();\n  },\n  getHiddenValidatorsErrorText(brokenRules) {\n    const brokenRulesMessages = [];\n    each(brokenRules, (_, brokenRule) => {\n      const {\n        column: column\n      } = brokenRule;\n      const isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\n      const isVisibleColumn = column && column.visible;\n      if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\n        brokenRulesMessages.push(brokenRule.message);\n      }\n    });\n    return brokenRulesMessages.join(\", \");\n  },\n  validate(isFull) {\n    let isValid = true;\n    const editingController = this._editingController;\n    const deferred = new Deferred();\n    const completeList = [];\n    const editMode = editingController.getEditMode();\n    isFull = isFull || \"row\" === editMode;\n    if (this._isValidationInProgress) {\n      return deferred.resolve(false).promise();\n    }\n    this._isValidationInProgress = true;\n    if (isFull) {\n      editingController.addDeferred(deferred);\n      const changes = editingController.getChanges();\n      each(changes, (index, _ref) => {\n        let {\n          type: type,\n          key: key\n        } = _ref;\n        if (\"remove\" !== type) {\n          const validationData = this._getValidationData(key, true);\n          const validationResult = this.validateGroup(validationData);\n          completeList.push(validationResult);\n          validationResult.done(validationResult => {\n            validationData.validated = true;\n            isValid = isValid && validationResult.isValid;\n          });\n        }\n      });\n    } else if (this._currentCellValidator) {\n      const validationResult = this.validateGroup(this._currentCellValidator._findGroup());\n      completeList.push(validationResult);\n      validationResult.done(validationResult => {\n        isValid = validationResult.isValid;\n      });\n    }\n    when(...completeList).done(() => {\n      this._isValidationInProgress = false;\n      deferred.resolve(isValid);\n    });\n    return deferred.promise();\n  },\n  validateGroup(validationData) {\n    const result = new Deferred();\n    const validateGroup = validationData && ValidationEngine.getGroupConfig(validationData);\n    let validationResult;\n    if (null === validateGroup || void 0 === validateGroup ? void 0 : validateGroup.validators.length) {\n      this.resetRowValidationResults(validationData);\n      validationResult = ValidationEngine.validateGroup(validationData);\n    }\n    when((null === validationResult || void 0 === validationResult ? void 0 : validationResult.complete) || validationResult).done(validationResult => {\n      when(this._rowValidating(validationData, validationResult)).done(result.resolve);\n    });\n    return result.promise();\n  },\n  isRowDataModified: change => !isEmptyObject(change.data),\n  updateValidationState(change) {\n    const editMode = this._editingController.getEditMode();\n    const {\n      key: key\n    } = change;\n    const validationData = this._getValidationData(key, true);\n    if (!FORM_BASED_MODES.includes(editMode)) {\n      if (\"insert\" === change.type && !this.isRowDataModified(change)) {\n        validationData.isValid = true;\n        return;\n      }\n      this.setDisableApplyValidationResults(true);\n      const groupConfig = ValidationEngine.getGroupConfig(validationData);\n      if (groupConfig) {\n        const validationResult = ValidationEngine.validateGroup(validationData);\n        when(validationResult.complete || validationResult).done(validationResult => {\n          validationData.isValid = validationResult.isValid;\n          validationData.brokenRules = validationResult.brokenRules;\n        });\n      } else if (!validationData.brokenRules || !validationData.brokenRules.length) {\n        validationData.isValid = true;\n      }\n      this.setDisableApplyValidationResults(false);\n    } else {\n      validationData.isValid = true;\n    }\n  },\n  setValidator(validator) {\n    this._currentCellValidator = validator;\n  },\n  renderCellPendingIndicator($container) {\n    let $indicator = $container.find(\".dx-pending-indicator\");\n    if (!$indicator.length) {\n      const $indicatorContainer = $container;\n      $indicator = $(\"<div>\").appendTo($indicatorContainer).addClass(\"dx-pending-indicator\");\n      this._createComponent($indicator, LoadIndicator);\n      $container.addClass(\"dx-validation-pending\");\n    }\n  },\n  disposeCellPendingIndicator($container) {\n    const $indicator = $container.find(\".dx-pending-indicator\");\n    if ($indicator.length) {\n      const indicator = LoadIndicator.getInstance($indicator);\n      if (indicator) {\n        indicator.dispose();\n        indicator.$element().remove();\n      }\n      $container.removeClass(\"dx-validation-pending\");\n    }\n  },\n  validationStatusChanged(result) {\n    const {\n      validator: validator\n    } = result;\n    const validationGroup = validator.option(\"validationGroup\");\n    const {\n      column: column\n    } = validator.option(\"dataGetter\")();\n    this.updateCellValidationResult({\n      rowKey: validationGroup.key,\n      columnIndex: column.index,\n      validationResult: result\n    });\n  },\n  validatorInitialized(arg) {\n    arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\n    arg.component.on(\"validated\", this.validationStatusChanged.bind(this));\n  },\n  validatorDisposing(arg) {\n    const validator = arg.component;\n    const validationGroup = validator.option(\"validationGroup\");\n    const {\n      column: column\n    } = validator.option(\"dataGetter\")();\n    const result = this.getCellValidationResult({\n      rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,\n      columnIndex: column.index\n    });\n    if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\n      this.cancelCellValidationResult({\n        change: validationGroup,\n        columnIndex: column.index\n      });\n    }\n  },\n  applyValidationResult($container, result) {\n    const {\n      validator: validator\n    } = result;\n    const validationGroup = validator.option(\"validationGroup\");\n    const {\n      column: column\n    } = validator.option(\"dataGetter\")();\n    result.brokenRules && result.brokenRules.forEach(rule => {\n      rule.columnIndex = column.index;\n      rule.column = column;\n    });\n    if ($container) {\n      const validationResult = this.getCellValidationResult({\n        rowKey: validationGroup.key,\n        columnIndex: column.index\n      });\n      const requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\n      if (this._disableApplyValidationResults || requestIsDisabled) {\n        return;\n      }\n      if (result.status === VALIDATION_STATUS.invalid) {\n        const $focus = $container.find(\":focus\");\n        if (!focused($focus)) {\n          eventsEngine.trigger($focus, \"focus\");\n          eventsEngine.trigger($focus, pointerEvents.down);\n        }\n      }\n      const editor = !column.editCellTemplate && this.getController(\"editorFactory\").getEditorInstance($container);\n      if (result.status === VALIDATION_STATUS.pending) {\n        if (editor) {\n          editor.option(\"validationStatus\", VALIDATION_STATUS.pending);\n        } else {\n          this.renderCellPendingIndicator($container);\n        }\n      } else if (editor) {\n        editor.option(\"validationStatus\", VALIDATION_STATUS.valid);\n      } else {\n        this.disposeCellPendingIndicator($container);\n      }\n      $container.toggleClass(this.addWidgetPrefix(\"invalid\"), result.status === VALIDATION_STATUS.invalid);\n    }\n  },\n  _syncInternalEditingData(parameters) {\n    var _a;\n    const editingController = this._editingController;\n    const change = editingController.getChangeByKey(parameters.key);\n    const oldDataFromState = editingController._getOldData(parameters.key);\n    const oldData = null === (_a = parameters.row) || void 0 === _a ? void 0 : _a.oldData;\n    if (change && oldData && !oldDataFromState) {\n      editingController._addInternalData({\n        key: parameters.key,\n        oldData: oldData\n      });\n    }\n  },\n  createValidator(parameters, $container) {\n    var _a, _b;\n    const editingController = this._editingController;\n    const {\n      column: column\n    } = parameters;\n    let {\n      showEditorAlways: showEditorAlways\n    } = column;\n    if (isDefined(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\n      return;\n    }\n    const editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());\n    let needCreateValidator = editIndex > -1;\n    if (!needCreateValidator) {\n      if (!showEditorAlways) {\n        const columnsController = this.getController(\"columns\");\n        const visibleColumns = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getVisibleColumns()) || [];\n        showEditorAlways = visibleColumns.some(column => column.showEditorAlways);\n      }\n      const isEditRow = equalByValue(this.option(\"editing.editRowKey\"), parameters.key);\n      const isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\n        row: parameters.row\n      });\n      needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;\n      if (isCellOrBatchEditingAllowed && showEditorAlways) {\n        editingController._addInternalData({\n          key: parameters.key,\n          oldData: null !== (_b = null === (_a = parameters.row) || void 0 === _a ? void 0 : _a.oldData) && void 0 !== _b ? _b : parameters.data\n        });\n      }\n    }\n    if (needCreateValidator) {\n      if ($container && !$container.length) {\n        errors.log(\"E1050\");\n        return;\n      }\n      this._syncInternalEditingData(parameters);\n      const validationData = this._getValidationData(parameters.key, true);\n      const getValue = () => {\n        const change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n        const value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});\n        return void 0 !== value ? value : parameters.value;\n      };\n      const useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\n      $container && $container.addClass(this.addWidgetPrefix(\"validator\"));\n      const validator = new Validator($container || $(\"<div>\"), {\n        name: column.caption,\n        validationRules: extend(true, [], column.validationRules),\n        validationGroup: validationData,\n        adapter: useDefaultValidator ? null : {\n          getValue: getValue,\n          applyValidationResults: result => {\n            this.applyValidationResult($container, result);\n          }\n        },\n        dataGetter() {\n          const key = null === validationData || void 0 === validationData ? void 0 : validationData.key;\n          const change = editingController.getChangeByKey(key);\n          const oldData = editingController._getOldData(key);\n          return {\n            data: createObjectWithChanges(oldData, null === change || void 0 === change ? void 0 : change.data),\n            column: column\n          };\n        },\n        onInitialized: this.validatorInitialized.bind(this),\n        onDisposing: this.validatorDisposing.bind(this)\n      });\n      if (useDefaultValidator) {\n        const adapter = validator.option(\"adapter\");\n        if (adapter) {\n          const originBypass = adapter.bypass;\n          const defaultAdapterBypass = () => parameters.row.isNewRow && !this._isValidationInProgress && !editingController.isCellModified(parameters);\n          adapter.getValue = getValue;\n          adapter.validationRequestsCallbacks = [];\n          adapter.bypass = () => originBypass.call(adapter) || defaultAdapterBypass();\n        }\n      }\n      return validator;\n    }\n    return;\n  },\n  setDisableApplyValidationResults(flag) {\n    this._disableApplyValidationResults = flag;\n  },\n  getDisableApplyValidationResults() {\n    return this._disableApplyValidationResults;\n  },\n  isCurrentValidatorProcessing(_ref2) {\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref2;\n    return this._currentCellValidator && equalByValue(this._currentCellValidator.option(\"validationGroup\").key, rowKey) && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex;\n  },\n  validateCell(validator) {\n    const cellParams = {\n      rowKey: validator.option(\"validationGroup\").key,\n      columnIndex: validator.option(\"dataGetter\")().column.index\n    };\n    let validationResult = this.getCellValidationResult(cellParams);\n    const stateRestored = validationResultIsValid(validationResult);\n    const adapter = validator.option(\"adapter\");\n    if (!stateRestored) {\n      validationResult = validator.validate();\n    } else {\n      const currentCellValue = adapter.getValue();\n      if (!equalByValue(currentCellValue, validationResult.value)) {\n        validationResult = validator.validate();\n      }\n    }\n    const deferred = new Deferred();\n    if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\n      this.updateCellValidationResult(cellParams);\n      adapter.applyValidationResults(validationResult);\n    }\n    when(validationResult.complete || validationResult).done(validationResult => {\n      stateRestored && adapter.applyValidationResults(validationResult);\n      deferred.resolve(validationResult);\n    });\n    return deferred.promise();\n  },\n  updateCellValidationResult(_ref3) {\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex,\n      validationResult: validationResult\n    } = _ref3;\n    const validationData = this._getValidationData(rowKey);\n    if (!validationData) {\n      return;\n    }\n    if (!validationData.validationResults) {\n      validationData.validationResults = {};\n    }\n    let result;\n    if (validationResult) {\n      result = extend({}, validationResult);\n      validationData.validationResults[columnIndex] = result;\n      if (validationResult.status === VALIDATION_STATUS.pending) {\n        if (\"cell\" === this._editingController.getEditMode()) {\n          result.deferred = new Deferred();\n          result.complete.always(() => {\n            result.deferred.resolve();\n          });\n          this._editingController.addDeferred(result.deferred);\n        }\n        if (this._disableApplyValidationResults) {\n          result.disabledPendingId = validationResult.id;\n          return;\n        }\n      }\n    } else {\n      result = validationData.validationResults[columnIndex];\n    }\n    if (result && result.disabledPendingId) {\n      delete result.disabledPendingId;\n    }\n  },\n  getCellValidationResult(_ref4) {\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref4;\n    var _a;\n    const validationData = this._getValidationData(rowKey, true);\n    return null === (_a = null === validationData || void 0 === validationData ? void 0 : validationData.validationResults) || void 0 === _a ? void 0 : _a[columnIndex];\n  },\n  removeCellValidationResult(_ref5) {\n    let {\n      change: change,\n      columnIndex: columnIndex\n    } = _ref5;\n    const validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n    if (validationData && validationData.validationResults) {\n      this.cancelCellValidationResult({\n        change: change,\n        columnIndex: columnIndex\n      });\n      delete validationData.validationResults[columnIndex];\n    }\n  },\n  cancelCellValidationResult(_ref6) {\n    let {\n      change: change,\n      columnIndex: columnIndex\n    } = _ref6;\n    const validationData = this._getValidationData(change.key);\n    if (change && validationData.validationResults) {\n      const result = validationData.validationResults[columnIndex];\n      if (result) {\n        result.deferred && result.deferred.reject(\"cancel\");\n        validationData.validationResults[columnIndex] = \"cancel\";\n      }\n    }\n  },\n  resetRowValidationResults(validationData) {\n    if (validationData) {\n      validationData.validationResults && delete validationData.validationResults;\n      delete validationData.validated;\n    }\n  },\n  isInvalidCell(_ref7) {\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref7;\n    const result = this.getCellValidationResult({\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    });\n    return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid;\n  },\n  getCellValidator(_ref8) {\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref8;\n    const validationData = this._getValidationData(rowKey);\n    const groupConfig = validationData && ValidationEngine.getGroupConfig(validationData);\n    const validators = groupConfig && groupConfig.validators;\n    return validators && validators.filter(v => {\n      const {\n        column: column\n      } = v.option(\"dataGetter\")();\n      return column ? column.index === columnIndex : false;\n    })[0];\n  },\n  setCellValidationStatus(cellOptions) {\n    const validationResult = this.getCellValidationResult({\n      rowKey: cellOptions.key,\n      columnIndex: cellOptions.column.index\n    });\n    if (isDefined(validationResult)) {\n      cellOptions.validationStatus = \"cancel\" !== validationResult ? validationResult.status : \"cancel\";\n    } else {\n      delete cellOptions.validationStatus;\n    }\n  }\n});\nexport const validatingModule = {\n  defaultOptions: () => ({\n    editing: {\n      texts: {\n        validationCancelChanges: messageLocalization.format(\"dxDataGrid-validationCancelChanges\")\n      }\n    }\n  }),\n  controllers: {\n    validating: ValidatingController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        _addChange(changeParams) {\n          const change = this.callBase.apply(this, arguments);\n          const validatingController = this.getController(\"validating\");\n          if (change && \"remove\" !== changeParams.type) {\n            validatingController.updateValidationState(change);\n          }\n          return change;\n        },\n        _handleChangesChange(args) {\n          this.callBase.apply(this, arguments);\n          const validatingController = this.getController(\"validating\");\n          args.value.forEach(change => {\n            if (void 0 === validatingController._getValidationData(change.key)) {\n              validatingController.updateValidationState(change);\n            }\n          });\n        },\n        _updateRowAndPageIndices() {\n          const that = this;\n          const startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\n          let rowIndex = startInsertIndex;\n          each(that.getChanges(), (_, _ref9) => {\n            let {\n              key: key,\n              type: type\n            } = _ref9;\n            const validationData = this.getController(\"validating\")._getValidationData(key);\n            if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {\n              validationData.pageIndex = that._pageIndex;\n              if (\"insert\" === type) {\n                validationData.rowIndex = startInsertIndex;\n              } else {\n                validationData.rowIndex = rowIndex;\n              }\n              rowIndex++;\n            }\n          });\n        },\n        _getValidationGroupsInForm(detailOptions) {\n          const validatingController = this.getController(\"validating\");\n          const validationData = validatingController._getValidationData(detailOptions.key, true);\n          return {\n            validationGroup: validationData\n          };\n        },\n        _validateEditFormAfterUpdate(row, isCustomSetCellValue) {\n          if (isCustomSetCellValue && this._editForm) {\n            this._editForm.validate();\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _prepareEditCell(params) {\n          const isNotCanceled = this.callBase.apply(this, arguments);\n          const validatingController = this.getController(\"validating\");\n          if (isNotCanceled && params.column.showEditorAlways) {\n            validatingController.updateValidationState({\n              key: params.key\n            });\n          }\n          return isNotCanceled;\n        },\n        processItems(items, changeType) {\n          const changes = this.getChanges();\n          const dataController = this.getController(\"data\");\n          const validatingController = this.getController(\"validating\");\n          items = this.callBase(items, changeType);\n          const itemsCount = items.length;\n          const addInValidItem = function (change, validationData) {\n            const data = {\n              key: change.key\n            };\n            const index = function (change, items) {\n              let index = -1;\n              const isInsert = \"insert\" === change.type;\n              const {\n                key: key\n              } = change;\n              each(items, (i, item) => {\n                if (equalByValue(key, isInsert ? item.key : dataController.keyOf(item))) {\n                  index = i;\n                  return false;\n                }\n                return;\n              });\n              return index;\n            }(change, items);\n            if (index >= 0) {\n              return;\n            }\n            validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;\n            const {\n              rowIndex: rowIndex\n            } = validationData;\n            data[INSERT_INDEX] = 1;\n            items.splice(rowIndex, 0, data);\n          };\n          if (\"batch\" === this.getEditMode() && \"prepend\" !== changeType && \"append\" !== changeType) {\n            changes.forEach(change => {\n              const {\n                key: key\n              } = change;\n              const validationData = validatingController._getValidationData(key);\n              if (validationData && change.type && validationData.pageIndex === this._pageIndex && (null === change || void 0 === change ? void 0 : change.pageIndex) !== this._pageIndex) {\n                addInValidItem(change, validationData);\n              }\n            });\n          }\n          return items;\n        },\n        processDataItem(item) {\n          const isInserted = item.data[INSERT_INDEX];\n          const key = isInserted ? item.data.key : item.key;\n          const editMode = this.getEditMode();\n          if (\"batch\" === editMode && isInserted && key) {\n            const changes = this.getChanges();\n            const editIndex = gridCoreUtils.getIndexByKey(key, changes);\n            if (editIndex >= 0) {\n              const change = changes[editIndex];\n              if (\"insert\" !== change.type) {\n                const oldData = this._getOldData(change.key);\n                item.data = extend(true, {}, oldData, change.data);\n                item.key = key;\n              }\n            }\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _createInvisibleColumnValidators(changes) {\n          const that = this;\n          const validatingController = this.getController(\"validating\");\n          const columnsController = this.getController(\"columns\");\n          const columns = columnsController.getColumns();\n          const invisibleColumns = columnsController.getInvisibleColumns().filter(column => !column.isBand);\n          const groupColumns = columnsController.getGroupColumns().filter(column => !column.showWhenGrouped && -1 === invisibleColumns.indexOf(column));\n          const invisibleColumnValidators = [];\n          const isCellVisible = (column, rowKey) => this._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;\n          invisibleColumns.push(...groupColumns);\n          if (!FORM_BASED_MODES.includes(this.getEditMode())) {\n            each(columns, (_, column) => {\n              changes.forEach(change => {\n                let data;\n                if (isCellVisible(column, change.key)) {\n                  return;\n                }\n                if (\"insert\" === change.type) {\n                  data = change.data;\n                } else if (\"update\" === change.type) {\n                  const oldData = that._getOldData(change.key);\n                  data = createObjectWithChanges(oldData, change.data);\n                }\n                if (data) {\n                  const validator = validatingController.createValidator({\n                    column: column,\n                    key: change.key,\n                    value: column.calculateCellValue(data)\n                  });\n                  if (validator) {\n                    invisibleColumnValidators.push(validator);\n                  }\n                }\n              });\n            });\n          }\n          return function () {\n            invisibleColumnValidators.forEach(validator => {\n              validator.dispose();\n            });\n          };\n        },\n        _beforeSaveEditData(change, editIndex) {\n          let result = this.callBase.apply(this, arguments);\n          const validatingController = this.getController(\"validating\");\n          const validationData = validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n          if (change) {\n            const isValid = \"remove\" === change.type || validationData.isValid;\n            result = result || !isValid;\n          } else {\n            const disposeValidators = this._createInvisibleColumnValidators(this.getChanges());\n            result = new Deferred();\n            this.executeOperation(result, () => {\n              validatingController.validate(true).done(isFullValid => {\n                disposeValidators();\n                this._updateRowAndPageIndices();\n                switch (this.getEditMode()) {\n                  case \"cell\":\n                    if (!isFullValid) {\n                      this._focusEditingCell();\n                    }\n                    break;\n                  case \"batch\":\n                    if (!isFullValid) {\n                      this._resetEditRowKey();\n                      this._resetEditColumnName();\n                      this.getController(\"data\").updateItems();\n                    }\n                }\n                result.resolve(!isFullValid);\n              });\n            });\n          }\n          return result.promise ? result.promise() : result;\n        },\n        _beforeEditCell(rowIndex, columnIndex, item) {\n          const result = this.callBase(rowIndex, columnIndex, item);\n          if (\"cell\" === this.getEditMode()) {\n            const $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\n            const validator = $cell && $cell.data(\"dxValidator\");\n            const rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\n            const value = validator && validator.option(\"adapter\").getValue();\n            if (validator && cellValueShouldBeValidated(value, rowOptions)) {\n              const validatingController = this.getController(\"validating\");\n              const deferred = new Deferred();\n              when(validatingController.validateCell(validator), result).done((validationResult, result) => {\n                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result);\n              });\n              return deferred.promise();\n            }\n            if (!validator) {\n              return result;\n            }\n          }\n        },\n        _afterSaveEditData(cancel) {\n          let $firstErrorRow;\n          const isCellEditMode = \"cell\" === this.getEditMode();\n          each(this.getChanges(), (_, change) => {\n            const $errorRow = this._showErrorRow(change);\n            $firstErrorRow = $firstErrorRow || $errorRow;\n          });\n          if ($firstErrorRow) {\n            const scrollable = this._rowsView.getScrollable();\n            if (scrollable) {\n              scrollable.update();\n              scrollable.scrollToElement($firstErrorRow);\n            }\n          }\n          if (cancel && isCellEditMode && this._needUpdateRow()) {\n            const editRowIndex = this.getEditRowIndex();\n            this._dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [editRowIndex]\n            });\n            this._focusEditingCell();\n          } else if (!cancel) {\n            let shouldResetValidationState = true;\n            if (isCellEditMode) {\n              const columns = this.getController(\"columns\").getColumns();\n              const columnsWithValidatingEditors = columns.filter(col => {\n                var _a;\n                return col.showEditorAlways && (null === (_a = col.validationRules) || void 0 === _a ? void 0 : _a.length) > 0;\n              }).length > 0;\n              shouldResetValidationState = !columnsWithValidatingEditors;\n            }\n            if (shouldResetValidationState) {\n              this.getController(\"validating\").initValidationState();\n            }\n          }\n        },\n        _handleDataChanged(args) {\n          const validationState = this.getController(\"validating\")._validationState;\n          if (\"standard\" === this.option(\"scrolling.mode\")) {\n            this.resetRowAndPageIndices();\n          }\n          if (\"prepend\" === args.changeType) {\n            each(validationState, (_, validationData) => {\n              validationData.rowIndex += args.items.length;\n            });\n          }\n          this.callBase(args);\n        },\n        resetRowAndPageIndices() {\n          const validationState = this.getController(\"validating\")._validationState;\n          each(validationState, (_, validationData) => {\n            if (validationData.pageIndex !== this._pageIndex) {\n              delete validationData.pageIndex;\n              delete validationData.rowIndex;\n            }\n          });\n        },\n        _beforeCancelEditData() {\n          this.getController(\"validating\").initValidationState();\n          this.callBase();\n        },\n        _showErrorRow(change) {\n          let $popupContent;\n          const errorHandling = this.getController(\"errorHandling\");\n          const items = this.getController(\"data\").items();\n          const rowIndex = this.getIndexByKey(change.key, items);\n          const validationData = this.getController(\"validating\")._getValidationData(change.key);\n          if (!(null === validationData || void 0 === validationData ? void 0 : validationData.isValid) && (null === validationData || void 0 === validationData ? void 0 : validationData.errorText) && rowIndex >= 0) {\n            $popupContent = this.getPopupContent();\n            return errorHandling && errorHandling.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent);\n          }\n        },\n        updateFieldValue(e) {\n          const validatingController = this.getController(\"validating\");\n          const deferred = new Deferred();\n          validatingController.removeCellValidationResult({\n            change: this.getChangeByKey(e.key),\n            columnIndex: e.column.index\n          });\n          this.callBase.apply(this, arguments).done(() => {\n            const currentValidator = validatingController.getCellValidator({\n              rowKey: e.key,\n              columnIndex: e.column.index\n            });\n            when(currentValidator && validatingController.validateCell(currentValidator)).done(validationResult => {\n              this.getController(\"editorFactory\").refocus();\n              deferred.resolve(validationResult);\n            });\n          });\n          return deferred.promise();\n        },\n        highlightDataCell($cell, parameters) {\n          this.callBase.apply(this, arguments);\n          const validatingController = this.getController(\"validating\");\n          validatingController.setCellValidationStatus(parameters);\n          const isEditableCell = !!parameters.setValue;\n          const cellModified = this.isCellModified(parameters);\n          const isValidated = isDefined(parameters.validationStatus);\n          const needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);\n          if (needValidation) {\n            const validator = $cell.data(\"dxValidator\");\n            if (validator) {\n              when(this.getController(\"validating\").validateCell(validator)).done(() => {\n                validatingController.setCellValidationStatus(parameters);\n              });\n            }\n          }\n        },\n        getChangeByKey(key) {\n          const changes = this.getChanges();\n          return changes[gridCoreUtils.getIndexByKey(key, changes)];\n        },\n        isCellModified(parameters) {\n          const cellModified = this.callBase(parameters);\n          const change = this.getChangeByKey(parameters.key);\n          const isCellInvalid = !!parameters.row && this.getController(\"validating\").isInvalidCell({\n            rowKey: parameters.key,\n            columnIndex: parameters.column.index\n          });\n          return cellModified || this.getController(\"validating\")._rowIsValidated(change) && isCellInvalid;\n        }\n      },\n      editorFactory: {\n        _showRevertButton($container) {\n          var _a;\n          let $tooltipElement = null === (_a = this._revertTooltip) || void 0 === _a ? void 0 : _a.$element();\n          if (!$container || !$container.length) {\n            null === $tooltipElement || void 0 === $tooltipElement ? void 0 : $tooltipElement.remove();\n            this._revertTooltip = void 0;\n            return;\n          }\n          if ($container.find($tooltipElement).length) {\n            return;\n          }\n          const $overlayContainer = $container.closest(\".\" + this.addWidgetPrefix(\"content\"));\n          const revertTooltipClass = this.addWidgetPrefix(\"revert-tooltip\");\n          null === $tooltipElement || void 0 === $tooltipElement ? void 0 : $tooltipElement.remove();\n          $tooltipElement = $(\"<div>\").addClass(revertTooltipClass).appendTo($container);\n          const tooltipOptions = {\n            animation: null,\n            visible: true,\n            width: \"auto\",\n            height: \"auto\",\n            shading: false,\n            container: $overlayContainer,\n            propagateOutsideClick: true,\n            hideOnOutsideClick: false,\n            wrapperAttr: {\n              class: revertTooltipClass\n            },\n            contentTemplate: () => {\n              const $buttonElement = $(\"<div>\").addClass(\"dx-revert-button\");\n              const buttonOptions = {\n                icon: \"revert\",\n                hint: this.option(\"editing.texts.validationCancelChanges\"),\n                onClick: () => {\n                  this._editingController.cancelEditData();\n                }\n              };\n              return new Button($buttonElement, buttonOptions).$element();\n            },\n            position: {\n              my: \"left top\",\n              at: \"right top\",\n              offset: \"1 0\",\n              collision: \"flip\",\n              boundaryOffset: \"0 0\",\n              boundary: this._rowsView.element(),\n              of: $container\n            },\n            onPositioned: this._positionedHandler.bind(this)\n          };\n          this._revertTooltip = new Overlay($tooltipElement, tooltipOptions);\n        },\n        _hideFixedGroupCell($cell, overlayOptions) {\n          let $nextFixedRowElement;\n          let $groupCellElement;\n          const isFixedColumns = this._rowsView.isFixedColumns();\n          const isFormOrPopupEditMode = this._editingController.isFormOrPopupEditMode();\n          if (isFixedColumns && !isFormOrPopupEditMode) {\n            const nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\n            if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\n              $nextFixedRowElement = $(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\n              $groupCellElement = $nextFixedRowElement.find(\".dx-group-cell\");\n              if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\n                $groupCellElement.css(\"visibility\", \"hidden\");\n                overlayOptions.onDisposing = function () {\n                  $groupCellElement.css(\"visibility\", \"\");\n                };\n              }\n            }\n          }\n        },\n        _positionedHandler(e, isOverlayVisible) {\n          if (!e.component.__skipPositionProcessing) {\n            const isRevertButton = $(e.element).hasClass(this.addWidgetPrefix(\"revert-tooltip\"));\n            const needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\n            const normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\n            e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\n            if (normalizedPosition) {\n              e.component.option(normalizedPosition);\n            } else if (needRepaint) {\n              e.component.repaint();\n            }\n          }\n        },\n        _showValidationMessage($cell, messages, alignment) {\n          const editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\n          const isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\n          const myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment;\n          const atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\n          const $overlayContainer = $cell.closest(\".\" + this.addWidgetPrefix(\"content\"));\n          let errorMessageText = \"\";\n          messages && messages.forEach(message => {\n            errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + encodeHtml(message);\n          });\n          const invalidMessageClass = this.addWidgetPrefix(\"invalid-message\");\n          this._rowsView.element().find(\".\" + invalidMessageClass).remove();\n          const $overlayElement = $(\"<div>\").addClass(\"dx-invalid-message\").addClass(\"dx-invalid-message-always\").addClass(invalidMessageClass).html(errorMessageText).appendTo($cell);\n          const overlayOptions = {\n            container: $overlayContainer,\n            shading: false,\n            width: \"auto\",\n            height: \"auto\",\n            visible: true,\n            animation: false,\n            propagateOutsideClick: true,\n            hideOnOutsideClick: false,\n            wrapperAttr: {\n              class: \"dx-invalid-message dx-invalid-message-always \" + invalidMessageClass\n            },\n            position: {\n              collision: \"flip\",\n              boundary: this._rowsView.element(),\n              boundaryOffset: \"0 0\",\n              offset: {\n                x: 0,\n                y: !isOverlayVisible && browser.mozilla ? -1 : 0\n              },\n              my: myPosition,\n              at: atPosition,\n              of: $cell\n            },\n            onPositioned: e => {\n              this._positionedHandler(e, isOverlayVisible);\n              this._shiftValidationMessageIfNeed(e.component.$content(), $cell);\n            }\n          };\n          this._hideFixedGroupCell($cell, overlayOptions);\n          new Overlay($overlayElement, overlayOptions);\n        },\n        _hideValidationMessage() {\n          var _a;\n          const validationMessages = null === (_a = this._rowsView.element()) || void 0 === _a ? void 0 : _a.find(this._getValidationMessagesSelector());\n          null === validationMessages || void 0 === validationMessages ? void 0 : validationMessages.remove();\n        },\n        _normalizeValidationMessagePositionAndMaxWidth(options, isRevertButton, isOverlayVisible) {\n          const fixedColumns = this._columnsController.getFixedColumns();\n          if (!fixedColumns || !fixedColumns.length) {\n            return;\n          }\n          let position;\n          const visibleTableWidth = !isRevertButton && function (that, element) {\n            const rowIndex = $(element).closest(\"tr\").index();\n            const $cellElements = $(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\");\n            return that._rowsView._getWidths($cellElements).reduce((w1, w2) => w1 + w2, 0);\n          }(this, options.element);\n          const $overlayContentElement = options.component.$content();\n          const validationMessageWidth = getOuterWidth($overlayContentElement, true);\n          const needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\n          const columnIndex = this._rowsView.getCellIndex($(options.element).closest(\"td\"));\n          const boundaryNonFixedColumnsInfo = function (fixedColumns) {\n            let firstNonFixedColumnIndex;\n            let lastNonFixedColumnIndex;\n            fixedColumns.some((column, index) => {\n              if (\"transparent\" === column.command) {\n                firstNonFixedColumnIndex = 0 === index ? -1 : index;\n                lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\n                return true;\n              }\n              return;\n            });\n            return {\n              startColumnIndex: firstNonFixedColumnIndex,\n              endColumnIndex: lastNonFixedColumnIndex\n            };\n          }(fixedColumns);\n          if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\n            position = {\n              collision: \"none flip\",\n              my: \"top left\",\n              at: isOverlayVisible ? \"top right\" : \"bottom left\"\n            };\n          } else if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\n            position = {\n              collision: \"none flip\",\n              my: \"top right\",\n              at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\n            };\n            if (isRevertButton) {\n              position.offset = \"-1 0\";\n            }\n          }\n          return position && {\n            position: position,\n            maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\n          };\n        },\n        _shiftValidationMessageIfNeed($content, $cell) {\n          const $revertContent = this._revertTooltip && this._revertTooltip.$content();\n          if (!$revertContent) {\n            return;\n          }\n          const contentOffset = $content.offset();\n          const revertContentOffset = $revertContent.offset();\n          if (contentOffset.top === revertContentOffset.top && contentOffset.left + getWidth($content) > revertContentOffset.left) {\n            const left = getWidth($revertContent) + 2;\n            $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left);\n          }\n        },\n        _getRevertTooltipsSelector() {\n          const revertTooltipClass = this.addWidgetPrefix(\"revert-tooltip\");\n          return \".dx-editor-cell .\" + revertTooltipClass;\n        },\n        _getValidationMessagesSelector() {\n          const invalidMessageClass = this.addWidgetPrefix(\"invalid-message\");\n          return `.dx-editor-cell .${invalidMessageClass}, .dx-cell-modified .${invalidMessageClass}`;\n        },\n        init() {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n          this._columnsController = this.getController(\"columns\");\n          this._rowsView = this.getView(\"rowsView\");\n        },\n        loseFocus(skipValidator) {\n          if (!skipValidator) {\n            this.getController(\"validating\").setValidator(null);\n          }\n          this.callBase();\n        },\n        updateCellState($element, validationResult, isHideBorder) {\n          var _a;\n          const $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n          const $cell = (null === $focus || void 0 === $focus ? void 0 : $focus.is(\"td\")) ? $focus : null;\n          const rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(\".dx-row\").data(\"options\");\n          const change = rowOptions ? this.getController(\"editing\").getChangeByKey(rowOptions.key) : null;\n          const column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\n          const isCellModified = void 0 !== (null === (_a = null === change || void 0 === change ? void 0 : change.data) || void 0 === _a ? void 0 : _a[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();\n          if (\"cell\" === this._editingController.getEditMode()) {\n            if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {\n              this._showRevertButton($focus);\n            } else {\n              this._revertTooltip && this._revertTooltip.$element().remove();\n            }\n          }\n          const showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\n          if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\n            const errorMessages = [];\n            validationResult.brokenRules.forEach(rule => {\n              if (rule.message) {\n                errorMessages.push(rule.message);\n              }\n            });\n            if (errorMessages.length) {\n              this._showValidationMessage($focus, errorMessages, column.alignment || \"left\");\n            }\n          }\n          !isHideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight();\n        },\n        focus($element, isHideBorder) {\n          if (!arguments.length) {\n            return this.callBase();\n          }\n          this._hideValidationMessage();\n          if ((null === $element || void 0 === $element ? void 0 : $element.hasClass(\"dx-row\")) || (null === $element || void 0 === $element ? void 0 : $element.hasClass(\"dx-master-detail-cell\"))) {\n            return this.callBase($element, isHideBorder);\n          }\n          const $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n          const {\n            callBase: callBase\n          } = this;\n          const validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + this.addWidgetPrefix(\"validator\")).eq(0).data(\"dxValidator\"));\n          const rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\n          const editingController = this.getController(\"editing\");\n          const change = rowOptions ? editingController.getChangeByKey(rowOptions.key) : null;\n          const validatingController = this.getController(\"validating\");\n          let validationResult;\n          if (validator) {\n            validatingController.setValidator(validator);\n            const value = validator.option(\"adapter\").getValue();\n            if (cellValueShouldBeValidated(value, rowOptions) || validatingController._rowIsValidated(change)) {\n              editingController.waitForDeferredOperations().done(() => {\n                when(validatingController.validateCell(validator)).done(result => {\n                  validationResult = result;\n                  const {\n                    column: column\n                  } = validationResult.validator.option(\"dataGetter\")();\n                  if (change && column && !validatingController.isCurrentValidatorProcessing({\n                    rowKey: change.key,\n                    columnIndex: column.index\n                  })) {\n                    return;\n                  }\n                  if (validationResult.status === VALIDATION_STATUS.invalid) {\n                    isHideBorder = true;\n                  }\n                  this.updateCellState($element, validationResult, isHideBorder);\n                  callBase.call(this, $element, isHideBorder);\n                });\n              });\n              return this.callBase($element, isHideBorder);\n            }\n          }\n          this.updateCellState($element, validationResult, isHideBorder);\n          return this.callBase($element, isHideBorder);\n        },\n        getEditorInstance($container) {\n          const $editor = $container.find(\".dx-texteditor\").eq(0);\n          return gridCoreUtils.getWidgetInstance($editor);\n        }\n      },\n      data: {\n        _getValidationStatus(validationResult) {\n          const validationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\n          return validationStatus || VALIDATION_STATUS.valid;\n        },\n        _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var _a, _b;\n          const cell = null === (_a = oldRow.cells) || void 0 === _a ? void 0 : _a[columnIndex];\n          const oldValidationStatus = this._getValidationStatus({\n            status: null === cell || void 0 === cell ? void 0 : cell.validationStatus\n          });\n          const validatingController = this.getController(\"validating\");\n          const validationResult = validatingController.getCellValidationResult({\n            rowKey: oldRow.key,\n            columnIndex: columnIndex\n          });\n          const validationData = validatingController._getValidationData(oldRow.key);\n          const newValidationStatus = this._getValidationStatus(validationResult);\n          const rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\n          const validationStatusChanged = oldValidationStatus !== newValidationStatus && rowIsModified;\n          const cellIsMarkedAsInvalid = $(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(\"invalid\"));\n          const hasValidationRules = null === (_b = null === cell || void 0 === cell ? void 0 : cell.column.validationRules) || void 0 === _b ? void 0 : _b.length;\n          const rowEditStateChanged = oldRow.isEditing !== newRow.isEditing && hasValidationRules;\n          const cellValidationStateChanged = validationStatusChanged || validationData.isValid && cellIsMarkedAsInvalid;\n          if (rowEditStateChanged || cellValidationStateChanged) {\n            return true;\n          }\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        updateFreeSpaceRowHeight($table) {\n          const that = this;\n          let $rowElements;\n          let $freeSpaceRowElement;\n          let $freeSpaceRowElements;\n          const $element = that.element();\n          const $tooltipContent = $element && $element.find(`.${that.addWidgetPrefix(\"invalid-message\")} .dx-overlay-content`);\n          that.callBase($table);\n          if ($tooltipContent && $tooltipContent.length) {\n            $rowElements = that._getRowElements();\n            $freeSpaceRowElements = that._getFreeSpaceRowElements($table);\n            $freeSpaceRowElement = $freeSpaceRowElements.first();\n            if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || getOuterHeight($tooltipContent) > getOuterHeight($freeSpaceRowElement))) {\n              $freeSpaceRowElements.show();\n              setHeight($freeSpaceRowElements, getOuterHeight($tooltipContent));\n              return true;\n            }\n          }\n          return;\n        },\n        _formItemPrepared(cellOptions, $container) {\n          this.callBase.apply(this, arguments);\n          deferUpdate(() => {\n            const $editor = $container.find(\".dx-widget\").first();\n            const isEditorDisposed = $editor.length && !$editor.children().length;\n            if (!isEditorDisposed) {\n              this.getController(\"validating\").createValidator(cellOptions, $editor);\n            }\n          });\n        },\n        _cellPrepared($cell, parameters) {\n          if (!this.getController(\"editing\").isFormOrPopupEditMode()) {\n            this.getController(\"validating\").createValidator(parameters, $cell);\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _restoreErrorRow(contentTable) {\n          const editingController = this.getController(\"editing\");\n          editingController && editingController.hasChanges() && this._getRowElements(contentTable).each((_, item) => {\n            const rowOptions = $(item).data(\"options\");\n            if (rowOptions) {\n              const change = editingController.getChangeByKey(rowOptions.key);\n              change && editingController._showErrorRow(change);\n            }\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["getOuterWidth","getWidth","getOuterHeight","setHeight","$","eventsEngine","createObjectWithChanges","deferUpdate","equalByValue","getKeyHash","each","isDefined","isEmptyObject","isObject","extend","focused","messageLocalization","Button","pointerEvents","ValidationEngine","Validator","Overlay","errors","Deferred","when","fromPromise","LoadIndicator","encodeHtml","browser","gridCoreUtils","modules","INVALIDATE_CLASS","REVERT_TOOLTIP_CLASS","INVALID_MESSAGE_CLASS","WIDGET_INVALID_MESSAGE_CLASS","INVALID_MESSAGE_ALWAYS_CLASS","REVERT_BUTTON_CLASS","VALIDATOR_CLASS","PENDING_INDICATOR_CLASS","VALIDATION_PENDING_CLASS","CONTENT_CLASS","INSERT_INDEX","PADDING_BETWEEN_TOOLTIPS","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_BATCH","EDIT_MODE_CELL","EDIT_MODE_POPUP","GROUP_CELL_CLASS","FORM_BASED_MODES","COMMAND_TRANSPARENT","VALIDATION_STATUS","valid","invalid","pending","EDIT_DATA_INSERT_TYPE","EDIT_DATA_REMOVE_TYPE","VALIDATION_CANCELLED","validationResultIsValid","result","cellValueShouldBeValidated","value","rowOptions","isNewRow","ValidatingController","Controller","inherit","init","_editingController","getController","createAction","_validationState","initValidationState","_validationStateCache","_rowIsValidated","change","validationData","_getValidationData","key","validated","create","keyHash","isObjectKeyHash","filter","data","isValid","push","_getBrokenRules","validationResults","brokenRules","brokenRule","_rowValidating","deferred","getChangeByKey","parameters","newData","oldData","_getOldData","promise","errorText","getHiddenValidatorsErrorText","executeAction","always","resolve","brokenRulesMessages","_","column","isGroupExpandColumn","groupIndex","showWhenGrouped","isVisibleColumn","visible","validator","$element","parent","length","message","join","validate","isFull","editingController","completeList","editMode","getEditMode","_isValidationInProgress","addDeferred","changes","getChanges","index","_ref","type","validationResult","validateGroup","done","_currentCellValidator","_findGroup","getGroupConfig","validators","resetRowValidationResults","complete","isRowDataModified","updateValidationState","includes","setDisableApplyValidationResults","groupConfig","setValidator","renderCellPendingIndicator","$container","$indicator","find","$indicatorContainer","appendTo","addClass","_createComponent","disposeCellPendingIndicator","indicator","getInstance","dispose","remove","removeClass","validationStatusChanged","validationGroup","option","updateCellValidationResult","rowKey","columnIndex","validatorInitialized","arg","component","on","bind","validatorDisposing","getCellValidationResult","status","cancelCellValidationResult","applyValidationResult","forEach","rule","requestIsDisabled","disabledPendingId","id","_disableApplyValidationResults","$focus","trigger","down","editor","editCellTemplate","getEditorInstance","toggleClass","addWidgetPrefix","_syncInternalEditingData","_a","oldDataFromState","row","_addInternalData","createValidator","_b","showEditorAlways","command","validationRules","Array","isArray","editIndex","getIndexByKey","needCreateValidator","columnsController","visibleColumns","getVisibleColumns","some","isEditRow","isCellOrBatchEditingAllowed","isCellOrBatchEditMode","allowUpdating","log","getValue","calculateCellValue","useDefaultValidator","hasClass","name","caption","adapter","applyValidationResults","dataGetter","onInitialized","onDisposing","originBypass","bypass","defaultAdapterBypass","isCellModified","validationRequestsCallbacks","call","flag","getDisableApplyValidationResults","isCurrentValidatorProcessing","_ref2","validateCell","cellParams","stateRestored","currentCellValue","_ref3","_ref4","removeCellValidationResult","_ref5","_ref6","reject","isInvalidCell","_ref7","getCellValidator","_ref8","v","setCellValidationStatus","cellOptions","validationStatus","validatingModule","defaultOptions","editing","texts","validationCancelChanges","format","controllers","validating","extenders","_addChange","changeParams","callBase","apply","arguments","validatingController","_handleChangesChange","args","_updateRowAndPageIndices","that","startInsertIndex","getView","getTopVisibleItemIndex","rowIndex","_ref9","pageIndex","_pageIndex","_getValidationGroupsInForm","detailOptions","_validateEditFormAfterUpdate","isCustomSetCellValue","_editForm","_prepareEditCell","params","isNotCanceled","processItems","items","changeType","dataController","itemsCount","addInValidItem","isInsert","i","item","keyOf","splice","processDataItem","isInserted","_createInvisibleColumnValidators","columns","getColumns","invisibleColumns","getInvisibleColumns","isBand","groupColumns","getGroupColumns","indexOf","invisibleColumnValidators","isCellVisible","_dataController","getRowIndexByKey","_beforeSaveEditData","disposeValidators","executeOperation","isFullValid","_focusEditingCell","_resetEditRowKey","_resetEditColumnName","updateItems","_beforeEditCell","$cell","_rowsView","_getCellElement","closest","_afterSaveEditData","cancel","$firstErrorRow","isCellEditMode","$errorRow","_showErrorRow","scrollable","getScrollable","update","scrollToElement","_needUpdateRow","editRowIndex","getEditRowIndex","rowIndices","shouldResetValidationState","columnsWithValidatingEditors","col","_handleDataChanged","validationState","resetRowAndPageIndices","_beforeCancelEditData","$popupContent","errorHandling","getPopupContent","renderErrorRow","updateFieldValue","e","currentValidator","refocus","highlightDataCell","isEditableCell","setValue","cellModified","isValidated","needValidation","setCellValue","isCellInvalid","editorFactory","_showRevertButton","$tooltipElement","_revertTooltip","$overlayContainer","revertTooltipClass","tooltipOptions","animation","width","height","shading","container","propagateOutsideClick","hideOnOutsideClick","wrapperAttr","class","contentTemplate","$buttonElement","buttonOptions","icon","hint","onClick","cancelEditData","position","my","at","offset","collision","boundaryOffset","boundary","element","of","onPositioned","_positionedHandler","_hideFixedGroupCell","overlayOptions","$nextFixedRowElement","$groupCellElement","isFixedColumns","isFormOrPopupEditMode","nextRowOptions","next","rowType","getRowElement","last","get","style","visibility","css","isOverlayVisible","__skipPositionProcessing","isRevertButton","needRepaint","updateFreeSpaceRowHeight","normalizedPosition","_normalizeValidationMessagePositionAndMaxWidth","repaint","_showValidationMessage","messages","alignment","editorPopup","myPosition","atPosition","errorMessageText","invalidMessageClass","$overlayElement","html","x","y","mozilla","_shiftValidationMessageIfNeed","$content","_hideValidationMessage","validationMessages","_getValidationMessagesSelector","options","fixedColumns","_columnsController","getFixedColumns","visibleTableWidth","$cellElements","first","children","_getWidths","reduce","w1","w2","$overlayContentElement","validationMessageWidth","needMaxWidth","getCellIndex","boundaryNonFixedColumnsInfo","firstNonFixedColumnIndex","lastNonFixedColumnIndex","colspan","startColumnIndex","endColumnIndex","maxWidth","$revertContent","contentOffset","revertContentOffset","top","left","_getRevertTooltipsSelector","loseFocus","skipValidator","updateCellState","isHideBorder","_getFocusCellSelector","is","isSaving","showValidationMessage","errorMessages","focus","eq","waitForDeferredOperations","$editor","getWidgetInstance","_getValidationStatus","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","cell","cells","oldValidationStatus","newValidationStatus","rowIsModified","JSON","stringify","modifiedValues","cellIsMarkedAsInvalid","cellElement","hasValidationRules","rowEditStateChanged","isEditing","cellValidationStateChanged","views","rowsView","$table","$rowElements","$freeSpaceRowElement","$freeSpaceRowElements","$tooltipContent","_getRowElements","_getFreeSpaceRowElements","show","_formItemPrepared","isEditorDisposed","_cellPrepared","_restoreErrorRow","contentTable","hasChanges"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/__internal/grids/grid_core/validating/module.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/validating/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterWidth,\r\n    getWidth,\r\n    getOuterHeight,\r\n    setHeight\r\n} from \"../../../../core/utils/size\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport eventsEngine from \"../../../../events/core/events_engine\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../../../data/array_utils\";\r\nimport {\r\n    deferUpdate,\r\n    equalByValue,\r\n    getKeyHash\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isObject\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    focused\r\n} from \"../../../../ui/widget/selectors\";\r\nimport messageLocalization from \"../../../../localization/message\";\r\nimport Button from \"../../../../ui/button\";\r\nimport pointerEvents from \"../../../../events/pointer\";\r\nimport ValidationEngine from \"../../../../ui/validation_engine\";\r\nimport Validator from \"../../../../ui/validator\";\r\nimport Overlay from \"../../../../ui/overlay/ui.overlay\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport {\r\n    Deferred,\r\n    when,\r\n    fromPromise\r\n} from \"../../../../core/utils/deferred\";\r\nimport LoadIndicator from \"../../../../ui/load_indicator\";\r\nimport {\r\n    encodeHtml\r\n} from \"../../../../core/utils/string\";\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport gridCoreUtils from \"../module_utils\";\r\nimport modules from \"../modules\";\r\nconst INVALIDATE_CLASS = \"invalid\";\r\nconst REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nconst INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\r\nconst WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\r\nconst INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\r\nconst REVERT_BUTTON_CLASS = \"dx-revert-button\";\r\nconst VALIDATOR_CLASS = \"validator\";\r\nconst PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\r\nconst VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\r\nconst CONTENT_CLASS = \"content\";\r\nconst INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nconst PADDING_BETWEEN_TOOLTIPS = 2;\r\nconst EDIT_MODE_ROW = \"row\";\r\nconst EDIT_MODE_FORM = \"form\";\r\nconst EDIT_MODE_BATCH = \"batch\";\r\nconst EDIT_MODE_CELL = \"cell\";\r\nconst EDIT_MODE_POPUP = \"popup\";\r\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\r\nconst FORM_BASED_MODES = [\"popup\", \"form\"];\r\nconst COMMAND_TRANSPARENT = \"transparent\";\r\nconst VALIDATION_STATUS = {\r\n    valid: \"valid\",\r\n    invalid: \"invalid\",\r\n    pending: \"pending\"\r\n};\r\nconst EDIT_DATA_INSERT_TYPE = \"insert\";\r\nconst EDIT_DATA_REMOVE_TYPE = \"remove\";\r\nconst VALIDATION_CANCELLED = \"cancel\";\r\nconst validationResultIsValid = function(result) {\r\n    return isDefined(result) && \"cancel\" !== result\r\n};\r\nconst cellValueShouldBeValidated = function(value, rowOptions) {\r\n    return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow\r\n};\r\nconst ValidatingController = modules.Controller.inherit({\r\n    init() {\r\n        this._editingController = this.getController(\"editing\");\r\n        this.createAction(\"onRowValidating\");\r\n        if (!this._validationState) {\r\n            this.initValidationState()\r\n        }\r\n    },\r\n    initValidationState() {\r\n        this._validationState = [];\r\n        this._validationStateCache = {}\r\n    },\r\n    _rowIsValidated(change) {\r\n        const validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n        return !!validationData && !!validationData.validated\r\n    },\r\n    _getValidationData(key, create) {\r\n        const keyHash = getKeyHash(key);\r\n        const isObjectKeyHash = isObject(keyHash);\r\n        let validationData;\r\n        if (isObjectKeyHash) {\r\n            validationData = this._validationState.filter(data => equalByValue(data.key, key))[0]\r\n        } else {\r\n            validationData = this._validationStateCache[keyHash]\r\n        }\r\n        if (!validationData && create) {\r\n            validationData = {\r\n                key: key,\r\n                isValid: true\r\n            };\r\n            this._validationState.push(validationData);\r\n            if (!isObjectKeyHash) {\r\n                this._validationStateCache[keyHash] = validationData\r\n            }\r\n        }\r\n        return validationData\r\n    },\r\n    _getBrokenRules(validationData, validationResults) {\r\n        let brokenRules;\r\n        if (validationResults) {\r\n            brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule]\r\n        } else {\r\n            brokenRules = validationData.brokenRules || []\r\n        }\r\n        return brokenRules\r\n    },\r\n    _rowValidating(validationData, validationResults) {\r\n        const deferred = new Deferred;\r\n        const change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\r\n        const brokenRules = this._getBrokenRules(validationData, validationResults);\r\n        const isValid = validationResults ? validationResults.isValid : validationData.isValid;\r\n        const parameters = {\r\n            brokenRules: brokenRules,\r\n            isValid: isValid,\r\n            key: change.key,\r\n            newData: change.data,\r\n            oldData: this._editingController._getOldData(change.key),\r\n            promise: null,\r\n            errorText: this.getHiddenValidatorsErrorText(brokenRules)\r\n        };\r\n        this.executeAction(\"onRowValidating\", parameters);\r\n        when(fromPromise(parameters.promise)).always(() => {\r\n            validationData.isValid = parameters.isValid;\r\n            validationData.errorText = parameters.errorText;\r\n            deferred.resolve(parameters)\r\n        });\r\n        return deferred.promise()\r\n    },\r\n    getHiddenValidatorsErrorText(brokenRules) {\r\n        const brokenRulesMessages = [];\r\n        each(brokenRules, (_, brokenRule) => {\r\n            const {\r\n                column: column\r\n            } = brokenRule;\r\n            const isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\r\n            const isVisibleColumn = column && column.visible;\r\n            if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\r\n                brokenRulesMessages.push(brokenRule.message)\r\n            }\r\n        });\r\n        return brokenRulesMessages.join(\", \")\r\n    },\r\n    validate(isFull) {\r\n        let isValid = true;\r\n        const editingController = this._editingController;\r\n        const deferred = new Deferred;\r\n        const completeList = [];\r\n        const editMode = editingController.getEditMode();\r\n        isFull = isFull || \"row\" === editMode;\r\n        if (this._isValidationInProgress) {\r\n            return deferred.resolve(false).promise()\r\n        }\r\n        this._isValidationInProgress = true;\r\n        if (isFull) {\r\n            editingController.addDeferred(deferred);\r\n            const changes = editingController.getChanges();\r\n            each(changes, (index, {\r\n                type: type,\r\n                key: key\r\n            }) => {\r\n                if (\"remove\" !== type) {\r\n                    const validationData = this._getValidationData(key, true);\r\n                    const validationResult = this.validateGroup(validationData);\r\n                    completeList.push(validationResult);\r\n                    validationResult.done(validationResult => {\r\n                        validationData.validated = true;\r\n                        isValid = isValid && validationResult.isValid\r\n                    })\r\n                }\r\n            })\r\n        } else if (this._currentCellValidator) {\r\n            const validationResult = this.validateGroup(this._currentCellValidator._findGroup());\r\n            completeList.push(validationResult);\r\n            validationResult.done(validationResult => {\r\n                isValid = validationResult.isValid\r\n            })\r\n        }\r\n        when(...completeList).done(() => {\r\n            this._isValidationInProgress = false;\r\n            deferred.resolve(isValid)\r\n        });\r\n        return deferred.promise()\r\n    },\r\n    validateGroup(validationData) {\r\n        const result = new Deferred;\r\n        const validateGroup = validationData && ValidationEngine.getGroupConfig(validationData);\r\n        let validationResult;\r\n        if (null === validateGroup || void 0 === validateGroup ? void 0 : validateGroup.validators.length) {\r\n            this.resetRowValidationResults(validationData);\r\n            validationResult = ValidationEngine.validateGroup(validationData)\r\n        }\r\n        when((null === validationResult || void 0 === validationResult ? void 0 : validationResult.complete) || validationResult).done(validationResult => {\r\n            when(this._rowValidating(validationData, validationResult)).done(result.resolve)\r\n        });\r\n        return result.promise()\r\n    },\r\n    isRowDataModified: change => !isEmptyObject(change.data),\r\n    updateValidationState(change) {\r\n        const editMode = this._editingController.getEditMode();\r\n        const {\r\n            key: key\r\n        } = change;\r\n        const validationData = this._getValidationData(key, true);\r\n        if (!FORM_BASED_MODES.includes(editMode)) {\r\n            if (\"insert\" === change.type && !this.isRowDataModified(change)) {\r\n                validationData.isValid = true;\r\n                return\r\n            }\r\n            this.setDisableApplyValidationResults(true);\r\n            const groupConfig = ValidationEngine.getGroupConfig(validationData);\r\n            if (groupConfig) {\r\n                const validationResult = ValidationEngine.validateGroup(validationData);\r\n                when(validationResult.complete || validationResult).done(validationResult => {\r\n                    validationData.isValid = validationResult.isValid;\r\n                    validationData.brokenRules = validationResult.brokenRules\r\n                })\r\n            } else if (!validationData.brokenRules || !validationData.brokenRules.length) {\r\n                validationData.isValid = true\r\n            }\r\n            this.setDisableApplyValidationResults(false)\r\n        } else {\r\n            validationData.isValid = true\r\n        }\r\n    },\r\n    setValidator(validator) {\r\n        this._currentCellValidator = validator\r\n    },\r\n    renderCellPendingIndicator($container) {\r\n        let $indicator = $container.find(\".dx-pending-indicator\");\r\n        if (!$indicator.length) {\r\n            const $indicatorContainer = $container;\r\n            $indicator = $(\"<div>\").appendTo($indicatorContainer).addClass(\"dx-pending-indicator\");\r\n            this._createComponent($indicator, LoadIndicator);\r\n            $container.addClass(\"dx-validation-pending\")\r\n        }\r\n    },\r\n    disposeCellPendingIndicator($container) {\r\n        const $indicator = $container.find(\".dx-pending-indicator\");\r\n        if ($indicator.length) {\r\n            const indicator = LoadIndicator.getInstance($indicator);\r\n            if (indicator) {\r\n                indicator.dispose();\r\n                indicator.$element().remove()\r\n            }\r\n            $container.removeClass(\"dx-validation-pending\")\r\n        }\r\n    },\r\n    validationStatusChanged(result) {\r\n        const {\r\n            validator: validator\r\n        } = result;\r\n        const validationGroup = validator.option(\"validationGroup\");\r\n        const {\r\n            column: column\r\n        } = validator.option(\"dataGetter\")();\r\n        this.updateCellValidationResult({\r\n            rowKey: validationGroup.key,\r\n            columnIndex: column.index,\r\n            validationResult: result\r\n        })\r\n    },\r\n    validatorInitialized(arg) {\r\n        arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\r\n        arg.component.on(\"validated\", this.validationStatusChanged.bind(this))\r\n    },\r\n    validatorDisposing(arg) {\r\n        const validator = arg.component;\r\n        const validationGroup = validator.option(\"validationGroup\");\r\n        const {\r\n            column: column\r\n        } = validator.option(\"dataGetter\")();\r\n        const result = this.getCellValidationResult({\r\n            rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,\r\n            columnIndex: column.index\r\n        });\r\n        if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\r\n            this.cancelCellValidationResult({\r\n                change: validationGroup,\r\n                columnIndex: column.index\r\n            })\r\n        }\r\n    },\r\n    applyValidationResult($container, result) {\r\n        const {\r\n            validator: validator\r\n        } = result;\r\n        const validationGroup = validator.option(\"validationGroup\");\r\n        const {\r\n            column: column\r\n        } = validator.option(\"dataGetter\")();\r\n        result.brokenRules && result.brokenRules.forEach(rule => {\r\n            rule.columnIndex = column.index;\r\n            rule.column = column\r\n        });\r\n        if ($container) {\r\n            const validationResult = this.getCellValidationResult({\r\n                rowKey: validationGroup.key,\r\n                columnIndex: column.index\r\n            });\r\n            const requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\r\n            if (this._disableApplyValidationResults || requestIsDisabled) {\r\n                return\r\n            }\r\n            if (result.status === VALIDATION_STATUS.invalid) {\r\n                const $focus = $container.find(\":focus\");\r\n                if (!focused($focus)) {\r\n                    eventsEngine.trigger($focus, \"focus\");\r\n                    eventsEngine.trigger($focus, pointerEvents.down)\r\n                }\r\n            }\r\n            const editor = !column.editCellTemplate && this.getController(\"editorFactory\").getEditorInstance($container);\r\n            if (result.status === VALIDATION_STATUS.pending) {\r\n                if (editor) {\r\n                    editor.option(\"validationStatus\", VALIDATION_STATUS.pending)\r\n                } else {\r\n                    this.renderCellPendingIndicator($container)\r\n                }\r\n            } else if (editor) {\r\n                editor.option(\"validationStatus\", VALIDATION_STATUS.valid)\r\n            } else {\r\n                this.disposeCellPendingIndicator($container)\r\n            }\r\n            $container.toggleClass(this.addWidgetPrefix(\"invalid\"), result.status === VALIDATION_STATUS.invalid)\r\n        }\r\n    },\r\n    _syncInternalEditingData(parameters) {\r\n        var _a;\r\n        const editingController = this._editingController;\r\n        const change = editingController.getChangeByKey(parameters.key);\r\n        const oldDataFromState = editingController._getOldData(parameters.key);\r\n        const oldData = null === (_a = parameters.row) || void 0 === _a ? void 0 : _a.oldData;\r\n        if (change && oldData && !oldDataFromState) {\r\n            editingController._addInternalData({\r\n                key: parameters.key,\r\n                oldData: oldData\r\n            })\r\n        }\r\n    },\r\n    createValidator(parameters, $container) {\r\n        var _a, _b;\r\n        const editingController = this._editingController;\r\n        const {\r\n            column: column\r\n        } = parameters;\r\n        let {\r\n            showEditorAlways: showEditorAlways\r\n        } = column;\r\n        if (isDefined(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\r\n            return\r\n        }\r\n        const editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());\r\n        let needCreateValidator = editIndex > -1;\r\n        if (!needCreateValidator) {\r\n            if (!showEditorAlways) {\r\n                const columnsController = this.getController(\"columns\");\r\n                const visibleColumns = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getVisibleColumns()) || [];\r\n                showEditorAlways = visibleColumns.some(column => column.showEditorAlways)\r\n            }\r\n            const isEditRow = equalByValue(this.option(\"editing.editRowKey\"), parameters.key);\r\n            const isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\r\n                row: parameters.row\r\n            });\r\n            needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;\r\n            if (isCellOrBatchEditingAllowed && showEditorAlways) {\r\n                editingController._addInternalData({\r\n                    key: parameters.key,\r\n                    oldData: null !== (_b = null === (_a = parameters.row) || void 0 === _a ? void 0 : _a.oldData) && void 0 !== _b ? _b : parameters.data\r\n                })\r\n            }\r\n        }\r\n        if (needCreateValidator) {\r\n            if ($container && !$container.length) {\r\n                errors.log(\"E1050\");\r\n                return\r\n            }\r\n            this._syncInternalEditingData(parameters);\r\n            const validationData = this._getValidationData(parameters.key, true);\r\n            const getValue = () => {\r\n                const change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\r\n                const value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});\r\n                return void 0 !== value ? value : parameters.value\r\n            };\r\n            const useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\r\n            $container && $container.addClass(this.addWidgetPrefix(\"validator\"));\r\n            const validator = new Validator($container || $(\"<div>\"), {\r\n                name: column.caption,\r\n                validationRules: extend(true, [], column.validationRules),\r\n                validationGroup: validationData,\r\n                adapter: useDefaultValidator ? null : {\r\n                    getValue: getValue,\r\n                    applyValidationResults: result => {\r\n                        this.applyValidationResult($container, result)\r\n                    }\r\n                },\r\n                dataGetter() {\r\n                    const key = null === validationData || void 0 === validationData ? void 0 : validationData.key;\r\n                    const change = editingController.getChangeByKey(key);\r\n                    const oldData = editingController._getOldData(key);\r\n                    return {\r\n                        data: createObjectWithChanges(oldData, null === change || void 0 === change ? void 0 : change.data),\r\n                        column: column\r\n                    }\r\n                },\r\n                onInitialized: this.validatorInitialized.bind(this),\r\n                onDisposing: this.validatorDisposing.bind(this)\r\n            });\r\n            if (useDefaultValidator) {\r\n                const adapter = validator.option(\"adapter\");\r\n                if (adapter) {\r\n                    const originBypass = adapter.bypass;\r\n                    const defaultAdapterBypass = () => parameters.row.isNewRow && !this._isValidationInProgress && !editingController.isCellModified(parameters);\r\n                    adapter.getValue = getValue;\r\n                    adapter.validationRequestsCallbacks = [];\r\n                    adapter.bypass = () => originBypass.call(adapter) || defaultAdapterBypass()\r\n                }\r\n            }\r\n            return validator\r\n        }\r\n        return\r\n    },\r\n    setDisableApplyValidationResults(flag) {\r\n        this._disableApplyValidationResults = flag\r\n    },\r\n    getDisableApplyValidationResults() {\r\n        return this._disableApplyValidationResults\r\n    },\r\n    isCurrentValidatorProcessing({\r\n        rowKey: rowKey,\r\n        columnIndex: columnIndex\r\n    }) {\r\n        return this._currentCellValidator && equalByValue(this._currentCellValidator.option(\"validationGroup\").key, rowKey) && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex\r\n    },\r\n    validateCell(validator) {\r\n        const cellParams = {\r\n            rowKey: validator.option(\"validationGroup\").key,\r\n            columnIndex: validator.option(\"dataGetter\")().column.index\r\n        };\r\n        let validationResult = this.getCellValidationResult(cellParams);\r\n        const stateRestored = validationResultIsValid(validationResult);\r\n        const adapter = validator.option(\"adapter\");\r\n        if (!stateRestored) {\r\n            validationResult = validator.validate()\r\n        } else {\r\n            const currentCellValue = adapter.getValue();\r\n            if (!equalByValue(currentCellValue, validationResult.value)) {\r\n                validationResult = validator.validate()\r\n            }\r\n        }\r\n        const deferred = new Deferred;\r\n        if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\r\n            this.updateCellValidationResult(cellParams);\r\n            adapter.applyValidationResults(validationResult)\r\n        }\r\n        when(validationResult.complete || validationResult).done(validationResult => {\r\n            stateRestored && adapter.applyValidationResults(validationResult);\r\n            deferred.resolve(validationResult)\r\n        });\r\n        return deferred.promise()\r\n    },\r\n    updateCellValidationResult({\r\n        rowKey: rowKey,\r\n        columnIndex: columnIndex,\r\n        validationResult: validationResult\r\n    }) {\r\n        const validationData = this._getValidationData(rowKey);\r\n        if (!validationData) {\r\n            return\r\n        }\r\n        if (!validationData.validationResults) {\r\n            validationData.validationResults = {}\r\n        }\r\n        let result;\r\n        if (validationResult) {\r\n            result = extend({}, validationResult);\r\n            validationData.validationResults[columnIndex] = result;\r\n            if (validationResult.status === VALIDATION_STATUS.pending) {\r\n                if (\"cell\" === this._editingController.getEditMode()) {\r\n                    result.deferred = new Deferred;\r\n                    result.complete.always(() => {\r\n                        result.deferred.resolve()\r\n                    });\r\n                    this._editingController.addDeferred(result.deferred)\r\n                }\r\n                if (this._disableApplyValidationResults) {\r\n                    result.disabledPendingId = validationResult.id;\r\n                    return\r\n                }\r\n            }\r\n        } else {\r\n            result = validationData.validationResults[columnIndex]\r\n        }\r\n        if (result && result.disabledPendingId) {\r\n            delete result.disabledPendingId\r\n        }\r\n    },\r\n    getCellValidationResult({\r\n        rowKey: rowKey,\r\n        columnIndex: columnIndex\r\n    }) {\r\n        var _a;\r\n        const validationData = this._getValidationData(rowKey, true);\r\n        return null === (_a = null === validationData || void 0 === validationData ? void 0 : validationData.validationResults) || void 0 === _a ? void 0 : _a[columnIndex]\r\n    },\r\n    removeCellValidationResult({\r\n        change: change,\r\n        columnIndex: columnIndex\r\n    }) {\r\n        const validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n        if (validationData && validationData.validationResults) {\r\n            this.cancelCellValidationResult({\r\n                change: change,\r\n                columnIndex: columnIndex\r\n            });\r\n            delete validationData.validationResults[columnIndex]\r\n        }\r\n    },\r\n    cancelCellValidationResult({\r\n        change: change,\r\n        columnIndex: columnIndex\r\n    }) {\r\n        const validationData = this._getValidationData(change.key);\r\n        if (change && validationData.validationResults) {\r\n            const result = validationData.validationResults[columnIndex];\r\n            if (result) {\r\n                result.deferred && result.deferred.reject(\"cancel\");\r\n                validationData.validationResults[columnIndex] = \"cancel\"\r\n            }\r\n        }\r\n    },\r\n    resetRowValidationResults(validationData) {\r\n        if (validationData) {\r\n            validationData.validationResults && delete validationData.validationResults;\r\n            delete validationData.validated\r\n        }\r\n    },\r\n    isInvalidCell({\r\n        rowKey: rowKey,\r\n        columnIndex: columnIndex\r\n    }) {\r\n        const result = this.getCellValidationResult({\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        });\r\n        return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid\r\n    },\r\n    getCellValidator({\r\n        rowKey: rowKey,\r\n        columnIndex: columnIndex\r\n    }) {\r\n        const validationData = this._getValidationData(rowKey);\r\n        const groupConfig = validationData && ValidationEngine.getGroupConfig(validationData);\r\n        const validators = groupConfig && groupConfig.validators;\r\n        return validators && validators.filter(v => {\r\n            const {\r\n                column: column\r\n            } = v.option(\"dataGetter\")();\r\n            return column ? column.index === columnIndex : false\r\n        })[0]\r\n    },\r\n    setCellValidationStatus(cellOptions) {\r\n        const validationResult = this.getCellValidationResult({\r\n            rowKey: cellOptions.key,\r\n            columnIndex: cellOptions.column.index\r\n        });\r\n        if (isDefined(validationResult)) {\r\n            cellOptions.validationStatus = \"cancel\" !== validationResult ? validationResult.status : \"cancel\"\r\n        } else {\r\n            delete cellOptions.validationStatus\r\n        }\r\n    }\r\n});\r\nexport const validatingModule = {\r\n    defaultOptions: () => ({\r\n        editing: {\r\n            texts: {\r\n                validationCancelChanges: messageLocalization.format(\"dxDataGrid-validationCancelChanges\")\r\n            }\r\n        }\r\n    }),\r\n    controllers: {\r\n        validating: ValidatingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                _addChange(changeParams) {\r\n                    const change = this.callBase.apply(this, arguments);\r\n                    const validatingController = this.getController(\"validating\");\r\n                    if (change && \"remove\" !== changeParams.type) {\r\n                        validatingController.updateValidationState(change)\r\n                    }\r\n                    return change\r\n                },\r\n                _handleChangesChange(args) {\r\n                    this.callBase.apply(this, arguments);\r\n                    const validatingController = this.getController(\"validating\");\r\n                    args.value.forEach(change => {\r\n                        if (void 0 === validatingController._getValidationData(change.key)) {\r\n                            validatingController.updateValidationState(change)\r\n                        }\r\n                    })\r\n                },\r\n                _updateRowAndPageIndices() {\r\n                    const that = this;\r\n                    const startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\r\n                    let rowIndex = startInsertIndex;\r\n                    each(that.getChanges(), (_, {\r\n                        key: key,\r\n                        type: type\r\n                    }) => {\r\n                        const validationData = this.getController(\"validating\")._getValidationData(key);\r\n                        if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {\r\n                            validationData.pageIndex = that._pageIndex;\r\n                            if (\"insert\" === type) {\r\n                                validationData.rowIndex = startInsertIndex\r\n                            } else {\r\n                                validationData.rowIndex = rowIndex\r\n                            }\r\n                            rowIndex++\r\n                        }\r\n                    })\r\n                },\r\n                _getValidationGroupsInForm(detailOptions) {\r\n                    const validatingController = this.getController(\"validating\");\r\n                    const validationData = validatingController._getValidationData(detailOptions.key, true);\r\n                    return {\r\n                        validationGroup: validationData\r\n                    }\r\n                },\r\n                _validateEditFormAfterUpdate(row, isCustomSetCellValue) {\r\n                    if (isCustomSetCellValue && this._editForm) {\r\n                        this._editForm.validate()\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _prepareEditCell(params) {\r\n                    const isNotCanceled = this.callBase.apply(this, arguments);\r\n                    const validatingController = this.getController(\"validating\");\r\n                    if (isNotCanceled && params.column.showEditorAlways) {\r\n                        validatingController.updateValidationState({\r\n                            key: params.key\r\n                        })\r\n                    }\r\n                    return isNotCanceled\r\n                },\r\n                processItems(items, changeType) {\r\n                    const changes = this.getChanges();\r\n                    const dataController = this.getController(\"data\");\r\n                    const validatingController = this.getController(\"validating\");\r\n                    items = this.callBase(items, changeType);\r\n                    const itemsCount = items.length;\r\n                    const addInValidItem = function(change, validationData) {\r\n                        const data = {\r\n                            key: change.key\r\n                        };\r\n                        const index = function(change, items) {\r\n                            let index = -1;\r\n                            const isInsert = \"insert\" === change.type;\r\n                            const {\r\n                                key: key\r\n                            } = change;\r\n                            each(items, (i, item) => {\r\n                                if (equalByValue(key, isInsert ? item.key : dataController.keyOf(item))) {\r\n                                    index = i;\r\n                                    return false\r\n                                }\r\n                                return\r\n                            });\r\n                            return index\r\n                        }(change, items);\r\n                        if (index >= 0) {\r\n                            return\r\n                        }\r\n                        validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;\r\n                        const {\r\n                            rowIndex: rowIndex\r\n                        } = validationData;\r\n                        data[INSERT_INDEX] = 1;\r\n                        items.splice(rowIndex, 0, data)\r\n                    };\r\n                    if (\"batch\" === this.getEditMode() && \"prepend\" !== changeType && \"append\" !== changeType) {\r\n                        changes.forEach(change => {\r\n                            const {\r\n                                key: key\r\n                            } = change;\r\n                            const validationData = validatingController._getValidationData(key);\r\n                            if (validationData && change.type && validationData.pageIndex === this._pageIndex && (null === change || void 0 === change ? void 0 : change.pageIndex) !== this._pageIndex) {\r\n                                addInValidItem(change, validationData)\r\n                            }\r\n                        })\r\n                    }\r\n                    return items\r\n                },\r\n                processDataItem(item) {\r\n                    const isInserted = item.data[INSERT_INDEX];\r\n                    const key = isInserted ? item.data.key : item.key;\r\n                    const editMode = this.getEditMode();\r\n                    if (\"batch\" === editMode && isInserted && key) {\r\n                        const changes = this.getChanges();\r\n                        const editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n                        if (editIndex >= 0) {\r\n                            const change = changes[editIndex];\r\n                            if (\"insert\" !== change.type) {\r\n                                const oldData = this._getOldData(change.key);\r\n                                item.data = extend(true, {}, oldData, change.data);\r\n                                item.key = key\r\n                            }\r\n                        }\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _createInvisibleColumnValidators(changes) {\r\n                    const that = this;\r\n                    const validatingController = this.getController(\"validating\");\r\n                    const columnsController = this.getController(\"columns\");\r\n                    const columns = columnsController.getColumns();\r\n                    const invisibleColumns = columnsController.getInvisibleColumns().filter(column => !column.isBand);\r\n                    const groupColumns = columnsController.getGroupColumns().filter(column => !column.showWhenGrouped && -1 === invisibleColumns.indexOf(column));\r\n                    const invisibleColumnValidators = [];\r\n                    const isCellVisible = (column, rowKey) => this._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;\r\n                    invisibleColumns.push(...groupColumns);\r\n                    if (!FORM_BASED_MODES.includes(this.getEditMode())) {\r\n                        each(columns, (_, column) => {\r\n                            changes.forEach(change => {\r\n                                let data;\r\n                                if (isCellVisible(column, change.key)) {\r\n                                    return\r\n                                }\r\n                                if (\"insert\" === change.type) {\r\n                                    data = change.data\r\n                                } else if (\"update\" === change.type) {\r\n                                    const oldData = that._getOldData(change.key);\r\n                                    data = createObjectWithChanges(oldData, change.data)\r\n                                }\r\n                                if (data) {\r\n                                    const validator = validatingController.createValidator({\r\n                                        column: column,\r\n                                        key: change.key,\r\n                                        value: column.calculateCellValue(data)\r\n                                    });\r\n                                    if (validator) {\r\n                                        invisibleColumnValidators.push(validator)\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                    return function() {\r\n                        invisibleColumnValidators.forEach(validator => {\r\n                            validator.dispose()\r\n                        })\r\n                    }\r\n                },\r\n                _beforeSaveEditData(change, editIndex) {\r\n                    let result = this.callBase.apply(this, arguments);\r\n                    const validatingController = this.getController(\"validating\");\r\n                    const validationData = validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n                    if (change) {\r\n                        const isValid = \"remove\" === change.type || validationData.isValid;\r\n                        result = result || !isValid\r\n                    } else {\r\n                        const disposeValidators = this._createInvisibleColumnValidators(this.getChanges());\r\n                        result = new Deferred;\r\n                        this.executeOperation(result, () => {\r\n                            validatingController.validate(true).done(isFullValid => {\r\n                                disposeValidators();\r\n                                this._updateRowAndPageIndices();\r\n                                switch (this.getEditMode()) {\r\n                                    case \"cell\":\r\n                                        if (!isFullValid) {\r\n                                            this._focusEditingCell()\r\n                                        }\r\n                                        break;\r\n                                    case \"batch\":\r\n                                        if (!isFullValid) {\r\n                                            this._resetEditRowKey();\r\n                                            this._resetEditColumnName();\r\n                                            this.getController(\"data\").updateItems()\r\n                                        }\r\n                                }\r\n                                result.resolve(!isFullValid)\r\n                            })\r\n                        })\r\n                    }\r\n                    return result.promise ? result.promise() : result\r\n                },\r\n                _beforeEditCell(rowIndex, columnIndex, item) {\r\n                    const result = this.callBase(rowIndex, columnIndex, item);\r\n                    if (\"cell\" === this.getEditMode()) {\r\n                        const $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\r\n                        const validator = $cell && $cell.data(\"dxValidator\");\r\n                        const rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\r\n                        const value = validator && validator.option(\"adapter\").getValue();\r\n                        if (validator && cellValueShouldBeValidated(value, rowOptions)) {\r\n                            const validatingController = this.getController(\"validating\");\r\n                            const deferred = new Deferred;\r\n                            when(validatingController.validateCell(validator), result).done((validationResult, result) => {\r\n                                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result)\r\n                            });\r\n                            return deferred.promise()\r\n                        }\r\n                        if (!validator) {\r\n                            return result\r\n                        }\r\n                    }\r\n                },\r\n                _afterSaveEditData(cancel) {\r\n                    let $firstErrorRow;\r\n                    const isCellEditMode = \"cell\" === this.getEditMode();\r\n                    each(this.getChanges(), (_, change) => {\r\n                        const $errorRow = this._showErrorRow(change);\r\n                        $firstErrorRow = $firstErrorRow || $errorRow\r\n                    });\r\n                    if ($firstErrorRow) {\r\n                        const scrollable = this._rowsView.getScrollable();\r\n                        if (scrollable) {\r\n                            scrollable.update();\r\n                            scrollable.scrollToElement($firstErrorRow)\r\n                        }\r\n                    }\r\n                    if (cancel && isCellEditMode && this._needUpdateRow()) {\r\n                        const editRowIndex = this.getEditRowIndex();\r\n                        this._dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: [editRowIndex]\r\n                        });\r\n                        this._focusEditingCell()\r\n                    } else if (!cancel) {\r\n                        let shouldResetValidationState = true;\r\n                        if (isCellEditMode) {\r\n                            const columns = this.getController(\"columns\").getColumns();\r\n                            const columnsWithValidatingEditors = columns.filter(col => {\r\n                                var _a;\r\n                                return col.showEditorAlways && (null === (_a = col.validationRules) || void 0 === _a ? void 0 : _a.length) > 0\r\n                            }).length > 0;\r\n                            shouldResetValidationState = !columnsWithValidatingEditors\r\n                        }\r\n                        if (shouldResetValidationState) {\r\n                            this.getController(\"validating\").initValidationState()\r\n                        }\r\n                    }\r\n                },\r\n                _handleDataChanged(args) {\r\n                    const validationState = this.getController(\"validating\")._validationState;\r\n                    if (\"standard\" === this.option(\"scrolling.mode\")) {\r\n                        this.resetRowAndPageIndices()\r\n                    }\r\n                    if (\"prepend\" === args.changeType) {\r\n                        each(validationState, (_, validationData) => {\r\n                            validationData.rowIndex += args.items.length\r\n                        })\r\n                    }\r\n                    this.callBase(args)\r\n                },\r\n                resetRowAndPageIndices() {\r\n                    const validationState = this.getController(\"validating\")._validationState;\r\n                    each(validationState, (_, validationData) => {\r\n                        if (validationData.pageIndex !== this._pageIndex) {\r\n                            delete validationData.pageIndex;\r\n                            delete validationData.rowIndex\r\n                        }\r\n                    })\r\n                },\r\n                _beforeCancelEditData() {\r\n                    this.getController(\"validating\").initValidationState();\r\n                    this.callBase()\r\n                },\r\n                _showErrorRow(change) {\r\n                    let $popupContent;\r\n                    const errorHandling = this.getController(\"errorHandling\");\r\n                    const items = this.getController(\"data\").items();\r\n                    const rowIndex = this.getIndexByKey(change.key, items);\r\n                    const validationData = this.getController(\"validating\")._getValidationData(change.key);\r\n                    if (!(null === validationData || void 0 === validationData ? void 0 : validationData.isValid) && (null === validationData || void 0 === validationData ? void 0 : validationData.errorText) && rowIndex >= 0) {\r\n                        $popupContent = this.getPopupContent();\r\n                        return errorHandling && errorHandling.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent)\r\n                    }\r\n                },\r\n                updateFieldValue(e) {\r\n                    const validatingController = this.getController(\"validating\");\r\n                    const deferred = new Deferred;\r\n                    validatingController.removeCellValidationResult({\r\n                        change: this.getChangeByKey(e.key),\r\n                        columnIndex: e.column.index\r\n                    });\r\n                    this.callBase.apply(this, arguments).done(() => {\r\n                        const currentValidator = validatingController.getCellValidator({\r\n                            rowKey: e.key,\r\n                            columnIndex: e.column.index\r\n                        });\r\n                        when(currentValidator && validatingController.validateCell(currentValidator)).done(validationResult => {\r\n                            this.getController(\"editorFactory\").refocus();\r\n                            deferred.resolve(validationResult)\r\n                        })\r\n                    });\r\n                    return deferred.promise()\r\n                },\r\n                highlightDataCell($cell, parameters) {\r\n                    this.callBase.apply(this, arguments);\r\n                    const validatingController = this.getController(\"validating\");\r\n                    validatingController.setCellValidationStatus(parameters);\r\n                    const isEditableCell = !!parameters.setValue;\r\n                    const cellModified = this.isCellModified(parameters);\r\n                    const isValidated = isDefined(parameters.validationStatus);\r\n                    const needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);\r\n                    if (needValidation) {\r\n                        const validator = $cell.data(\"dxValidator\");\r\n                        if (validator) {\r\n                            when(this.getController(\"validating\").validateCell(validator)).done(() => {\r\n                                validatingController.setCellValidationStatus(parameters)\r\n                            })\r\n                        }\r\n                    }\r\n                },\r\n                getChangeByKey(key) {\r\n                    const changes = this.getChanges();\r\n                    return changes[gridCoreUtils.getIndexByKey(key, changes)]\r\n                },\r\n                isCellModified(parameters) {\r\n                    const cellModified = this.callBase(parameters);\r\n                    const change = this.getChangeByKey(parameters.key);\r\n                    const isCellInvalid = !!parameters.row && this.getController(\"validating\").isInvalidCell({\r\n                        rowKey: parameters.key,\r\n                        columnIndex: parameters.column.index\r\n                    });\r\n                    return cellModified || this.getController(\"validating\")._rowIsValidated(change) && isCellInvalid\r\n                }\r\n            },\r\n            editorFactory: {\r\n                _showRevertButton($container) {\r\n                    var _a;\r\n                    let $tooltipElement = null === (_a = this._revertTooltip) || void 0 === _a ? void 0 : _a.$element();\r\n                    if (!$container || !$container.length) {\r\n                        null === $tooltipElement || void 0 === $tooltipElement ? void 0 : $tooltipElement.remove();\r\n                        this._revertTooltip = void 0;\r\n                        return\r\n                    }\r\n                    if ($container.find($tooltipElement).length) {\r\n                        return\r\n                    }\r\n                    const $overlayContainer = $container.closest(\".\" + this.addWidgetPrefix(\"content\"));\r\n                    const revertTooltipClass = this.addWidgetPrefix(\"revert-tooltip\");\r\n                    null === $tooltipElement || void 0 === $tooltipElement ? void 0 : $tooltipElement.remove();\r\n                    $tooltipElement = $(\"<div>\").addClass(revertTooltipClass).appendTo($container);\r\n                    const tooltipOptions = {\r\n                        animation: null,\r\n                        visible: true,\r\n                        width: \"auto\",\r\n                        height: \"auto\",\r\n                        shading: false,\r\n                        container: $overlayContainer,\r\n                        propagateOutsideClick: true,\r\n                        hideOnOutsideClick: false,\r\n                        wrapperAttr: {\r\n                            class: revertTooltipClass\r\n                        },\r\n                        contentTemplate: () => {\r\n                            const $buttonElement = $(\"<div>\").addClass(\"dx-revert-button\");\r\n                            const buttonOptions = {\r\n                                icon: \"revert\",\r\n                                hint: this.option(\"editing.texts.validationCancelChanges\"),\r\n                                onClick: () => {\r\n                                    this._editingController.cancelEditData()\r\n                                }\r\n                            };\r\n                            return new Button($buttonElement, buttonOptions).$element()\r\n                        },\r\n                        position: {\r\n                            my: \"left top\",\r\n                            at: \"right top\",\r\n                            offset: \"1 0\",\r\n                            collision: \"flip\",\r\n                            boundaryOffset: \"0 0\",\r\n                            boundary: this._rowsView.element(),\r\n                            of: $container\r\n                        },\r\n                        onPositioned: this._positionedHandler.bind(this)\r\n                    };\r\n                    this._revertTooltip = new Overlay($tooltipElement, tooltipOptions)\r\n                },\r\n                _hideFixedGroupCell($cell, overlayOptions) {\r\n                    let $nextFixedRowElement;\r\n                    let $groupCellElement;\r\n                    const isFixedColumns = this._rowsView.isFixedColumns();\r\n                    const isFormOrPopupEditMode = this._editingController.isFormOrPopupEditMode();\r\n                    if (isFixedColumns && !isFormOrPopupEditMode) {\r\n                        const nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\r\n                        if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\r\n                            $nextFixedRowElement = $(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\r\n                            $groupCellElement = $nextFixedRowElement.find(\".dx-group-cell\");\r\n                            if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\r\n                                $groupCellElement.css(\"visibility\", \"hidden\");\r\n                                overlayOptions.onDisposing = function() {\r\n                                    $groupCellElement.css(\"visibility\", \"\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _positionedHandler(e, isOverlayVisible) {\r\n                    if (!e.component.__skipPositionProcessing) {\r\n                        const isRevertButton = $(e.element).hasClass(this.addWidgetPrefix(\"revert-tooltip\"));\r\n                        const needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\r\n                        const normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\r\n                        e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\r\n                        if (normalizedPosition) {\r\n                            e.component.option(normalizedPosition)\r\n                        } else if (needRepaint) {\r\n                            e.component.repaint()\r\n                        }\r\n                    }\r\n                },\r\n                _showValidationMessage($cell, messages, alignment) {\r\n                    const editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\r\n                    const isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\r\n                    const myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment;\r\n                    const atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\r\n                    const $overlayContainer = $cell.closest(\".\" + this.addWidgetPrefix(\"content\"));\r\n                    let errorMessageText = \"\";\r\n                    messages && messages.forEach(message => {\r\n                        errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + encodeHtml(message)\r\n                    });\r\n                    const invalidMessageClass = this.addWidgetPrefix(\"invalid-message\");\r\n                    this._rowsView.element().find(\".\" + invalidMessageClass).remove();\r\n                    const $overlayElement = $(\"<div>\").addClass(\"dx-invalid-message\").addClass(\"dx-invalid-message-always\").addClass(invalidMessageClass).html(errorMessageText).appendTo($cell);\r\n                    const overlayOptions = {\r\n                        container: $overlayContainer,\r\n                        shading: false,\r\n                        width: \"auto\",\r\n                        height: \"auto\",\r\n                        visible: true,\r\n                        animation: false,\r\n                        propagateOutsideClick: true,\r\n                        hideOnOutsideClick: false,\r\n                        wrapperAttr: {\r\n                            class: \"dx-invalid-message dx-invalid-message-always \" + invalidMessageClass\r\n                        },\r\n                        position: {\r\n                            collision: \"flip\",\r\n                            boundary: this._rowsView.element(),\r\n                            boundaryOffset: \"0 0\",\r\n                            offset: {\r\n                                x: 0,\r\n                                y: !isOverlayVisible && browser.mozilla ? -1 : 0\r\n                            },\r\n                            my: myPosition,\r\n                            at: atPosition,\r\n                            of: $cell\r\n                        },\r\n                        onPositioned: e => {\r\n                            this._positionedHandler(e, isOverlayVisible);\r\n                            this._shiftValidationMessageIfNeed(e.component.$content(), $cell)\r\n                        }\r\n                    };\r\n                    this._hideFixedGroupCell($cell, overlayOptions);\r\n                    new Overlay($overlayElement, overlayOptions)\r\n                },\r\n                _hideValidationMessage() {\r\n                    var _a;\r\n                    const validationMessages = null === (_a = this._rowsView.element()) || void 0 === _a ? void 0 : _a.find(this._getValidationMessagesSelector());\r\n                    null === validationMessages || void 0 === validationMessages ? void 0 : validationMessages.remove()\r\n                },\r\n                _normalizeValidationMessagePositionAndMaxWidth(options, isRevertButton, isOverlayVisible) {\r\n                    const fixedColumns = this._columnsController.getFixedColumns();\r\n                    if (!fixedColumns || !fixedColumns.length) {\r\n                        return\r\n                    }\r\n                    let position;\r\n                    const visibleTableWidth = !isRevertButton && function(that, element) {\r\n                        const rowIndex = $(element).closest(\"tr\").index();\r\n                        const $cellElements = $(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\");\r\n                        return that._rowsView._getWidths($cellElements).reduce((w1, w2) => w1 + w2, 0)\r\n                    }(this, options.element);\r\n                    const $overlayContentElement = options.component.$content();\r\n                    const validationMessageWidth = getOuterWidth($overlayContentElement, true);\r\n                    const needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\r\n                    const columnIndex = this._rowsView.getCellIndex($(options.element).closest(\"td\"));\r\n                    const boundaryNonFixedColumnsInfo = function(fixedColumns) {\r\n                        let firstNonFixedColumnIndex;\r\n                        let lastNonFixedColumnIndex;\r\n                        fixedColumns.some((column, index) => {\r\n                            if (\"transparent\" === column.command) {\r\n                                firstNonFixedColumnIndex = 0 === index ? -1 : index;\r\n                                lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\r\n                                return true\r\n                            }\r\n                            return\r\n                        });\r\n                        return {\r\n                            startColumnIndex: firstNonFixedColumnIndex,\r\n                            endColumnIndex: lastNonFixedColumnIndex\r\n                        }\r\n                    }(fixedColumns);\r\n                    if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\r\n                        position = {\r\n                            collision: \"none flip\",\r\n                            my: \"top left\",\r\n                            at: isOverlayVisible ? \"top right\" : \"bottom left\"\r\n                        }\r\n                    } else if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\r\n                        position = {\r\n                            collision: \"none flip\",\r\n                            my: \"top right\",\r\n                            at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\r\n                        };\r\n                        if (isRevertButton) {\r\n                            position.offset = \"-1 0\"\r\n                        }\r\n                    }\r\n                    return position && {\r\n                        position: position,\r\n                        maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\r\n                    }\r\n                },\r\n                _shiftValidationMessageIfNeed($content, $cell) {\r\n                    const $revertContent = this._revertTooltip && this._revertTooltip.$content();\r\n                    if (!$revertContent) {\r\n                        return\r\n                    }\r\n                    const contentOffset = $content.offset();\r\n                    const revertContentOffset = $revertContent.offset();\r\n                    if (contentOffset.top === revertContentOffset.top && contentOffset.left + getWidth($content) > revertContentOffset.left) {\r\n                        const left = getWidth($revertContent) + 2;\r\n                        $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left)\r\n                    }\r\n                },\r\n                _getRevertTooltipsSelector() {\r\n                    const revertTooltipClass = this.addWidgetPrefix(\"revert-tooltip\");\r\n                    return \".dx-editor-cell .\" + revertTooltipClass\r\n                },\r\n                _getValidationMessagesSelector() {\r\n                    const invalidMessageClass = this.addWidgetPrefix(\"invalid-message\");\r\n                    return `.dx-editor-cell .${invalidMessageClass}, .dx-cell-modified .${invalidMessageClass}`\r\n                },\r\n                init() {\r\n                    this.callBase();\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this._columnsController = this.getController(\"columns\");\r\n                    this._rowsView = this.getView(\"rowsView\")\r\n                },\r\n                loseFocus(skipValidator) {\r\n                    if (!skipValidator) {\r\n                        this.getController(\"validating\").setValidator(null)\r\n                    }\r\n                    this.callBase()\r\n                },\r\n                updateCellState($element, validationResult, isHideBorder) {\r\n                    var _a;\r\n                    const $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\r\n                    const $cell = (null === $focus || void 0 === $focus ? void 0 : $focus.is(\"td\")) ? $focus : null;\r\n                    const rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(\".dx-row\").data(\"options\");\r\n                    const change = rowOptions ? this.getController(\"editing\").getChangeByKey(rowOptions.key) : null;\r\n                    const column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\r\n                    const isCellModified = void 0 !== (null === (_a = null === change || void 0 === change ? void 0 : change.data) || void 0 === _a ? void 0 : _a[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();\r\n                    if (\"cell\" === this._editingController.getEditMode()) {\r\n                        if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {\r\n                            this._showRevertButton($focus)\r\n                        } else {\r\n                            this._revertTooltip && this._revertTooltip.$element().remove()\r\n                        }\r\n                    }\r\n                    const showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\r\n                    if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\r\n                        const errorMessages = [];\r\n                        validationResult.brokenRules.forEach(rule => {\r\n                            if (rule.message) {\r\n                                errorMessages.push(rule.message)\r\n                            }\r\n                        });\r\n                        if (errorMessages.length) {\r\n                            this._showValidationMessage($focus, errorMessages, column.alignment || \"left\")\r\n                        }\r\n                    }!isHideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight()\r\n                },\r\n                focus($element, isHideBorder) {\r\n                    if (!arguments.length) {\r\n                        return this.callBase()\r\n                    }\r\n                    this._hideValidationMessage();\r\n                    if ((null === $element || void 0 === $element ? void 0 : $element.hasClass(\"dx-row\")) || (null === $element || void 0 === $element ? void 0 : $element.hasClass(\"dx-master-detail-cell\"))) {\r\n                        return this.callBase($element, isHideBorder)\r\n                    }\r\n                    const $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\r\n                    const {\r\n                        callBase: callBase\r\n                    } = this;\r\n                    const validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + this.addWidgetPrefix(\"validator\")).eq(0).data(\"dxValidator\"));\r\n                    const rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\r\n                    const editingController = this.getController(\"editing\");\r\n                    const change = rowOptions ? editingController.getChangeByKey(rowOptions.key) : null;\r\n                    const validatingController = this.getController(\"validating\");\r\n                    let validationResult;\r\n                    if (validator) {\r\n                        validatingController.setValidator(validator);\r\n                        const value = validator.option(\"adapter\").getValue();\r\n                        if (cellValueShouldBeValidated(value, rowOptions) || validatingController._rowIsValidated(change)) {\r\n                            editingController.waitForDeferredOperations().done(() => {\r\n                                when(validatingController.validateCell(validator)).done(result => {\r\n                                    validationResult = result;\r\n                                    const {\r\n                                        column: column\r\n                                    } = validationResult.validator.option(\"dataGetter\")();\r\n                                    if (change && column && !validatingController.isCurrentValidatorProcessing({\r\n                                            rowKey: change.key,\r\n                                            columnIndex: column.index\r\n                                        })) {\r\n                                        return\r\n                                    }\r\n                                    if (validationResult.status === VALIDATION_STATUS.invalid) {\r\n                                        isHideBorder = true\r\n                                    }\r\n                                    this.updateCellState($element, validationResult, isHideBorder);\r\n                                    callBase.call(this, $element, isHideBorder)\r\n                                })\r\n                            });\r\n                            return this.callBase($element, isHideBorder)\r\n                        }\r\n                    }\r\n                    this.updateCellState($element, validationResult, isHideBorder);\r\n                    return this.callBase($element, isHideBorder)\r\n                },\r\n                getEditorInstance($container) {\r\n                    const $editor = $container.find(\".dx-texteditor\").eq(0);\r\n                    return gridCoreUtils.getWidgetInstance($editor)\r\n                }\r\n            },\r\n            data: {\r\n                _getValidationStatus(validationResult) {\r\n                    const validationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\r\n                    return validationStatus || VALIDATION_STATUS.valid\r\n                },\r\n                _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var _a, _b;\r\n                    const cell = null === (_a = oldRow.cells) || void 0 === _a ? void 0 : _a[columnIndex];\r\n                    const oldValidationStatus = this._getValidationStatus({\r\n                        status: null === cell || void 0 === cell ? void 0 : cell.validationStatus\r\n                    });\r\n                    const validatingController = this.getController(\"validating\");\r\n                    const validationResult = validatingController.getCellValidationResult({\r\n                        rowKey: oldRow.key,\r\n                        columnIndex: columnIndex\r\n                    });\r\n                    const validationData = validatingController._getValidationData(oldRow.key);\r\n                    const newValidationStatus = this._getValidationStatus(validationResult);\r\n                    const rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\r\n                    const validationStatusChanged = oldValidationStatus !== newValidationStatus && rowIsModified;\r\n                    const cellIsMarkedAsInvalid = $(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(\"invalid\"));\r\n                    const hasValidationRules = null === (_b = null === cell || void 0 === cell ? void 0 : cell.column.validationRules) || void 0 === _b ? void 0 : _b.length;\r\n                    const rowEditStateChanged = oldRow.isEditing !== newRow.isEditing && hasValidationRules;\r\n                    const cellValidationStateChanged = validationStatusChanged || validationData.isValid && cellIsMarkedAsInvalid;\r\n                    if (rowEditStateChanged || cellValidationStateChanged) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                updateFreeSpaceRowHeight($table) {\r\n                    const that = this;\r\n                    let $rowElements;\r\n                    let $freeSpaceRowElement;\r\n                    let $freeSpaceRowElements;\r\n                    const $element = that.element();\r\n                    const $tooltipContent = $element && $element.find(`.${that.addWidgetPrefix(\"invalid-message\")} .dx-overlay-content`);\r\n                    that.callBase($table);\r\n                    if ($tooltipContent && $tooltipContent.length) {\r\n                        $rowElements = that._getRowElements();\r\n                        $freeSpaceRowElements = that._getFreeSpaceRowElements($table);\r\n                        $freeSpaceRowElement = $freeSpaceRowElements.first();\r\n                        if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || getOuterHeight($tooltipContent) > getOuterHeight($freeSpaceRowElement))) {\r\n                            $freeSpaceRowElements.show();\r\n                            setHeight($freeSpaceRowElements, getOuterHeight($tooltipContent));\r\n                            return true\r\n                        }\r\n                    }\r\n                    return\r\n                },\r\n                _formItemPrepared(cellOptions, $container) {\r\n                    this.callBase.apply(this, arguments);\r\n                    deferUpdate(() => {\r\n                        const $editor = $container.find(\".dx-widget\").first();\r\n                        const isEditorDisposed = $editor.length && !$editor.children().length;\r\n                        if (!isEditorDisposed) {\r\n                            this.getController(\"validating\").createValidator(cellOptions, $editor)\r\n                        }\r\n                    })\r\n                },\r\n                _cellPrepared($cell, parameters) {\r\n                    if (!this.getController(\"editing\").isFormOrPopupEditMode()) {\r\n                        this.getController(\"validating\").createValidator(parameters, $cell)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _restoreErrorRow(contentTable) {\r\n                    const editingController = this.getController(\"editing\");\r\n                    editingController && editingController.hasChanges() && this._getRowElements(contentTable).each((_, item) => {\r\n                        const rowOptions = $(item).data(\"options\");\r\n                        if (rowOptions) {\r\n                            const change = editingController.getChangeByKey(rowOptions.key);\r\n                            change && editingController._showErrorRow(change)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}