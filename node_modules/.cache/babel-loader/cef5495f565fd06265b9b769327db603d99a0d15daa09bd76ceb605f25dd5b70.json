{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { VirtualScrollController, subscribeToExternalScrollers } from \"./ui.grid_core.virtual_scrolling_core\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { each } from \"../../core/utils/iterator\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport LoadIndicator from \"../load_indicator\";\nimport browser from \"../../core/utils/browser\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isElementInDom } from \"../../core/utils/dom\";\nimport { isDefined } from \"../../core/utils/type\";\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\nvar TABLE_CONTENT_CLASS = \"table-content\";\nvar GROUP_SPACE_CLASS = \"group-space\";\nvar CONTENT_CLASS = \"content\";\nvar FREESPACE_CLASS = \"dx-freespace-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar SCROLLING_MODE_INFINITE = \"infinite\";\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\nvar LOAD_TIMEOUT = 300;\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\nvar VISIBLE_PAGE_INDEX = \"paging.pageIndex\";\nvar isVirtualMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL;\n};\nvar isAppendMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE;\n};\nvar isVirtualPaging = function (that) {\n  return isVirtualMode(that) || isAppendMode(that);\n};\nvar _correctCount = function (items, count, fromEnd, isItemCountableFunc) {\n  for (var i = 0; i < count + 1; i++) {\n    var item = items[fromEnd ? items.length - 1 - i : i];\n    if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\n      count++;\n    }\n  }\n  return count;\n};\nvar isItemCountableByDataSource = function (item, dataSource) {\n  return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data);\n};\nvar updateItemIndices = function (items) {\n  items.forEach(function (item, index) {\n    item.rowIndex = index;\n  });\n  return items;\n};\nvar VirtualScrollingDataSourceAdapterExtender = function () {\n  var _updateLoading = function (that) {\n    var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\n    if (isVirtualMode(that)) {\n      if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\n        if (!that._isLoading) {\n          that._isLoading = true;\n          that.loadingChanged.fire(true);\n        }\n      } else if (that._isLoading) {\n        that._isLoading = false;\n        that.loadingChanged.fire(false);\n      }\n    }\n  };\n  var result = {\n    init: function () {\n      this.callBase.apply(this, arguments);\n      this._items = [];\n      this._totalCount = -1;\n      this._isLoaded = true;\n      this._loadPageCount = 1;\n      this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions());\n    },\n    _getVirtualScrollDataOptions: function () {\n      var that = this;\n      return {\n        pageSize: function () {\n          return that.pageSize();\n        },\n        totalItemsCount: function () {\n          return that.totalItemsCount();\n        },\n        hasKnownLastPage: function () {\n          return that.hasKnownLastPage();\n        },\n        pageIndex: function (index) {\n          return that._dataSource.pageIndex(index);\n        },\n        isLoading: function () {\n          return that._dataSource.isLoading() && !that.isCustomLoading();\n        },\n        pageCount: function () {\n          return that.pageCount();\n        },\n        load: function () {\n          return that._dataSource.load();\n        },\n        updateLoading: function () {\n          _updateLoading(that);\n        },\n        itemsCount: function () {\n          return that.itemsCount(true);\n        },\n        items: function () {\n          return that._dataSource.items();\n        },\n        viewportItems: function (items) {\n          if (items) {\n            that._items = items;\n          }\n          return that._items;\n        },\n        onChanged: function (e) {\n          that.changed.fire(e);\n        },\n        changingDuration: function (e) {\n          if (that.isLoading()) {\n            return LOAD_TIMEOUT;\n          }\n          return that._renderTime || 0;\n        }\n      };\n    },\n    _handleLoadingChanged: function (isLoading) {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        this.callBase.apply(this, arguments);\n        return;\n      }\n      if (!isVirtualMode(this) || this._isLoadingAll) {\n        this._isLoading = isLoading;\n        this.callBase.apply(this, arguments);\n      }\n      if (isLoading) {\n        this._startLoadTime = new Date();\n      } else {\n        this._startLoadTime = void 0;\n      }\n    },\n    _handleLoadError: function () {\n      if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n        this._isLoading = false;\n        this.loadingChanged.fire(false);\n      }\n      this.callBase.apply(this, arguments);\n    },\n    _handleDataChanged: function (e) {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        this._items = this._dataSource.items().slice();\n        this._totalCount = this._dataSourceTotalCount(true);\n        this.callBase.apply(this, arguments);\n        return;\n      }\n      var callBase = this.callBase.bind(this);\n      this._virtualScrollController.handleDataChanged(callBase, e);\n    },\n    _customizeRemoteOperations: function (options, operationTypes) {\n      var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n      var renderAsync = this.option(\"scrolling.renderAsync\");\n      if (!isDefined(renderAsync)) {\n        renderAsync = this._renderTime >= this.option(\"scrolling.renderingThreshold\");\n      }\n      if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {\n        options.delay = void 0;\n      }\n      this.callBase.apply(this, arguments);\n    },\n    items: function () {\n      return this._items;\n    },\n    _dataSourceTotalCount: function (isBase) {\n      return false === this.option(LEGACY_SCROLLING_MODE) && isVirtualMode(this) && !isBase ? this._totalCount : this.callBase();\n    },\n    itemsCount: function (isBase) {\n      if (isBase || false === this.option(LEGACY_SCROLLING_MODE)) {\n        return this.callBase();\n      }\n      return this._virtualScrollController.itemsCount();\n    },\n    load: function (loadOptions) {\n      if (false === this.option(LEGACY_SCROLLING_MODE) || loadOptions) {\n        return this.callBase(loadOptions);\n      }\n      return this._virtualScrollController.load();\n    },\n    isLoading: function () {\n      return false === this.option(LEGACY_SCROLLING_MODE) ? this._dataSource.isLoading() : this._isLoading;\n    },\n    isLoaded: function () {\n      return this._dataSource.isLoaded() && this._isLoaded;\n    },\n    resetPagesCache: function (isLiveUpdate) {\n      if (!isLiveUpdate) {\n        this._virtualScrollController.reset(true);\n      }\n      this.callBase.apply(this, arguments);\n    },\n    _changeRowExpandCore: function () {\n      var result = this.callBase.apply(this, arguments);\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        return result;\n      }\n      this.resetPagesCache();\n      _updateLoading(this);\n      return result;\n    },\n    reload: function () {\n      this._dataSource.pageIndex(this.pageIndex());\n      var virtualScrollController = this._virtualScrollController;\n      if (false !== this.option(LEGACY_SCROLLING_MODE) && virtualScrollController) {\n        var d = new Deferred();\n        this.callBase.apply(this, arguments).done(function (r) {\n          var delayDeferred = virtualScrollController.getDelayDeferred();\n          if (delayDeferred) {\n            delayDeferred.done(d.resolve).fail(d.reject);\n          } else {\n            d.resolve(r);\n          }\n        }).fail(d.reject);\n        return d;\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    refresh: function (options, operationTypes) {\n      if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n        var storeLoadOptions = options.storeLoadOptions;\n        var dataSource = this._dataSource;\n        if (operationTypes.reload) {\n          this._virtualScrollController.reset();\n          dataSource.items().length = 0;\n          this._isLoaded = false;\n          _updateLoading(this);\n          this._isLoaded = true;\n          if (isAppendMode(this)) {\n            this.pageIndex(0);\n            dataSource.pageIndex(0);\n            storeLoadOptions.pageIndex = 0;\n            options.pageIndex = 0;\n            storeLoadOptions.skip = 0;\n          } else {\n            dataSource.pageIndex(this.pageIndex());\n            if (dataSource.paginate()) {\n              options.pageIndex = this.pageIndex();\n              storeLoadOptions.skip = this.pageIndex() * this.pageSize();\n            }\n          }\n        } else if (isAppendMode(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {\n          storeLoadOptions.skip += this._totalCountCorrection;\n        }\n      }\n      return this.callBase.apply(this, arguments);\n    },\n    dispose: function () {\n      this._virtualScrollController.dispose();\n      this.callBase.apply(this, arguments);\n    },\n    loadPageCount: function (count) {\n      if (!isDefined(count)) {\n        return this._loadPageCount;\n      }\n      this._loadPageCount = count;\n    },\n    _handleDataLoading: function (options) {\n      var loadPageCount = this.loadPageCount();\n      var pageSize = this.pageSize();\n      var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n      var storeLoadOptions = options.storeLoadOptions;\n      var takeIsDefined = isDefined(storeLoadOptions.take);\n      options.loadPageCount = loadPageCount;\n      if (!options.isCustomLoading && newMode && takeIsDefined && loadPageCount > 1 && pageSize > 0) {\n        storeLoadOptions.take = loadPageCount * pageSize;\n      }\n      this.callBase.apply(this, arguments);\n    },\n    _loadPageSize: function () {\n      return this.callBase.apply(this, arguments) * this.loadPageCount();\n    }\n  };\n  [\"beginPageIndex\", \"endPageIndex\", \"pageIndex\"].forEach(function (name) {\n    result[name] = function () {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        var dataSource = this._dataSource;\n        return dataSource.pageIndex.apply(dataSource, arguments);\n      }\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentItemSizes\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"loadIfNeed\"].forEach(function (name) {\n    result[name] = function () {\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  return result;\n}();\nvar VirtualScrollingRowsViewExtender = function () {\n  var removeEmptyRows = function ($emptyRows, className) {\n    var tBodies = $emptyRows.toArray().map(row => $(row).parent(\".\" + className).get(0)).filter(row => row);\n    if (tBodies.length) {\n      $emptyRows = $(tBodies);\n    }\n    var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\n    for (var i = 0; i < rowCount; i++) {\n      $emptyRows.eq(i).remove();\n    }\n  };\n  return {\n    init: function () {\n      var _dataController$state;\n      var dataController = this.getController(\"data\");\n      this.callBase();\n      dataController.pageChanged.add(pageIndex => {\n        var scrollTop = this._scrollTop;\n        this.scrollToPage(null !== pageIndex && void 0 !== pageIndex ? pageIndex : dataController.pageIndex());\n        if (false === this.option(LEGACY_SCROLLING_MODE) && this._scrollTop === scrollTop) {\n          dataController.updateViewport();\n        }\n      });\n      dataController.dataSourceChanged.add(() => {\n        !this._scrollTop && this._scrollToCurrentPageOnResize();\n      });\n      null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(() => {\n        this._scrollToCurrentPageOnResize();\n      });\n      this._scrollToCurrentPageOnResize();\n    },\n    _scrollToCurrentPageOnResize: function () {\n      var dataController = this.getController(\"data\");\n      if (dataController.pageIndex() > 0) {\n        var resizeHandler = () => {\n          this.resizeCompleted.remove(resizeHandler);\n          this.scrollToPage(dataController.pageIndex());\n        };\n        this.resizeCompleted.add(resizeHandler);\n      }\n    },\n    scrollToPage: function (pageIndex) {\n      var dataController = this._dataController;\n      var pageSize = dataController ? dataController.pageSize() : 0;\n      var scrollPosition;\n      if (isVirtualMode(this) || isAppendMode(this)) {\n        var itemSize = dataController.getItemSize();\n        var itemSizes = dataController.getItemSizes();\n        var itemIndex = pageIndex * pageSize;\n        scrollPosition = itemIndex * itemSize;\n        for (var index in itemSizes) {\n          if (index < itemIndex) {\n            scrollPosition += itemSizes[index] - itemSize;\n          }\n        }\n      } else {\n        scrollPosition = 0;\n      }\n      this.scrollTo({\n        y: scrollPosition,\n        x: this._scrollLeft\n      });\n    },\n    renderDelayedTemplates: function (e) {\n      this.waitAsyncTemplates().done(() => {\n        this._updateContentPosition(true);\n      });\n      this.callBase.apply(this, arguments);\n    },\n    _renderCore: function (e) {\n      var startRenderTime = new Date();\n      var deferred = this.callBase.apply(this, arguments);\n      var dataSource = this._dataController._dataSource;\n      if (dataSource && e) {\n        var itemCount = e.items ? e.items.length : 20;\n        var viewportSize = this._dataController.viewportSize() || 20;\n        if (gridCoreUtils.isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE)) {\n          dataSource._renderTime = (new Date() - startRenderTime) * viewportSize / itemCount;\n        } else {\n          dataSource._renderTime = new Date() - startRenderTime;\n        }\n      }\n      return deferred;\n    },\n    _getRowElements: function (tableElement) {\n      var $rows = this.callBase(tableElement);\n      return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS);\n    },\n    _removeRowsElements: function (contentTable, removeCount, changeType) {\n      var rowElements = this._getRowElements(contentTable).toArray();\n      if (\"append\" === changeType) {\n        rowElements = rowElements.slice(0, removeCount);\n      } else {\n        rowElements = rowElements.slice(-removeCount);\n      }\n      var errorHandlingController = this.getController(\"errorHandling\");\n      rowElements.map(rowElement => {\n        var $rowElement = $(rowElement);\n        errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\n        $rowElement.remove();\n      });\n    },\n    _updateContent: function (tableElement, change) {\n      var $freeSpaceRowElements;\n      var contentElement = this._findContentElement();\n      var changeType = change && change.changeType;\n      var d = Deferred();\n      var contentTable = contentElement.children().first();\n      if (\"append\" === changeType || \"prepend\" === changeType) {\n        this.waitAsyncTemplates().done(() => {\n          var $tBodies = this._getBodies(tableElement);\n          if (1 === $tBodies.length) {\n            this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children());\n          } else {\n            $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable);\n          }\n          tableElement.remove();\n          $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\n          removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\n          if (change.removeCount) {\n            this._removeRowsElements(contentTable, change.removeCount, changeType);\n          }\n          this._restoreErrorRow(contentTable);\n          d.resolve();\n        }).fail(d.reject);\n      } else {\n        this.callBase.apply(this, arguments).done(() => {\n          if (\"update\" === changeType) {\n            this._restoreErrorRow(contentTable);\n          }\n          d.resolve();\n        }).fail(d.reject);\n      }\n      return d.promise().done(() => {\n        this._updateBottomLoading();\n      });\n    },\n    _addVirtualRow: function ($table, isFixed, location, position) {\n      if (!position) {\n        return;\n      }\n      var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\n      $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\n      this._appendEmptyRow($table, $virtualRow, location);\n    },\n    _updateContentItemSizes: function () {\n      var rowHeights = this._getRowHeights();\n      var correctedRowHeights = this._correctRowHeights(rowHeights);\n      this._dataController.setContentItemSizes(correctedRowHeights);\n    },\n    _updateViewportSize: function (viewportHeight, scrollTop) {\n      if (!isDefined(viewportHeight)) {\n        viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\n      }\n      this._dataController.viewportHeight(viewportHeight, scrollTop);\n    },\n    _getRowHeights: function () {\n      var _this$getController, _this$getController$i;\n      var isPopupEditMode = null === (_this$getController = this.getController(\"editing\")) || void 0 === _this$getController ? void 0 : null === (_this$getController$i = _this$getController.isPopupEditMode) || void 0 === _this$getController$i ? void 0 : _this$getController$i.call(_this$getController);\n      var rowElements = this._getRowElements(this._tableElement).toArray();\n      if (isPopupEditMode) {\n        rowElements = rowElements.filter(row => !$(row).hasClass(ROW_INSERTED));\n      }\n      return rowElements.map(row => getBoundingRect(row).height);\n    },\n    _correctRowHeights: function (rowHeights) {\n      var dataController = this._dataController;\n      var dataSource = dataController._dataSource;\n      var correctedRowHeights = [];\n      var visibleRows = dataController.getVisibleRows();\n      var itemSize = 0;\n      var firstCountableItem = true;\n      var lastLoadIndex = -1;\n      for (var i = 0; i < rowHeights.length; i++) {\n        var currentItem = visibleRows[i];\n        if (!isDefined(currentItem)) {\n          continue;\n        }\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\n          if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {\n            correctedRowHeights.push(itemSize);\n            itemSize = 0;\n          }\n          lastLoadIndex = currentItem.loadIndex;\n        } else if (isItemCountableByDataSource(currentItem, dataSource)) {\n          if (firstCountableItem) {\n            firstCountableItem = false;\n          } else {\n            correctedRowHeights.push(itemSize);\n            itemSize = 0;\n          }\n        }\n        itemSize += rowHeights[i];\n      }\n      itemSize > 0 && correctedRowHeights.push(itemSize);\n      return correctedRowHeights;\n    },\n    _updateContentPosition: function (isRender) {\n      var dataController = this._dataController;\n      var rowHeight = this._rowHeight || 20;\n      dataController.viewportItemSize(rowHeight);\n      if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n        if (!isRender) {\n          this._updateContentItemSizes();\n        }\n        var top = dataController.getContentOffset(\"begin\");\n        var bottom = dataController.getContentOffset(\"end\");\n        var $tables = this.getTableElements();\n        var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\n        removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\n        $tables.each((index, element) => {\n          var isFixed = index > 0;\n          var prevFixed = this._isFixedTableRendering;\n          this._isFixedTableRendering = isFixed;\n          this._addVirtualRow($(element), isFixed, \"top\", top);\n          this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\n          this._isFixedTableRendering = prevFixed;\n        });\n      }\n    },\n    _isTableLinesDisplaysCorrect: function (table) {\n      var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\n      return hasColumnLines === this.option(\"showColumnLines\");\n    },\n    _isColumnElementsEqual: function ($columns, $virtualColumns) {\n      var result = $columns.length === $virtualColumns.length;\n      if (result) {\n        each($columns, function (index, element) {\n          if (element.style.width !== $virtualColumns[index].style.width) {\n            result = false;\n            return result;\n          }\n        });\n      }\n      return result;\n    },\n    _getCellClasses: function (column) {\n      var classes = [];\n      var cssClass = column.cssClass;\n      var isExpandColumn = \"expand\" === column.command;\n      cssClass && classes.push(cssClass);\n      isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\n      return classes;\n    },\n    _findBottomLoadPanel: function ($contentElement) {\n      var $element = $contentElement || this.element();\n      var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\n      if ($bottomLoadPanel && $bottomLoadPanel.length) {\n        return $bottomLoadPanel;\n      }\n    },\n    _updateBottomLoading: function () {\n      var virtualMode = isVirtualMode(this);\n      var appendMode = isAppendMode(this);\n      var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);\n      var $contentElement = this._findContentElement();\n      var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);\n      if (showBottomLoading) {\n        if (!bottomLoadPanelElement) {\n          $(\"<div>\").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent($(\"<div>\"), LoadIndicator).$element()).appendTo($contentElement);\n        }\n      } else if (bottomLoadPanelElement) {\n        bottomLoadPanelElement.remove();\n      }\n    },\n    _handleScroll: function (e) {\n      var legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE);\n      var zeroTopPosition = 0 === e.scrollOffset.top;\n      var isScrollTopChanged = this._scrollTop !== e.scrollOffset.top;\n      var hasScrolled = isScrollTopChanged || e.forceUpdateScrollPosition;\n      var isValidScrollTarget = this._hasHeight || !legacyScrollingMode && zeroTopPosition;\n      if (hasScrolled && isValidScrollTarget && this._rowHeight) {\n        this._scrollTop = e.scrollOffset.top;\n        var isVirtualRowRendering = isVirtualMode(this) || \"standard\" !== this.option(\"scrolling.rowRenderingMode\");\n        if (isVirtualRowRendering && false === this.option(LEGACY_SCROLLING_MODE)) {\n          this._updateContentItemSizes();\n          this._updateViewportSize(null, this._scrollTop);\n        }\n        this._dataController.setViewportPosition(e.scrollOffset.top);\n      }\n      this.callBase.apply(this, arguments);\n    },\n    _needUpdateRowHeight: function (itemsCount) {\n      return this.callBase.apply(this, arguments) || itemsCount > 0 && isAppendMode(this) && !gridCoreUtils.isVirtualRowRendering(this);\n    },\n    _updateRowHeight: function () {\n      this.callBase.apply(this, arguments);\n      if (this._rowHeight) {\n        this._updateContentPosition();\n        var viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\n        var dataController = this._dataController;\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\n          this._updateViewportSize(viewportHeight);\n          dataController.updateViewport();\n        } else {\n          dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight));\n        }\n      }\n    },\n    updateFreeSpaceRowHeight: function () {\n      var result = this.callBase.apply(this, arguments);\n      if (result) {\n        this._updateContentPosition();\n      }\n      return result;\n    },\n    setLoading: function (isLoading, messageText) {\n      var dataController = this._dataController;\n      var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\n      if (false === this.option(LEGACY_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\n        return;\n      }\n      if (hasBottomLoadPanel) {\n        isLoading = false;\n      }\n      this.callBase.call(this, isLoading, messageText);\n    },\n    _resizeCore: function () {\n      var that = this;\n      var $element = that.element();\n      that.callBase();\n      if (that.component.$element() && !that._windowScroll && isElementInDom($element)) {\n        that._windowScroll = subscribeToExternalScrollers($element, function (scrollPos) {\n          if (!that._hasHeight && that._rowHeight) {\n            that._dataController.setViewportPosition(scrollPos);\n          }\n        }, that.component.$element());\n        that.on(\"disposing\", function () {\n          that._windowScroll.dispose();\n        });\n      }\n      if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n        that.loadIfNeed();\n      }\n    },\n    loadIfNeed: function () {\n      var _dataController$loadI;\n      var dataController = this._dataController;\n      null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController);\n    },\n    setColumnWidths: function (widths) {\n      var scrollable = this.getScrollable();\n      var $content;\n      this.callBase.apply(this, arguments);\n      if (\"virtual\" === this.option(\"scrolling.mode\")) {\n        $content = scrollable ? $(scrollable.content()) : this.element();\n        this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"));\n      }\n    },\n    _restoreErrorRow: function () {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        var errorHandling = this.getController(\"errorHandling\");\n        null === errorHandling || void 0 === errorHandling ? void 0 : errorHandling.removeErrorRow();\n      }\n      this.callBase.apply(this, arguments);\n    },\n    dispose: function () {\n      clearTimeout(this._scrollTimeoutID);\n      this.callBase();\n    }\n  };\n}();\nexport var virtualScrollingModule = {\n  defaultOptions: function () {\n    return {\n      scrolling: {\n        timeout: 300,\n        updateTimeout: 300,\n        minTimeout: 0,\n        renderingThreshold: 100,\n        removeInvisiblePages: true,\n        rowPageSize: 5,\n        prerenderedRowChunkSize: 1,\n        mode: \"standard\",\n        preloadEnabled: false,\n        rowRenderingMode: \"standard\",\n        loadTwoPagesOnStart: false,\n        legacyMode: false,\n        prerenderedRowCount: 1\n      }\n    };\n  },\n  extenders: {\n    dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\n    controllers: {\n      data: function () {\n        var members = {\n          _refreshDataSource: function () {\n            var baseResult = this.callBase.apply(this, arguments) || new Deferred().resolve().promise();\n            baseResult.done(this.initVirtualRows.bind(this));\n            return baseResult;\n          },\n          _loadDataSource: function () {\n            if (this._rowsScrollController && isVirtualPaging(this)) {\n              var _this$_dataSource;\n              var {\n                loadPageCount: loadPageCount\n              } = isDefined(this._loadViewportParams) ? this.getLoadPageParams() : {};\n              loadPageCount >= 1 && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.loadPageCount(loadPageCount));\n            }\n            return this.callBase.apply(this, arguments);\n          },\n          getRowPageSize: function () {\n            var rowPageSize = this.option(\"scrolling.rowPageSize\");\n            var pageSize = this.pageSize();\n            return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize;\n          },\n          reload: function () {\n            var rowsScrollController = this._rowsScrollController || this._dataSource;\n            var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\n            var result = this.callBase.apply(this, arguments);\n            return result && result.done(() => {\n              if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n                var rowIndexOffset = this.getRowIndexOffset();\n                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\n                var component = this.component;\n                var scrollable = component.getScrollable && component.getScrollable();\n                var isSortingOperation = this.dataSource().operationTypes().sorting;\n                if (scrollable && !isSortingOperation && rowIndex >= 0) {\n                  var rowElement = component.getRowElement(rowIndex);\n                  var $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\n                  var top = $rowElement && $rowElement.position().top;\n                  var isChromeLatest = browser.chrome && browser.version >= 91;\n                  var allowedTopOffset = browser.mozilla || isChromeLatest ? 1 : 0;\n                  if (top > allowedTopOffset) {\n                    top = Math.round(top + getOuterHeight($rowElement) * (itemIndex % 1));\n                    scrollable.scrollTo({\n                      y: top\n                    });\n                  }\n                }\n              }\n            });\n          },\n          initVirtualRows: function () {\n            var virtualRowsRendering = gridCoreUtils.isVirtualRowRendering(this);\n            this._allItems = null;\n            this._loadViewportParams = null;\n            if (\"virtual\" !== this.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE) && !this.option(\"scrolling.rowPageSize\")) {\n              this._visibleItems = null;\n              this._rowsScrollController = null;\n              return;\n            }\n            var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\n            this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\n            this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE) ? null : [];\n            this._viewportChanging = false;\n            this._needUpdateViewportAfterLoading = false;\n            if (!this._rowsScrollController) {\n              this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\n              this._rowsScrollController.positionChanged.add(() => {\n                var _this$_dataSource2;\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\n                  this._viewportChanging = true;\n                  this.loadViewport();\n                  this._viewportChanging = false;\n                  return;\n                }\n                null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 ? void 0 : _this$_dataSource2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex());\n              });\n            }\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              this._updateLoadViewportParams();\n            }\n            if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE)) {\n              this._rowsScrollController.load();\n            }\n          },\n          isViewportChanging: function () {\n            return this._viewportChanging;\n          },\n          _getRowsScrollDataOptions: function () {\n            var that = this;\n            var isItemCountable = function (item) {\n              return isItemCountableByDataSource(item, that._dataSource);\n            };\n            return {\n              pageSize: function () {\n                return that.getRowPageSize();\n              },\n              loadedOffset: function () {\n                var _that$_dataSource;\n                return isVirtualMode(that) && (null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.lastLoadOptions().skip) || 0;\n              },\n              loadedItemCount: function () {\n                return that._itemCount;\n              },\n              totalItemsCount: function () {\n                if (isVirtualPaging(that)) {\n                  return that.totalItemsCount();\n                }\n                return false === that.option(LEGACY_SCROLLING_MODE) ? that._itemCount : that._items.filter(isItemCountable).length;\n              },\n              hasKnownLastPage: function () {\n                return false === that.option(LEGACY_SCROLLING_MODE) ? that.hasKnownLastPage() : true;\n              },\n              pageIndex: function (index) {\n                if (void 0 !== index) {\n                  that._rowPageIndex = index;\n                }\n                return that._rowPageIndex;\n              },\n              isLoading: function () {\n                return that.isLoading();\n              },\n              pageCount: function () {\n                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\n                return pageCount ? pageCount : 1;\n              },\n              load: function () {\n                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\n                  that._rowPageIndex = this.pageCount() - 1;\n                  that._rowsScrollController.pageIndex(that._rowPageIndex);\n                }\n                if (!this.items().length && this.totalItemsCount()) {\n                  return;\n                }\n                that._rowsScrollController.handleDataChanged(change => {\n                  change = change || {};\n                  change.changeType = change.changeType || \"refresh\";\n                  change.items = change.items || that._visibleItems;\n                  that._visibleItems.forEach((item, index) => {\n                    item.rowIndex = index;\n                  });\n                  that._fireChanged(change);\n                });\n              },\n              updateLoading: function () {},\n              itemsCount: function () {\n                return this.items(true).length;\n              },\n              correctCount: function (items, count, fromEnd) {\n                return _correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {\n                  if (item.isNewRow) {\n                    return isNextAfterLast && !fromEnd;\n                  }\n                  if (isNextAfterLast && fromEnd) {\n                    return !item.isNewRow;\n                  }\n                  return isItemCountable(item);\n                });\n              },\n              items: function (countableOnly) {\n                var result = that._items;\n                if (that.option(LEGACY_SCROLLING_MODE)) {\n                  var dataSource = that.dataSource();\n                  var virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();\n                  var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\n                  var rowPageSize = that.getRowPageSize();\n                  var skip = that._rowPageIndex * rowPageSize - begin;\n                  var take = rowPageSize;\n                  if (skip < 0) {\n                    return [];\n                  }\n                  if (skip) {\n                    skip = this.correctCount(result, skip);\n                    result = result.slice(skip);\n                  }\n                  if (take) {\n                    take = this.correctCount(result, take);\n                    result = result.slice(0, take);\n                  }\n                }\n                return countableOnly ? result.filter(isItemCountable) : result;\n              },\n              viewportItems: function (items) {\n                if (items && false !== that.option(LEGACY_SCROLLING_MODE)) {\n                  that._visibleItems = items;\n                }\n                return that._visibleItems;\n              },\n              onChanged: function () {},\n              changingDuration: function (e) {\n                var dataSource = that.dataSource();\n                if (null !== dataSource && void 0 !== dataSource && dataSource.isLoading() && false !== that.option(LEGACY_SCROLLING_MODE)) {\n                  return LOAD_TIMEOUT;\n                }\n                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0;\n              }\n            };\n          },\n          _updateItemsCore: function (change) {\n            var delta = this.getRowIndexDelta();\n            this.callBase.apply(this, arguments);\n            if (false === this.option(LEGACY_SCROLLING_MODE) && gridCoreUtils.isVirtualRowRendering(this)) {\n              if (\"update\" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {\n                change.cancel = true;\n              }\n              return;\n            }\n            var rowsScrollController = this._rowsScrollController;\n            if (rowsScrollController) {\n              var visibleItems = this._visibleItems;\n              var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\n              if (\"append\" === change.changeType && change.items && !change.items.length) {\n                return;\n              }\n              if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\n                change.cancel = true;\n                isRefresh && rowsScrollController.reset(true);\n                rowsScrollController.load();\n              } else {\n                if (\"update\" === change.changeType) {\n                  change.rowIndices.forEach((rowIndex, index) => {\n                    var changeType = change.changeTypes[index];\n                    var newItem = change.items[index];\n                    if (\"update\" === changeType) {\n                      visibleItems[rowIndex] = newItem;\n                    } else if (\"insert\" === changeType) {\n                      visibleItems.splice(rowIndex, 0, newItem);\n                    } else if (\"remove\" === changeType) {\n                      visibleItems.splice(rowIndex, 1);\n                    }\n                  });\n                } else {\n                  visibleItems.forEach((item, index) => {\n                    visibleItems[index] = this._items[index + delta] || visibleItems[index];\n                  });\n                  change.items = visibleItems;\n                }\n                updateItemIndices(visibleItems);\n              }\n            }\n          },\n          _updateLoadViewportParams: function () {\n            var viewportParams = this._rowsScrollController.getViewportParams();\n            var pageSize = this.pageSize();\n            if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {\n              var pageOffset = this.pageIndex() * pageSize;\n              viewportParams.skip += pageOffset;\n            }\n            this._loadViewportParams = viewportParams;\n          },\n          _processItems: function (items) {\n            var resultItems = this.callBase.apply(this, arguments);\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              var _dataSource$lastLoadO;\n              var dataSource = this._dataSource;\n              var currentIndex = null !== (_dataSource$lastLoadO = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO ? _dataSource$lastLoadO : 0;\n              var prevCountable;\n              var prevRowType;\n              var isPrevRowNew;\n              var wasCountableItem = false;\n              var newRows = [];\n              resultItems.forEach(item => {\n                var rowType = item.rowType;\n                var itemCountable = isItemCountableByDataSource(item, dataSource);\n                var isNextGroupItem = \"group\" === rowType && (prevCountable || itemCountable || \"group\" !== prevRowType && currentIndex > 0);\n                var isNextDataItem = \"data\" === rowType && itemCountable && (prevCountable || \"group\" !== prevRowType);\n                if (!item.isNewRow && isDefined(prevCountable)) {\n                  var isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;\n                  if ((isNextGroupItem || isNextDataItem) && !isPrevNewRowFirst) {\n                    currentIndex++;\n                  }\n                }\n                if (isNextGroupItem || isNextDataItem) {\n                  wasCountableItem = true;\n                }\n                if (item.isNewRow) {\n                  newRows.push(item);\n                } else {\n                  newRows.forEach(it => it.loadIndex = currentIndex);\n                  newRows = [];\n                }\n                item.loadIndex = currentIndex;\n                prevCountable = itemCountable;\n                prevRowType = rowType;\n                isPrevRowNew = item.isNewRow;\n              });\n              newRows.forEach(it => it.loadIndex = currentIndex);\n            }\n            return resultItems;\n          },\n          _afterProcessItems: function (items, change) {\n            this._itemCount = items.filter(item => isItemCountableByDataSource(item, this._dataSource)).length;\n            if (isDefined(this._loadViewportParams)) {\n              this._updateLoadViewportParams();\n              var result = items;\n              this._allItems = items;\n              if (items.length) {\n                var {\n                  skipForCurrentPage: skipForCurrentPage\n                } = this.getLoadPageParams(true);\n                var skip = items[0].loadIndex + skipForCurrentPage;\n                var take = this._loadViewportParams.take;\n                result = items.filter(it => {\n                  var isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;\n                  var isLoadIndexGreaterStart = it.loadIndex >= skip;\n                  var isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;\n                  return isLoadIndexGreaterStart && isLoadIndexLessEnd;\n                });\n              }\n              return result;\n            }\n            return this.callBase.apply(this, arguments);\n          },\n          _applyChange: function (change) {\n            var that = this;\n            var items = change.items;\n            var changeType = change.changeType;\n            var removeCount = change.removeCount;\n            if (removeCount) {\n              var fromEnd = \"prepend\" === changeType;\n              removeCount = _correctCount(that._items, removeCount, fromEnd, function (item, isNextAfterLast) {\n                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast);\n              });\n              change.removeCount = removeCount;\n            }\n            switch (changeType) {\n              case \"prepend\":\n                that._items.unshift.apply(that._items, items);\n                if (removeCount) {\n                  that._items.splice(-removeCount);\n                }\n                break;\n              case \"append\":\n                that._items.push.apply(that._items, items);\n                if (removeCount) {\n                  that._items.splice(0, removeCount);\n                }\n                break;\n              default:\n                that.callBase(change);\n            }\n          },\n          items: function (allItems) {\n            return allItems ? this._allItems || this._items : this._visibleItems || this._items;\n          },\n          getRowIndexDelta: function () {\n            var delta = 0;\n            if (this.option(LEGACY_SCROLLING_MODE)) {\n              var visibleItems = this._visibleItems;\n              if (visibleItems && visibleItems[0]) {\n                delta = this._items.indexOf(visibleItems[0]);\n              }\n            }\n            return delta < 0 ? 0 : delta;\n          },\n          getRowIndexOffset: function (byLoadedRows) {\n            var offset = 0;\n            var dataSource = this.dataSource();\n            var rowsScrollController = this._rowsScrollController;\n            var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n            var virtualPaging = isVirtualPaging(this);\n            if (rowsScrollController && !byLoadedRows) {\n              if (newMode && isDefined(this._loadViewportParams)) {\n                var {\n                  skipForCurrentPage: skipForCurrentPage,\n                  pageIndex: pageIndex\n                } = this.getLoadPageParams(true);\n                var items = this.items(true);\n                offset = virtualPaging ? pageIndex * this.pageSize() : 0;\n                if (items.length) {\n                  var firstLoadIndex = items[0].loadIndex;\n                  offset += items.filter(item => item.loadIndex < firstLoadIndex + skipForCurrentPage).length;\n                }\n              } else {\n                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize();\n              }\n            } else if (virtualPaging && newMode && dataSource) {\n              var _dataSource$lastLoadO2;\n              offset = null !== (_dataSource$lastLoadO2 = dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO2 ? _dataSource$lastLoadO2 : 0;\n            } else if (isVirtualMode(this) && dataSource) {\n              offset = dataSource.beginPageIndex() * dataSource.pageSize();\n            }\n            return offset;\n          },\n          getDataIndex: function (change) {\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return this.getRowIndexOffset(true);\n            }\n            return this.callBase.apply(this, arguments);\n          },\n          viewportSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return result;\n            }\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments);\n          },\n          viewportHeight: function (height, scrollTop) {\n            var _this$_rowsScrollCont;\n            null === (_this$_rowsScrollCont = this._rowsScrollController) || void 0 === _this$_rowsScrollCont ? void 0 : _this$_rowsScrollCont.viewportHeight(height, scrollTop);\n          },\n          viewportItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return result;\n            }\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments);\n          },\n          setViewportPosition: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            this._isPaging = false;\n            if (rowsScrollController) {\n              rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments);\n            }\n          },\n          setContentItemSizes: function (sizes) {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return result;\n            }\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes);\n          },\n          getPreloadedRowCount: function () {\n            var preloadCount = this.option(\"scrolling.preloadedRowCount\");\n            var preloadEnabled = this.option(\"scrolling.preloadEnabled\");\n            if (isDefined(preloadCount)) {\n              return preloadCount;\n            }\n            var viewportSize = this.viewportSize();\n            return preloadEnabled ? 2 * viewportSize : viewportSize;\n          },\n          getLoadPageParams: function (byLoadedPage) {\n            var _this$_dataSource3, _this$_dataSource4;\n            var pageSize = this.pageSize();\n            var viewportParams = this._loadViewportParams;\n            var lastLoadOptions = null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.lastLoadOptions();\n            var loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;\n            var loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;\n            var isScrollingBack = this._rowsScrollController.isScrollingBack();\n            var topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;\n            var bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();\n            var totalCountCorrection = (null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.totalCountCorrection()) || 0;\n            var skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);\n            var pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);\n            var pageOffset = pageIndex * pageSize;\n            var skipForCurrentPage = viewportParams.skip - pageOffset;\n            var loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;\n            var take = byLoadedPage ? loadedTake : loadingTake;\n            var loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);\n            return {\n              pageIndex: pageIndex,\n              loadPageCount: Math.max(1, loadPageCount),\n              skipForCurrentPage: Math.max(0, skipForCurrentPage)\n            };\n          },\n          _updateVisiblePageIndex: function (currentPageIndex) {\n            if (!this._rowsScrollController) {\n              return;\n            }\n            if (isDefined(currentPageIndex)) {\n              this._silentOption(VISIBLE_PAGE_INDEX, currentPageIndex);\n              this.pageChanged.fire();\n              return;\n            }\n            var viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();\n            var newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());\n            if (this.pageIndex() !== newPageIndex) {\n              this._silentOption(VISIBLE_PAGE_INDEX, newPageIndex);\n              this.updateItems({\n                changeType: \"pageIndex\"\n              });\n            }\n          },\n          _getChangedLoadParams: function () {\n            var loadedPageParams = this.getLoadPageParams(true);\n            var {\n              pageIndex: pageIndex,\n              loadPageCount: loadPageCount\n            } = this.getLoadPageParams();\n            var pageIndexIsValid = this._pageIndexIsValid(pageIndex);\n            var result = null;\n            if (!this._isLoading && pageIndexIsValid && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {\n              result = {\n                pageIndex: pageIndex,\n                loadPageCount: loadPageCount\n              };\n            }\n            return result;\n          },\n          _pageIndexIsValid: function (pageIndex) {\n            var result = true;\n            if (isAppendMode(this) && this.hasKnownLastPage() || isVirtualMode(this)) {\n              result = pageIndex * this.pageSize() < this.totalItemsCount();\n            }\n            return result;\n          },\n          _loadItems: function (checkLoading, viewportIsFilled) {\n            var _dataSourceAdapter$lo, _dataSourceAdapter$pa;\n            var virtualPaging = isVirtualPaging(this);\n            var dataSourceAdapter = this._dataSource;\n            var changedParams = this._getChangedLoadParams();\n            var currentLoadPageCount = null !== (_dataSourceAdapter$lo = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) && void 0 !== _dataSourceAdapter$lo ? _dataSourceAdapter$lo : 0;\n            var lastRequiredItemCount = this.pageSize() * currentLoadPageCount;\n            var currentPageIndex = null !== (_dataSourceAdapter$pa = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) && void 0 !== _dataSourceAdapter$pa ? _dataSourceAdapter$pa : 0;\n            var pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;\n            var allLoadedInAppendMode = isAppendMode(this) && this.totalItemsCount() < lastRequiredItemCount;\n            var isRepaintMode = \"repaint\" === this.option(\"editing.refreshMode\");\n            var pageIndexIncreased = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex;\n            var result = false;\n            if (!dataSourceAdapter || virtualPaging && checkLoading && (isRepaintMode && viewportIsFilled || pageIndexIncreased || pageIndexNotChanged && allLoadedInAppendMode)) {\n              return result;\n            }\n            if (virtualPaging && this._isLoading) {\n              this._needUpdateViewportAfterLoading = true;\n            }\n            if (virtualPaging && changedParams) {\n              result = true;\n              dataSourceAdapter.pageIndex(changedParams.pageIndex);\n              dataSourceAdapter.loadPageCount(changedParams.loadPageCount);\n              this._repaintChangesOnly = true;\n              this._needUpdateDimensions = true;\n              var viewportChanging = this._viewportChanging;\n              this.load().always(() => {\n                this._repaintChangesOnly = void 0;\n                this._needUpdateDimensions = void 0;\n              }).done(() => {\n                var isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;\n                (viewportChanging || isLastPage) && this._updateVisiblePageIndex();\n                if (this._needUpdateViewportAfterLoading) {\n                  this._needUpdateViewportAfterLoading = false;\n                  this.loadViewport({\n                    checkLoadedParamsOnly: true\n                  });\n                }\n              });\n            }\n            return result;\n          },\n          loadViewport: function (params) {\n            var {\n              checkLoadedParamsOnly: checkLoadedParamsOnly,\n              checkLoading: checkLoading,\n              viewportIsNotFilled: viewportIsNotFilled\n            } = null !== params && void 0 !== params ? params : {};\n            var virtualPaging = isVirtualPaging(this);\n            if (virtualPaging || gridCoreUtils.isVirtualRowRendering(this)) {\n              this._updateLoadViewportParams();\n              var loadingItemsStarted = this._loadItems(checkLoading, !viewportIsNotFilled);\n              var needToUpdateItems = !(loadingItemsStarted || this._isLoading && checkLoading || checkLoadedParamsOnly);\n              if (needToUpdateItems) {\n                var _this$getController2, _this$getController2$;\n                var noPendingChangesInEditing = !(null !== (_this$getController2 = this.getController(\"editing\")) && void 0 !== _this$getController2 && null !== (_this$getController2$ = _this$getController2.getChanges()) && void 0 !== _this$getController2$ && _this$getController2$.length);\n                this.updateItems({\n                  repaintChangesOnly: true,\n                  needUpdateDimensions: true,\n                  useProcessedItemsCache: noPendingChangesInEditing,\n                  cancelEmptyChanges: true\n                });\n              }\n            }\n          },\n          updateViewport: function () {\n            var _this$_loadViewportPa, _this$_loadViewportPa2;\n            var viewportSize = this.viewportSize();\n            var itemCount = this.items().length;\n            var viewportIsNotFilled = viewportSize > itemCount;\n            var currentTake = null !== (_this$_loadViewportPa = null === (_this$_loadViewportPa2 = this._loadViewportParams) || void 0 === _this$_loadViewportPa2 ? void 0 : _this$_loadViewportPa2.take) && void 0 !== _this$_loadViewportPa ? _this$_loadViewportPa : 0;\n            var rowsScrollController = this._rowsScrollController;\n            var newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;\n            (viewportIsNotFilled || currentTake < newTake) && !this._isPaging && itemCount && this.loadViewport({\n              checkLoading: true,\n              viewportIsNotFilled: viewportIsNotFilled\n            });\n          },\n          loadIfNeed: function () {\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return;\n            }\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.loadIfNeed();\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.loadIfNeed();\n          },\n          getItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSize.apply(rowsScrollController, arguments);\n            }\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSize.apply(dataSource, arguments);\n          },\n          getItemSizes: function () {\n            var rowsScrollController = this._rowsScrollController;\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments);\n            }\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSizes.apply(dataSource, arguments);\n          },\n          getContentOffset: function () {\n            var rowsScrollController = this._rowsScrollController;\n            if (rowsScrollController) {\n              return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments);\n            }\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getContentOffset.apply(dataSource, arguments);\n          },\n          refresh: function (options) {\n            var dataSource = this._dataSource;\n            if (dataSource && options && options.load && isAppendMode(this)) {\n              dataSource.resetCurrentTotalCount();\n            }\n            return this.callBase.apply(this, arguments);\n          },\n          dispose: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.dispose();\n            this.callBase.apply(this, arguments);\n          },\n          topItemIndex: function () {\n            var _this$_loadViewportPa3;\n            return null === (_this$_loadViewportPa3 = this._loadViewportParams) || void 0 === _this$_loadViewportPa3 ? void 0 : _this$_loadViewportPa3.skip;\n          },\n          bottomItemIndex: function () {\n            var viewportParams = this._loadViewportParams;\n            return viewportParams && viewportParams.skip + viewportParams.take;\n          },\n          virtualItemsCount: function () {\n            var rowsScrollController = this._rowsScrollController;\n            if (rowsScrollController) {\n              return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments);\n            }\n            var dataSource = this._dataSource;\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments);\n          },\n          pageIndex: function (_pageIndex) {\n            var virtualPaging = isVirtualPaging(this);\n            var rowsScrollController = this._rowsScrollController;\n            if (false === this.option(LEGACY_SCROLLING_MODE) && virtualPaging && rowsScrollController) {\n              if (void 0 === _pageIndex) {\n                var _this$option;\n                return null !== (_this$option = this.option(VISIBLE_PAGE_INDEX)) && void 0 !== _this$option ? _this$option : 0;\n              }\n            }\n            return this.callBase.apply(this, arguments);\n          },\n          _fireChanged: function (e) {\n            this.callBase.apply(this, arguments);\n            var {\n              operationTypes: operationTypes\n            } = e;\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this) && operationTypes) {\n              var {\n                fullReload: fullReload,\n                pageIndex: pageIndex\n              } = operationTypes;\n              if (e.isDataChanged && !fullReload && pageIndex) {\n                this._updateVisiblePageIndex(this._dataSource.pageIndex());\n              }\n            }\n          },\n          _getPagingOptionValue: function (optionName) {\n            var result = this.callBase.apply(this, arguments);\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\n              result = this[optionName]();\n            }\n            return result;\n          },\n          isEmpty: function () {\n            return false === this.option(LEGACY_SCROLLING_MODE) ? !this.items(true).length : this.callBase(this, arguments);\n          },\n          isLastPageLoaded: function () {\n            var result = false;\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\n              var {\n                pageIndex: pageIndex,\n                loadPageCount: loadPageCount\n              } = this.getLoadPageParams(true);\n              var pageCount = this.pageCount();\n              result = pageIndex + loadPageCount >= pageCount;\n            } else {\n              result = this.callBase.apply(this, arguments);\n            }\n            return result;\n          },\n          reset: function () {\n            this._itemCount = 0;\n            this._allItems = null;\n            this.callBase.apply(this, arguments);\n          },\n          _applyFilter: function () {\n            var _this$_dataSource5;\n            null === (_this$_dataSource5 = this._dataSource) || void 0 === _this$_dataSource5 ? void 0 : _this$_dataSource5.loadPageCount(1);\n            this.callBase.apply(this, arguments);\n          }\n        };\n        gridCoreUtils.proxyMethod(members, \"getVirtualContentSize\");\n        gridCoreUtils.proxyMethod(members, \"setViewportItemIndex\");\n        return members;\n      }(),\n      resizing: {\n        _updateMasterDataGridCore: function (masterDataGrid) {\n          return when(this.callBase.apply(this, arguments)).done(masterDataGridUpdated => {\n            var isNewVirtualMode = isVirtualMode(masterDataGrid) && false === masterDataGrid.option(LEGACY_SCROLLING_MODE);\n            if (!masterDataGridUpdated && isNewVirtualMode) {\n              var scrollable = masterDataGrid.getScrollable();\n              if (scrollable) {\n                masterDataGrid.updateDimensions();\n              }\n            }\n          });\n        },\n        hasResizeTimeout: function () {\n          return !!this._resizeTimeout;\n        },\n        resize: function () {\n          var callBase = this.callBase;\n          var result;\n          if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n            clearTimeout(this._resizeTimeout);\n            this._resizeTimeout = null;\n            var diff = new Date() - this._lastTime;\n            var updateTimeout = this.option(\"scrolling.updateTimeout\");\n            if (this._lastTime && diff < updateTimeout) {\n              result = new Deferred();\n              this._resizeTimeout = setTimeout(() => {\n                this._resizeTimeout = null;\n                callBase.apply(this).done(result.resolve).fail(result.reject);\n                this._lastTime = new Date();\n              }, updateTimeout);\n              this._lastTime = new Date();\n            } else {\n              result = callBase.apply(this);\n              if (this._dataController.isLoaded()) {\n                this._lastTime = new Date();\n              }\n            }\n          } else {\n            result = callBase.apply(this);\n          }\n          return result;\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._resizeTimeout);\n        }\n      }\n    },\n    views: {\n      rowsView: VirtualScrollingRowsViewExtender\n    }\n  }\n};","map":{"version":3,"names":["getOuterHeight","$","getWindow","VirtualScrollController","subscribeToExternalScrollers","gridCoreUtils","each","when","Deferred","LoadIndicator","browser","getBoundingRect","isElementInDom","isDefined","BOTTOM_LOAD_PANEL_CLASS","TABLE_CONTENT_CLASS","GROUP_SPACE_CLASS","CONTENT_CLASS","FREESPACE_CLASS","COLUMN_LINES_CLASS","VIRTUAL_ROW_CLASS","ROW_INSERTED","SCROLLING_MODE_INFINITE","SCROLLING_MODE_VIRTUAL","LOAD_TIMEOUT","LEGACY_SCROLLING_MODE","VISIBLE_PAGE_INDEX","isVirtualMode","that","option","isAppendMode","isVirtualPaging","_correctCount","items","count","fromEnd","isItemCountableFunc","i","item","length","isItemCountableByDataSource","dataSource","rowType","isNewRow","isGroupItemCountable","data","updateItemIndices","forEach","index","rowIndex","VirtualScrollingDataSourceAdapterExtender","_updateLoading","beginPageIndex","_virtualScrollController","viewportSize","getViewportItemIndex","pageSize","itemsCount","_dataSource","isLoading","_isLoading","loadingChanged","fire","result","init","callBase","apply","arguments","_items","_totalCount","_isLoaded","_loadPageCount","component","_getVirtualScrollDataOptions","totalItemsCount","hasKnownLastPage","pageIndex","isCustomLoading","pageCount","load","updateLoading","viewportItems","onChanged","e","changed","changingDuration","_renderTime","_handleLoadingChanged","_isLoadingAll","_startLoadTime","Date","_handleLoadError","_handleDataChanged","slice","_dataSourceTotalCount","bind","handleDataChanged","_customizeRemoteOperations","options","operationTypes","newMode","renderAsync","reload","skip","delay","isBase","loadOptions","isLoaded","resetPagesCache","isLiveUpdate","reset","_changeRowExpandCore","virtualScrollController","d","done","r","delayDeferred","getDelayDeferred","resolve","fail","reject","refresh","storeLoadOptions","paginate","_totalCountCorrection","dispose","loadPageCount","_handleDataLoading","takeIsDefined","take","_loadPageSize","name","VirtualScrollingRowsViewExtender","removeEmptyRows","$emptyRows","className","tBodies","toArray","map","row","parent","get","filter","rowCount","eq","remove","_dataController$state","dataController","getController","pageChanged","add","scrollTop","_scrollTop","scrollToPage","updateViewport","dataSourceChanged","_scrollToCurrentPageOnResize","stateLoaded","resizeHandler","resizeCompleted","_dataController","scrollPosition","itemSize","getItemSize","itemSizes","getItemSizes","itemIndex","scrollTo","y","x","_scrollLeft","renderDelayedTemplates","waitAsyncTemplates","_updateContentPosition","_renderCore","startRenderTime","deferred","itemCount","isVirtualRowRendering","_getRowElements","tableElement","$rows","not","_removeRowsElements","contentTable","removeCount","changeType","rowElements","errorHandlingController","rowElement","$rowElement","removeErrorRow","next","_updateContent","change","$freeSpaceRowElements","contentElement","_findContentElement","children","first","$tBodies","_getBodies","_getFreeSpaceRowElements","_restoreErrorRow","promise","_updateBottomLoading","_addVirtualRow","$table","isFixed","location","position","$virtualRow","_createEmptyRow","_wrapRowIfNeed","_appendEmptyRow","_updateContentItemSizes","rowHeights","_getRowHeights","correctedRowHeights","_correctRowHeights","setContentItemSizes","_updateViewportSize","viewportHeight","_hasHeight","element","_this$getController","_this$getController$i","isPopupEditMode","call","_tableElement","hasClass","height","visibleRows","getVisibleRows","firstCountableItem","lastLoadIndex","currentItem","loadIndex","push","isRender","rowHeight","_rowHeight","viewportItemSize","top","getContentOffset","bottom","$tables","getTableElements","$virtualRows","prevFixed","_isFixedTableRendering","_isTableLinesDisplaysCorrect","table","hasColumnLines","find","_isColumnElementsEqual","$columns","$virtualColumns","style","width","_getCellClasses","column","classes","cssClass","isExpandColumn","command","addWidgetPrefix","_findBottomLoadPanel","$contentElement","$element","$bottomLoadPanel","virtualMode","appendMode","showBottomLoading","bottomLoadPanelElement","addClass","append","_createComponent","appendTo","_handleScroll","legacyScrollingMode","zeroTopPosition","scrollOffset","isScrollTopChanged","hasScrolled","forceUpdateScrollPosition","isValidScrollTarget","setViewportPosition","_needUpdateRowHeight","_updateRowHeight","Math","ceil","updateFreeSpaceRowHeight","setLoading","messageText","hasBottomLoadPanel","isViewportChanging","_resizeCore","_windowScroll","scrollPos","on","loadIfNeed","_dataController$loadI","setColumnWidths","widths","scrollable","getScrollable","$content","content","errorHandling","clearTimeout","_scrollTimeoutID","virtualScrollingModule","defaultOptions","scrolling","timeout","updateTimeout","minTimeout","renderingThreshold","removeInvisiblePages","rowPageSize","prerenderedRowChunkSize","mode","preloadEnabled","rowRenderingMode","loadTwoPagesOnStart","legacyMode","prerenderedRowCount","extenders","dataSourceAdapter","controllers","members","_refreshDataSource","baseResult","initVirtualRows","_loadDataSource","_rowsScrollController","_this$_dataSource","_loadViewportParams","getLoadPageParams","getRowPageSize","rowsScrollController","getItemIndexByPosition","rowIndexOffset","getRowIndexOffset","floor","isSortingOperation","sorting","getRowElement","isChromeLatest","chrome","version","allowedTopOffset","mozilla","round","virtualRowsRendering","_allItems","_visibleItems","_rowPageIndex","_viewportChanging","_needUpdateViewportAfterLoading","_getRowsScrollDataOptions","positionChanged","_this$_dataSource2","loadViewport","setViewportItemIndex","_updateLoadViewportParams","isItemCountable","loadedOffset","_that$_dataSource","lastLoadOptions","loadedItemCount","_itemCount","_fireChanged","correctCount","isNextAfterLast","countableOnly","virtualItemsCount","begin","_updateItemsCore","delta","getRowIndexDelta","rowIndices","cancelEmptyChanges","cancel","visibleItems","isRefresh","changeTypes","newItem","splice","viewportParams","getViewportParams","pageOffset","_processItems","resultItems","_dataSource$lastLoadO","currentIndex","prevCountable","prevRowType","isPrevRowNew","wasCountableItem","newRows","itemCountable","isNextGroupItem","isNextDataItem","isPrevNewRowFirst","it","_afterProcessItems","skipForCurrentPage","isNewRowInEmptyData","isLoadIndexGreaterStart","isLoadIndexLessEnd","_applyChange","unshift","allItems","indexOf","byLoadedRows","offset","virtualPaging","firstLoadIndex","_dataSource$lastLoadO2","getDataIndex","_this$_rowsScrollCont","_isPaging","sizes","getPreloadedRowCount","preloadCount","byLoadedPage","_this$_dataSource3","_this$_dataSource4","loadedPageIndex","loadedTake","isScrollingBack","topPreloadCount","bottomPreloadCount","totalCountCorrection","skipWithPreload","max","loadingTake","_updateVisiblePageIndex","currentPageIndex","_silentOption","viewPortItemIndex","newPageIndex","updateItems","_getChangedLoadParams","loadedPageParams","pageIndexIsValid","_pageIndexIsValid","_loadItems","checkLoading","viewportIsFilled","_dataSourceAdapter$lo","_dataSourceAdapter$pa","changedParams","currentLoadPageCount","lastRequiredItemCount","pageIndexNotChanged","allLoadedInAppendMode","isRepaintMode","pageIndexIncreased","_repaintChangesOnly","_needUpdateDimensions","viewportChanging","always","isLastPage","checkLoadedParamsOnly","params","viewportIsNotFilled","loadingItemsStarted","needToUpdateItems","_this$getController2","_this$getController2$","noPendingChangesInEditing","getChanges","repaintChangesOnly","needUpdateDimensions","useProcessedItemsCache","_this$_loadViewportPa","_this$_loadViewportPa2","currentTake","newTake","resetCurrentTotalCount","topItemIndex","_this$_loadViewportPa3","bottomItemIndex","_pageIndex","_this$option","fullReload","isDataChanged","_getPagingOptionValue","optionName","isEmpty","isLastPageLoaded","_applyFilter","_this$_dataSource5","proxyMethod","resizing","_updateMasterDataGridCore","masterDataGrid","masterDataGridUpdated","isNewVirtualMode","updateDimensions","hasResizeTimeout","_resizeTimeout","resize","diff","_lastTime","setTimeout","views","rowsView"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    VirtualScrollController,\r\n    subscribeToExternalScrollers\r\n} from \"./ui.grid_core.virtual_scrolling_core\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport LoadIndicator from \"../load_indicator\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../core/utils/dom\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\r\nvar TABLE_CONTENT_CLASS = \"table-content\";\r\nvar GROUP_SPACE_CLASS = \"group-space\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar FREESPACE_CLASS = \"dx-freespace-row\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\r\nvar ROW_INSERTED = \"dx-row-inserted\";\r\nvar SCROLLING_MODE_INFINITE = \"infinite\";\r\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\r\nvar LOAD_TIMEOUT = 300;\r\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\nvar VISIBLE_PAGE_INDEX = \"paging.pageIndex\";\r\nvar isVirtualMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL\r\n};\r\nvar isAppendMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE\r\n};\r\nvar isVirtualPaging = function(that) {\r\n    return isVirtualMode(that) || isAppendMode(that)\r\n};\r\nvar _correctCount = function(items, count, fromEnd, isItemCountableFunc) {\r\n    for (var i = 0; i < count + 1; i++) {\r\n        var item = items[fromEnd ? items.length - 1 - i : i];\r\n        if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\r\n            count++\r\n        }\r\n    }\r\n    return count\r\n};\r\nvar isItemCountableByDataSource = function(item, dataSource) {\r\n    return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data)\r\n};\r\nvar updateItemIndices = function(items) {\r\n    items.forEach((function(item, index) {\r\n        item.rowIndex = index\r\n    }));\r\n    return items\r\n};\r\nvar VirtualScrollingDataSourceAdapterExtender = function() {\r\n    var _updateLoading = function(that) {\r\n        var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\r\n        if (isVirtualMode(that)) {\r\n            if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\r\n                if (!that._isLoading) {\r\n                    that._isLoading = true;\r\n                    that.loadingChanged.fire(true)\r\n                }\r\n            } else if (that._isLoading) {\r\n                that._isLoading = false;\r\n                that.loadingChanged.fire(false)\r\n            }\r\n        }\r\n    };\r\n    var result = {\r\n        init: function() {\r\n            this.callBase.apply(this, arguments);\r\n            this._items = [];\r\n            this._totalCount = -1;\r\n            this._isLoaded = true;\r\n            this._loadPageCount = 1;\r\n            this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions())\r\n        },\r\n        _getVirtualScrollDataOptions: function() {\r\n            var that = this;\r\n            return {\r\n                pageSize: function() {\r\n                    return that.pageSize()\r\n                },\r\n                totalItemsCount: function() {\r\n                    return that.totalItemsCount()\r\n                },\r\n                hasKnownLastPage: function() {\r\n                    return that.hasKnownLastPage()\r\n                },\r\n                pageIndex: function(index) {\r\n                    return that._dataSource.pageIndex(index)\r\n                },\r\n                isLoading: function() {\r\n                    return that._dataSource.isLoading() && !that.isCustomLoading()\r\n                },\r\n                pageCount: function() {\r\n                    return that.pageCount()\r\n                },\r\n                load: function() {\r\n                    return that._dataSource.load()\r\n                },\r\n                updateLoading: function() {\r\n                    _updateLoading(that)\r\n                },\r\n                itemsCount: function() {\r\n                    return that.itemsCount(true)\r\n                },\r\n                items: function() {\r\n                    return that._dataSource.items()\r\n                },\r\n                viewportItems: function(items) {\r\n                    if (items) {\r\n                        that._items = items\r\n                    }\r\n                    return that._items\r\n                },\r\n                onChanged: function(e) {\r\n                    that.changed.fire(e)\r\n                },\r\n                changingDuration: function(e) {\r\n                    if (that.isLoading()) {\r\n                        return LOAD_TIMEOUT\r\n                    }\r\n                    return that._renderTime || 0\r\n                }\r\n            }\r\n        },\r\n        _handleLoadingChanged: function(isLoading) {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                this.callBase.apply(this, arguments);\r\n                return\r\n            }\r\n            if (!isVirtualMode(this) || this._isLoadingAll) {\r\n                this._isLoading = isLoading;\r\n                this.callBase.apply(this, arguments)\r\n            }\r\n            if (isLoading) {\r\n                this._startLoadTime = new Date\r\n            } else {\r\n                this._startLoadTime = void 0\r\n            }\r\n        },\r\n        _handleLoadError: function() {\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                this._isLoading = false;\r\n                this.loadingChanged.fire(false)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _handleDataChanged: function(e) {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                this._items = this._dataSource.items().slice();\r\n                this._totalCount = this._dataSourceTotalCount(true);\r\n                this.callBase.apply(this, arguments);\r\n                return\r\n            }\r\n            var callBase = this.callBase.bind(this);\r\n            this._virtualScrollController.handleDataChanged(callBase, e)\r\n        },\r\n        _customizeRemoteOperations: function(options, operationTypes) {\r\n            var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n            var renderAsync = this.option(\"scrolling.renderAsync\");\r\n            if (!isDefined(renderAsync)) {\r\n                renderAsync = this._renderTime >= this.option(\"scrolling.renderingThreshold\")\r\n            }\r\n            if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {\r\n                options.delay = void 0\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        items: function() {\r\n            return this._items\r\n        },\r\n        _dataSourceTotalCount: function(isBase) {\r\n            return false === this.option(LEGACY_SCROLLING_MODE) && isVirtualMode(this) && !isBase ? this._totalCount : this.callBase()\r\n        },\r\n        itemsCount: function(isBase) {\r\n            if (isBase || false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                return this.callBase()\r\n            }\r\n            return this._virtualScrollController.itemsCount()\r\n        },\r\n        load: function(loadOptions) {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE) || loadOptions) {\r\n                return this.callBase(loadOptions)\r\n            }\r\n            return this._virtualScrollController.load()\r\n        },\r\n        isLoading: function() {\r\n            return false === this.option(LEGACY_SCROLLING_MODE) ? this._dataSource.isLoading() : this._isLoading\r\n        },\r\n        isLoaded: function() {\r\n            return this._dataSource.isLoaded() && this._isLoaded\r\n        },\r\n        resetPagesCache: function(isLiveUpdate) {\r\n            if (!isLiveUpdate) {\r\n                this._virtualScrollController.reset(true)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _changeRowExpandCore: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                return result\r\n            }\r\n            this.resetPagesCache();\r\n            _updateLoading(this);\r\n            return result\r\n        },\r\n        reload: function() {\r\n            this._dataSource.pageIndex(this.pageIndex());\r\n            var virtualScrollController = this._virtualScrollController;\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE) && virtualScrollController) {\r\n                var d = new Deferred;\r\n                this.callBase.apply(this, arguments).done((function(r) {\r\n                    var delayDeferred = virtualScrollController.getDelayDeferred();\r\n                    if (delayDeferred) {\r\n                        delayDeferred.done(d.resolve).fail(d.reject)\r\n                    } else {\r\n                        d.resolve(r)\r\n                    }\r\n                })).fail(d.reject);\r\n                return d\r\n            } else {\r\n                return this.callBase.apply(this, arguments)\r\n            }\r\n        },\r\n        refresh: function(options, operationTypes) {\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                var storeLoadOptions = options.storeLoadOptions;\r\n                var dataSource = this._dataSource;\r\n                if (operationTypes.reload) {\r\n                    this._virtualScrollController.reset();\r\n                    dataSource.items().length = 0;\r\n                    this._isLoaded = false;\r\n                    _updateLoading(this);\r\n                    this._isLoaded = true;\r\n                    if (isAppendMode(this)) {\r\n                        this.pageIndex(0);\r\n                        dataSource.pageIndex(0);\r\n                        storeLoadOptions.pageIndex = 0;\r\n                        options.pageIndex = 0;\r\n                        storeLoadOptions.skip = 0\r\n                    } else {\r\n                        dataSource.pageIndex(this.pageIndex());\r\n                        if (dataSource.paginate()) {\r\n                            options.pageIndex = this.pageIndex();\r\n                            storeLoadOptions.skip = this.pageIndex() * this.pageSize()\r\n                        }\r\n                    }\r\n                } else if (isAppendMode(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {\r\n                    storeLoadOptions.skip += this._totalCountCorrection\r\n                }\r\n            }\r\n            return this.callBase.apply(this, arguments)\r\n        },\r\n        dispose: function() {\r\n            this._virtualScrollController.dispose();\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        loadPageCount: function(count) {\r\n            if (!isDefined(count)) {\r\n                return this._loadPageCount\r\n            }\r\n            this._loadPageCount = count\r\n        },\r\n        _handleDataLoading: function(options) {\r\n            var loadPageCount = this.loadPageCount();\r\n            var pageSize = this.pageSize();\r\n            var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n            var storeLoadOptions = options.storeLoadOptions;\r\n            var takeIsDefined = isDefined(storeLoadOptions.take);\r\n            options.loadPageCount = loadPageCount;\r\n            if (!options.isCustomLoading && newMode && takeIsDefined && loadPageCount > 1 && pageSize > 0) {\r\n                storeLoadOptions.take = loadPageCount * pageSize\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _loadPageSize: function() {\r\n            return this.callBase.apply(this, arguments) * this.loadPageCount()\r\n        }\r\n    };\r\n    [\"beginPageIndex\", \"endPageIndex\", \"pageIndex\"].forEach((function(name) {\r\n        result[name] = function() {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                var dataSource = this._dataSource;\r\n                return dataSource.pageIndex.apply(dataSource, arguments)\r\n            }\r\n            var virtualScrollController = this._virtualScrollController;\r\n            return virtualScrollController[name].apply(virtualScrollController, arguments)\r\n        }\r\n    }));\r\n    [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentItemSizes\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"loadIfNeed\"].forEach((function(name) {\r\n        result[name] = function() {\r\n            var virtualScrollController = this._virtualScrollController;\r\n            return virtualScrollController[name].apply(virtualScrollController, arguments)\r\n        }\r\n    }));\r\n    return result\r\n}();\r\nvar VirtualScrollingRowsViewExtender = function() {\r\n    var removeEmptyRows = function($emptyRows, className) {\r\n        var tBodies = $emptyRows.toArray().map(row => $(row).parent(\".\" + className).get(0)).filter(row => row);\r\n        if (tBodies.length) {\r\n            $emptyRows = $(tBodies)\r\n        }\r\n        var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\r\n        for (var i = 0; i < rowCount; i++) {\r\n            $emptyRows.eq(i).remove()\r\n        }\r\n    };\r\n    return {\r\n        init: function() {\r\n            var _dataController$state;\r\n            var dataController = this.getController(\"data\");\r\n            this.callBase();\r\n            dataController.pageChanged.add(pageIndex => {\r\n                var scrollTop = this._scrollTop;\r\n                this.scrollToPage(null !== pageIndex && void 0 !== pageIndex ? pageIndex : dataController.pageIndex());\r\n                if (false === this.option(LEGACY_SCROLLING_MODE) && this._scrollTop === scrollTop) {\r\n                    dataController.updateViewport()\r\n                }\r\n            });\r\n            dataController.dataSourceChanged.add(() => {\r\n                !this._scrollTop && this._scrollToCurrentPageOnResize()\r\n            });\r\n            null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(() => {\r\n                this._scrollToCurrentPageOnResize()\r\n            });\r\n            this._scrollToCurrentPageOnResize()\r\n        },\r\n        _scrollToCurrentPageOnResize: function() {\r\n            var dataController = this.getController(\"data\");\r\n            if (dataController.pageIndex() > 0) {\r\n                var resizeHandler = () => {\r\n                    this.resizeCompleted.remove(resizeHandler);\r\n                    this.scrollToPage(dataController.pageIndex())\r\n                };\r\n                this.resizeCompleted.add(resizeHandler)\r\n            }\r\n        },\r\n        scrollToPage: function(pageIndex) {\r\n            var dataController = this._dataController;\r\n            var pageSize = dataController ? dataController.pageSize() : 0;\r\n            var scrollPosition;\r\n            if (isVirtualMode(this) || isAppendMode(this)) {\r\n                var itemSize = dataController.getItemSize();\r\n                var itemSizes = dataController.getItemSizes();\r\n                var itemIndex = pageIndex * pageSize;\r\n                scrollPosition = itemIndex * itemSize;\r\n                for (var index in itemSizes) {\r\n                    if (index < itemIndex) {\r\n                        scrollPosition += itemSizes[index] - itemSize\r\n                    }\r\n                }\r\n            } else {\r\n                scrollPosition = 0\r\n            }\r\n            this.scrollTo({\r\n                y: scrollPosition,\r\n                x: this._scrollLeft\r\n            })\r\n        },\r\n        renderDelayedTemplates: function(e) {\r\n            this.waitAsyncTemplates().done(() => {\r\n                this._updateContentPosition(true)\r\n            });\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _renderCore: function(e) {\r\n            var startRenderTime = new Date;\r\n            var deferred = this.callBase.apply(this, arguments);\r\n            var dataSource = this._dataController._dataSource;\r\n            if (dataSource && e) {\r\n                var itemCount = e.items ? e.items.length : 20;\r\n                var viewportSize = this._dataController.viewportSize() || 20;\r\n                if (gridCoreUtils.isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                    dataSource._renderTime = (new Date - startRenderTime) * viewportSize / itemCount\r\n                } else {\r\n                    dataSource._renderTime = new Date - startRenderTime\r\n                }\r\n            }\r\n            return deferred\r\n        },\r\n        _getRowElements: function(tableElement) {\r\n            var $rows = this.callBase(tableElement);\r\n            return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS)\r\n        },\r\n        _removeRowsElements: function(contentTable, removeCount, changeType) {\r\n            var rowElements = this._getRowElements(contentTable).toArray();\r\n            if (\"append\" === changeType) {\r\n                rowElements = rowElements.slice(0, removeCount)\r\n            } else {\r\n                rowElements = rowElements.slice(-removeCount)\r\n            }\r\n            var errorHandlingController = this.getController(\"errorHandling\");\r\n            rowElements.map(rowElement => {\r\n                var $rowElement = $(rowElement);\r\n                errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\r\n                $rowElement.remove()\r\n            })\r\n        },\r\n        _updateContent: function(tableElement, change) {\r\n            var $freeSpaceRowElements;\r\n            var contentElement = this._findContentElement();\r\n            var changeType = change && change.changeType;\r\n            var d = Deferred();\r\n            var contentTable = contentElement.children().first();\r\n            if (\"append\" === changeType || \"prepend\" === changeType) {\r\n                this.waitAsyncTemplates().done(() => {\r\n                    var $tBodies = this._getBodies(tableElement);\r\n                    if (1 === $tBodies.length) {\r\n                        this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children())\r\n                    } else {\r\n                        $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable)\r\n                    }\r\n                    tableElement.remove();\r\n                    $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\r\n                    removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\r\n                    if (change.removeCount) {\r\n                        this._removeRowsElements(contentTable, change.removeCount, changeType)\r\n                    }\r\n                    this._restoreErrorRow(contentTable);\r\n                    d.resolve()\r\n                }).fail(d.reject)\r\n            } else {\r\n                this.callBase.apply(this, arguments).done(() => {\r\n                    if (\"update\" === changeType) {\r\n                        this._restoreErrorRow(contentTable)\r\n                    }\r\n                    d.resolve()\r\n                }).fail(d.reject)\r\n            }\r\n            return d.promise().done(() => {\r\n                this._updateBottomLoading()\r\n            })\r\n        },\r\n        _addVirtualRow: function($table, isFixed, location, position) {\r\n            if (!position) {\r\n                return\r\n            }\r\n            var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\r\n            $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\r\n            this._appendEmptyRow($table, $virtualRow, location)\r\n        },\r\n        _updateContentItemSizes: function() {\r\n            var rowHeights = this._getRowHeights();\r\n            var correctedRowHeights = this._correctRowHeights(rowHeights);\r\n            this._dataController.setContentItemSizes(correctedRowHeights)\r\n        },\r\n        _updateViewportSize: function(viewportHeight, scrollTop) {\r\n            if (!isDefined(viewportHeight)) {\r\n                viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow())\r\n            }\r\n            this._dataController.viewportHeight(viewportHeight, scrollTop)\r\n        },\r\n        _getRowHeights: function() {\r\n            var _this$getController, _this$getController$i;\r\n            var isPopupEditMode = null === (_this$getController = this.getController(\"editing\")) || void 0 === _this$getController ? void 0 : null === (_this$getController$i = _this$getController.isPopupEditMode) || void 0 === _this$getController$i ? void 0 : _this$getController$i.call(_this$getController);\r\n            var rowElements = this._getRowElements(this._tableElement).toArray();\r\n            if (isPopupEditMode) {\r\n                rowElements = rowElements.filter(row => !$(row).hasClass(ROW_INSERTED))\r\n            }\r\n            return rowElements.map(row => getBoundingRect(row).height)\r\n        },\r\n        _correctRowHeights: function(rowHeights) {\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController._dataSource;\r\n            var correctedRowHeights = [];\r\n            var visibleRows = dataController.getVisibleRows();\r\n            var itemSize = 0;\r\n            var firstCountableItem = true;\r\n            var lastLoadIndex = -1;\r\n            for (var i = 0; i < rowHeights.length; i++) {\r\n                var currentItem = visibleRows[i];\r\n                if (!isDefined(currentItem)) {\r\n                    continue\r\n                }\r\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                    if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {\r\n                        correctedRowHeights.push(itemSize);\r\n                        itemSize = 0\r\n                    }\r\n                    lastLoadIndex = currentItem.loadIndex\r\n                } else if (isItemCountableByDataSource(currentItem, dataSource)) {\r\n                    if (firstCountableItem) {\r\n                        firstCountableItem = false\r\n                    } else {\r\n                        correctedRowHeights.push(itemSize);\r\n                        itemSize = 0\r\n                    }\r\n                }\r\n                itemSize += rowHeights[i]\r\n            }\r\n            itemSize > 0 && correctedRowHeights.push(itemSize);\r\n            return correctedRowHeights\r\n        },\r\n        _updateContentPosition: function(isRender) {\r\n            var dataController = this._dataController;\r\n            var rowHeight = this._rowHeight || 20;\r\n            dataController.viewportItemSize(rowHeight);\r\n            if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                if (!isRender) {\r\n                    this._updateContentItemSizes()\r\n                }\r\n                var top = dataController.getContentOffset(\"begin\");\r\n                var bottom = dataController.getContentOffset(\"end\");\r\n                var $tables = this.getTableElements();\r\n                var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\r\n                removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\r\n                $tables.each((index, element) => {\r\n                    var isFixed = index > 0;\r\n                    var prevFixed = this._isFixedTableRendering;\r\n                    this._isFixedTableRendering = isFixed;\r\n                    this._addVirtualRow($(element), isFixed, \"top\", top);\r\n                    this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\r\n                    this._isFixedTableRendering = prevFixed\r\n                })\r\n            }\r\n        },\r\n        _isTableLinesDisplaysCorrect: function(table) {\r\n            var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\r\n            return hasColumnLines === this.option(\"showColumnLines\")\r\n        },\r\n        _isColumnElementsEqual: function($columns, $virtualColumns) {\r\n            var result = $columns.length === $virtualColumns.length;\r\n            if (result) {\r\n                each($columns, (function(index, element) {\r\n                    if (element.style.width !== $virtualColumns[index].style.width) {\r\n                        result = false;\r\n                        return result\r\n                    }\r\n                }))\r\n            }\r\n            return result\r\n        },\r\n        _getCellClasses: function(column) {\r\n            var classes = [];\r\n            var cssClass = column.cssClass;\r\n            var isExpandColumn = \"expand\" === column.command;\r\n            cssClass && classes.push(cssClass);\r\n            isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\r\n            return classes\r\n        },\r\n        _findBottomLoadPanel: function($contentElement) {\r\n            var $element = $contentElement || this.element();\r\n            var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\r\n            if ($bottomLoadPanel && $bottomLoadPanel.length) {\r\n                return $bottomLoadPanel\r\n            }\r\n        },\r\n        _updateBottomLoading: function() {\r\n            var virtualMode = isVirtualMode(this);\r\n            var appendMode = isAppendMode(this);\r\n            var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);\r\n            var $contentElement = this._findContentElement();\r\n            var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);\r\n            if (showBottomLoading) {\r\n                if (!bottomLoadPanelElement) {\r\n                    $(\"<div>\").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent($(\"<div>\"), LoadIndicator).$element()).appendTo($contentElement)\r\n                }\r\n            } else if (bottomLoadPanelElement) {\r\n                bottomLoadPanelElement.remove()\r\n            }\r\n        },\r\n        _handleScroll: function(e) {\r\n            var legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE);\r\n            var zeroTopPosition = 0 === e.scrollOffset.top;\r\n            var isScrollTopChanged = this._scrollTop !== e.scrollOffset.top;\r\n            var hasScrolled = isScrollTopChanged || e.forceUpdateScrollPosition;\r\n            var isValidScrollTarget = this._hasHeight || !legacyScrollingMode && zeroTopPosition;\r\n            if (hasScrolled && isValidScrollTarget && this._rowHeight) {\r\n                this._scrollTop = e.scrollOffset.top;\r\n                var isVirtualRowRendering = isVirtualMode(this) || \"standard\" !== this.option(\"scrolling.rowRenderingMode\");\r\n                if (isVirtualRowRendering && false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                    this._updateContentItemSizes();\r\n                    this._updateViewportSize(null, this._scrollTop)\r\n                }\r\n                this._dataController.setViewportPosition(e.scrollOffset.top)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _needUpdateRowHeight: function(itemsCount) {\r\n            return this.callBase.apply(this, arguments) || itemsCount > 0 && isAppendMode(this) && !gridCoreUtils.isVirtualRowRendering(this)\r\n        },\r\n        _updateRowHeight: function() {\r\n            this.callBase.apply(this, arguments);\r\n            if (this._rowHeight) {\r\n                this._updateContentPosition();\r\n                var viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\r\n                var dataController = this._dataController;\r\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                    this._updateViewportSize(viewportHeight);\r\n                    dataController.updateViewport()\r\n                } else {\r\n                    dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight))\r\n                }\r\n            }\r\n        },\r\n        updateFreeSpaceRowHeight: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (result) {\r\n                this._updateContentPosition()\r\n            }\r\n            return result\r\n        },\r\n        setLoading: function(isLoading, messageText) {\r\n            var dataController = this._dataController;\r\n            var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\r\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\r\n                return\r\n            }\r\n            if (hasBottomLoadPanel) {\r\n                isLoading = false\r\n            }\r\n            this.callBase.call(this, isLoading, messageText)\r\n        },\r\n        _resizeCore: function() {\r\n            var that = this;\r\n            var $element = that.element();\r\n            that.callBase();\r\n            if (that.component.$element() && !that._windowScroll && isElementInDom($element)) {\r\n                that._windowScroll = subscribeToExternalScrollers($element, (function(scrollPos) {\r\n                    if (!that._hasHeight && that._rowHeight) {\r\n                        that._dataController.setViewportPosition(scrollPos)\r\n                    }\r\n                }), that.component.$element());\r\n                that.on(\"disposing\", (function() {\r\n                    that._windowScroll.dispose()\r\n                }))\r\n            }\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                that.loadIfNeed()\r\n            }\r\n        },\r\n        loadIfNeed: function() {\r\n            var _dataController$loadI;\r\n            var dataController = this._dataController;\r\n            null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController)\r\n        },\r\n        setColumnWidths: function(widths) {\r\n            var scrollable = this.getScrollable();\r\n            var $content;\r\n            this.callBase.apply(this, arguments);\r\n            if (\"virtual\" === this.option(\"scrolling.mode\")) {\r\n                $content = scrollable ? $(scrollable.content()) : this.element();\r\n                this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"))\r\n            }\r\n        },\r\n        _restoreErrorRow: function() {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                var errorHandling = this.getController(\"errorHandling\");\r\n                null === errorHandling || void 0 === errorHandling ? void 0 : errorHandling.removeErrorRow()\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        dispose: function() {\r\n            clearTimeout(this._scrollTimeoutID);\r\n            this.callBase()\r\n        }\r\n    }\r\n}();\r\nexport var virtualScrollingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            scrolling: {\r\n                timeout: 300,\r\n                updateTimeout: 300,\r\n                minTimeout: 0,\r\n                renderingThreshold: 100,\r\n                removeInvisiblePages: true,\r\n                rowPageSize: 5,\r\n                prerenderedRowChunkSize: 1,\r\n                mode: \"standard\",\r\n                preloadEnabled: false,\r\n                rowRenderingMode: \"standard\",\r\n                loadTwoPagesOnStart: false,\r\n                legacyMode: false,\r\n                prerenderedRowCount: 1\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\r\n        controllers: {\r\n            data: function() {\r\n                var members = {\r\n                    _refreshDataSource: function() {\r\n                        var baseResult = this.callBase.apply(this, arguments) || (new Deferred).resolve().promise();\r\n                        baseResult.done(this.initVirtualRows.bind(this));\r\n                        return baseResult\r\n                    },\r\n                    _loadDataSource: function() {\r\n                        if (this._rowsScrollController && isVirtualPaging(this)) {\r\n                            var _this$_dataSource;\r\n                            var {\r\n                                loadPageCount: loadPageCount\r\n                            } = isDefined(this._loadViewportParams) ? this.getLoadPageParams() : {};\r\n                            loadPageCount >= 1 && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.loadPageCount(loadPageCount))\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    getRowPageSize: function() {\r\n                        var rowPageSize = this.option(\"scrolling.rowPageSize\");\r\n                        var pageSize = this.pageSize();\r\n                        return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize\r\n                    },\r\n                    reload: function() {\r\n                        var rowsScrollController = this._rowsScrollController || this._dataSource;\r\n                        var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        return result && result.done(() => {\r\n                            if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                                var rowIndexOffset = this.getRowIndexOffset();\r\n                                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\r\n                                var component = this.component;\r\n                                var scrollable = component.getScrollable && component.getScrollable();\r\n                                var isSortingOperation = this.dataSource().operationTypes().sorting;\r\n                                if (scrollable && !isSortingOperation && rowIndex >= 0) {\r\n                                    var rowElement = component.getRowElement(rowIndex);\r\n                                    var $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\r\n                                    var top = $rowElement && $rowElement.position().top;\r\n                                    var isChromeLatest = browser.chrome && browser.version >= 91;\r\n                                    var allowedTopOffset = browser.mozilla || isChromeLatest ? 1 : 0;\r\n                                    if (top > allowedTopOffset) {\r\n                                        top = Math.round(top + getOuterHeight($rowElement) * (itemIndex % 1));\r\n                                        scrollable.scrollTo({\r\n                                            y: top\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    },\r\n                    initVirtualRows: function() {\r\n                        var virtualRowsRendering = gridCoreUtils.isVirtualRowRendering(this);\r\n                        this._allItems = null;\r\n                        this._loadViewportParams = null;\r\n                        if (\"virtual\" !== this.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE) && !this.option(\"scrolling.rowPageSize\")) {\r\n                            this._visibleItems = null;\r\n                            this._rowsScrollController = null;\r\n                            return\r\n                        }\r\n                        var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\r\n                        this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\r\n                        this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE) ? null : [];\r\n                        this._viewportChanging = false;\r\n                        this._needUpdateViewportAfterLoading = false;\r\n                        if (!this._rowsScrollController) {\r\n                            this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\r\n                            this._rowsScrollController.positionChanged.add(() => {\r\n                                var _this$_dataSource2;\r\n                                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                                    this._viewportChanging = true;\r\n                                    this.loadViewport();\r\n                                    this._viewportChanging = false;\r\n                                    return\r\n                                }\r\n                                null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 ? void 0 : _this$_dataSource2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex())\r\n                            })\r\n                        }\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            this._updateLoadViewportParams()\r\n                        }\r\n                        if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                            this._rowsScrollController.load()\r\n                        }\r\n                    },\r\n                    isViewportChanging: function() {\r\n                        return this._viewportChanging\r\n                    },\r\n                    _getRowsScrollDataOptions: function() {\r\n                        var that = this;\r\n                        var isItemCountable = function(item) {\r\n                            return isItemCountableByDataSource(item, that._dataSource)\r\n                        };\r\n                        return {\r\n                            pageSize: function() {\r\n                                return that.getRowPageSize()\r\n                            },\r\n                            loadedOffset: function() {\r\n                                var _that$_dataSource;\r\n                                return isVirtualMode(that) && (null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.lastLoadOptions().skip) || 0\r\n                            },\r\n                            loadedItemCount: function() {\r\n                                return that._itemCount\r\n                            },\r\n                            totalItemsCount: function() {\r\n                                if (isVirtualPaging(that)) {\r\n                                    return that.totalItemsCount()\r\n                                }\r\n                                return false === that.option(LEGACY_SCROLLING_MODE) ? that._itemCount : that._items.filter(isItemCountable).length\r\n                            },\r\n                            hasKnownLastPage: function() {\r\n                                return false === that.option(LEGACY_SCROLLING_MODE) ? that.hasKnownLastPage() : true\r\n                            },\r\n                            pageIndex: function(index) {\r\n                                if (void 0 !== index) {\r\n                                    that._rowPageIndex = index\r\n                                }\r\n                                return that._rowPageIndex\r\n                            },\r\n                            isLoading: function() {\r\n                                return that.isLoading()\r\n                            },\r\n                            pageCount: function() {\r\n                                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\r\n                                return pageCount ? pageCount : 1\r\n                            },\r\n                            load: function() {\r\n                                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\r\n                                    that._rowPageIndex = this.pageCount() - 1;\r\n                                    that._rowsScrollController.pageIndex(that._rowPageIndex)\r\n                                }\r\n                                if (!this.items().length && this.totalItemsCount()) {\r\n                                    return\r\n                                }\r\n                                that._rowsScrollController.handleDataChanged(change => {\r\n                                    change = change || {};\r\n                                    change.changeType = change.changeType || \"refresh\";\r\n                                    change.items = change.items || that._visibleItems;\r\n                                    that._visibleItems.forEach((item, index) => {\r\n                                        item.rowIndex = index\r\n                                    });\r\n                                    that._fireChanged(change)\r\n                                })\r\n                            },\r\n                            updateLoading: function() {},\r\n                            itemsCount: function() {\r\n                                return this.items(true).length\r\n                            },\r\n                            correctCount: function(items, count, fromEnd) {\r\n                                return _correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {\r\n                                    if (item.isNewRow) {\r\n                                        return isNextAfterLast && !fromEnd\r\n                                    }\r\n                                    if (isNextAfterLast && fromEnd) {\r\n                                        return !item.isNewRow\r\n                                    }\r\n                                    return isItemCountable(item)\r\n                                })\r\n                            },\r\n                            items: function(countableOnly) {\r\n                                var result = that._items;\r\n                                if (that.option(LEGACY_SCROLLING_MODE)) {\r\n                                    var dataSource = that.dataSource();\r\n                                    var virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();\r\n                                    var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\r\n                                    var rowPageSize = that.getRowPageSize();\r\n                                    var skip = that._rowPageIndex * rowPageSize - begin;\r\n                                    var take = rowPageSize;\r\n                                    if (skip < 0) {\r\n                                        return []\r\n                                    }\r\n                                    if (skip) {\r\n                                        skip = this.correctCount(result, skip);\r\n                                        result = result.slice(skip)\r\n                                    }\r\n                                    if (take) {\r\n                                        take = this.correctCount(result, take);\r\n                                        result = result.slice(0, take)\r\n                                    }\r\n                                }\r\n                                return countableOnly ? result.filter(isItemCountable) : result\r\n                            },\r\n                            viewportItems: function(items) {\r\n                                if (items && false !== that.option(LEGACY_SCROLLING_MODE)) {\r\n                                    that._visibleItems = items\r\n                                }\r\n                                return that._visibleItems\r\n                            },\r\n                            onChanged: function() {},\r\n                            changingDuration: function(e) {\r\n                                var dataSource = that.dataSource();\r\n                                if (null !== dataSource && void 0 !== dataSource && dataSource.isLoading() && false !== that.option(LEGACY_SCROLLING_MODE)) {\r\n                                    return LOAD_TIMEOUT\r\n                                }\r\n                                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0\r\n                            }\r\n                        }\r\n                    },\r\n                    _updateItemsCore: function(change) {\r\n                        var delta = this.getRowIndexDelta();\r\n                        this.callBase.apply(this, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && gridCoreUtils.isVirtualRowRendering(this)) {\r\n                            if (\"update\" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {\r\n                                change.cancel = true\r\n                            }\r\n                            return\r\n                        }\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            var visibleItems = this._visibleItems;\r\n                            var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\r\n                            if (\"append\" === change.changeType && change.items && !change.items.length) {\r\n                                return\r\n                            }\r\n                            if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\r\n                                change.cancel = true;\r\n                                isRefresh && rowsScrollController.reset(true);\r\n                                rowsScrollController.load()\r\n                            } else {\r\n                                if (\"update\" === change.changeType) {\r\n                                    change.rowIndices.forEach((rowIndex, index) => {\r\n                                        var changeType = change.changeTypes[index];\r\n                                        var newItem = change.items[index];\r\n                                        if (\"update\" === changeType) {\r\n                                            visibleItems[rowIndex] = newItem\r\n                                        } else if (\"insert\" === changeType) {\r\n                                            visibleItems.splice(rowIndex, 0, newItem)\r\n                                        } else if (\"remove\" === changeType) {\r\n                                            visibleItems.splice(rowIndex, 1)\r\n                                        }\r\n                                    })\r\n                                } else {\r\n                                    visibleItems.forEach((item, index) => {\r\n                                        visibleItems[index] = this._items[index + delta] || visibleItems[index]\r\n                                    });\r\n                                    change.items = visibleItems\r\n                                }\r\n                                updateItemIndices(visibleItems)\r\n                            }\r\n                        }\r\n                    },\r\n                    _updateLoadViewportParams: function() {\r\n                        var viewportParams = this._rowsScrollController.getViewportParams();\r\n                        var pageSize = this.pageSize();\r\n                        if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {\r\n                            var pageOffset = this.pageIndex() * pageSize;\r\n                            viewportParams.skip += pageOffset\r\n                        }\r\n                        this._loadViewportParams = viewportParams\r\n                    },\r\n                    _processItems: function(items) {\r\n                        var resultItems = this.callBase.apply(this, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            var _dataSource$lastLoadO;\r\n                            var dataSource = this._dataSource;\r\n                            var currentIndex = null !== (_dataSource$lastLoadO = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO ? _dataSource$lastLoadO : 0;\r\n                            var prevCountable;\r\n                            var prevRowType;\r\n                            var isPrevRowNew;\r\n                            var wasCountableItem = false;\r\n                            var newRows = [];\r\n                            resultItems.forEach(item => {\r\n                                var rowType = item.rowType;\r\n                                var itemCountable = isItemCountableByDataSource(item, dataSource);\r\n                                var isNextGroupItem = \"group\" === rowType && (prevCountable || itemCountable || \"group\" !== prevRowType && currentIndex > 0);\r\n                                var isNextDataItem = \"data\" === rowType && itemCountable && (prevCountable || \"group\" !== prevRowType);\r\n                                if (!item.isNewRow && isDefined(prevCountable)) {\r\n                                    var isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;\r\n                                    if ((isNextGroupItem || isNextDataItem) && !isPrevNewRowFirst) {\r\n                                        currentIndex++\r\n                                    }\r\n                                }\r\n                                if (isNextGroupItem || isNextDataItem) {\r\n                                    wasCountableItem = true\r\n                                }\r\n                                if (item.isNewRow) {\r\n                                    newRows.push(item)\r\n                                } else {\r\n                                    newRows.forEach(it => it.loadIndex = currentIndex);\r\n                                    newRows = []\r\n                                }\r\n                                item.loadIndex = currentIndex;\r\n                                prevCountable = itemCountable;\r\n                                prevRowType = rowType;\r\n                                isPrevRowNew = item.isNewRow\r\n                            });\r\n                            newRows.forEach(it => it.loadIndex = currentIndex)\r\n                        }\r\n                        return resultItems\r\n                    },\r\n                    _afterProcessItems: function(items, change) {\r\n                        this._itemCount = items.filter(item => isItemCountableByDataSource(item, this._dataSource)).length;\r\n                        if (isDefined(this._loadViewportParams)) {\r\n                            this._updateLoadViewportParams();\r\n                            var result = items;\r\n                            this._allItems = items;\r\n                            if (items.length) {\r\n                                var {\r\n                                    skipForCurrentPage: skipForCurrentPage\r\n                                } = this.getLoadPageParams(true);\r\n                                var skip = items[0].loadIndex + skipForCurrentPage;\r\n                                var take = this._loadViewportParams.take;\r\n                                result = items.filter(it => {\r\n                                    var isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;\r\n                                    var isLoadIndexGreaterStart = it.loadIndex >= skip;\r\n                                    var isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;\r\n                                    return isLoadIndexGreaterStart && isLoadIndexLessEnd\r\n                                })\r\n                            }\r\n                            return result\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    _applyChange: function(change) {\r\n                        var that = this;\r\n                        var items = change.items;\r\n                        var changeType = change.changeType;\r\n                        var removeCount = change.removeCount;\r\n                        if (removeCount) {\r\n                            var fromEnd = \"prepend\" === changeType;\r\n                            removeCount = _correctCount(that._items, removeCount, fromEnd, (function(item, isNextAfterLast) {\r\n                                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast)\r\n                            }));\r\n                            change.removeCount = removeCount\r\n                        }\r\n                        switch (changeType) {\r\n                            case \"prepend\":\r\n                                that._items.unshift.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(-removeCount)\r\n                                }\r\n                                break;\r\n                            case \"append\":\r\n                                that._items.push.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(0, removeCount)\r\n                                }\r\n                                break;\r\n                            default:\r\n                                that.callBase(change)\r\n                        }\r\n                    },\r\n                    items: function(allItems) {\r\n                        return allItems ? this._allItems || this._items : this._visibleItems || this._items\r\n                    },\r\n                    getRowIndexDelta: function() {\r\n                        var delta = 0;\r\n                        if (this.option(LEGACY_SCROLLING_MODE)) {\r\n                            var visibleItems = this._visibleItems;\r\n                            if (visibleItems && visibleItems[0]) {\r\n                                delta = this._items.indexOf(visibleItems[0])\r\n                            }\r\n                        }\r\n                        return delta < 0 ? 0 : delta\r\n                    },\r\n                    getRowIndexOffset: function(byLoadedRows) {\r\n                        var offset = 0;\r\n                        var dataSource = this.dataSource();\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        if (rowsScrollController && !byLoadedRows) {\r\n                            if (newMode && isDefined(this._loadViewportParams)) {\r\n                                var {\r\n                                    skipForCurrentPage: skipForCurrentPage,\r\n                                    pageIndex: pageIndex\r\n                                } = this.getLoadPageParams(true);\r\n                                var items = this.items(true);\r\n                                offset = virtualPaging ? pageIndex * this.pageSize() : 0;\r\n                                if (items.length) {\r\n                                    var firstLoadIndex = items[0].loadIndex;\r\n                                    offset += items.filter(item => item.loadIndex < firstLoadIndex + skipForCurrentPage).length\r\n                                }\r\n                            } else {\r\n                                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize()\r\n                            }\r\n                        } else if (virtualPaging && newMode && dataSource) {\r\n                            var _dataSource$lastLoadO2;\r\n                            offset = null !== (_dataSource$lastLoadO2 = dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO2 ? _dataSource$lastLoadO2 : 0\r\n                        } else if (isVirtualMode(this) && dataSource) {\r\n                            offset = dataSource.beginPageIndex() * dataSource.pageSize()\r\n                        }\r\n                        return offset\r\n                    },\r\n                    getDataIndex: function(change) {\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return this.getRowIndexOffset(true)\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    viewportSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments)\r\n                    },\r\n                    viewportHeight: function(height, scrollTop) {\r\n                        var _this$_rowsScrollCont;\r\n                        null === (_this$_rowsScrollCont = this._rowsScrollController) || void 0 === _this$_rowsScrollCont ? void 0 : _this$_rowsScrollCont.viewportHeight(height, scrollTop)\r\n                    },\r\n                    viewportItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    setViewportPosition: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        this._isPaging = false;\r\n                        if (rowsScrollController) {\r\n                            rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments)\r\n                        }\r\n                    },\r\n                    setContentItemSizes: function(sizes) {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes)\r\n                    },\r\n                    getPreloadedRowCount: function() {\r\n                        var preloadCount = this.option(\"scrolling.preloadedRowCount\");\r\n                        var preloadEnabled = this.option(\"scrolling.preloadEnabled\");\r\n                        if (isDefined(preloadCount)) {\r\n                            return preloadCount\r\n                        }\r\n                        var viewportSize = this.viewportSize();\r\n                        return preloadEnabled ? 2 * viewportSize : viewportSize\r\n                    },\r\n                    getLoadPageParams: function(byLoadedPage) {\r\n                        var _this$_dataSource3, _this$_dataSource4;\r\n                        var pageSize = this.pageSize();\r\n                        var viewportParams = this._loadViewportParams;\r\n                        var lastLoadOptions = null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.lastLoadOptions();\r\n                        var loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;\r\n                        var loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;\r\n                        var isScrollingBack = this._rowsScrollController.isScrollingBack();\r\n                        var topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;\r\n                        var bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();\r\n                        var totalCountCorrection = (null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.totalCountCorrection()) || 0;\r\n                        var skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);\r\n                        var pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);\r\n                        var pageOffset = pageIndex * pageSize;\r\n                        var skipForCurrentPage = viewportParams.skip - pageOffset;\r\n                        var loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;\r\n                        var take = byLoadedPage ? loadedTake : loadingTake;\r\n                        var loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);\r\n                        return {\r\n                            pageIndex: pageIndex,\r\n                            loadPageCount: Math.max(1, loadPageCount),\r\n                            skipForCurrentPage: Math.max(0, skipForCurrentPage)\r\n                        }\r\n                    },\r\n                    _updateVisiblePageIndex: function(currentPageIndex) {\r\n                        if (!this._rowsScrollController) {\r\n                            return\r\n                        }\r\n                        if (isDefined(currentPageIndex)) {\r\n                            this._silentOption(VISIBLE_PAGE_INDEX, currentPageIndex);\r\n                            this.pageChanged.fire();\r\n                            return\r\n                        }\r\n                        var viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();\r\n                        var newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());\r\n                        if (this.pageIndex() !== newPageIndex) {\r\n                            this._silentOption(VISIBLE_PAGE_INDEX, newPageIndex);\r\n                            this.updateItems({\r\n                                changeType: \"pageIndex\"\r\n                            })\r\n                        }\r\n                    },\r\n                    _getChangedLoadParams: function() {\r\n                        var loadedPageParams = this.getLoadPageParams(true);\r\n                        var {\r\n                            pageIndex: pageIndex,\r\n                            loadPageCount: loadPageCount\r\n                        } = this.getLoadPageParams();\r\n                        var pageIndexIsValid = this._pageIndexIsValid(pageIndex);\r\n                        var result = null;\r\n                        if (!this._isLoading && pageIndexIsValid && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {\r\n                            result = {\r\n                                pageIndex: pageIndex,\r\n                                loadPageCount: loadPageCount\r\n                            }\r\n                        }\r\n                        return result\r\n                    },\r\n                    _pageIndexIsValid: function(pageIndex) {\r\n                        var result = true;\r\n                        if (isAppendMode(this) && this.hasKnownLastPage() || isVirtualMode(this)) {\r\n                            result = pageIndex * this.pageSize() < this.totalItemsCount()\r\n                        }\r\n                        return result\r\n                    },\r\n                    _loadItems: function(checkLoading, viewportIsFilled) {\r\n                        var _dataSourceAdapter$lo, _dataSourceAdapter$pa;\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        var dataSourceAdapter = this._dataSource;\r\n                        var changedParams = this._getChangedLoadParams();\r\n                        var currentLoadPageCount = null !== (_dataSourceAdapter$lo = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) && void 0 !== _dataSourceAdapter$lo ? _dataSourceAdapter$lo : 0;\r\n                        var lastRequiredItemCount = this.pageSize() * currentLoadPageCount;\r\n                        var currentPageIndex = null !== (_dataSourceAdapter$pa = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) && void 0 !== _dataSourceAdapter$pa ? _dataSourceAdapter$pa : 0;\r\n                        var pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;\r\n                        var allLoadedInAppendMode = isAppendMode(this) && this.totalItemsCount() < lastRequiredItemCount;\r\n                        var isRepaintMode = \"repaint\" === this.option(\"editing.refreshMode\");\r\n                        var pageIndexIncreased = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex;\r\n                        var result = false;\r\n                        if (!dataSourceAdapter || virtualPaging && checkLoading && (isRepaintMode && viewportIsFilled || pageIndexIncreased || pageIndexNotChanged && allLoadedInAppendMode)) {\r\n                            return result\r\n                        }\r\n                        if (virtualPaging && this._isLoading) {\r\n                            this._needUpdateViewportAfterLoading = true\r\n                        }\r\n                        if (virtualPaging && changedParams) {\r\n                            result = true;\r\n                            dataSourceAdapter.pageIndex(changedParams.pageIndex);\r\n                            dataSourceAdapter.loadPageCount(changedParams.loadPageCount);\r\n                            this._repaintChangesOnly = true;\r\n                            this._needUpdateDimensions = true;\r\n                            var viewportChanging = this._viewportChanging;\r\n                            this.load().always(() => {\r\n                                this._repaintChangesOnly = void 0;\r\n                                this._needUpdateDimensions = void 0\r\n                            }).done(() => {\r\n                                var isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;\r\n                                (viewportChanging || isLastPage) && this._updateVisiblePageIndex();\r\n                                if (this._needUpdateViewportAfterLoading) {\r\n                                    this._needUpdateViewportAfterLoading = false;\r\n                                    this.loadViewport({\r\n                                        checkLoadedParamsOnly: true\r\n                                    })\r\n                                }\r\n                            })\r\n                        }\r\n                        return result\r\n                    },\r\n                    loadViewport: function(params) {\r\n                        var {\r\n                            checkLoadedParamsOnly: checkLoadedParamsOnly,\r\n                            checkLoading: checkLoading,\r\n                            viewportIsNotFilled: viewportIsNotFilled\r\n                        } = null !== params && void 0 !== params ? params : {};\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        if (virtualPaging || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                            this._updateLoadViewportParams();\r\n                            var loadingItemsStarted = this._loadItems(checkLoading, !viewportIsNotFilled);\r\n                            var needToUpdateItems = !(loadingItemsStarted || this._isLoading && checkLoading || checkLoadedParamsOnly);\r\n                            if (needToUpdateItems) {\r\n                                var _this$getController2, _this$getController2$;\r\n                                var noPendingChangesInEditing = !(null !== (_this$getController2 = this.getController(\"editing\")) && void 0 !== _this$getController2 && null !== (_this$getController2$ = _this$getController2.getChanges()) && void 0 !== _this$getController2$ && _this$getController2$.length);\r\n                                this.updateItems({\r\n                                    repaintChangesOnly: true,\r\n                                    needUpdateDimensions: true,\r\n                                    useProcessedItemsCache: noPendingChangesInEditing,\r\n                                    cancelEmptyChanges: true\r\n                                })\r\n                            }\r\n                        }\r\n                    },\r\n                    updateViewport: function() {\r\n                        var _this$_loadViewportPa, _this$_loadViewportPa2;\r\n                        var viewportSize = this.viewportSize();\r\n                        var itemCount = this.items().length;\r\n                        var viewportIsNotFilled = viewportSize > itemCount;\r\n                        var currentTake = null !== (_this$_loadViewportPa = null === (_this$_loadViewportPa2 = this._loadViewportParams) || void 0 === _this$_loadViewportPa2 ? void 0 : _this$_loadViewportPa2.take) && void 0 !== _this$_loadViewportPa ? _this$_loadViewportPa : 0;\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;\r\n                        (viewportIsNotFilled || currentTake < newTake) && !this._isPaging && itemCount && this.loadViewport({\r\n                            checkLoading: true,\r\n                            viewportIsNotFilled: viewportIsNotFilled\r\n                        })\r\n                    },\r\n                    loadIfNeed: function() {\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return\r\n                        }\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.loadIfNeed();\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.loadIfNeed()\r\n                    },\r\n                    getItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSize.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    getItemSizes: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSizes.apply(dataSource, arguments)\r\n                    },\r\n                    getContentOffset: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getContentOffset.apply(dataSource, arguments)\r\n                    },\r\n                    refresh: function(options) {\r\n                        var dataSource = this._dataSource;\r\n                        if (dataSource && options && options.load && isAppendMode(this)) {\r\n                            dataSource.resetCurrentTotalCount()\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    dispose: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.dispose();\r\n                        this.callBase.apply(this, arguments)\r\n                    },\r\n                    topItemIndex: function() {\r\n                        var _this$_loadViewportPa3;\r\n                        return null === (_this$_loadViewportPa3 = this._loadViewportParams) || void 0 === _this$_loadViewportPa3 ? void 0 : _this$_loadViewportPa3.skip\r\n                    },\r\n                    bottomItemIndex: function() {\r\n                        var viewportParams = this._loadViewportParams;\r\n                        return viewportParams && viewportParams.skip + viewportParams.take\r\n                    },\r\n                    virtualItemsCount: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments)\r\n                    },\r\n                    pageIndex: function(_pageIndex) {\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && virtualPaging && rowsScrollController) {\r\n                            if (void 0 === _pageIndex) {\r\n                                var _this$option;\r\n                                return null !== (_this$option = this.option(VISIBLE_PAGE_INDEX)) && void 0 !== _this$option ? _this$option : 0\r\n                            }\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    _fireChanged: function(e) {\r\n                        this.callBase.apply(this, arguments);\r\n                        var {\r\n                            operationTypes: operationTypes\r\n                        } = e;\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this) && operationTypes) {\r\n                            var {\r\n                                fullReload: fullReload,\r\n                                pageIndex: pageIndex\r\n                            } = operationTypes;\r\n                            if (e.isDataChanged && !fullReload && pageIndex) {\r\n                                this._updateVisiblePageIndex(this._dataSource.pageIndex())\r\n                            }\r\n                        }\r\n                    },\r\n                    _getPagingOptionValue: function(optionName) {\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\r\n                            result = this[optionName]()\r\n                        }\r\n                        return result\r\n                    },\r\n                    isEmpty: function() {\r\n                        return false === this.option(LEGACY_SCROLLING_MODE) ? !this.items(true).length : this.callBase(this, arguments)\r\n                    },\r\n                    isLastPageLoaded: function() {\r\n                        var result = false;\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\r\n                            var {\r\n                                pageIndex: pageIndex,\r\n                                loadPageCount: loadPageCount\r\n                            } = this.getLoadPageParams(true);\r\n                            var pageCount = this.pageCount();\r\n                            result = pageIndex + loadPageCount >= pageCount\r\n                        } else {\r\n                            result = this.callBase.apply(this, arguments)\r\n                        }\r\n                        return result\r\n                    },\r\n                    reset: function() {\r\n                        this._itemCount = 0;\r\n                        this._allItems = null;\r\n                        this.callBase.apply(this, arguments)\r\n                    },\r\n                    _applyFilter: function() {\r\n                        var _this$_dataSource5;\r\n                        null === (_this$_dataSource5 = this._dataSource) || void 0 === _this$_dataSource5 ? void 0 : _this$_dataSource5.loadPageCount(1);\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                };\r\n                gridCoreUtils.proxyMethod(members, \"getVirtualContentSize\");\r\n                gridCoreUtils.proxyMethod(members, \"setViewportItemIndex\");\r\n                return members\r\n            }(),\r\n            resizing: {\r\n                _updateMasterDataGridCore: function(masterDataGrid) {\r\n                    return when(this.callBase.apply(this, arguments)).done(masterDataGridUpdated => {\r\n                        var isNewVirtualMode = isVirtualMode(masterDataGrid) && false === masterDataGrid.option(LEGACY_SCROLLING_MODE);\r\n                        if (!masterDataGridUpdated && isNewVirtualMode) {\r\n                            var scrollable = masterDataGrid.getScrollable();\r\n                            if (scrollable) {\r\n                                masterDataGrid.updateDimensions()\r\n                            }\r\n                        }\r\n                    })\r\n                },\r\n                hasResizeTimeout: function() {\r\n                    return !!this._resizeTimeout\r\n                },\r\n                resize: function() {\r\n                    var callBase = this.callBase;\r\n                    var result;\r\n                    if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                        clearTimeout(this._resizeTimeout);\r\n                        this._resizeTimeout = null;\r\n                        var diff = new Date - this._lastTime;\r\n                        var updateTimeout = this.option(\"scrolling.updateTimeout\");\r\n                        if (this._lastTime && diff < updateTimeout) {\r\n                            result = new Deferred;\r\n                            this._resizeTimeout = setTimeout(() => {\r\n                                this._resizeTimeout = null;\r\n                                callBase.apply(this).done(result.resolve).fail(result.reject);\r\n                                this._lastTime = new Date\r\n                            }, updateTimeout);\r\n                            this._lastTime = new Date\r\n                        } else {\r\n                            result = callBase.apply(this);\r\n                            if (this._dataController.isLoaded()) {\r\n                                this._lastTime = new Date\r\n                            }\r\n                        }\r\n                    } else {\r\n                        result = callBase.apply(this)\r\n                    }\r\n                    return result\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._resizeTimeout)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: VirtualScrollingRowsViewExtender\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}