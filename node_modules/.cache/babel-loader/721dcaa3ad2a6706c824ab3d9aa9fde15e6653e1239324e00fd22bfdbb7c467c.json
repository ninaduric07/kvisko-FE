{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/number_box/number_box.caret.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { fitIntoRange } from \"../../core/utils/math\";\nimport { escapeRegExp } from \"../../core/utils/common\";\nimport number from \"../../localization/number\";\nimport { getRealSeparatorIndex, getNthOccurrence, splitByIndex } from \"./utils\";\nexport var getCaretBoundaries = function (text, format) {\n  if (\"string\" === typeof format) {\n    var signParts = format.split(\";\");\n    var sign = number.getSign(text, format);\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\n    format = signParts[sign < 0 ? 1 : 0];\n    format = (str = format, str.replace(/'([^']*)'/g, str => str.split(\"\").map(() => \" \").join(\"\").substr(2)));\n    var prefixStubLength = /^[^#0.,]*/.exec(format)[0].length;\n    var postfixStubLength = /[^#0.,]*$/.exec(format)[0].length;\n    return {\n      start: prefixStubLength,\n      end: text.length - postfixStubLength\n    };\n  } else {\n    return {\n      start: 0,\n      end: text.length\n    };\n  }\n  var str;\n};\nvar _getDigitCountBeforeIndex = function (index, text) {\n  var decimalSeparator = number.getDecimalSeparator();\n  var regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\n  var textBeforePosition = text.slice(0, index);\n  return textBeforePosition.replace(regExp, \"\").length;\n};\nvar _reverseText = function (text) {\n  return text.split(\"\").reverse().join(\"\");\n};\nvar _getDigitPositionByIndex = function (digitIndex, text) {\n  if (!digitIndex) {\n    return -1;\n  }\n  var regExp = /[0-9]/g;\n  var counter = 1;\n  var index = null;\n  var result = regExp.exec(text);\n  while (result) {\n    index = result.index;\n    if (counter >= digitIndex) {\n      return index;\n    }\n    counter++;\n    result = regExp.exec(text);\n  }\n  return null === index ? text.length : index;\n};\nvar _trimNonNumericCharsFromEnd = function (text) {\n  return text.replace(/[^0-9e]+$/, \"\");\n};\nexport var getCaretWithOffset = function (caret, offset) {\n  if (void 0 === caret.start) {\n    caret = {\n      start: caret,\n      end: caret\n    };\n  }\n  return {\n    start: caret.start + offset,\n    end: caret.end + offset\n  };\n};\nexport var getCaretAfterFormat = function (text, formatted, caret, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var point = number.getDecimalSeparator();\n  var isSeparatorBasedText = isSeparatorBasedString(text);\n  var realSeparatorOccurrenceIndex = getRealSeparatorIndex(format).occurrence;\n  var pointPosition = isSeparatorBasedText ? 0 : getNthOccurrence(text, point, realSeparatorOccurrenceIndex);\n  var newPointPosition = getNthOccurrence(formatted, point, realSeparatorOccurrenceIndex);\n  var textParts = splitByIndex(text, pointPosition);\n  var formattedParts = splitByIndex(formatted, newPointPosition);\n  var isCaretOnFloat = -1 !== pointPosition && caret.start > pointPosition;\n  if (isCaretOnFloat) {\n    var relativeIndex = caret.start - pointPosition - 1;\n    var digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]);\n    var newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\n    return getCaretInBoundaries(newPosition, formatted, format);\n  } else {\n    var formattedIntPart = _trimNonNumericCharsFromEnd(formattedParts[0]);\n    var positionFromEnd = textParts[0].length - caret.start;\n    var digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0]));\n    var newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedIntPart));\n    var newPositionFromBegin = formattedIntPart.length - (newPositionFromEnd + 1);\n    return getCaretInBoundaries(newPositionFromBegin, formatted, format);\n  }\n};\nfunction isSeparatorBasedString(text) {\n  return 1 === text.length && !!text.match(/^[,.][0-9]*$/g);\n}\nexport var isCaretInBoundaries = function (caret, text, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var boundaries = getCaretInBoundaries(caret, text, format);\n  return caret.start >= boundaries.start && caret.end <= boundaries.end;\n};\nexport function getCaretInBoundaries(caret, text, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var boundaries = getCaretBoundaries(text, format);\n  var adjustedCaret = {\n    start: fitIntoRange(caret.start, boundaries.start, boundaries.end),\n    end: fitIntoRange(caret.end, boundaries.start, boundaries.end)\n  };\n  return adjustedCaret;\n}\nexport var getCaretOffset = function (previousText, newText, format) {\n  var previousBoundaries = getCaretBoundaries(previousText, format);\n  var newBoundaries = getCaretBoundaries(newText, format);\n  return newBoundaries.start - previousBoundaries.start;\n};","map":{"version":3,"names":["fitIntoRange","escapeRegExp","number","getRealSeparatorIndex","getNthOccurrence","splitByIndex","getCaretBoundaries","text","format","signParts","split","sign","getSign","str","replace","map","join","substr","prefixStubLength","exec","length","postfixStubLength","start","end","_getDigitCountBeforeIndex","index","decimalSeparator","getDecimalSeparator","regExp","RegExp","textBeforePosition","slice","_reverseText","reverse","_getDigitPositionByIndex","digitIndex","counter","result","_trimNonNumericCharsFromEnd","getCaretWithOffset","caret","offset","getCaretAfterFormat","formatted","point","isSeparatorBasedText","isSeparatorBasedString","realSeparatorOccurrenceIndex","occurrence","pointPosition","newPointPosition","textParts","formattedParts","isCaretOnFloat","relativeIndex","digitsBefore","newPosition","getCaretInBoundaries","formattedIntPart","positionFromEnd","digitsFromEnd","newPositionFromEnd","newPositionFromBegin","match","isCaretInBoundaries","boundaries","adjustedCaret","getCaretOffset","previousText","newText","previousBoundaries","newBoundaries"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/node_modules/devextreme/esm/ui/number_box/number_box.caret.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/number_box/number_box.caret.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    fitIntoRange\r\n} from \"../../core/utils/math\";\r\nimport {\r\n    escapeRegExp\r\n} from \"../../core/utils/common\";\r\nimport number from \"../../localization/number\";\r\nimport {\r\n    getRealSeparatorIndex,\r\n    getNthOccurrence,\r\n    splitByIndex\r\n} from \"./utils\";\r\nexport var getCaretBoundaries = function(text, format) {\r\n    if (\"string\" === typeof format) {\r\n        var signParts = format.split(\";\");\r\n        var sign = number.getSign(text, format);\r\n        signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n        format = signParts[sign < 0 ? 1 : 0];\r\n        format = (str = format, str.replace(/'([^']*)'/g, str => str.split(\"\").map(() => \" \").join(\"\").substr(2)));\r\n        var prefixStubLength = /^[^#0.,]*/.exec(format)[0].length;\r\n        var postfixStubLength = /[^#0.,]*$/.exec(format)[0].length;\r\n        return {\r\n            start: prefixStubLength,\r\n            end: text.length - postfixStubLength\r\n        }\r\n    } else {\r\n        return {\r\n            start: 0,\r\n            end: text.length\r\n        }\r\n    }\r\n    var str\r\n};\r\nvar _getDigitCountBeforeIndex = function(index, text) {\r\n    var decimalSeparator = number.getDecimalSeparator();\r\n    var regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\r\n    var textBeforePosition = text.slice(0, index);\r\n    return textBeforePosition.replace(regExp, \"\").length\r\n};\r\nvar _reverseText = function(text) {\r\n    return text.split(\"\").reverse().join(\"\")\r\n};\r\nvar _getDigitPositionByIndex = function(digitIndex, text) {\r\n    if (!digitIndex) {\r\n        return -1\r\n    }\r\n    var regExp = /[0-9]/g;\r\n    var counter = 1;\r\n    var index = null;\r\n    var result = regExp.exec(text);\r\n    while (result) {\r\n        index = result.index;\r\n        if (counter >= digitIndex) {\r\n            return index\r\n        }\r\n        counter++;\r\n        result = regExp.exec(text)\r\n    }\r\n    return null === index ? text.length : index\r\n};\r\nvar _trimNonNumericCharsFromEnd = function(text) {\r\n    return text.replace(/[^0-9e]+$/, \"\")\r\n};\r\nexport var getCaretWithOffset = function(caret, offset) {\r\n    if (void 0 === caret.start) {\r\n        caret = {\r\n            start: caret,\r\n            end: caret\r\n        }\r\n    }\r\n    return {\r\n        start: caret.start + offset,\r\n        end: caret.end + offset\r\n    }\r\n};\r\nexport var getCaretAfterFormat = function(text, formatted, caret, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var point = number.getDecimalSeparator();\r\n    var isSeparatorBasedText = isSeparatorBasedString(text);\r\n    var realSeparatorOccurrenceIndex = getRealSeparatorIndex(format).occurrence;\r\n    var pointPosition = isSeparatorBasedText ? 0 : getNthOccurrence(text, point, realSeparatorOccurrenceIndex);\r\n    var newPointPosition = getNthOccurrence(formatted, point, realSeparatorOccurrenceIndex);\r\n    var textParts = splitByIndex(text, pointPosition);\r\n    var formattedParts = splitByIndex(formatted, newPointPosition);\r\n    var isCaretOnFloat = -1 !== pointPosition && caret.start > pointPosition;\r\n    if (isCaretOnFloat) {\r\n        var relativeIndex = caret.start - pointPosition - 1;\r\n        var digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]);\r\n        var newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\r\n        return getCaretInBoundaries(newPosition, formatted, format)\r\n    } else {\r\n        var formattedIntPart = _trimNonNumericCharsFromEnd(formattedParts[0]);\r\n        var positionFromEnd = textParts[0].length - caret.start;\r\n        var digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0]));\r\n        var newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedIntPart));\r\n        var newPositionFromBegin = formattedIntPart.length - (newPositionFromEnd + 1);\r\n        return getCaretInBoundaries(newPositionFromBegin, formatted, format)\r\n    }\r\n};\r\n\r\nfunction isSeparatorBasedString(text) {\r\n    return 1 === text.length && !!text.match(/^[,.][0-9]*$/g)\r\n}\r\nexport var isCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretInBoundaries(caret, text, format);\r\n    return caret.start >= boundaries.start && caret.end <= boundaries.end\r\n};\r\nexport function getCaretInBoundaries(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretBoundaries(text, format);\r\n    var adjustedCaret = {\r\n        start: fitIntoRange(caret.start, boundaries.start, boundaries.end),\r\n        end: fitIntoRange(caret.end, boundaries.start, boundaries.end)\r\n    };\r\n    return adjustedCaret\r\n}\r\nexport var getCaretOffset = function(previousText, newText, format) {\r\n    var previousBoundaries = getCaretBoundaries(previousText, format);\r\n    var newBoundaries = getCaretBoundaries(newText, format);\r\n    return newBoundaries.start - previousBoundaries.start\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}