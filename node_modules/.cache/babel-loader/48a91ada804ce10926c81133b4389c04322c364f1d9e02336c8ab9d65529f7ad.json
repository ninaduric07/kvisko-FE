{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport ArrayStore from \"../../data/array_store\";\nimport CustomStore from \"../../data/custom_store\";\nimport errors from \"../widget/ui.errors\";\nimport { noop, deferRender, equalByValue } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport DataHelperMixin from \"../../data_helper\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { findChanges } from \"../../core/utils/array_compare\";\nexport var dataControllerModule = {\n  defaultOptions: function () {\n    return {\n      loadingTimeout: 0,\n      dataSource: null,\n      cacheEnabled: true,\n      repaintChangesOnly: false,\n      highlightChanges: false,\n      onDataErrorOccurred: null,\n      remoteOperations: \"auto\",\n      paging: {\n        enabled: true,\n        pageSize: void 0,\n        pageIndex: void 0\n      }\n    };\n  },\n  controllers: {\n    data: modules.Controller.inherit(DataHelperMixin).inherit(function () {\n      var changePaging = function (that, optionName, value) {\n        var dataSource = that._dataSource;\n        if (dataSource) {\n          if (void 0 !== value) {\n            var oldValue = that._getPagingOptionValue(optionName);\n            if (oldValue !== value) {\n              if (\"pageSize\" === optionName) {\n                dataSource.pageIndex(0);\n              }\n              dataSource[optionName](value);\n              that._skipProcessingPagingChange = true;\n              that.option(\"paging.\" + optionName, value);\n              that._skipProcessingPagingChange = false;\n              var pageIndex = dataSource.pageIndex();\n              that._isPaging = \"pageIndex\" === optionName;\n              return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(() => {\n                that._isPaging = false;\n                that.pageChanged.fire(pageIndex);\n              });\n            }\n            return Deferred().resolve().promise();\n          }\n          return dataSource[optionName]();\n        }\n        return 0;\n      };\n      var members = {\n        init: function () {\n          var that = this;\n          that._items = [];\n          that._cachedProcessedItems = null;\n          that._columnsController = that.getController(\"columns\");\n          that._isPaging = false;\n          that._currentOperationTypes = null;\n          that._dataChangedHandler = e => {\n            that._currentOperationTypes = this._dataSource.operationTypes();\n            that._handleDataChanged(e);\n            that._currentOperationTypes = null;\n          };\n          that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\n          that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n          that._loadErrorHandler = that._handleLoadError.bind(that);\n          that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\n          that._changingHandler = that._handleChanging.bind(that);\n          that._dataPushedHandler = that._handleDataPushed.bind(that);\n          that._columnsController.columnsChanged.add(that._columnsChangedHandler);\n          that._isLoading = false;\n          that._isCustomLoading = false;\n          that._repaintChangesOnly = void 0;\n          that._changes = [];\n          that.createAction(\"onDataErrorOccurred\");\n          that.dataErrorOccurred.add(function (error) {\n            return that.executeAction(\"onDataErrorOccurred\", {\n              error: error\n            });\n          });\n          that._refreshDataSource();\n        },\n        _getPagingOptionValue: function (optionName) {\n          return this._dataSource[optionName]();\n        },\n        callbackNames: function () {\n          return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\", \"pushed\"];\n        },\n        callbackFlags: function (name) {\n          if (\"dataErrorOccurred\" === name) {\n            return {\n              stopOnFalse: true\n            };\n          }\n        },\n        publicMethods: function () {\n          return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"];\n        },\n        reset: function () {\n          this._columnsController.reset();\n          this._items = [];\n          this._refreshDataSource();\n        },\n        _handleDataSourceChange(args) {\n          if (args.value === args.previousValue || this.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {\n            var isValueChanged = args.value !== args.previousValue;\n            if (isValueChanged) {\n              var store = this.store();\n              if (store) {\n                store._array = args.value;\n              }\n            }\n            if (this.needToRefreshOnDataSourceChange(args)) {\n              this.refresh(this.option(\"repaintChangesOnly\"));\n            }\n            return true;\n          }\n          return false;\n        },\n        needToRefreshOnDataSourceChange: function (args) {\n          return true;\n        },\n        optionChanged: function (args) {\n          var that = this;\n          var dataSource;\n          var changedPagingOptions;\n          function handled() {\n            args.handled = true;\n          }\n          if (\"dataSource\" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {\n            handled();\n            return;\n          }\n          switch (args.name) {\n            case \"cacheEnabled\":\n            case \"repaintChangesOnly\":\n            case \"highlightChanges\":\n            case \"loadingTimeout\":\n              handled();\n              break;\n            case \"remoteOperations\":\n            case \"keyExpr\":\n            case \"dataSource\":\n            case \"scrolling\":\n              handled();\n              that.reset();\n              break;\n            case \"paging\":\n              dataSource = that.dataSource();\n              if (dataSource) {\n                changedPagingOptions = that._setPagingOptions(dataSource);\n                if (changedPagingOptions) {\n                  var pageIndex = dataSource.pageIndex();\n                  this._isPaging = changedPagingOptions.isPageIndexChanged;\n                  dataSource.load().done(() => {\n                    this._isPaging = false;\n                    that.pageChanged.fire(pageIndex);\n                  });\n                }\n              }\n              handled();\n              break;\n            case \"rtlEnabled\":\n              that.reset();\n              break;\n            case \"columns\":\n              dataSource = that.dataSource();\n              if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\n                this._useSortingGroupingFromColumns = true;\n                dataSource.load();\n              }\n              break;\n            default:\n              that.callBase(args);\n          }\n        },\n        isReady: function () {\n          return !this._isLoading;\n        },\n        getDataSource: function () {\n          return this._dataSource && this._dataSource._dataSource;\n        },\n        getCombinedFilter: function (returnDataField) {\n          return this.combinedFilter(void 0, returnDataField);\n        },\n        combinedFilter: function (filter, returnDataField) {\n          var dataSource = this._dataSource;\n          var columnsController = this._columnsController;\n          if (dataSource) {\n            if (void 0 === filter) {\n              filter = dataSource.filter();\n            }\n            var additionalFilter = this._calculateAdditionalFilter();\n            if (additionalFilter) {\n              if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\n                filter = gridCoreUtils.combineFilters([additionalFilter, filter]);\n              }\n            }\n            filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering);\n          }\n          return filter;\n        },\n        waitReady: function () {\n          if (this._updateLockCount) {\n            this._readyDeferred = new Deferred();\n            return this._readyDeferred;\n          }\n          return when();\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n          if (changes.length) {\n            this._changes = [];\n            var repaintChangesOnly = changes.every(change => change.repaintChangesOnly);\n            this.updateItems(1 === changes.length ? changes[0] : {\n              repaintChangesOnly: repaintChangesOnly\n            });\n          }\n          if (this._readyDeferred) {\n            this._readyDeferred.resolve();\n            this._readyDeferred = null;\n          }\n        },\n        _handleCustomizeStoreLoadOptions: function (e) {\n          var _storeLoadOptions$fil;\n          var columnsController = this._columnsController;\n          var dataSource = this._dataSource;\n          var storeLoadOptions = e.storeLoadOptions;\n          if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\n            return;\n          }\n          storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\n          if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && \"!\" === storeLoadOptions.filter[0]) {\n            e.data = [];\n            e.extra = e.extra || {};\n            e.extra.totalCount = 0;\n          }\n          if (!columnsController.isDataSourceApplied()) {\n            columnsController.updateColumnDataTypes(dataSource);\n          }\n          this._columnsUpdating = true;\n          columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\n          this._columnsUpdating = false;\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\n          storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\n          dataSource.sort(storeLoadOptions.sort);\n          dataSource.group(storeLoadOptions.group);\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\n          e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping);\n        },\n        _handleColumnsChanged: function (e) {\n          var that = this;\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n          var filterValue;\n          var filterValues;\n          var filterApplied;\n          if (changeTypes.sorting || changeTypes.grouping) {\n            if (that._dataSource && !that._columnsUpdating) {\n              that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\n              that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\n              that.reload();\n            }\n          } else if (changeTypes.columns) {\n            filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\n            if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {\n              filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\n              if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\n                that._applyFilter();\n                filterApplied = true;\n              }\n            }\n            if (!that._needApplyFilter && !gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\n              that._columnsController.columnsChanged.add(function updateItemsHandler(change) {\n                var _change$changeTypes;\n                that._columnsController.columnsChanged.remove(updateItemsHandler);\n                that.updateItems({\n                  repaintChangesOnly: false,\n                  virtualColumnsScrolling: null === change || void 0 === change ? void 0 : null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes.virtualColumnsScrolling\n                });\n              });\n            }\n            if (isDefined(optionNames.visible)) {\n              var column = that._columnsController.columnOption(e.columnIndex);\n              if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {\n                that._applyFilter();\n                filterApplied = true;\n              }\n            }\n          }\n          if (!filterApplied && changeTypes.filtering) {\n            that.reload();\n          }\n        },\n        _handleDataChanged: function (e) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var columnsController = that._columnsController;\n          var isAsyncDataSourceApplying = false;\n          this._useSortingGroupingFromColumns = false;\n          if (dataSource && !that._isDataSourceApplying) {\n            that._isDataSourceApplying = true;\n            when(that._columnsController.applyDataSource(dataSource)).done(function () {\n              if (that._isLoading) {\n                that._handleLoadingChanged(false);\n              }\n              if (isAsyncDataSourceApplying && e && e.isDelayed) {\n                e.isDelayed = false;\n              }\n              that._isDataSourceApplying = false;\n              var needApplyFilter = that._needApplyFilter;\n              that._needApplyFilter = false;\n              if (needApplyFilter && !that._isAllDataTypesDefined && (additionalFilter = that._calculateAdditionalFilter(), additionalFilter && additionalFilter.length)) {\n                errors.log(\"W1005\", that.component.NAME);\n                that._applyFilter();\n              } else {\n                that.updateItems(e, true);\n              }\n              var additionalFilter;\n            }).fail(function () {\n              that._isDataSourceApplying = false;\n            });\n            if (that._isDataSourceApplying) {\n              isAsyncDataSourceApplying = true;\n              that._handleLoadingChanged(true);\n            }\n            that._needApplyFilter = !that._columnsController.isDataSourceApplied();\n            that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined();\n          }\n        },\n        _handleLoadingChanged: function (isLoading) {\n          this._isLoading = isLoading;\n          this._fireLoadingChanged();\n        },\n        _handleLoadError: function (e) {\n          this.dataErrorOccurred.fire(e);\n        },\n        _handleDataPushed: function (changes) {\n          this.pushed.fire(changes);\n        },\n        fireError: function () {\n          this.dataErrorOccurred.fire(errors.Error.apply(errors, arguments));\n        },\n        _setPagingOptions: function (dataSource) {\n          var pageIndex = this.option(\"paging.pageIndex\");\n          var pageSize = this.option(\"paging.pageSize\");\n          var pagingEnabled = this.option(\"paging.enabled\");\n          var scrollingMode = this.option(\"scrolling.mode\");\n          var appendMode = \"infinite\" === scrollingMode;\n          var virtualMode = \"virtual\" === scrollingMode;\n          var paginate = pagingEnabled || virtualMode || appendMode;\n          var isPaginateChanged = false;\n          var isPageSizeChanged = false;\n          var isPageIndexChanged = false;\n          dataSource.requireTotalCount(!appendMode);\n          if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\n            dataSource.paginate(paginate);\n            isPaginateChanged = true;\n          }\n          if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\n            dataSource.pageSize(pageSize);\n            isPageSizeChanged = true;\n          }\n          if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\n            dataSource.pageIndex(pageIndex);\n            isPageIndexChanged = true;\n          }\n          if (isPaginateChanged || isPageSizeChanged || isPageIndexChanged) {\n            return {\n              isPaginateChanged: isPaginateChanged,\n              isPageSizeChanged: isPageSizeChanged,\n              isPageIndexChanged: isPageIndexChanged\n            };\n          }\n          return false;\n        },\n        _getSpecificDataSourceOption: function () {\n          var dataSource = this.option(\"dataSource\");\n          if (Array.isArray(dataSource)) {\n            return {\n              store: {\n                type: \"array\",\n                data: dataSource,\n                key: this.option(\"keyExpr\")\n              }\n            };\n          }\n          return dataSource;\n        },\n        _initDataSource: function () {\n          var oldDataSource = this._dataSource;\n          this.callBase();\n          var dataSource = this._dataSource;\n          this._useSortingGroupingFromColumns = true;\n          this._cachedProcessedItems = null;\n          if (dataSource) {\n            var changedPagingOptions = this._setPagingOptions(dataSource);\n            this._isPaging = null === changedPagingOptions || void 0 === changedPagingOptions ? void 0 : changedPagingOptions.isPageIndexChanged;\n            this.setDataSource(dataSource);\n          } else if (oldDataSource) {\n            this.updateItems();\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          var dataSource = that._dataSource;\n          var result = new Deferred();\n          when(this._columnsController.refresh(true)).always(function () {\n            if (dataSource) {\n              dataSource.load().done(function () {\n                that._isPaging = false;\n                result.resolve.apply(result, arguments);\n              }).fail(result.reject);\n            } else {\n              result.resolve();\n            }\n          });\n          return result.promise();\n        },\n        _beforeProcessItems: function (items) {\n          return items.slice(0);\n        },\n        getRowIndexDelta: function () {\n          return 0;\n        },\n        getDataIndex: function (change) {\n          var visibleItems = this._items;\n          var lastVisibleItem = \"append\" === change.changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\n          return isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;\n        },\n        _processItems: function (items, change) {\n          var that = this;\n          var rowIndexDelta = that.getRowIndexDelta();\n          var changeType = change.changeType;\n          var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\n          var dataIndex = this.getDataIndex(change);\n          var options = {\n            visibleColumns: visibleColumns,\n            dataIndex: dataIndex\n          };\n          var result = [];\n          each(items, function (index, item) {\n            if (isDefined(item)) {\n              options.rowIndex = index - rowIndexDelta;\n              item = that._processItem(item, options);\n              result.push(item);\n            }\n          });\n          return result;\n        },\n        _processItem: function (item, options) {\n          item = this._generateDataItem(item, options);\n          item = this._processDataItem(item, options);\n          item.dataIndex = options.dataIndex++;\n          return item;\n        },\n        _generateDataItem: function (data) {\n          return {\n            rowType: \"data\",\n            data: data,\n            key: this.keyOf(data)\n          };\n        },\n        _processDataItem: function (dataItem, options) {\n          dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\n          return dataItem;\n        },\n        generateDataValues: function (data, columns, isModified) {\n          var values = [];\n          var value;\n          for (var i = 0; i < columns.length; i++) {\n            var column = columns[i];\n            value = isModified ? void 0 : null;\n            if (!column.command) {\n              if (column.calculateCellValue) {\n                value = column.calculateCellValue(data);\n              } else if (column.dataField) {\n                value = data[column.dataField];\n              }\n            }\n            values.push(value);\n          }\n          return values;\n        },\n        _applyChange: function (change) {\n          if (\"update\" === change.changeType) {\n            this._applyChangeUpdate(change);\n          } else if (this.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\n            this._applyChangesOnly(change);\n          } else if (\"refresh\" === change.changeType) {\n            this._applyChangeFull(change);\n          }\n        },\n        _applyChangeFull: function (change) {\n          this._items = change.items.slice(0);\n        },\n        _getRowIndices: function (change) {\n          var rowIndices = change.rowIndices.slice(0);\n          var rowIndexDelta = this.getRowIndexDelta();\n          rowIndices.sort(function (a, b) {\n            return a - b;\n          });\n          for (var i = 0; i < rowIndices.length; i++) {\n            var correctedRowIndex = rowIndices[i];\n            if (change.allowInvisibleRowIndices) {\n              correctedRowIndex += rowIndexDelta;\n            }\n            if (correctedRowIndex < 0) {\n              rowIndices.splice(i, 1);\n              i--;\n            }\n          }\n          return rowIndices;\n        },\n        _applyChangeUpdate: function (change) {\n          var that = this;\n          var items = change.items;\n          var rowIndices = that._getRowIndices(change);\n          var rowIndexDelta = that.getRowIndexDelta();\n          var repaintChangesOnly = that.option(\"repaintChangesOnly\");\n          var prevIndex = -1;\n          var rowIndexCorrection = 0;\n          var changeType;\n          change.items = [];\n          change.rowIndices = [];\n          change.columnIndices = [];\n          change.changeTypes = [];\n          var equalItems = function (item1, item2, strict) {\n            var result = item1 && item2 && equalByValue(item1.key, item2.key);\n            if (result && strict) {\n              result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing);\n            }\n            return result;\n          };\n          each(rowIndices, function (index, rowIndex) {\n            var columnIndices;\n            rowIndex += rowIndexCorrection + rowIndexDelta;\n            if (prevIndex === rowIndex) {\n              return;\n            }\n            prevIndex = rowIndex;\n            var oldItem = that._items[rowIndex];\n            var oldNextItem = that._items[rowIndex + 1];\n            var newItem = items[rowIndex];\n            var newNextItem = items[rowIndex + 1];\n            var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\n            if (newItem) {\n              newItem.rowIndex = rowIndex;\n              change.items.push(newItem);\n            }\n            if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n              if (oldItem.visible !== newItem.visible) {\n                change.items.splice(-1, 1, {\n                  visible: newItem.visible\n                });\n              } else if (repaintChangesOnly && !change.isFullUpdate) {\n                columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta);\n              }\n            } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\n              changeType = \"insert\";\n              that._items.splice(rowIndex, 0, newItem);\n              rowIndexCorrection++;\n            } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\n              changeType = \"remove\";\n              that._items.splice(rowIndex, 1);\n              rowIndexCorrection--;\n              prevIndex = -1;\n            } else if (newItem) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n            } else {\n              return;\n            }\n            change.rowIndices.push(rowIndex - rowIndexDelta);\n            change.changeTypes.push(changeType);\n            change.columnIndices.push(columnIndices);\n          });\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\n            return true;\n          }\n          function isCellModified(row, columnIndex) {\n            return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false;\n          }\n          if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\n            return true;\n          }\n          return false;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var columnIndices;\n          if (oldItem.rowType === newItem.rowType) {\n            if (\"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\n              columnIndices = [];\n              if (\"detail\" !== newItem.rowType) {\n                for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\n                  if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\n                    columnIndices.push(columnIndex);\n                  }\n                }\n              }\n            }\n            if (\"group\" === newItem.rowType && newItem.isExpanded === oldItem.isExpanded && oldItem.cells) {\n              columnIndices = oldItem.cells.map((cell, index) => {\n                var _cell$column;\n                return \"groupExpand\" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1;\n              }).filter(index => index >= 0);\n            }\n          }\n          return columnIndices;\n        },\n        _partialUpdateRow: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var _changedColumnIndices;\n          var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\n          if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option(\"dataRowTemplate\")) {\n            changedColumnIndices = void 0;\n          }\n          if (changedColumnIndices) {\n            oldItem.cells && oldItem.cells.forEach(function (cell, columnIndex) {\n              var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\n              if (!isCellChanged && cell && cell.update) {\n                cell.update(newItem);\n              }\n            });\n            newItem.update = oldItem.update;\n            newItem.watch = oldItem.watch;\n            newItem.cells = oldItem.cells;\n            if (isLiveUpdate) {\n              newItem.oldValues = oldItem.values;\n            }\n            oldItem.update && oldItem.update(newItem);\n          }\n          return changedColumnIndices;\n        },\n        _isItemEquals: function (item1, item2) {\n          if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\n            return false;\n          }\n          if ([\"modified\", \"isNewRow\", \"removed\", \"isEditing\"].some(field => item1[field] !== item2[field])) {\n            return false;\n          }\n          if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\n            var _item1$data, _item2$data, _item1$data2, _item2$data2;\n            var expandedMatch = item1.isExpanded === item2.isExpanded;\n            var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\n            var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\n            if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\n              return false;\n            }\n          }\n          return true;\n        },\n        _applyChangesOnly: function (change) {\n          var _change$isLiveUpdate;\n          var rowIndices = [];\n          var columnIndices = [];\n          var changeTypes = [];\n          var items = [];\n          var newIndexByKey = {};\n          var isLiveUpdate = null !== (_change$isLiveUpdate = null === change || void 0 === change ? void 0 : change.isLiveUpdate) && void 0 !== _change$isLiveUpdate ? _change$isLiveUpdate : true;\n          function getRowKey(row) {\n            if (row) {\n              return row.rowType + \",\" + JSON.stringify(row.key);\n            }\n          }\n          var currentItems = this._items;\n          var oldItems = currentItems.slice();\n          change.items.forEach(function (item, index) {\n            var key = getRowKey(item);\n            newIndexByKey[key] = index;\n            item.rowIndex = index;\n          });\n          var result = findChanges(oldItems, change.items, getRowKey, (item1, item2) => {\n            if (!this._isItemEquals(item1, item2)) {\n              return false;\n            }\n            if (item1.cells) {\n              item1.update && item1.update(item2);\n              item1.cells.forEach(function (cell) {\n                if (cell && cell.update) {\n                  cell.update(item2, true);\n                }\n              });\n            }\n            return true;\n          });\n          if (!result) {\n            this._applyChangeFull(change);\n            return;\n          }\n          result.forEach(change => {\n            switch (change.type) {\n              case \"update\":\n                var index = change.index;\n                var newItem = change.data;\n                var oldItem = change.oldItem;\n                var changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index, isLiveUpdate);\n                rowIndices.push(index);\n                changeTypes.push(\"update\");\n                items.push(newItem);\n                currentItems[index] = newItem;\n                columnIndices.push(changedColumnIndices);\n                break;\n              case \"insert\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"insert\");\n                items.push(change.data);\n                columnIndices.push(void 0);\n                currentItems.splice(change.index, 0, change.data);\n                break;\n              case \"remove\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"remove\");\n                currentItems.splice(change.index, 1);\n                items.push(change.oldItem);\n                columnIndices.push(void 0);\n            }\n          });\n          change.repaintChangesOnly = true;\n          change.changeType = \"update\";\n          change.rowIndices = rowIndices;\n          change.columnIndices = columnIndices;\n          change.changeTypes = changeTypes;\n          change.items = items;\n          if (oldItems.length) {\n            change.isLiveUpdate = true;\n          }\n          this._correctRowIndices(rowIndex => {\n            var oldRowIndexOffset = this._rowIndexOffset || 0;\n            var rowIndexOffset = this.getRowIndexOffset();\n            var oldItem = oldItems[rowIndex - oldRowIndexOffset];\n            var key = getRowKey(oldItem);\n            var newVisibleRowIndex = newIndexByKey[key];\n            return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0;\n          });\n        },\n        _correctRowIndices: noop,\n        _afterProcessItems: function (items) {\n          return items;\n        },\n        _updateItemsCore: function (change) {\n          var items;\n          var dataSource = this._dataSource;\n          var changeType = change.changeType || \"refresh\";\n          change.changeType = changeType;\n          if (dataSource) {\n            var cachedProcessedItems = this._cachedProcessedItems;\n            if (change.useProcessedItemsCache && cachedProcessedItems) {\n              items = cachedProcessedItems;\n            } else {\n              items = change.items || dataSource.items();\n              items = this._beforeProcessItems(items);\n              items = this._processItems(items, change);\n              this._cachedProcessedItems = items;\n            }\n            items = this._afterProcessItems(items, change);\n            change.items = items;\n            var oldItems = this._items.length === items.length && this._items;\n            this._applyChange(change);\n            var rowIndexDelta = this.getRowIndexDelta();\n            each(this._items, (index, item) => {\n              item.rowIndex = index - rowIndexDelta;\n              if (oldItems) {\n                item.cells = oldItems[index].cells || [];\n              }\n              var newItem = items[index];\n              if (newItem) {\n                item.loadIndex = newItem.loadIndex;\n              }\n            });\n            this._rowIndexOffset = this.getRowIndexOffset();\n          } else {\n            this._items = [];\n          }\n        },\n        _handleChanging: function (e) {\n          var rows = this.getVisibleRows();\n          var dataSource = this.dataSource();\n          if (dataSource) {\n            e.changes.forEach(function (change) {\n              if (\"insert\" === change.type && change.index >= 0) {\n                var dataIndex = 0;\n                for (var i = 0; i < change.index; i++) {\n                  var row = rows[i];\n                  if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\n                    dataIndex++;\n                  }\n                }\n                change.index = dataIndex;\n              }\n            });\n          }\n        },\n        updateItems: function (change, isDataChanged) {\n          change = change || {};\n          if (void 0 !== this._repaintChangesOnly) {\n            var _change$repaintChange;\n            change.repaintChangesOnly = null !== (_change$repaintChange = change.repaintChangesOnly) && void 0 !== _change$repaintChange ? _change$repaintChange : this._repaintChangesOnly;\n            change.needUpdateDimensions = change.needUpdateDimensions || this._needUpdateDimensions;\n          } else if (change.changes) {\n            change.repaintChangesOnly = this.option(\"repaintChangesOnly\");\n          } else if (isDataChanged) {\n            var operationTypes = this.dataSource().operationTypes();\n            change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && this.option(\"repaintChangesOnly\");\n            change.isDataChanged = true;\n            if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\n              change.needUpdateDimensions = true;\n            }\n          }\n          if (this._updateLockCount && !change.cancel) {\n            this._changes.push(change);\n            return;\n          }\n          this._updateItemsCore(change);\n          if (change.cancel) {\n            return;\n          }\n          this._fireChanged(change);\n        },\n        loadingOperationTypes: function () {\n          var dataSource = this.dataSource();\n          return dataSource && dataSource.loadingOperationTypes() || {};\n        },\n        _fireChanged: function (change) {\n          if (this._currentOperationTypes) {\n            change.operationTypes = this._currentOperationTypes;\n            this._currentOperationTypes = null;\n          }\n          deferRender(() => {\n            this.changed.fire(change);\n          });\n        },\n        isLoading: function () {\n          return this._isLoading || this._isCustomLoading;\n        },\n        _fireLoadingChanged: function () {\n          this.loadingChanged.fire(this.isLoading(), this._loadingText);\n        },\n        _calculateAdditionalFilter: function () {\n          return null;\n        },\n        _applyFilter: function () {\n          var dataSource = this._dataSource;\n          if (dataSource) {\n            dataSource.pageIndex(0);\n            this._isFilterApplying = true;\n            return this.reload().done(() => {\n              if (this._isFilterApplying) {\n                this.pageChanged.fire();\n              }\n            });\n          }\n        },\n        resetFilterApplying: function () {\n          this._isFilterApplying = false;\n        },\n        filter: function (filterExpr) {\n          var dataSource = this._dataSource;\n          var filter = dataSource && dataSource.filter();\n          if (0 === arguments.length) {\n            return filter;\n          }\n          filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\n          if (gridCoreUtils.equalFilterParameters(filter, filterExpr)) {\n            return;\n          }\n          if (dataSource) {\n            dataSource.filter(filterExpr);\n          }\n          this._applyFilter();\n        },\n        clearFilter: function (filterName) {\n          var that = this;\n          var columnsController = that._columnsController;\n          var clearColumnOption = function (optionName) {\n            var columnCount = columnsController.columnCount();\n            for (var index = 0; index < columnCount; index++) {\n              columnsController.columnOption(index, optionName, void 0);\n            }\n          };\n          that.component.beginUpdate();\n          if (arguments.length > 0) {\n            switch (filterName) {\n              case \"dataSource\":\n                that.filter(null);\n                break;\n              case \"search\":\n                that.searchByText(\"\");\n                break;\n              case \"header\":\n                clearColumnOption(\"filterValues\");\n                break;\n              case \"row\":\n                clearColumnOption(\"filterValue\");\n            }\n          } else {\n            that.filter(null);\n            that.searchByText(\"\");\n            clearColumnOption(\"filterValue\");\n            clearColumnOption(\"bufferedFilterValue\");\n            clearColumnOption(\"filterValues\");\n          }\n          that.component.endUpdate();\n        },\n        _fireDataSourceChanged: function () {\n          var that = this;\n          that.changed.add(function changedHandler() {\n            that.changed.remove(changedHandler);\n            that.dataSourceChanged.fire();\n          });\n        },\n        _getDataSourceAdapter: noop,\n        _createDataSourceAdapterCore: function (dataSource, remoteOperations) {\n          var dataSourceAdapterProvider = this._getDataSourceAdapter();\n          var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\n          dataSourceAdapter.init(dataSource, remoteOperations);\n          return dataSourceAdapter;\n        },\n        isLocalStore: function (store) {\n          store = store || this.store();\n          return store instanceof ArrayStore;\n        },\n        isCustomStore: function (store) {\n          store = store || this.store();\n          return store instanceof CustomStore;\n        },\n        _createDataSourceAdapter: function (dataSource) {\n          var remoteOperations = this.option(\"remoteOperations\");\n          var store = dataSource.store();\n          var enabledRemoteOperations = {\n            filtering: true,\n            sorting: true,\n            paging: true,\n            grouping: true,\n            summary: true\n          };\n          if (remoteOperations && remoteOperations.groupPaging) {\n            remoteOperations = extend({}, enabledRemoteOperations, remoteOperations);\n          }\n          if (\"auto\" === remoteOperations) {\n            remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\n              filtering: true,\n              sorting: true,\n              paging: true\n            };\n          }\n          if (true === remoteOperations) {\n            remoteOperations = enabledRemoteOperations;\n          }\n          return this._createDataSourceAdapterCore(dataSource, remoteOperations);\n        },\n        setDataSource: function (dataSource) {\n          var oldDataSource = this._dataSource;\n          if (!dataSource && oldDataSource) {\n            oldDataSource.cancelAll();\n            oldDataSource.changed.remove(this._dataChangedHandler);\n            oldDataSource.loadingChanged.remove(this._loadingChangedHandler);\n            oldDataSource.loadError.remove(this._loadErrorHandler);\n            oldDataSource.customizeStoreLoadOptions.remove(this._customizeStoreLoadOptionsHandler);\n            oldDataSource.changing.remove(this._changingHandler);\n            oldDataSource.pushed.remove(this._dataPushedHandler);\n            oldDataSource.dispose(this._isSharedDataSource);\n          }\n          if (dataSource) {\n            dataSource = this._createDataSourceAdapter(dataSource);\n          }\n          this._dataSource = dataSource;\n          if (dataSource) {\n            this._fireDataSourceChanged();\n            this._isLoading = !dataSource.isLoaded();\n            this._needApplyFilter = true;\n            this._isAllDataTypesDefined = this._columnsController.isAllDataTypesDefined();\n            dataSource.changed.add(this._dataChangedHandler);\n            dataSource.loadingChanged.add(this._loadingChangedHandler);\n            dataSource.loadError.add(this._loadErrorHandler);\n            dataSource.customizeStoreLoadOptions.add(this._customizeStoreLoadOptionsHandler);\n            dataSource.changing.add(this._changingHandler);\n            dataSource.pushed.add(this._dataPushedHandler);\n          }\n        },\n        items: function () {\n          return this._items;\n        },\n        isEmpty: function () {\n          return !this.items().length;\n        },\n        pageCount: function () {\n          return this._dataSource ? this._dataSource.pageCount() : 1;\n        },\n        dataSource: function () {\n          return this._dataSource;\n        },\n        store: function () {\n          var dataSource = this._dataSource;\n          return dataSource && dataSource.store();\n        },\n        loadAll: function (data) {\n          var that = this;\n          var d = new Deferred();\n          var dataSource = that._dataSource;\n          if (dataSource) {\n            if (data) {\n              var options = {\n                data: data,\n                isCustomLoading: true,\n                storeLoadOptions: {\n                  isLoadingAll: true\n                },\n                loadOptions: {\n                  filter: that.getCombinedFilter(),\n                  group: dataSource.group(),\n                  sort: dataSource.sort()\n                }\n              };\n              dataSource._handleDataLoaded(options);\n              when(options.data).done(function (data) {\n                data = that._beforeProcessItems(data);\n                d.resolve(that._processItems(data, {\n                  changeType: \"loadingAll\"\n                }), options.extra && options.extra.summary);\n              }).fail(d.reject);\n            } else if (!dataSource.isLoading()) {\n              var loadOptions = extend({}, dataSource.loadOptions(), {\n                isLoadingAll: true,\n                requireTotalCount: false\n              });\n              dataSource.load(loadOptions).done(function (items, extra) {\n                items = that._beforeProcessItems(items);\n                items = that._processItems(items, {\n                  changeType: \"loadingAll\"\n                });\n                d.resolve(items, extra && extra.summary);\n              }).fail(d.reject);\n            } else {\n              d.reject();\n            }\n          } else {\n            d.resolve([]);\n          }\n          return d;\n        },\n        getKeyByRowIndex: function (rowIndex, byLoaded) {\n          var item = this.items(byLoaded)[rowIndex];\n          if (item) {\n            return item.key;\n          }\n        },\n        getRowIndexByKey: function (key, byLoaded) {\n          return gridCoreUtils.getIndexByKey(key, this.items(byLoaded));\n        },\n        keyOf: function (data) {\n          var store = this.store();\n          if (store) {\n            return store.keyOf(data);\n          }\n        },\n        byKey: function (key) {\n          var store = this.store();\n          var rowIndex = this.getRowIndexByKey(key);\n          var result;\n          if (!store) {\n            return;\n          }\n          if (rowIndex >= 0) {\n            result = new Deferred().resolve(this.items()[rowIndex].data);\n          }\n          return result || store.byKey(key);\n        },\n        key: function () {\n          var store = this.store();\n          if (store) {\n            return store.key();\n          }\n        },\n        getRowIndexOffset: function () {\n          return 0;\n        },\n        getDataByKeys: function (rowKeys) {\n          var that = this;\n          var result = new Deferred();\n          var deferreds = [];\n          var data = [];\n          each(rowKeys, function (index, key) {\n            deferreds.push(that.byKey(key).done(function (keyData) {\n              data[index] = keyData;\n            }));\n          });\n          when.apply($, deferreds).always(function () {\n            result.resolve(data);\n          });\n          return result;\n        },\n        pageIndex: function (value) {\n          return changePaging(this, \"pageIndex\", value);\n        },\n        pageSize: function (value) {\n          return changePaging(this, \"pageSize\", value);\n        },\n        beginCustomLoading: function (messageText) {\n          this._isCustomLoading = true;\n          this._loadingText = messageText || \"\";\n          this._fireLoadingChanged();\n        },\n        endCustomLoading: function () {\n          this._isCustomLoading = false;\n          this._loadingText = void 0;\n          this._fireLoadingChanged();\n        },\n        refresh: function (options) {\n          if (true === options) {\n            options = {\n              reload: true,\n              changesOnly: true\n            };\n          } else if (!options) {\n            options = {\n              lookup: true,\n              selection: true,\n              reload: true\n            };\n          }\n          var that = this;\n          var dataSource = that.getDataSource();\n          var changesOnly = options.changesOnly;\n          var d = new Deferred();\n          var customizeLoadResult = function () {\n            that._repaintChangesOnly = !!changesOnly;\n          };\n          when(!options.lookup || that._columnsController.refresh()).always(function () {\n            if (options.load || options.reload) {\n              dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\n              when(that.reload(options.reload, changesOnly)).always(function () {\n                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\n                that._repaintChangesOnly = void 0;\n              }).done(d.resolve).fail(d.reject);\n            } else {\n              that.updateItems({\n                repaintChangesOnly: options.changesOnly\n              });\n              d.resolve();\n            }\n          });\n          return d.promise();\n        },\n        getVisibleRows: function () {\n          return this.items();\n        },\n        _disposeDataSource: function () {\n          this.setDataSource(null);\n        },\n        dispose: function () {\n          this._disposeDataSource();\n          this.callBase.apply(this, arguments);\n        },\n        repaintRows: function (rowIndexes, changesOnly) {\n          rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\n          if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {\n            this.updateItems({\n              changeType: \"update\",\n              rowIndices: rowIndexes,\n              isFullUpdate: !changesOnly\n            });\n          }\n        },\n        skipProcessingPagingChange: function (fullName) {\n          return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName);\n        },\n        getUserState: function () {\n          return {\n            searchText: this.option(\"searchPanel.text\"),\n            pageIndex: this.pageIndex(),\n            pageSize: this.pageSize()\n          };\n        },\n        getCachedStoreData: function () {\n          return this._dataSource && this._dataSource.getCachedStoreData();\n        },\n        isLastPageLoaded: function () {\n          var pageIndex = this.pageIndex();\n          var pageCount = this.pageCount();\n          return pageIndex === pageCount - 1;\n        }\n      };\n      gridCoreUtils.proxyMethod(members, \"load\");\n      gridCoreUtils.proxyMethod(members, \"reload\");\n      gridCoreUtils.proxyMethod(members, \"push\");\n      gridCoreUtils.proxyMethod(members, \"itemsCount\", 0);\n      gridCoreUtils.proxyMethod(members, \"totalItemsCount\", 0);\n      gridCoreUtils.proxyMethod(members, \"hasKnownLastPage\", true);\n      gridCoreUtils.proxyMethod(members, \"isLoaded\", true);\n      gridCoreUtils.proxyMethod(members, \"totalCount\", 0);\n      return members;\n    }())\n  }\n};","map":{"version":3,"names":["$","modules","gridCoreUtils","ArrayStore","CustomStore","errors","noop","deferRender","equalByValue","each","isDefined","extend","DataHelperMixin","when","Deferred","findChanges","dataControllerModule","defaultOptions","loadingTimeout","dataSource","cacheEnabled","repaintChangesOnly","highlightChanges","onDataErrorOccurred","remoteOperations","paging","enabled","pageSize","pageIndex","controllers","data","Controller","inherit","changePaging","that","optionName","value","_dataSource","oldValue","_getPagingOptionValue","_skipProcessingPagingChange","option","_isPaging","done","pageChanged","fire","resolve","promise","members","init","_items","_cachedProcessedItems","_columnsController","getController","_currentOperationTypes","_dataChangedHandler","e","operationTypes","_handleDataChanged","_columnsChangedHandler","_handleColumnsChanged","bind","_loadingChangedHandler","_handleLoadingChanged","_loadErrorHandler","_handleLoadError","_customizeStoreLoadOptionsHandler","_handleCustomizeStoreLoadOptions","_changingHandler","_handleChanging","_dataPushedHandler","_handleDataPushed","columnsChanged","add","_isLoading","_isCustomLoading","_repaintChangesOnly","_changes","createAction","dataErrorOccurred","error","executeAction","_refreshDataSource","callbackNames","callbackFlags","name","stopOnFalse","publicMethods","reset","_handleDataSourceChange","args","previousValue","Array","isArray","isValueChanged","store","_array","needToRefreshOnDataSourceChange","refresh","optionChanged","changedPagingOptions","handled","fullName","_setPagingOptions","isPageIndexChanged","load","isLoading","_useSortingGroupingFromColumns","callBase","isReady","getDataSource","getCombinedFilter","returnDataField","combinedFilter","filter","columnsController","additionalFilter","_calculateAdditionalFilter","isDataSourceApplied","isAllDataTypesDefined","combineFilters","updateFilter","filtering","waitReady","_updateLockCount","_readyDeferred","_endUpdateCore","changes","length","every","change","updateItems","_storeLoadOptions$fil","storeLoadOptions","isCustomLoading","isLoadingAll","extra","totalCount","updateColumnDataTypes","_columnsUpdating","updateSortingGrouping","sort","getSortDataSourceParameters","group","getGroupDataSourceParameters","sorting","grouping","changeTypes","optionNames","filterValue","filterValues","filterApplied","reload","columns","columnOption","columnIndex","filterType","selectedFilterOperation","allowFiltering","_applyFilter","_needApplyFilter","checkChanges","updateItemsHandler","_change$changeTypes","remove","virtualColumnsScrolling","visible","column","isAsyncDataSourceApplying","_isDataSourceApplying","applyDataSource","isDelayed","needApplyFilter","_isAllDataTypesDefined","log","component","NAME","fail","_fireLoadingChanged","pushed","fireError","Error","apply","arguments","pagingEnabled","scrollingMode","appendMode","virtualMode","paginate","isPaginateChanged","isPageSizeChanged","requireTotalCount","_getSpecificDataSourceOption","type","key","_initDataSource","oldDataSource","setDataSource","_loadDataSource","result","always","reject","_beforeProcessItems","items","slice","getRowIndexDelta","getDataIndex","visibleItems","lastVisibleItem","changeType","dataIndex","_processItems","rowIndexDelta","visibleColumns","getVisibleColumns","options","index","item","rowIndex","_processItem","push","_generateDataItem","_processDataItem","rowType","keyOf","dataItem","values","generateDataValues","isModified","i","command","calculateCellValue","dataField","_applyChange","_applyChangeUpdate","_applyChangesOnly","_applyChangeFull","_getRowIndices","rowIndices","a","b","correctedRowIndex","allowInvisibleRowIndices","splice","prevIndex","rowIndexCorrection","columnIndices","equalItems","item1","item2","strict","isEditing","oldItem","oldNextItem","newItem","newNextItem","isFullUpdate","_partialUpdateRow","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","JSON","stringify","isCellModified","row","modifiedValues","_getChangedColumnIndices","isExpanded","cells","map","cell","_cell$column","_changedColumnIndices","changedColumnIndices","forEach","isCellChanged","indexOf","update","watch","oldValues","_isItemEquals","some","field","_item1$data","_item2$data","_item1$data2","_item2$data2","expandedMatch","summaryCellsMatch","summaryCells","continuationMatch","isContinuation","isContinuationOnNextPage","_change$isLiveUpdate","newIndexByKey","getRowKey","currentItems","oldItems","_correctRowIndices","oldRowIndexOffset","_rowIndexOffset","rowIndexOffset","getRowIndexOffset","newVisibleRowIndex","_afterProcessItems","_updateItemsCore","cachedProcessedItems","useProcessedItemsCache","loadIndex","rows","getVisibleRows","isDataChanged","_change$repaintChange","needUpdateDimensions","_needUpdateDimensions","groupExpanding","cancel","_fireChanged","loadingOperationTypes","changed","loadingChanged","_loadingText","_isFilterApplying","resetFilterApplying","filterExpr","prototype","call","equalFilterParameters","clearFilter","filterName","clearColumnOption","columnCount","beginUpdate","searchByText","endUpdate","_fireDataSourceChanged","changedHandler","dataSourceChanged","_getDataSourceAdapter","_createDataSourceAdapterCore","dataSourceAdapterProvider","dataSourceAdapter","create","isLocalStore","isCustomStore","_createDataSourceAdapter","enabledRemoteOperations","summary","groupPaging","cancelAll","loadError","customizeStoreLoadOptions","changing","dispose","_isSharedDataSource","isLoaded","isEmpty","pageCount","loadAll","d","loadOptions","_handleDataLoaded","getKeyByRowIndex","byLoaded","getRowIndexByKey","getIndexByKey","byKey","getDataByKeys","rowKeys","deferreds","keyData","beginCustomLoading","messageText","endCustomLoading","changesOnly","lookup","selection","customizeLoadResult","on","off","_disposeDataSource","repaintRows","rowIndexes","skipProcessingPagingChange","getUserState","searchText","getCachedStoreData","isLastPageLoaded","proxyMethod"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_controller.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport ArrayStore from \"../../data/array_store\";\r\nimport CustomStore from \"../../data/custom_store\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport {\r\n    noop,\r\n    deferRender,\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport DataHelperMixin from \"../../data_helper\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    findChanges\r\n} from \"../../core/utils/array_compare\";\r\nexport var dataControllerModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            loadingTimeout: 0,\r\n            dataSource: null,\r\n            cacheEnabled: true,\r\n            repaintChangesOnly: false,\r\n            highlightChanges: false,\r\n            onDataErrorOccurred: null,\r\n            remoteOperations: \"auto\",\r\n            paging: {\r\n                enabled: true,\r\n                pageSize: void 0,\r\n                pageIndex: void 0\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        data: modules.Controller.inherit(DataHelperMixin).inherit(function() {\r\n            var changePaging = function(that, optionName, value) {\r\n                var dataSource = that._dataSource;\r\n                if (dataSource) {\r\n                    if (void 0 !== value) {\r\n                        var oldValue = that._getPagingOptionValue(optionName);\r\n                        if (oldValue !== value) {\r\n                            if (\"pageSize\" === optionName) {\r\n                                dataSource.pageIndex(0)\r\n                            }\r\n                            dataSource[optionName](value);\r\n                            that._skipProcessingPagingChange = true;\r\n                            that.option(\"paging.\" + optionName, value);\r\n                            that._skipProcessingPagingChange = false;\r\n                            var pageIndex = dataSource.pageIndex();\r\n                            that._isPaging = \"pageIndex\" === optionName;\r\n                            return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(() => {\r\n                                that._isPaging = false;\r\n                                that.pageChanged.fire(pageIndex)\r\n                            })\r\n                        }\r\n                        return Deferred().resolve().promise()\r\n                    }\r\n                    return dataSource[optionName]()\r\n                }\r\n                return 0\r\n            };\r\n            var members = {\r\n                init: function() {\r\n                    var that = this;\r\n                    that._items = [];\r\n                    that._cachedProcessedItems = null;\r\n                    that._columnsController = that.getController(\"columns\");\r\n                    that._isPaging = false;\r\n                    that._currentOperationTypes = null;\r\n                    that._dataChangedHandler = e => {\r\n                        that._currentOperationTypes = this._dataSource.operationTypes();\r\n                        that._handleDataChanged(e);\r\n                        that._currentOperationTypes = null\r\n                    };\r\n                    that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\r\n                    that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\r\n                    that._loadErrorHandler = that._handleLoadError.bind(that);\r\n                    that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\r\n                    that._changingHandler = that._handleChanging.bind(that);\r\n                    that._dataPushedHandler = that._handleDataPushed.bind(that);\r\n                    that._columnsController.columnsChanged.add(that._columnsChangedHandler);\r\n                    that._isLoading = false;\r\n                    that._isCustomLoading = false;\r\n                    that._repaintChangesOnly = void 0;\r\n                    that._changes = [];\r\n                    that.createAction(\"onDataErrorOccurred\");\r\n                    that.dataErrorOccurred.add((function(error) {\r\n                        return that.executeAction(\"onDataErrorOccurred\", {\r\n                            error: error\r\n                        })\r\n                    }));\r\n                    that._refreshDataSource()\r\n                },\r\n                _getPagingOptionValue: function(optionName) {\r\n                    return this._dataSource[optionName]()\r\n                },\r\n                callbackNames: function() {\r\n                    return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\", \"pushed\"]\r\n                },\r\n                callbackFlags: function(name) {\r\n                    if (\"dataErrorOccurred\" === name) {\r\n                        return {\r\n                            stopOnFalse: true\r\n                        }\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"]\r\n                },\r\n                reset: function() {\r\n                    this._columnsController.reset();\r\n                    this._items = [];\r\n                    this._refreshDataSource()\r\n                },\r\n                _handleDataSourceChange(args) {\r\n                    if (args.value === args.previousValue || this.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {\r\n                        var isValueChanged = args.value !== args.previousValue;\r\n                        if (isValueChanged) {\r\n                            var store = this.store();\r\n                            if (store) {\r\n                                store._array = args.value\r\n                            }\r\n                        }\r\n                        if (this.needToRefreshOnDataSourceChange(args)) {\r\n                            this.refresh(this.option(\"repaintChangesOnly\"))\r\n                        }\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                needToRefreshOnDataSourceChange: function(args) {\r\n                    return true\r\n                },\r\n                optionChanged: function(args) {\r\n                    var that = this;\r\n                    var dataSource;\r\n                    var changedPagingOptions;\r\n\r\n                    function handled() {\r\n                        args.handled = true\r\n                    }\r\n                    if (\"dataSource\" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {\r\n                        handled();\r\n                        return\r\n                    }\r\n                    switch (args.name) {\r\n                        case \"cacheEnabled\":\r\n                        case \"repaintChangesOnly\":\r\n                        case \"highlightChanges\":\r\n                        case \"loadingTimeout\":\r\n                            handled();\r\n                            break;\r\n                        case \"remoteOperations\":\r\n                        case \"keyExpr\":\r\n                        case \"dataSource\":\r\n                        case \"scrolling\":\r\n                            handled();\r\n                            that.reset();\r\n                            break;\r\n                        case \"paging\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource) {\r\n                                changedPagingOptions = that._setPagingOptions(dataSource);\r\n                                if (changedPagingOptions) {\r\n                                    var pageIndex = dataSource.pageIndex();\r\n                                    this._isPaging = changedPagingOptions.isPageIndexChanged;\r\n                                    dataSource.load().done(() => {\r\n                                        this._isPaging = false;\r\n                                        that.pageChanged.fire(pageIndex)\r\n                                    })\r\n                                }\r\n                            }\r\n                            handled();\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            that.reset();\r\n                            break;\r\n                        case \"columns\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\r\n                                this._useSortingGroupingFromColumns = true;\r\n                                dataSource.load()\r\n                            }\r\n                            break;\r\n                        default:\r\n                            that.callBase(args)\r\n                    }\r\n                },\r\n                isReady: function() {\r\n                    return !this._isLoading\r\n                },\r\n                getDataSource: function() {\r\n                    return this._dataSource && this._dataSource._dataSource\r\n                },\r\n                getCombinedFilter: function(returnDataField) {\r\n                    return this.combinedFilter(void 0, returnDataField)\r\n                },\r\n                combinedFilter: function(filter, returnDataField) {\r\n                    var dataSource = this._dataSource;\r\n                    var columnsController = this._columnsController;\r\n                    if (dataSource) {\r\n                        if (void 0 === filter) {\r\n                            filter = dataSource.filter()\r\n                        }\r\n                        var additionalFilter = this._calculateAdditionalFilter();\r\n                        if (additionalFilter) {\r\n                            if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\r\n                                filter = gridCoreUtils.combineFilters([additionalFilter, filter])\r\n                            }\r\n                        }\r\n                        filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering)\r\n                    }\r\n                    return filter\r\n                },\r\n                waitReady: function() {\r\n                    if (this._updateLockCount) {\r\n                        this._readyDeferred = new Deferred;\r\n                        return this._readyDeferred\r\n                    }\r\n                    return when()\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var changes = this._changes;\r\n                    if (changes.length) {\r\n                        this._changes = [];\r\n                        var repaintChangesOnly = changes.every(change => change.repaintChangesOnly);\r\n                        this.updateItems(1 === changes.length ? changes[0] : {\r\n                            repaintChangesOnly: repaintChangesOnly\r\n                        })\r\n                    }\r\n                    if (this._readyDeferred) {\r\n                        this._readyDeferred.resolve();\r\n                        this._readyDeferred = null\r\n                    }\r\n                },\r\n                _handleCustomizeStoreLoadOptions: function(e) {\r\n                    var _storeLoadOptions$fil;\r\n                    var columnsController = this._columnsController;\r\n                    var dataSource = this._dataSource;\r\n                    var storeLoadOptions = e.storeLoadOptions;\r\n                    if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\r\n                        return\r\n                    }\r\n                    storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\r\n                    if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && \"!\" === storeLoadOptions.filter[0]) {\r\n                        e.data = [];\r\n                        e.extra = e.extra || {};\r\n                        e.extra.totalCount = 0\r\n                    }\r\n                    if (!columnsController.isDataSourceApplied()) {\r\n                        columnsController.updateColumnDataTypes(dataSource)\r\n                    }\r\n                    this._columnsUpdating = true;\r\n                    columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\r\n                    this._columnsUpdating = false;\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\r\n                    storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\r\n                    dataSource.sort(storeLoadOptions.sort);\r\n                    dataSource.group(storeLoadOptions.group);\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\r\n                    e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping)\r\n                },\r\n                _handleColumnsChanged: function(e) {\r\n                    var that = this;\r\n                    var changeTypes = e.changeTypes;\r\n                    var optionNames = e.optionNames;\r\n                    var filterValue;\r\n                    var filterValues;\r\n                    var filterApplied;\r\n                    if (changeTypes.sorting || changeTypes.grouping) {\r\n                        if (that._dataSource && !that._columnsUpdating) {\r\n                            that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\r\n                            that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\r\n                            that.reload()\r\n                        }\r\n                    } else if (changeTypes.columns) {\r\n                        filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\r\n                        if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {\r\n                            filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\r\n                            if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\r\n                                that._applyFilter();\r\n                                filterApplied = true\r\n                            }\r\n                        }\r\n                        if (!that._needApplyFilter && !gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\r\n                            that._columnsController.columnsChanged.add((function updateItemsHandler(change) {\r\n                                var _change$changeTypes;\r\n                                that._columnsController.columnsChanged.remove(updateItemsHandler);\r\n                                that.updateItems({\r\n                                    repaintChangesOnly: false,\r\n                                    virtualColumnsScrolling: null === change || void 0 === change ? void 0 : null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes.virtualColumnsScrolling\r\n                                })\r\n                            }))\r\n                        }\r\n                        if (isDefined(optionNames.visible)) {\r\n                            var column = that._columnsController.columnOption(e.columnIndex);\r\n                            if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {\r\n                                that._applyFilter();\r\n                                filterApplied = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!filterApplied && changeTypes.filtering) {\r\n                        that.reload()\r\n                    }\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var columnsController = that._columnsController;\r\n                    var isAsyncDataSourceApplying = false;\r\n                    this._useSortingGroupingFromColumns = false;\r\n                    if (dataSource && !that._isDataSourceApplying) {\r\n                        that._isDataSourceApplying = true;\r\n                        when(that._columnsController.applyDataSource(dataSource)).done((function() {\r\n                            if (that._isLoading) {\r\n                                that._handleLoadingChanged(false)\r\n                            }\r\n                            if (isAsyncDataSourceApplying && e && e.isDelayed) {\r\n                                e.isDelayed = false\r\n                            }\r\n                            that._isDataSourceApplying = false;\r\n                            var needApplyFilter = that._needApplyFilter;\r\n                            that._needApplyFilter = false;\r\n                            if (needApplyFilter && !that._isAllDataTypesDefined && (additionalFilter = that._calculateAdditionalFilter(), additionalFilter && additionalFilter.length)) {\r\n                                errors.log(\"W1005\", that.component.NAME);\r\n                                that._applyFilter()\r\n                            } else {\r\n                                that.updateItems(e, true)\r\n                            }\r\n                            var additionalFilter\r\n                        })).fail((function() {\r\n                            that._isDataSourceApplying = false\r\n                        }));\r\n                        if (that._isDataSourceApplying) {\r\n                            isAsyncDataSourceApplying = true;\r\n                            that._handleLoadingChanged(true)\r\n                        }\r\n                        that._needApplyFilter = !that._columnsController.isDataSourceApplied();\r\n                        that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined()\r\n                    }\r\n                },\r\n                _handleLoadingChanged: function(isLoading) {\r\n                    this._isLoading = isLoading;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                _handleLoadError: function(e) {\r\n                    this.dataErrorOccurred.fire(e)\r\n                },\r\n                _handleDataPushed: function(changes) {\r\n                    this.pushed.fire(changes)\r\n                },\r\n                fireError: function() {\r\n                    this.dataErrorOccurred.fire(errors.Error.apply(errors, arguments))\r\n                },\r\n                _setPagingOptions: function(dataSource) {\r\n                    var pageIndex = this.option(\"paging.pageIndex\");\r\n                    var pageSize = this.option(\"paging.pageSize\");\r\n                    var pagingEnabled = this.option(\"paging.enabled\");\r\n                    var scrollingMode = this.option(\"scrolling.mode\");\r\n                    var appendMode = \"infinite\" === scrollingMode;\r\n                    var virtualMode = \"virtual\" === scrollingMode;\r\n                    var paginate = pagingEnabled || virtualMode || appendMode;\r\n                    var isPaginateChanged = false;\r\n                    var isPageSizeChanged = false;\r\n                    var isPageIndexChanged = false;\r\n                    dataSource.requireTotalCount(!appendMode);\r\n                    if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\r\n                        dataSource.paginate(paginate);\r\n                        isPaginateChanged = true\r\n                    }\r\n                    if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\r\n                        dataSource.pageSize(pageSize);\r\n                        isPageSizeChanged = true\r\n                    }\r\n                    if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\r\n                        dataSource.pageIndex(pageIndex);\r\n                        isPageIndexChanged = true\r\n                    }\r\n                    if (isPaginateChanged || isPageSizeChanged || isPageIndexChanged) {\r\n                        return {\r\n                            isPaginateChanged: isPaginateChanged,\r\n                            isPageSizeChanged: isPageSizeChanged,\r\n                            isPageIndexChanged: isPageIndexChanged\r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                _getSpecificDataSourceOption: function() {\r\n                    var dataSource = this.option(\"dataSource\");\r\n                    if (Array.isArray(dataSource)) {\r\n                        return {\r\n                            store: {\r\n                                type: \"array\",\r\n                                data: dataSource,\r\n                                key: this.option(\"keyExpr\")\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataSource\r\n                },\r\n                _initDataSource: function() {\r\n                    var oldDataSource = this._dataSource;\r\n                    this.callBase();\r\n                    var dataSource = this._dataSource;\r\n                    this._useSortingGroupingFromColumns = true;\r\n                    this._cachedProcessedItems = null;\r\n                    if (dataSource) {\r\n                        var changedPagingOptions = this._setPagingOptions(dataSource);\r\n                        this._isPaging = null === changedPagingOptions || void 0 === changedPagingOptions ? void 0 : changedPagingOptions.isPageIndexChanged;\r\n                        this.setDataSource(dataSource)\r\n                    } else if (oldDataSource) {\r\n                        this.updateItems()\r\n                    }\r\n                },\r\n                _loadDataSource: function() {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var result = new Deferred;\r\n                    when(this._columnsController.refresh(true)).always((function() {\r\n                        if (dataSource) {\r\n                            dataSource.load().done((function() {\r\n                                that._isPaging = false;\r\n                                result.resolve.apply(result, arguments)\r\n                            })).fail(result.reject)\r\n                        } else {\r\n                            result.resolve()\r\n                        }\r\n                    }));\r\n                    return result.promise()\r\n                },\r\n                _beforeProcessItems: function(items) {\r\n                    return items.slice(0)\r\n                },\r\n                getRowIndexDelta: function() {\r\n                    return 0\r\n                },\r\n                getDataIndex: function(change) {\r\n                    var visibleItems = this._items;\r\n                    var lastVisibleItem = \"append\" === change.changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\r\n                    return isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0\r\n                },\r\n                _processItems: function(items, change) {\r\n                    var that = this;\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var changeType = change.changeType;\r\n                    var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\r\n                    var dataIndex = this.getDataIndex(change);\r\n                    var options = {\r\n                        visibleColumns: visibleColumns,\r\n                        dataIndex: dataIndex\r\n                    };\r\n                    var result = [];\r\n                    each(items, (function(index, item) {\r\n                        if (isDefined(item)) {\r\n                            options.rowIndex = index - rowIndexDelta;\r\n                            item = that._processItem(item, options);\r\n                            result.push(item)\r\n                        }\r\n                    }));\r\n                    return result\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this._generateDataItem(item, options);\r\n                    item = this._processDataItem(item, options);\r\n                    item.dataIndex = options.dataIndex++;\r\n                    return item\r\n                },\r\n                _generateDataItem: function(data) {\r\n                    return {\r\n                        rowType: \"data\",\r\n                        data: data,\r\n                        key: this.keyOf(data)\r\n                    }\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\r\n                    return dataItem\r\n                },\r\n                generateDataValues: function(data, columns, isModified) {\r\n                    var values = [];\r\n                    var value;\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        var column = columns[i];\r\n                        value = isModified ? void 0 : null;\r\n                        if (!column.command) {\r\n                            if (column.calculateCellValue) {\r\n                                value = column.calculateCellValue(data)\r\n                            } else if (column.dataField) {\r\n                                value = data[column.dataField]\r\n                            }\r\n                        }\r\n                        values.push(value)\r\n                    }\r\n                    return values\r\n                },\r\n                _applyChange: function(change) {\r\n                    if (\"update\" === change.changeType) {\r\n                        this._applyChangeUpdate(change)\r\n                    } else if (this.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\r\n                        this._applyChangesOnly(change)\r\n                    } else if (\"refresh\" === change.changeType) {\r\n                        this._applyChangeFull(change)\r\n                    }\r\n                },\r\n                _applyChangeFull: function(change) {\r\n                    this._items = change.items.slice(0)\r\n                },\r\n                _getRowIndices: function(change) {\r\n                    var rowIndices = change.rowIndices.slice(0);\r\n                    var rowIndexDelta = this.getRowIndexDelta();\r\n                    rowIndices.sort((function(a, b) {\r\n                        return a - b\r\n                    }));\r\n                    for (var i = 0; i < rowIndices.length; i++) {\r\n                        var correctedRowIndex = rowIndices[i];\r\n                        if (change.allowInvisibleRowIndices) {\r\n                            correctedRowIndex += rowIndexDelta\r\n                        }\r\n                        if (correctedRowIndex < 0) {\r\n                            rowIndices.splice(i, 1);\r\n                            i--\r\n                        }\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    var that = this;\r\n                    var items = change.items;\r\n                    var rowIndices = that._getRowIndices(change);\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var repaintChangesOnly = that.option(\"repaintChangesOnly\");\r\n                    var prevIndex = -1;\r\n                    var rowIndexCorrection = 0;\r\n                    var changeType;\r\n                    change.items = [];\r\n                    change.rowIndices = [];\r\n                    change.columnIndices = [];\r\n                    change.changeTypes = [];\r\n                    var equalItems = function(item1, item2, strict) {\r\n                        var result = item1 && item2 && equalByValue(item1.key, item2.key);\r\n                        if (result && strict) {\r\n                            result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing)\r\n                        }\r\n                        return result\r\n                    };\r\n                    each(rowIndices, (function(index, rowIndex) {\r\n                        var columnIndices;\r\n                        rowIndex += rowIndexCorrection + rowIndexDelta;\r\n                        if (prevIndex === rowIndex) {\r\n                            return\r\n                        }\r\n                        prevIndex = rowIndex;\r\n                        var oldItem = that._items[rowIndex];\r\n                        var oldNextItem = that._items[rowIndex + 1];\r\n                        var newItem = items[rowIndex];\r\n                        var newNextItem = items[rowIndex + 1];\r\n                        var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\r\n                        if (newItem) {\r\n                            newItem.rowIndex = rowIndex;\r\n                            change.items.push(newItem)\r\n                        }\r\n                        if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\r\n                            changeType = \"update\";\r\n                            that._items[rowIndex] = newItem;\r\n                            if (oldItem.visible !== newItem.visible) {\r\n                                change.items.splice(-1, 1, {\r\n                                    visible: newItem.visible\r\n                                })\r\n                            } else if (repaintChangesOnly && !change.isFullUpdate) {\r\n                                columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta)\r\n                            }\r\n                        } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\r\n                            changeType = \"insert\";\r\n                            that._items.splice(rowIndex, 0, newItem);\r\n                            rowIndexCorrection++\r\n                        } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\r\n                            changeType = \"remove\";\r\n                            that._items.splice(rowIndex, 1);\r\n                            rowIndexCorrection--;\r\n                            prevIndex = -1\r\n                        } else if (newItem) {\r\n                            changeType = \"update\";\r\n                            that._items[rowIndex] = newItem\r\n                        } else {\r\n                            return\r\n                        }\r\n                        change.rowIndices.push(rowIndex - rowIndexDelta);\r\n                        change.changeTypes.push(changeType);\r\n                        change.columnIndices.push(columnIndices)\r\n                    }))\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\r\n                        return true\r\n                    }\r\n\r\n                    function isCellModified(row, columnIndex) {\r\n                        return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false\r\n                    }\r\n                    if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    var columnIndices;\r\n                    if (oldItem.rowType === newItem.rowType) {\r\n                        if (\"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\r\n                            columnIndices = [];\r\n                            if (\"detail\" !== newItem.rowType) {\r\n                                for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\r\n                                    if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\r\n                                        columnIndices.push(columnIndex)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (\"group\" === newItem.rowType && newItem.isExpanded === oldItem.isExpanded && oldItem.cells) {\r\n                            columnIndices = oldItem.cells.map((cell, index) => {\r\n                                var _cell$column;\r\n                                return \"groupExpand\" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1\r\n                            }).filter(index => index >= 0)\r\n                        }\r\n                    }\r\n                    return columnIndices\r\n                },\r\n                _partialUpdateRow: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    var _changedColumnIndices;\r\n                    var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\r\n                    if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option(\"dataRowTemplate\")) {\r\n                        changedColumnIndices = void 0\r\n                    }\r\n                    if (changedColumnIndices) {\r\n                        oldItem.cells && oldItem.cells.forEach((function(cell, columnIndex) {\r\n                            var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\r\n                            if (!isCellChanged && cell && cell.update) {\r\n                                cell.update(newItem)\r\n                            }\r\n                        }));\r\n                        newItem.update = oldItem.update;\r\n                        newItem.watch = oldItem.watch;\r\n                        newItem.cells = oldItem.cells;\r\n                        if (isLiveUpdate) {\r\n                            newItem.oldValues = oldItem.values\r\n                        }\r\n                        oldItem.update && oldItem.update(newItem)\r\n                    }\r\n                    return changedColumnIndices\r\n                },\r\n                _isItemEquals: function(item1, item2) {\r\n                    if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\r\n                        return false\r\n                    }\r\n                    if ([\"modified\", \"isNewRow\", \"removed\", \"isEditing\"].some(field => item1[field] !== item2[field])) {\r\n                        return false\r\n                    }\r\n                    if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\r\n                        var _item1$data, _item2$data, _item1$data2, _item2$data2;\r\n                        var expandedMatch = item1.isExpanded === item2.isExpanded;\r\n                        var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\r\n                        var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\r\n                        if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return true\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    var _change$isLiveUpdate;\r\n                    var rowIndices = [];\r\n                    var columnIndices = [];\r\n                    var changeTypes = [];\r\n                    var items = [];\r\n                    var newIndexByKey = {};\r\n                    var isLiveUpdate = null !== (_change$isLiveUpdate = null === change || void 0 === change ? void 0 : change.isLiveUpdate) && void 0 !== _change$isLiveUpdate ? _change$isLiveUpdate : true;\r\n\r\n                    function getRowKey(row) {\r\n                        if (row) {\r\n                            return row.rowType + \",\" + JSON.stringify(row.key)\r\n                        }\r\n                    }\r\n                    var currentItems = this._items;\r\n                    var oldItems = currentItems.slice();\r\n                    change.items.forEach((function(item, index) {\r\n                        var key = getRowKey(item);\r\n                        newIndexByKey[key] = index;\r\n                        item.rowIndex = index\r\n                    }));\r\n                    var result = findChanges(oldItems, change.items, getRowKey, (item1, item2) => {\r\n                        if (!this._isItemEquals(item1, item2)) {\r\n                            return false\r\n                        }\r\n                        if (item1.cells) {\r\n                            item1.update && item1.update(item2);\r\n                            item1.cells.forEach((function(cell) {\r\n                                if (cell && cell.update) {\r\n                                    cell.update(item2, true)\r\n                                }\r\n                            }))\r\n                        }\r\n                        return true\r\n                    });\r\n                    if (!result) {\r\n                        this._applyChangeFull(change);\r\n                        return\r\n                    }\r\n                    result.forEach(change => {\r\n                        switch (change.type) {\r\n                            case \"update\":\r\n                                var index = change.index;\r\n                                var newItem = change.data;\r\n                                var oldItem = change.oldItem;\r\n                                var changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index, isLiveUpdate);\r\n                                rowIndices.push(index);\r\n                                changeTypes.push(\"update\");\r\n                                items.push(newItem);\r\n                                currentItems[index] = newItem;\r\n                                columnIndices.push(changedColumnIndices);\r\n                                break;\r\n                            case \"insert\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"insert\");\r\n                                items.push(change.data);\r\n                                columnIndices.push(void 0);\r\n                                currentItems.splice(change.index, 0, change.data);\r\n                                break;\r\n                            case \"remove\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"remove\");\r\n                                currentItems.splice(change.index, 1);\r\n                                items.push(change.oldItem);\r\n                                columnIndices.push(void 0)\r\n                        }\r\n                    });\r\n                    change.repaintChangesOnly = true;\r\n                    change.changeType = \"update\";\r\n                    change.rowIndices = rowIndices;\r\n                    change.columnIndices = columnIndices;\r\n                    change.changeTypes = changeTypes;\r\n                    change.items = items;\r\n                    if (oldItems.length) {\r\n                        change.isLiveUpdate = true\r\n                    }\r\n                    this._correctRowIndices(rowIndex => {\r\n                        var oldRowIndexOffset = this._rowIndexOffset || 0;\r\n                        var rowIndexOffset = this.getRowIndexOffset();\r\n                        var oldItem = oldItems[rowIndex - oldRowIndexOffset];\r\n                        var key = getRowKey(oldItem);\r\n                        var newVisibleRowIndex = newIndexByKey[key];\r\n                        return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0\r\n                    })\r\n                },\r\n                _correctRowIndices: noop,\r\n                _afterProcessItems: function(items) {\r\n                    return items\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    var items;\r\n                    var dataSource = this._dataSource;\r\n                    var changeType = change.changeType || \"refresh\";\r\n                    change.changeType = changeType;\r\n                    if (dataSource) {\r\n                        var cachedProcessedItems = this._cachedProcessedItems;\r\n                        if (change.useProcessedItemsCache && cachedProcessedItems) {\r\n                            items = cachedProcessedItems\r\n                        } else {\r\n                            items = change.items || dataSource.items();\r\n                            items = this._beforeProcessItems(items);\r\n                            items = this._processItems(items, change);\r\n                            this._cachedProcessedItems = items\r\n                        }\r\n                        items = this._afterProcessItems(items, change);\r\n                        change.items = items;\r\n                        var oldItems = this._items.length === items.length && this._items;\r\n                        this._applyChange(change);\r\n                        var rowIndexDelta = this.getRowIndexDelta();\r\n                        each(this._items, (index, item) => {\r\n                            item.rowIndex = index - rowIndexDelta;\r\n                            if (oldItems) {\r\n                                item.cells = oldItems[index].cells || []\r\n                            }\r\n                            var newItem = items[index];\r\n                            if (newItem) {\r\n                                item.loadIndex = newItem.loadIndex\r\n                            }\r\n                        });\r\n                        this._rowIndexOffset = this.getRowIndexOffset()\r\n                    } else {\r\n                        this._items = []\r\n                    }\r\n                },\r\n                _handleChanging: function(e) {\r\n                    var rows = this.getVisibleRows();\r\n                    var dataSource = this.dataSource();\r\n                    if (dataSource) {\r\n                        e.changes.forEach((function(change) {\r\n                            if (\"insert\" === change.type && change.index >= 0) {\r\n                                var dataIndex = 0;\r\n                                for (var i = 0; i < change.index; i++) {\r\n                                    var row = rows[i];\r\n                                    if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\r\n                                        dataIndex++\r\n                                    }\r\n                                }\r\n                                change.index = dataIndex\r\n                            }\r\n                        }))\r\n                    }\r\n                },\r\n                updateItems: function(change, isDataChanged) {\r\n                    change = change || {};\r\n                    if (void 0 !== this._repaintChangesOnly) {\r\n                        var _change$repaintChange;\r\n                        change.repaintChangesOnly = null !== (_change$repaintChange = change.repaintChangesOnly) && void 0 !== _change$repaintChange ? _change$repaintChange : this._repaintChangesOnly;\r\n                        change.needUpdateDimensions = change.needUpdateDimensions || this._needUpdateDimensions\r\n                    } else if (change.changes) {\r\n                        change.repaintChangesOnly = this.option(\"repaintChangesOnly\")\r\n                    } else if (isDataChanged) {\r\n                        var operationTypes = this.dataSource().operationTypes();\r\n                        change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && this.option(\"repaintChangesOnly\");\r\n                        change.isDataChanged = true;\r\n                        if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\r\n                            change.needUpdateDimensions = true\r\n                        }\r\n                    }\r\n                    if (this._updateLockCount && !change.cancel) {\r\n                        this._changes.push(change);\r\n                        return\r\n                    }\r\n                    this._updateItemsCore(change);\r\n                    if (change.cancel) {\r\n                        return\r\n                    }\r\n                    this._fireChanged(change)\r\n                },\r\n                loadingOperationTypes: function() {\r\n                    var dataSource = this.dataSource();\r\n                    return dataSource && dataSource.loadingOperationTypes() || {}\r\n                },\r\n                _fireChanged: function(change) {\r\n                    if (this._currentOperationTypes) {\r\n                        change.operationTypes = this._currentOperationTypes;\r\n                        this._currentOperationTypes = null\r\n                    }\r\n                    deferRender(() => {\r\n                        this.changed.fire(change)\r\n                    })\r\n                },\r\n                isLoading: function() {\r\n                    return this._isLoading || this._isCustomLoading\r\n                },\r\n                _fireLoadingChanged: function() {\r\n                    this.loadingChanged.fire(this.isLoading(), this._loadingText)\r\n                },\r\n                _calculateAdditionalFilter: function() {\r\n                    return null\r\n                },\r\n                _applyFilter: function() {\r\n                    var dataSource = this._dataSource;\r\n                    if (dataSource) {\r\n                        dataSource.pageIndex(0);\r\n                        this._isFilterApplying = true;\r\n                        return this.reload().done(() => {\r\n                            if (this._isFilterApplying) {\r\n                                this.pageChanged.fire()\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n                resetFilterApplying: function() {\r\n                    this._isFilterApplying = false\r\n                },\r\n                filter: function(filterExpr) {\r\n                    var dataSource = this._dataSource;\r\n                    var filter = dataSource && dataSource.filter();\r\n                    if (0 === arguments.length) {\r\n                        return filter\r\n                    }\r\n                    filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\r\n                    if (gridCoreUtils.equalFilterParameters(filter, filterExpr)) {\r\n                        return\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource.filter(filterExpr)\r\n                    }\r\n                    this._applyFilter()\r\n                },\r\n                clearFilter: function(filterName) {\r\n                    var that = this;\r\n                    var columnsController = that._columnsController;\r\n                    var clearColumnOption = function(optionName) {\r\n                        var columnCount = columnsController.columnCount();\r\n                        for (var index = 0; index < columnCount; index++) {\r\n                            columnsController.columnOption(index, optionName, void 0)\r\n                        }\r\n                    };\r\n                    that.component.beginUpdate();\r\n                    if (arguments.length > 0) {\r\n                        switch (filterName) {\r\n                            case \"dataSource\":\r\n                                that.filter(null);\r\n                                break;\r\n                            case \"search\":\r\n                                that.searchByText(\"\");\r\n                                break;\r\n                            case \"header\":\r\n                                clearColumnOption(\"filterValues\");\r\n                                break;\r\n                            case \"row\":\r\n                                clearColumnOption(\"filterValue\")\r\n                        }\r\n                    } else {\r\n                        that.filter(null);\r\n                        that.searchByText(\"\");\r\n                        clearColumnOption(\"filterValue\");\r\n                        clearColumnOption(\"bufferedFilterValue\");\r\n                        clearColumnOption(\"filterValues\")\r\n                    }\r\n                    that.component.endUpdate()\r\n                },\r\n                _fireDataSourceChanged: function() {\r\n                    var that = this;\r\n                    that.changed.add((function changedHandler() {\r\n                        that.changed.remove(changedHandler);\r\n                        that.dataSourceChanged.fire()\r\n                    }))\r\n                },\r\n                _getDataSourceAdapter: noop,\r\n                _createDataSourceAdapterCore: function(dataSource, remoteOperations) {\r\n                    var dataSourceAdapterProvider = this._getDataSourceAdapter();\r\n                    var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\r\n                    dataSourceAdapter.init(dataSource, remoteOperations);\r\n                    return dataSourceAdapter\r\n                },\r\n                isLocalStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof ArrayStore\r\n                },\r\n                isCustomStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof CustomStore\r\n                },\r\n                _createDataSourceAdapter: function(dataSource) {\r\n                    var remoteOperations = this.option(\"remoteOperations\");\r\n                    var store = dataSource.store();\r\n                    var enabledRemoteOperations = {\r\n                        filtering: true,\r\n                        sorting: true,\r\n                        paging: true,\r\n                        grouping: true,\r\n                        summary: true\r\n                    };\r\n                    if (remoteOperations && remoteOperations.groupPaging) {\r\n                        remoteOperations = extend({}, enabledRemoteOperations, remoteOperations)\r\n                    }\r\n                    if (\"auto\" === remoteOperations) {\r\n                        remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\r\n                            filtering: true,\r\n                            sorting: true,\r\n                            paging: true\r\n                        }\r\n                    }\r\n                    if (true === remoteOperations) {\r\n                        remoteOperations = enabledRemoteOperations\r\n                    }\r\n                    return this._createDataSourceAdapterCore(dataSource, remoteOperations)\r\n                },\r\n                setDataSource: function(dataSource) {\r\n                    var oldDataSource = this._dataSource;\r\n                    if (!dataSource && oldDataSource) {\r\n                        oldDataSource.cancelAll();\r\n                        oldDataSource.changed.remove(this._dataChangedHandler);\r\n                        oldDataSource.loadingChanged.remove(this._loadingChangedHandler);\r\n                        oldDataSource.loadError.remove(this._loadErrorHandler);\r\n                        oldDataSource.customizeStoreLoadOptions.remove(this._customizeStoreLoadOptionsHandler);\r\n                        oldDataSource.changing.remove(this._changingHandler);\r\n                        oldDataSource.pushed.remove(this._dataPushedHandler);\r\n                        oldDataSource.dispose(this._isSharedDataSource)\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource = this._createDataSourceAdapter(dataSource)\r\n                    }\r\n                    this._dataSource = dataSource;\r\n                    if (dataSource) {\r\n                        this._fireDataSourceChanged();\r\n                        this._isLoading = !dataSource.isLoaded();\r\n                        this._needApplyFilter = true;\r\n                        this._isAllDataTypesDefined = this._columnsController.isAllDataTypesDefined();\r\n                        dataSource.changed.add(this._dataChangedHandler);\r\n                        dataSource.loadingChanged.add(this._loadingChangedHandler);\r\n                        dataSource.loadError.add(this._loadErrorHandler);\r\n                        dataSource.customizeStoreLoadOptions.add(this._customizeStoreLoadOptionsHandler);\r\n                        dataSource.changing.add(this._changingHandler);\r\n                        dataSource.pushed.add(this._dataPushedHandler)\r\n                    }\r\n                },\r\n                items: function() {\r\n                    return this._items\r\n                },\r\n                isEmpty: function() {\r\n                    return !this.items().length\r\n                },\r\n                pageCount: function() {\r\n                    return this._dataSource ? this._dataSource.pageCount() : 1\r\n                },\r\n                dataSource: function() {\r\n                    return this._dataSource\r\n                },\r\n                store: function() {\r\n                    var dataSource = this._dataSource;\r\n                    return dataSource && dataSource.store()\r\n                },\r\n                loadAll: function(data) {\r\n                    var that = this;\r\n                    var d = new Deferred;\r\n                    var dataSource = that._dataSource;\r\n                    if (dataSource) {\r\n                        if (data) {\r\n                            var options = {\r\n                                data: data,\r\n                                isCustomLoading: true,\r\n                                storeLoadOptions: {\r\n                                    isLoadingAll: true\r\n                                },\r\n                                loadOptions: {\r\n                                    filter: that.getCombinedFilter(),\r\n                                    group: dataSource.group(),\r\n                                    sort: dataSource.sort()\r\n                                }\r\n                            };\r\n                            dataSource._handleDataLoaded(options);\r\n                            when(options.data).done((function(data) {\r\n                                data = that._beforeProcessItems(data);\r\n                                d.resolve(that._processItems(data, {\r\n                                    changeType: \"loadingAll\"\r\n                                }), options.extra && options.extra.summary)\r\n                            })).fail(d.reject)\r\n                        } else if (!dataSource.isLoading()) {\r\n                            var loadOptions = extend({}, dataSource.loadOptions(), {\r\n                                isLoadingAll: true,\r\n                                requireTotalCount: false\r\n                            });\r\n                            dataSource.load(loadOptions).done((function(items, extra) {\r\n                                items = that._beforeProcessItems(items);\r\n                                items = that._processItems(items, {\r\n                                    changeType: \"loadingAll\"\r\n                                });\r\n                                d.resolve(items, extra && extra.summary)\r\n                            })).fail(d.reject)\r\n                        } else {\r\n                            d.reject()\r\n                        }\r\n                    } else {\r\n                        d.resolve([])\r\n                    }\r\n                    return d\r\n                },\r\n                getKeyByRowIndex: function(rowIndex, byLoaded) {\r\n                    var item = this.items(byLoaded)[rowIndex];\r\n                    if (item) {\r\n                        return item.key\r\n                    }\r\n                },\r\n                getRowIndexByKey: function(key, byLoaded) {\r\n                    return gridCoreUtils.getIndexByKey(key, this.items(byLoaded))\r\n                },\r\n                keyOf: function(data) {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.keyOf(data)\r\n                    }\r\n                },\r\n                byKey: function(key) {\r\n                    var store = this.store();\r\n                    var rowIndex = this.getRowIndexByKey(key);\r\n                    var result;\r\n                    if (!store) {\r\n                        return\r\n                    }\r\n                    if (rowIndex >= 0) {\r\n                        result = (new Deferred).resolve(this.items()[rowIndex].data)\r\n                    }\r\n                    return result || store.byKey(key)\r\n                },\r\n                key: function() {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.key()\r\n                    }\r\n                },\r\n                getRowIndexOffset: function() {\r\n                    return 0\r\n                },\r\n                getDataByKeys: function(rowKeys) {\r\n                    var that = this;\r\n                    var result = new Deferred;\r\n                    var deferreds = [];\r\n                    var data = [];\r\n                    each(rowKeys, (function(index, key) {\r\n                        deferreds.push(that.byKey(key).done((function(keyData) {\r\n                            data[index] = keyData\r\n                        })))\r\n                    }));\r\n                    when.apply($, deferreds).always((function() {\r\n                        result.resolve(data)\r\n                    }));\r\n                    return result\r\n                },\r\n                pageIndex: function(value) {\r\n                    return changePaging(this, \"pageIndex\", value)\r\n                },\r\n                pageSize: function(value) {\r\n                    return changePaging(this, \"pageSize\", value)\r\n                },\r\n                beginCustomLoading: function(messageText) {\r\n                    this._isCustomLoading = true;\r\n                    this._loadingText = messageText || \"\";\r\n                    this._fireLoadingChanged()\r\n                },\r\n                endCustomLoading: function() {\r\n                    this._isCustomLoading = false;\r\n                    this._loadingText = void 0;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                refresh: function(options) {\r\n                    if (true === options) {\r\n                        options = {\r\n                            reload: true,\r\n                            changesOnly: true\r\n                        }\r\n                    } else if (!options) {\r\n                        options = {\r\n                            lookup: true,\r\n                            selection: true,\r\n                            reload: true\r\n                        }\r\n                    }\r\n                    var that = this;\r\n                    var dataSource = that.getDataSource();\r\n                    var changesOnly = options.changesOnly;\r\n                    var d = new Deferred;\r\n                    var customizeLoadResult = function() {\r\n                        that._repaintChangesOnly = !!changesOnly\r\n                    };\r\n                    when(!options.lookup || that._columnsController.refresh()).always((function() {\r\n                        if (options.load || options.reload) {\r\n                            dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\r\n                            when(that.reload(options.reload, changesOnly)).always((function() {\r\n                                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\r\n                                that._repaintChangesOnly = void 0\r\n                            })).done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            that.updateItems({\r\n                                repaintChangesOnly: options.changesOnly\r\n                            });\r\n                            d.resolve()\r\n                        }\r\n                    }));\r\n                    return d.promise()\r\n                },\r\n                getVisibleRows: function() {\r\n                    return this.items()\r\n                },\r\n                _disposeDataSource: function() {\r\n                    this.setDataSource(null)\r\n                },\r\n                dispose: function() {\r\n                    this._disposeDataSource();\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function(rowIndexes, changesOnly) {\r\n                    rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\r\n                    if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {\r\n                        this.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: rowIndexes,\r\n                            isFullUpdate: !changesOnly\r\n                        })\r\n                    }\r\n                },\r\n                skipProcessingPagingChange: function(fullName) {\r\n                    return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName)\r\n                },\r\n                getUserState: function() {\r\n                    return {\r\n                        searchText: this.option(\"searchPanel.text\"),\r\n                        pageIndex: this.pageIndex(),\r\n                        pageSize: this.pageSize()\r\n                    }\r\n                },\r\n                getCachedStoreData: function() {\r\n                    return this._dataSource && this._dataSource.getCachedStoreData()\r\n                },\r\n                isLastPageLoaded: function() {\r\n                    var pageIndex = this.pageIndex();\r\n                    var pageCount = this.pageCount();\r\n                    return pageIndex === pageCount - 1\r\n                }\r\n            };\r\n            gridCoreUtils.proxyMethod(members, \"load\");\r\n            gridCoreUtils.proxyMethod(members, \"reload\");\r\n            gridCoreUtils.proxyMethod(members, \"push\");\r\n            gridCoreUtils.proxyMethod(members, \"itemsCount\", 0);\r\n            gridCoreUtils.proxyMethod(members, \"totalItemsCount\", 0);\r\n            gridCoreUtils.proxyMethod(members, \"hasKnownLastPage\", true);\r\n            gridCoreUtils.proxyMethod(members, \"isLoaded\", true);\r\n            gridCoreUtils.proxyMethod(members, \"totalCount\", 0);\r\n            return members\r\n        }())\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}