{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.focus.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport core from \"./ui.grid_core.modules\";\nimport { each } from \"../../core/utils/iterator\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { isDefined, isBoolean } from \"../../core/utils/type\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { UiGridCoreFocusUtils } from \"./ui.grid_core.focus.utils\";\nvar ROW_FOCUSED_CLASS = \"dx-row-focused\";\nvar FOCUSED_ROW_SELECTOR = \".dx-row.\" + ROW_FOCUSED_CLASS;\nvar TABLE_POSTFIX_CLASS = \"table\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FocusController = core.ViewController.inherit(function () {\n  var members = {\n    init: function () {\n      this._dataController = this.getController(\"data\");\n      this._keyboardController = this.getController(\"keyboardNavigation\");\n      this.component._optionsByReference.focusedRowKey = true;\n    },\n    optionChanged: function (args) {\n      if (\"focusedRowIndex\" === args.name) {\n        var focusedRowKey = this.option(\"focusedRowKey\");\n        this._focusRowByIndex(args.value);\n        this._triggerFocusedRowChangedIfNeed(focusedRowKey, args.value);\n        args.handled = true;\n      } else if (\"focusedRowKey\" === args.name) {\n        args.handled = true;\n        if (Array.isArray(args.value) && JSON.stringify(args.value) === JSON.stringify(args.previousValue)) {\n          return;\n        }\n        var focusedRowIndex = this.option(\"focusedRowIndex\");\n        this._focusRowByKey(args.value);\n        this._triggerFocusedRowChangedIfNeed(args.value, focusedRowIndex);\n      } else if (\"focusedColumnIndex\" === args.name) {\n        args.handled = true;\n      } else if (\"focusedRowEnabled\" === args.name) {\n        args.handled = true;\n      } else if (\"autoNavigateToFocusedRow\" === args.name) {\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    _triggerFocusedRowChangedIfNeed: function (focusedRowKey, focusedRowIndex) {\n      var focusedRowIndexByKey = this.getFocusedRowIndexByKey(focusedRowKey);\n      if (focusedRowIndex === focusedRowIndexByKey) {\n        var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n        if (rowIndex >= 0) {\n          var $rowElement = $(this.getView(\"rowsView\").getRowElement(rowIndex));\n          this.getController(\"keyboardNavigation\")._fireFocusedRowChanged($rowElement, focusedRowIndex);\n        }\n      }\n    },\n    isAutoNavigateToFocusedRow: function () {\n      return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\");\n    },\n    _focusRowByIndex: function (index, operationTypes) {\n      if (!this.option(\"focusedRowEnabled\")) {\n        return;\n      }\n      index = void 0 !== index ? index : this.option(\"focusedRowIndex\");\n      if (index < 0) {\n        if (this.isAutoNavigateToFocusedRow()) {\n          this._resetFocusedRow();\n        }\n      } else {\n        this._focusRowByIndexCore(index, operationTypes);\n      }\n    },\n    _focusRowByIndexCore: function (index, operationTypes) {\n      var dataController = this.getController(\"data\");\n      var pageSize = dataController.pageSize();\n      var setKeyByIndex = () => {\n        if (this._isValidFocusedRowIndex(index)) {\n          var rowIndex = index - dataController.getRowIndexOffset(true);\n          if (!operationTypes || operationTypes.paging && !operationTypes.filtering) {\n            var lastItemIndex = dataController._getLastItemIndex();\n            rowIndex = Math.min(rowIndex, lastItemIndex);\n          }\n          var focusedRowKey = dataController.getKeyByRowIndex(rowIndex, true);\n          if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\n            this.option(\"focusedRowKey\", focusedRowKey);\n          }\n        }\n      };\n      if (pageSize >= 0) {\n        if (!this._isLocalRowIndex(index)) {\n          var pageIndex = Math.floor(index / dataController.pageSize());\n          when(dataController.pageIndex(pageIndex), dataController.waitReady()).done(() => {\n            setKeyByIndex();\n          });\n        } else {\n          setKeyByIndex();\n        }\n      }\n    },\n    _isLocalRowIndex(index) {\n      var dataController = this.getController(\"data\");\n      var isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling();\n      if (isVirtualScrolling) {\n        var pageIndex = Math.floor(index / dataController.pageSize());\n        var virtualItems = dataController.virtualItemsCount();\n        var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\n        var visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset();\n        var visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());\n        return virtualItemsBegin <= index && visiblePagesCount > pageIndex;\n      }\n      return true;\n    },\n    _setFocusedRowKeyByIndex: function (index) {\n      var dataController = this.getController(\"data\");\n      if (this._isValidFocusedRowIndex(index)) {\n        var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1);\n        var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\n        if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\n          this.option(\"focusedRowKey\", focusedRowKey);\n        }\n      }\n    },\n    _focusRowByKey: function (key) {\n      if (!isDefined(key)) {\n        this._resetFocusedRow();\n      } else {\n        this._navigateToRow(key, true);\n      }\n    },\n    _resetFocusedRow: function () {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n      var isFocusedRowKeyDefined = isDefined(focusedRowKey);\n      if (!isFocusedRowKeyDefined && this.option(\"focusedRowIndex\") < 0) {\n        return;\n      }\n      var keyboardController = this.getController(\"keyboardNavigation\");\n      if (isFocusedRowKeyDefined) {\n        this.option(\"focusedRowKey\", null);\n      }\n      keyboardController.setFocusedRowIndex(-1);\n      this.option(\"focusedRowIndex\", -1);\n      this.getController(\"data\").updateItems({\n        changeType: \"updateFocusedRow\",\n        focusedRowKey: null\n      });\n      keyboardController._fireFocusedRowChanged(void 0, -1);\n    },\n    _isValidFocusedRowIndex: function (rowIndex) {\n      var dataController = this.getController(\"data\");\n      var row = dataController.getVisibleRows()[rowIndex];\n      return !row || \"data\" === row.rowType || \"group\" === row.rowType;\n    },\n    publicMethods: function () {\n      return [\"navigateToRow\", \"isRowFocused\"];\n    },\n    navigateToRow: function (key) {\n      if (!this.isAutoNavigateToFocusedRow()) {\n        this.option(\"focusedRowIndex\", -1);\n      }\n      return this._navigateToRow(key);\n    },\n    _navigateToRow: function (key, needFocusRow) {\n      var that = this;\n      var dataController = that.getController(\"data\");\n      var isAutoNavigate = that.isAutoNavigateToFocusedRow();\n      var d = new Deferred();\n      if (void 0 === key || !dataController.dataSource()) {\n        return d.reject().promise();\n      }\n      var rowIndexByKey = that.getFocusedRowIndexByKey(key);\n      if (!isAutoNavigate && needFocusRow || rowIndexByKey >= 0) {\n        that._navigateTo(key, d, needFocusRow);\n      } else {\n        dataController.getPageIndexByKey(key).done(function (pageIndex) {\n          if (pageIndex < 0) {\n            d.resolve(-1);\n            return;\n          }\n          if (pageIndex === dataController.pageIndex()) {\n            dataController.reload().done(function () {\n              if (that.isRowFocused(key) && dataController.getRowIndexByKey(key) >= 0) {\n                d.resolve(that.getFocusedRowIndexByKey(key));\n              } else {\n                that._navigateTo(key, d, needFocusRow);\n              }\n            }).fail(d.reject);\n          } else {\n            dataController.pageIndex(pageIndex).done(function () {\n              that._navigateTo(key, d, needFocusRow);\n            }).fail(d.reject);\n          }\n        }).fail(d.reject);\n      }\n      return d.promise();\n    },\n    _navigateTo: function (key, deferred, needFocusRow) {\n      var visibleRowIndex = this.getController(\"data\").getRowIndexByKey(key);\n      var isVirtualRowRenderingMode = gridCoreUtils.isVirtualRowRendering(this);\n      var isAutoNavigate = this.isAutoNavigateToFocusedRow();\n      if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\n        this._navigateToVirtualRow(key, deferred, needFocusRow);\n      } else {\n        this._navigateToVisibleRow(key, deferred, needFocusRow);\n      }\n    },\n    _navigateToVisibleRow: function (key, deferred, needFocusRow) {\n      if (needFocusRow) {\n        this._triggerUpdateFocusedRow(key, deferred);\n      } else {\n        var focusedRowIndex = this.getFocusedRowIndexByKey(key);\n        this.getView(\"rowsView\").scrollToRowElement(key, deferred).done(function () {\n          deferred.resolve(focusedRowIndex);\n        });\n      }\n    },\n    _navigateToVirtualRow: function (key, deferred, needFocusRow) {\n      var that = this;\n      var dataController = this.getController(\"data\");\n      var rowsScrollController = dataController._rowsScrollController;\n      var rowIndex = gridCoreUtils.getIndexByKey(key, dataController.items(true));\n      var scrollable = that.getView(\"rowsView\").getScrollable();\n      if (rowsScrollController && scrollable && rowIndex >= 0) {\n        var focusedRowIndex = rowIndex + dataController.getRowIndexOffset(true);\n        var offset = rowsScrollController.getItemOffset(focusedRowIndex);\n        that.component.on(\"contentReady\", function triggerUpdateFocusedRow() {\n          that.component.off(\"contentReady\", triggerUpdateFocusedRow);\n          if (needFocusRow) {\n            that._triggerUpdateFocusedRow(key, deferred);\n          } else {\n            deferred.resolve(focusedRowIndex);\n          }\n        });\n        this.getView(\"rowsView\").scrollTopPosition(offset);\n      } else {\n        deferred.resolve(-1);\n      }\n    },\n    _triggerUpdateFocusedRow: function (key, deferred) {\n      var dataController = this.getController(\"data\");\n      var focusedRowIndex = this.getFocusedRowIndexByKey(key);\n      if (this._isValidFocusedRowIndex(focusedRowIndex)) {\n        var d;\n        if (this.option(\"focusedRowEnabled\")) {\n          dataController.updateItems({\n            changeType: \"updateFocusedRow\",\n            focusedRowKey: key\n          });\n        } else {\n          d = this.getView(\"rowsView\").scrollToRowElement(key);\n        }\n        when(d).done(() => {\n          this.getController(\"keyboardNavigation\").setFocusedRowIndex(focusedRowIndex);\n          deferred && deferred.resolve(focusedRowIndex);\n        });\n      } else {\n        deferred && deferred.resolve(-1);\n      }\n    },\n    getFocusedRowIndexByKey: function (key) {\n      var dataController = this.getController(\"data\");\n      var loadedRowIndex = dataController.getRowIndexByKey(key, true);\n      return loadedRowIndex >= 0 ? loadedRowIndex + dataController.getRowIndexOffset(true) : -1;\n    },\n    _focusRowByKeyOrIndex: function () {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n      var currentFocusedRowIndex = this.option(\"focusedRowIndex\");\n      var keyboardController = this.getController(\"keyboardNavigation\");\n      var dataController = this.getController(\"data\");\n      if (isDefined(focusedRowKey)) {\n        var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);\n        if (visibleRowIndex >= 0) {\n          if (keyboardController._isVirtualScrolling()) {\n            currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset();\n          }\n          keyboardController.setFocusedRowIndex(currentFocusedRowIndex);\n          this._triggerUpdateFocusedRow(focusedRowKey);\n        } else {\n          this._navigateToRow(focusedRowKey, true).done(focusedRowIndex => {\n            if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\n              this._focusRowByIndex();\n            } else if (currentFocusedRowIndex < 0 && focusedRowIndex >= 0) {\n              keyboardController.setFocusedRowIndex(focusedRowIndex);\n            }\n          });\n        }\n      } else if (currentFocusedRowIndex >= 0) {\n        this.getController(\"focus\")._focusRowByIndex(currentFocusedRowIndex);\n      }\n    },\n    isRowFocused: function (key) {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n      if (isDefined(focusedRowKey)) {\n        return equalByValue(key, this.option(\"focusedRowKey\"));\n      }\n    },\n    updateFocusedRow: function (change) {\n      var that = this;\n      var focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey);\n      var rowsView = that.getView(\"rowsView\");\n      var $tableElement;\n      var $mainRow;\n      each(rowsView.getTableElements(), function (index, element) {\n        var isMainTable = 0 === index;\n        $tableElement = $(element);\n        that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\n        var $row = that._prepareFocusedRow({\n          changedItem: that._dataController.getVisibleRows()[focusedRowIndex],\n          $tableElement: $tableElement,\n          focusedRowIndex: focusedRowIndex\n        });\n        if (isMainTable) {\n          $mainRow = $row;\n        }\n      });\n      $mainRow && rowsView.scrollToElementVertically($mainRow);\n    },\n    _clearPreviousFocusedRow: function ($tableElement, focusedRowIndex) {\n      var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter((_, focusedRow) => {\n        var $focusedRowTable = $(focusedRow).closest(\".\".concat(this.addWidgetPrefix(TABLE_POSTFIX_CLASS)));\n        return $tableElement.is($focusedRowTable);\n      });\n      $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\n      $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\n      if (0 !== focusedRowIndex) {\n        var $firstRow = $(this.getView(\"rowsView\").getRowElement(0));\n        $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\");\n      }\n    },\n    _prepareFocusedRow: function (options) {\n      var $row;\n      var changedItem = options.changedItem;\n      if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\n        var focusedRowIndex = options.focusedRowIndex;\n        var $tableElement = options.$tableElement;\n        var tabIndex = this.option(\"tabindex\") || 0;\n        var rowsView = this.getView(\"rowsView\");\n        $row = $(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\n        $row.addClass(ROW_FOCUSED_CLASS).attr(\"tabindex\", tabIndex);\n      }\n      return $row;\n    }\n  };\n  return members;\n}());\nexport var focusModule = {\n  defaultOptions: function () {\n    return {\n      focusedRowEnabled: false,\n      autoNavigateToFocusedRow: true,\n      focusedRowKey: null,\n      focusedRowIndex: -1,\n      focusedColumnIndex: -1\n    };\n  },\n  controllers: {\n    focus: FocusController\n  },\n  extenders: {\n    controllers: {\n      keyboardNavigation: {\n        init: function () {\n          var rowIndex = this.option(\"focusedRowIndex\");\n          var columnIndex = this.option(\"focusedColumnIndex\");\n          this.createAction(\"onFocusedRowChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedRowChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.callBase();\n          this.setRowFocusType();\n          this._focusedCellPosition = {};\n          if (isDefined(rowIndex) && rowIndex >= 0) {\n            this._focusedCellPosition.rowIndex = rowIndex;\n          }\n          if (isDefined(columnIndex) && columnIndex >= 0) {\n            this._focusedCellPosition.columnIndex = columnIndex;\n          }\n        },\n        setFocusedRowIndex: function (rowIndex) {\n          var dataController = this.getController(\"data\");\n          this.callBase(rowIndex);\n          var visibleRowIndex = rowIndex - dataController.getRowIndexOffset();\n          var visibleRow = dataController.getVisibleRows()[visibleRowIndex];\n          if (!visibleRow || !visibleRow.isNewRow) {\n            this.option(\"focusedRowIndex\", rowIndex);\n          }\n        },\n        setFocusedColumnIndex: function (columnIndex) {\n          this.callBase(columnIndex);\n          this.option(\"focusedColumnIndex\", columnIndex);\n        },\n        _escapeKeyHandler: function (eventArgs, isEditing) {\n          if (isEditing || !this.option(\"focusedRowEnabled\")) {\n            this.callBase(eventArgs, isEditing);\n            return;\n          }\n          if (this.isCellFocusType()) {\n            this.setRowFocusType();\n            this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true);\n          }\n        },\n        _updateFocusedCellPosition: function ($cell, direction) {\n          var prevRowIndex = this.option(\"focusedRowIndex\");\n          var prevColumnIndex = this.option(\"focusedColumnIndex\");\n          var position = this.callBase($cell, direction);\n          if (position && position.columnIndex >= 0) {\n            this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex);\n          }\n        }\n      },\n      editorFactory: {\n        renderFocusOverlay: function ($element, isHideBorder) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var focusedRowEnabled = this.option(\"focusedRowEnabled\");\n          var editingController = this.getController(\"editing\");\n          var $cell;\n          if (!focusedRowEnabled || !(null !== keyboardController && void 0 !== keyboardController && keyboardController.isRowFocusType()) || editingController.isEditing()) {\n            this.callBase($element, isHideBorder);\n          } else if (focusedRowEnabled) {\n            var isRowElement = \"row\" === keyboardController._getElementType($element);\n            if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {\n              $cell = keyboardController.getFirstValidCellInRow($element);\n              keyboardController.focus($cell);\n            }\n          }\n        }\n      },\n      columns: {\n        getSortDataSourceParameters: function (_, sortByKey) {\n          var result = this.callBase.apply(this, arguments);\n          var dataController = this.getController(\"data\");\n          var dataSource = dataController._dataSource;\n          var store = dataController.store();\n          var key = store && store.key();\n          var remoteOperations = dataSource && dataSource.remoteOperations() || {};\n          var isLocalOperations = Object.keys(remoteOperations).every(operationName => !remoteOperations[operationName]);\n          if (key && (this.option(\"focusedRowEnabled\") && false !== this.getController(\"focus\").isAutoNavigateToFocusedRow() || sortByKey)) {\n            key = Array.isArray(key) ? key : [key];\n            var notSortedKeys = key.filter(key => !this.columnOption(key, \"sortOrder\"));\n            if (notSortedKeys.length) {\n              result = result || [];\n              if (isLocalOperations) {\n                result.push({\n                  selector: dataSource.getDataIndexGetter(),\n                  desc: false\n                });\n              } else {\n                notSortedKeys.forEach(notSortedKey => result.push({\n                  selector: notSortedKey,\n                  desc: false\n                }));\n              }\n            }\n          }\n          return result;\n        }\n      },\n      data: {\n        _applyChange: function (change) {\n          if (change && \"updateFocusedRow\" === change.changeType) {\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _fireChanged: function (e) {\n          this.callBase(e);\n          if (this.option(\"focusedRowEnabled\") && this._dataSource) {\n            var isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\n            var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\n            if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\n              this._updatePageIndexes();\n              this._updateFocusedRow(e);\n            } else if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\n              this._updatePageIndexes();\n            } else if (\"update\" === e.changeType && e.repaintChangesOnly) {\n              this._updateFocusedRow(e);\n            }\n          }\n        },\n        _updatePageIndexes: function () {\n          var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\n          var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\n          this._lastRenderingPageIndex = renderingPageIndex;\n          this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex;\n        },\n        isPagingByRendering: function () {\n          return this._isPagingByRendering;\n        },\n        _updateFocusedRow: function (e) {\n          var operationTypes = e.operationTypes || {};\n          var focusController = this.getController(\"focus\");\n          var {\n            reload: reload,\n            fullReload: fullReload,\n            pageIndex: pageIndex,\n            paging: paging\n          } = operationTypes;\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var isVirtualScrolling = keyboardController._isVirtualScrolling();\n          var pagingWithoutVirtualScrolling = paging && !isVirtualScrolling;\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();\n          var isReload = reload && false === pageIndex;\n          if (isReload && !fullReload && isDefined(focusedRowKey)) {\n            focusController._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n              if (focusedRowIndex < 0) {\n                focusController._focusRowByIndex(void 0, operationTypes);\n              }\n            });\n          } else if (pagingWithoutVirtualScrolling && isAutoNavigate) {\n            var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\n            var focusedRowIndex = this.option(\"focusedRowIndex\");\n            var isValidRowIndexByKey = rowIndexByKey >= 0;\n            var isValidFocusedRowIndex = focusedRowIndex >= 0;\n            var isSameRowIndex = focusedRowIndex === rowIndexByKey;\n            if (isValidFocusedRowIndex && (isSameRowIndex || !isValidRowIndexByKey)) {\n              focusController._focusRowByIndex(focusedRowIndex, operationTypes);\n            }\n          } else if (pagingWithoutVirtualScrolling && !isAutoNavigate && this.getRowIndexByKey(focusedRowKey) < 0) {\n            this.option(\"focusedRowIndex\", -1);\n          } else if (operationTypes.fullReload) {\n            focusController._focusRowByKeyOrIndex();\n          }\n        },\n        getPageIndexByKey: function (key) {\n          var that = this;\n          var d = new Deferred();\n          that.getGlobalRowIndexByKey(key).done(function (globalIndex) {\n            d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1);\n          }).fail(d.reject);\n          return d.promise();\n        },\n        getGlobalRowIndexByKey: function (key) {\n          if (this._dataSource.group()) {\n            return this._calculateGlobalRowIndexByGroupedData(key);\n          }\n          return this._calculateGlobalRowIndexByFlatData(key);\n        },\n        _calculateGlobalRowIndexByFlatData: function (key, groupFilter, useGroup) {\n          var that = this;\n          var deferred = new Deferred();\n          var dataSource = that._dataSource;\n          if (Array.isArray(key)) {\n            return deferred.resolve(-1).promise();\n          }\n          var filter = that._generateFilterByKey(key);\n          dataSource.load({\n            filter: that._concatWithCombinedFilter(filter),\n            skip: 0,\n            take: 1\n          }).done(function (data) {\n            if (data.length > 0) {\n              filter = that._generateOperationFilterByKey(key, data[0], useGroup);\n              dataSource.load({\n                filter: that._concatWithCombinedFilter(filter, groupFilter),\n                skip: 0,\n                take: 1,\n                requireTotalCount: true\n              }).done(function (_, extra) {\n                deferred.resolve(extra.totalCount);\n              });\n            } else {\n              deferred.resolve(-1);\n            }\n          });\n          return deferred.promise();\n        },\n        _concatWithCombinedFilter: function (filter, groupFilter) {\n          var combinedFilter = this.getCombinedFilter();\n          return gridCoreUtils.combineFilters([filter, combinedFilter, groupFilter]);\n        },\n        _generateBooleanFilter: function (selector, value, sortInfo) {\n          var {\n            desc: desc\n          } = sortInfo;\n          switch (true) {\n            case false === value && desc:\n              return [selector, \"=\", true];\n            case false === value && !desc:\n              return [selector, \"=\", null];\n            case true === value && !desc:\n            case !isBoolean(value) && desc:\n              return [selector, \"<>\", value];\n            default:\n              return;\n          }\n        },\n        _generateOperationFilterByKey: function (key, rowData, useGroup) {\n          var that = this;\n          var dateSerializationFormat = that.option(\"dateSerializationFormat\");\n          var isRemoteFiltering = that._dataSource.remoteOperations().filtering;\n          var filter = that._generateFilterByKey(key, \"<\");\n          var sort = that._columnsController.getSortDataSourceParameters(!isRemoteFiltering, true);\n          if (useGroup) {\n            var group = that._columnsController.getGroupDataSourceParameters(!isRemoteFiltering);\n            if (group) {\n              sort = sort ? group.concat(sort) : group;\n            }\n          }\n          if (sort) {\n            sort.slice().reverse().forEach(function (sortInfo) {\n              var {\n                selector: selector,\n                desc: desc,\n                compare: compare\n              } = sortInfo;\n              var {\n                getter: getter,\n                rawValue: rawValue,\n                safeValue: safeValue\n              } = UiGridCoreFocusUtils.getSortFilterValue(sortInfo, rowData, {\n                isRemoteFiltering: isRemoteFiltering,\n                dateSerializationFormat: dateSerializationFormat,\n                getSelector: selector => that._columnsController.columnOption(selector, \"selector\")\n              });\n              filter = [[selector, \"=\", safeValue], \"and\", filter];\n              if (null === rawValue || isBoolean(rawValue)) {\n                var booleanFilter = that._generateBooleanFilter(selector, safeValue, desc);\n                if (booleanFilter) {\n                  filter = [booleanFilter, \"or\", filter];\n                }\n              } else {\n                var filterOperation = desc ? \">\" : \"<\";\n                var sortFilter;\n                if (compare) {\n                  sortFilter = data => {\n                    if (\"<\" === filterOperation) {\n                      return compare(rawValue, getter(data)) >= 1;\n                    } else {\n                      return compare(rawValue, getter(data)) <= -1;\n                    }\n                  };\n                } else {\n                  sortFilter = [selector, filterOperation, safeValue];\n                  if (!desc) {\n                    sortFilter = [sortFilter, \"or\", [selector, \"=\", null]];\n                  }\n                }\n                filter = [sortFilter, \"or\", filter];\n              }\n            });\n          }\n          return filter;\n        },\n        _generateFilterByKey: function (key, operation) {\n          var dataSourceKey = this._dataSource.key();\n          var filter = [];\n          if (!operation) {\n            operation = \"=\";\n          }\n          if (Array.isArray(dataSourceKey)) {\n            for (var i = 0; i < dataSourceKey.length; ++i) {\n              var keyPart = key[dataSourceKey[i]];\n              if (keyPart) {\n                if (filter.length > 0) {\n                  filter.push(\"and\");\n                }\n                filter.push([dataSourceKey[i], operation, keyPart]);\n              }\n            }\n          } else {\n            filter = [dataSourceKey, operation, key];\n          }\n          return filter;\n        },\n        _getLastItemIndex: function () {\n          return this.items(true).length - 1;\n        }\n      },\n      editing: {\n        _deleteRowCore: function (rowIndex) {\n          var deferred = this.callBase.apply(this, arguments);\n          var dataController = this.getController(\"data\");\n          var rowKey = dataController.getKeyByRowIndex(rowIndex);\n          deferred.done(() => {\n            var rowIndex = dataController.getRowIndexByKey(rowKey);\n            var visibleRows = dataController.getVisibleRows();\n            if (-1 === rowIndex && !visibleRows.length) {\n              this.getController(\"focus\")._resetFocusedRow();\n            }\n          });\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n          if (this.option(\"focusedRowEnabled\") && row) {\n            if (this.getController(\"focus\").isRowFocused(row.key)) {\n              $row.addClass(ROW_FOCUSED_CLASS);\n            }\n          }\n          return $row;\n        },\n        _checkRowKeys: function (options) {\n          this.callBase.apply(this, arguments);\n          if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\n            var store = this._dataController.store();\n            if (store && !store.key()) {\n              this._dataController.fireError(\"E1042\", \"Row focusing\");\n            }\n          }\n        },\n        _update: function (change) {\n          if (\"updateFocusedRow\" === change.changeType) {\n            if (this.option(\"focusedRowEnabled\")) {\n              this.getController(\"focus\").updateFocusedRow(change);\n            }\n          } else {\n            this.callBase(change);\n          }\n        },\n        updateFocusElementTabIndex: function ($cellElements, preventScroll) {\n          var rowIndex = this.getController(\"keyboardNavigation\").getVisibleRowIndex();\n          var row = this._dataController.getVisibleRows()[rowIndex];\n          if (this.option(\"focusedRowEnabled\") && !(null !== row && void 0 !== row && row.isNewRow)) {\n            this._setFocusedRowElementTabIndex(preventScroll);\n          } else {\n            this.callBase($cellElements);\n          }\n        },\n        _setFocusedRowElementTabIndex: function (preventScroll) {\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var tabIndex = this.option(\"tabIndex\") || 0;\n          var dataController = this._dataController;\n          var columnsController = this._columnsController;\n          var rowIndex = dataController.getRowIndexByKey(focusedRowKey);\n          var columnIndex = this.option(\"focusedColumnIndex\");\n          var $row = this._findRowElementForTabIndex();\n          if (!isDefined(this._scrollToFocusOnResize)) {\n            this._scrollToFocusOnResize = () => {\n              this.scrollToElementVertically(this._findRowElementForTabIndex());\n              this.resizeCompleted.remove(this._scrollToFocusOnResize);\n            };\n          }\n          $row.attr(\"tabIndex\", tabIndex);\n          if (rowIndex >= 0 && !preventScroll) {\n            if (columnIndex < 0) {\n              columnIndex = 0;\n            }\n            rowIndex += dataController.getRowIndexOffset();\n            columnIndex += columnsController.getColumnIndexOffset();\n            this.getController(\"keyboardNavigation\").setFocusedCellPosition(rowIndex, columnIndex);\n            if (this.getController(\"focus\").isAutoNavigateToFocusedRow()) {\n              var dataSource = dataController.dataSource();\n              var operationTypes = dataSource && dataSource.operationTypes();\n              if (operationTypes && !operationTypes.paging && !dataController.isPagingByRendering()) {\n                this.resizeCompleted.remove(this._scrollToFocusOnResize);\n                this.resizeCompleted.add(this._scrollToFocusOnResize);\n              }\n            }\n          }\n        },\n        _findRowElementForTabIndex: function () {\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n          return $(this.getRowElement(rowIndex >= 0 ? rowIndex : 0));\n        },\n        scrollToRowElement: function (key) {\n          var rowIndex = this.getController(\"data\").getRowIndexByKey(key);\n          var $row = $(this.getRow(rowIndex));\n          return this.scrollToElementVertically($row);\n        },\n        scrollToElementVertically: function ($row) {\n          var scrollable = this.getScrollable();\n          if (scrollable && $row.length) {\n            var position = scrollable.getScrollElementPosition($row, \"vertical\");\n            return this.scrollTopPosition(position);\n          }\n          return new Deferred().resolve();\n        },\n        scrollTopPosition: function (scrollTop) {\n          var d = new Deferred();\n          var scrollable = this.getScrollable();\n          if (scrollable) {\n            var currentScrollTop = scrollable.scrollTop();\n            var scrollHandler = () => {\n              scrollable.off(\"scroll\", scrollHandler);\n              d.resolve();\n            };\n            if (scrollTop !== currentScrollTop) {\n              scrollable.on(\"scroll\", scrollHandler);\n              this._dataController.resetFilterApplying();\n              scrollable.scrollTo({\n                top: scrollTop\n              });\n              return d.promise();\n            }\n          }\n          return d.resolve();\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["$","core","each","gridCoreUtils","equalByValue","isDefined","isBoolean","Deferred","when","UiGridCoreFocusUtils","ROW_FOCUSED_CLASS","FOCUSED_ROW_SELECTOR","TABLE_POSTFIX_CLASS","CELL_FOCUS_DISABLED_CLASS","FocusController","ViewController","inherit","members","init","_dataController","getController","_keyboardController","component","_optionsByReference","focusedRowKey","optionChanged","args","name","option","_focusRowByIndex","value","_triggerFocusedRowChangedIfNeed","handled","Array","isArray","JSON","stringify","previousValue","focusedRowIndex","_focusRowByKey","callBase","focusedRowIndexByKey","getFocusedRowIndexByKey","rowIndex","getRowIndexByKey","$rowElement","getView","getRowElement","_fireFocusedRowChanged","isAutoNavigateToFocusedRow","index","operationTypes","_resetFocusedRow","_focusRowByIndexCore","dataController","pageSize","setKeyByIndex","_isValidFocusedRowIndex","getRowIndexOffset","paging","filtering","lastItemIndex","_getLastItemIndex","Math","min","getKeyByRowIndex","isRowFocused","_isLocalRowIndex","pageIndex","floor","waitReady","done","isVirtualScrolling","_isVirtualScrolling","virtualItems","virtualItemsCount","virtualItemsBegin","begin","visibleRowsCount","getVisibleRows","length","visiblePagesCount","ceil","_setFocusedRowKeyByIndex","items","key","_navigateToRow","isFocusedRowKeyDefined","keyboardController","setFocusedRowIndex","updateItems","changeType","row","rowType","publicMethods","navigateToRow","needFocusRow","that","isAutoNavigate","d","dataSource","reject","promise","rowIndexByKey","_navigateTo","getPageIndexByKey","resolve","reload","fail","deferred","visibleRowIndex","isVirtualRowRenderingMode","isVirtualRowRendering","_navigateToVirtualRow","_navigateToVisibleRow","_triggerUpdateFocusedRow","scrollToRowElement","rowsScrollController","_rowsScrollController","getIndexByKey","scrollable","getScrollable","offset","getItemOffset","on","triggerUpdateFocusedRow","off","scrollTopPosition","loadedRowIndex","_focusRowByKeyOrIndex","currentFocusedRowIndex","updateFocusedRow","change","rowsView","$tableElement","$mainRow","getTableElements","element","isMainTable","_clearPreviousFocusedRow","$row","_prepareFocusedRow","changedItem","scrollToElementVertically","$prevRowFocusedElement","find","filter","_","focusedRow","$focusedRowTable","closest","concat","addWidgetPrefix","is","removeClass","removeAttr","children","$firstRow","options","tabIndex","_getRowElements","eq","addClass","attr","focusModule","defaultOptions","focusedRowEnabled","autoNavigateToFocusedRow","focusedColumnIndex","controllers","focus","extenders","keyboardNavigation","columnIndex","createAction","excludeValidators","setRowFocusType","_focusedCellPosition","visibleRow","isNewRow","setFocusedColumnIndex","_escapeKeyHandler","eventArgs","isEditing","isCellFocusType","_focus","_getCellElementFromTarget","originalEvent","target","_updateFocusedCellPosition","$cell","direction","prevRowIndex","prevColumnIndex","position","_fireFocusedCellChanged","editorFactory","renderFocusOverlay","$element","isHideBorder","editingController","isRowFocusType","isRowElement","_getElementType","hasClass","getFirstValidCellInRow","columns","getSortDataSourceParameters","sortByKey","result","apply","arguments","_dataSource","store","remoteOperations","isLocalOperations","Object","keys","every","operationName","notSortedKeys","columnOption","push","selector","getDataIndexGetter","desc","forEach","notSortedKey","data","_applyChange","_fireChanged","e","isPartialUpdate","repaintChangesOnly","isPartialUpdateWithDeleting","changeTypes","indexOf","_updatePageIndexes","_updateFocusedRow","prevRenderingPageIndex","_lastRenderingPageIndex","renderingPageIndex","_isPagingByRendering","isPagingByRendering","focusController","fullReload","pagingWithoutVirtualScrolling","isReload","isValidRowIndexByKey","isValidFocusedRowIndex","isSameRowIndex","getGlobalRowIndexByKey","globalIndex","group","_calculateGlobalRowIndexByGroupedData","_calculateGlobalRowIndexByFlatData","groupFilter","useGroup","_generateFilterByKey","load","_concatWithCombinedFilter","skip","take","_generateOperationFilterByKey","requireTotalCount","extra","totalCount","combinedFilter","getCombinedFilter","combineFilters","_generateBooleanFilter","sortInfo","rowData","dateSerializationFormat","isRemoteFiltering","sort","_columnsController","getGroupDataSourceParameters","slice","reverse","compare","getter","rawValue","safeValue","getSortFilterValue","getSelector","booleanFilter","filterOperation","sortFilter","operation","dataSourceKey","i","keyPart","editing","_deleteRowCore","rowKey","visibleRows","views","_createRow","_checkRowKeys","fireError","_update","updateFocusElementTabIndex","$cellElements","preventScroll","getVisibleRowIndex","_setFocusedRowElementTabIndex","columnsController","_findRowElementForTabIndex","_scrollToFocusOnResize","resizeCompleted","remove","getColumnIndexOffset","setFocusedCellPosition","add","getRow","getScrollElementPosition","scrollTop","currentScrollTop","scrollHandler","resetFilterApplying","scrollTo","top"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.focus.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.focus.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport core from \"./ui.grid_core.modules\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isBoolean\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    UiGridCoreFocusUtils\r\n} from \"./ui.grid_core.focus.utils\";\r\nvar ROW_FOCUSED_CLASS = \"dx-row-focused\";\r\nvar FOCUSED_ROW_SELECTOR = \".dx-row.\" + ROW_FOCUSED_CLASS;\r\nvar TABLE_POSTFIX_CLASS = \"table\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar FocusController = core.ViewController.inherit(function() {\r\n    var members = {\r\n        init: function() {\r\n            this._dataController = this.getController(\"data\");\r\n            this._keyboardController = this.getController(\"keyboardNavigation\");\r\n            this.component._optionsByReference.focusedRowKey = true\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"focusedRowIndex\" === args.name) {\r\n                var focusedRowKey = this.option(\"focusedRowKey\");\r\n                this._focusRowByIndex(args.value);\r\n                this._triggerFocusedRowChangedIfNeed(focusedRowKey, args.value);\r\n                args.handled = true\r\n            } else if (\"focusedRowKey\" === args.name) {\r\n                args.handled = true;\r\n                if (Array.isArray(args.value) && JSON.stringify(args.value) === JSON.stringify(args.previousValue)) {\r\n                    return\r\n                }\r\n                var focusedRowIndex = this.option(\"focusedRowIndex\");\r\n                this._focusRowByKey(args.value);\r\n                this._triggerFocusedRowChangedIfNeed(args.value, focusedRowIndex)\r\n            } else if (\"focusedColumnIndex\" === args.name) {\r\n                args.handled = true\r\n            } else if (\"focusedRowEnabled\" === args.name) {\r\n                args.handled = true\r\n            } else if (\"autoNavigateToFocusedRow\" === args.name) {\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        },\r\n        _triggerFocusedRowChangedIfNeed: function(focusedRowKey, focusedRowIndex) {\r\n            var focusedRowIndexByKey = this.getFocusedRowIndexByKey(focusedRowKey);\r\n            if (focusedRowIndex === focusedRowIndexByKey) {\r\n                var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\r\n                if (rowIndex >= 0) {\r\n                    var $rowElement = $(this.getView(\"rowsView\").getRowElement(rowIndex));\r\n                    this.getController(\"keyboardNavigation\")._fireFocusedRowChanged($rowElement, focusedRowIndex)\r\n                }\r\n            }\r\n        },\r\n        isAutoNavigateToFocusedRow: function() {\r\n            return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\")\r\n        },\r\n        _focusRowByIndex: function(index, operationTypes) {\r\n            if (!this.option(\"focusedRowEnabled\")) {\r\n                return\r\n            }\r\n            index = void 0 !== index ? index : this.option(\"focusedRowIndex\");\r\n            if (index < 0) {\r\n                if (this.isAutoNavigateToFocusedRow()) {\r\n                    this._resetFocusedRow()\r\n                }\r\n            } else {\r\n                this._focusRowByIndexCore(index, operationTypes)\r\n            }\r\n        },\r\n        _focusRowByIndexCore: function(index, operationTypes) {\r\n            var dataController = this.getController(\"data\");\r\n            var pageSize = dataController.pageSize();\r\n            var setKeyByIndex = () => {\r\n                if (this._isValidFocusedRowIndex(index)) {\r\n                    var rowIndex = index - dataController.getRowIndexOffset(true);\r\n                    if (!operationTypes || operationTypes.paging && !operationTypes.filtering) {\r\n                        var lastItemIndex = dataController._getLastItemIndex();\r\n                        rowIndex = Math.min(rowIndex, lastItemIndex)\r\n                    }\r\n                    var focusedRowKey = dataController.getKeyByRowIndex(rowIndex, true);\r\n                    if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\r\n                        this.option(\"focusedRowKey\", focusedRowKey)\r\n                    }\r\n                }\r\n            };\r\n            if (pageSize >= 0) {\r\n                if (!this._isLocalRowIndex(index)) {\r\n                    var pageIndex = Math.floor(index / dataController.pageSize());\r\n                    when(dataController.pageIndex(pageIndex), dataController.waitReady()).done(() => {\r\n                        setKeyByIndex()\r\n                    })\r\n                } else {\r\n                    setKeyByIndex()\r\n                }\r\n            }\r\n        },\r\n        _isLocalRowIndex(index) {\r\n            var dataController = this.getController(\"data\");\r\n            var isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling();\r\n            if (isVirtualScrolling) {\r\n                var pageIndex = Math.floor(index / dataController.pageSize());\r\n                var virtualItems = dataController.virtualItemsCount();\r\n                var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\r\n                var visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset();\r\n                var visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());\r\n                return virtualItemsBegin <= index && visiblePagesCount > pageIndex\r\n            }\r\n            return true\r\n        },\r\n        _setFocusedRowKeyByIndex: function(index) {\r\n            var dataController = this.getController(\"data\");\r\n            if (this._isValidFocusedRowIndex(index)) {\r\n                var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1);\r\n                var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\r\n                if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\r\n                    this.option(\"focusedRowKey\", focusedRowKey)\r\n                }\r\n            }\r\n        },\r\n        _focusRowByKey: function(key) {\r\n            if (!isDefined(key)) {\r\n                this._resetFocusedRow()\r\n            } else {\r\n                this._navigateToRow(key, true)\r\n            }\r\n        },\r\n        _resetFocusedRow: function() {\r\n            var focusedRowKey = this.option(\"focusedRowKey\");\r\n            var isFocusedRowKeyDefined = isDefined(focusedRowKey);\r\n            if (!isFocusedRowKeyDefined && this.option(\"focusedRowIndex\") < 0) {\r\n                return\r\n            }\r\n            var keyboardController = this.getController(\"keyboardNavigation\");\r\n            if (isFocusedRowKeyDefined) {\r\n                this.option(\"focusedRowKey\", null)\r\n            }\r\n            keyboardController.setFocusedRowIndex(-1);\r\n            this.option(\"focusedRowIndex\", -1);\r\n            this.getController(\"data\").updateItems({\r\n                changeType: \"updateFocusedRow\",\r\n                focusedRowKey: null\r\n            });\r\n            keyboardController._fireFocusedRowChanged(void 0, -1)\r\n        },\r\n        _isValidFocusedRowIndex: function(rowIndex) {\r\n            var dataController = this.getController(\"data\");\r\n            var row = dataController.getVisibleRows()[rowIndex];\r\n            return !row || \"data\" === row.rowType || \"group\" === row.rowType\r\n        },\r\n        publicMethods: function() {\r\n            return [\"navigateToRow\", \"isRowFocused\"]\r\n        },\r\n        navigateToRow: function(key) {\r\n            if (!this.isAutoNavigateToFocusedRow()) {\r\n                this.option(\"focusedRowIndex\", -1)\r\n            }\r\n            return this._navigateToRow(key)\r\n        },\r\n        _navigateToRow: function(key, needFocusRow) {\r\n            var that = this;\r\n            var dataController = that.getController(\"data\");\r\n            var isAutoNavigate = that.isAutoNavigateToFocusedRow();\r\n            var d = new Deferred;\r\n            if (void 0 === key || !dataController.dataSource()) {\r\n                return d.reject().promise()\r\n            }\r\n            var rowIndexByKey = that.getFocusedRowIndexByKey(key);\r\n            if (!isAutoNavigate && needFocusRow || rowIndexByKey >= 0) {\r\n                that._navigateTo(key, d, needFocusRow)\r\n            } else {\r\n                dataController.getPageIndexByKey(key).done((function(pageIndex) {\r\n                    if (pageIndex < 0) {\r\n                        d.resolve(-1);\r\n                        return\r\n                    }\r\n                    if (pageIndex === dataController.pageIndex()) {\r\n                        dataController.reload().done((function() {\r\n                            if (that.isRowFocused(key) && dataController.getRowIndexByKey(key) >= 0) {\r\n                                d.resolve(that.getFocusedRowIndexByKey(key))\r\n                            } else {\r\n                                that._navigateTo(key, d, needFocusRow)\r\n                            }\r\n                        })).fail(d.reject)\r\n                    } else {\r\n                        dataController.pageIndex(pageIndex).done((function() {\r\n                            that._navigateTo(key, d, needFocusRow)\r\n                        })).fail(d.reject)\r\n                    }\r\n                })).fail(d.reject)\r\n            }\r\n            return d.promise()\r\n        },\r\n        _navigateTo: function(key, deferred, needFocusRow) {\r\n            var visibleRowIndex = this.getController(\"data\").getRowIndexByKey(key);\r\n            var isVirtualRowRenderingMode = gridCoreUtils.isVirtualRowRendering(this);\r\n            var isAutoNavigate = this.isAutoNavigateToFocusedRow();\r\n            if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\r\n                this._navigateToVirtualRow(key, deferred, needFocusRow)\r\n            } else {\r\n                this._navigateToVisibleRow(key, deferred, needFocusRow)\r\n            }\r\n        },\r\n        _navigateToVisibleRow: function(key, deferred, needFocusRow) {\r\n            if (needFocusRow) {\r\n                this._triggerUpdateFocusedRow(key, deferred)\r\n            } else {\r\n                var focusedRowIndex = this.getFocusedRowIndexByKey(key);\r\n                this.getView(\"rowsView\").scrollToRowElement(key, deferred).done((function() {\r\n                    deferred.resolve(focusedRowIndex)\r\n                }))\r\n            }\r\n        },\r\n        _navigateToVirtualRow: function(key, deferred, needFocusRow) {\r\n            var that = this;\r\n            var dataController = this.getController(\"data\");\r\n            var rowsScrollController = dataController._rowsScrollController;\r\n            var rowIndex = gridCoreUtils.getIndexByKey(key, dataController.items(true));\r\n            var scrollable = that.getView(\"rowsView\").getScrollable();\r\n            if (rowsScrollController && scrollable && rowIndex >= 0) {\r\n                var focusedRowIndex = rowIndex + dataController.getRowIndexOffset(true);\r\n                var offset = rowsScrollController.getItemOffset(focusedRowIndex);\r\n                that.component.on(\"contentReady\", (function triggerUpdateFocusedRow() {\r\n                    that.component.off(\"contentReady\", triggerUpdateFocusedRow);\r\n                    if (needFocusRow) {\r\n                        that._triggerUpdateFocusedRow(key, deferred)\r\n                    } else {\r\n                        deferred.resolve(focusedRowIndex)\r\n                    }\r\n                }));\r\n                this.getView(\"rowsView\").scrollTopPosition(offset)\r\n            } else {\r\n                deferred.resolve(-1)\r\n            }\r\n        },\r\n        _triggerUpdateFocusedRow: function(key, deferred) {\r\n            var dataController = this.getController(\"data\");\r\n            var focusedRowIndex = this.getFocusedRowIndexByKey(key);\r\n            if (this._isValidFocusedRowIndex(focusedRowIndex)) {\r\n                var d;\r\n                if (this.option(\"focusedRowEnabled\")) {\r\n                    dataController.updateItems({\r\n                        changeType: \"updateFocusedRow\",\r\n                        focusedRowKey: key\r\n                    })\r\n                } else {\r\n                    d = this.getView(\"rowsView\").scrollToRowElement(key)\r\n                }\r\n                when(d).done(() => {\r\n                    this.getController(\"keyboardNavigation\").setFocusedRowIndex(focusedRowIndex);\r\n                    deferred && deferred.resolve(focusedRowIndex)\r\n                })\r\n            } else {\r\n                deferred && deferred.resolve(-1)\r\n            }\r\n        },\r\n        getFocusedRowIndexByKey: function(key) {\r\n            var dataController = this.getController(\"data\");\r\n            var loadedRowIndex = dataController.getRowIndexByKey(key, true);\r\n            return loadedRowIndex >= 0 ? loadedRowIndex + dataController.getRowIndexOffset(true) : -1\r\n        },\r\n        _focusRowByKeyOrIndex: function() {\r\n            var focusedRowKey = this.option(\"focusedRowKey\");\r\n            var currentFocusedRowIndex = this.option(\"focusedRowIndex\");\r\n            var keyboardController = this.getController(\"keyboardNavigation\");\r\n            var dataController = this.getController(\"data\");\r\n            if (isDefined(focusedRowKey)) {\r\n                var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);\r\n                if (visibleRowIndex >= 0) {\r\n                    if (keyboardController._isVirtualScrolling()) {\r\n                        currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset()\r\n                    }\r\n                    keyboardController.setFocusedRowIndex(currentFocusedRowIndex);\r\n                    this._triggerUpdateFocusedRow(focusedRowKey)\r\n                } else {\r\n                    this._navigateToRow(focusedRowKey, true).done(focusedRowIndex => {\r\n                        if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\r\n                            this._focusRowByIndex()\r\n                        } else if (currentFocusedRowIndex < 0 && focusedRowIndex >= 0) {\r\n                            keyboardController.setFocusedRowIndex(focusedRowIndex)\r\n                        }\r\n                    })\r\n                }\r\n            } else if (currentFocusedRowIndex >= 0) {\r\n                this.getController(\"focus\")._focusRowByIndex(currentFocusedRowIndex)\r\n            }\r\n        },\r\n        isRowFocused: function(key) {\r\n            var focusedRowKey = this.option(\"focusedRowKey\");\r\n            if (isDefined(focusedRowKey)) {\r\n                return equalByValue(key, this.option(\"focusedRowKey\"))\r\n            }\r\n        },\r\n        updateFocusedRow: function(change) {\r\n            var that = this;\r\n            var focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey);\r\n            var rowsView = that.getView(\"rowsView\");\r\n            var $tableElement;\r\n            var $mainRow;\r\n            each(rowsView.getTableElements(), (function(index, element) {\r\n                var isMainTable = 0 === index;\r\n                $tableElement = $(element);\r\n                that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\r\n                var $row = that._prepareFocusedRow({\r\n                    changedItem: that._dataController.getVisibleRows()[focusedRowIndex],\r\n                    $tableElement: $tableElement,\r\n                    focusedRowIndex: focusedRowIndex\r\n                });\r\n                if (isMainTable) {\r\n                    $mainRow = $row\r\n                }\r\n            }));\r\n            $mainRow && rowsView.scrollToElementVertically($mainRow)\r\n        },\r\n        _clearPreviousFocusedRow: function($tableElement, focusedRowIndex) {\r\n            var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter((_, focusedRow) => {\r\n                var $focusedRowTable = $(focusedRow).closest(\".\".concat(this.addWidgetPrefix(TABLE_POSTFIX_CLASS)));\r\n                return $tableElement.is($focusedRowTable)\r\n            });\r\n            $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\r\n            $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\r\n            if (0 !== focusedRowIndex) {\r\n                var $firstRow = $(this.getView(\"rowsView\").getRowElement(0));\r\n                $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\")\r\n            }\r\n        },\r\n        _prepareFocusedRow: function(options) {\r\n            var $row;\r\n            var changedItem = options.changedItem;\r\n            if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\r\n                var focusedRowIndex = options.focusedRowIndex;\r\n                var $tableElement = options.$tableElement;\r\n                var tabIndex = this.option(\"tabindex\") || 0;\r\n                var rowsView = this.getView(\"rowsView\");\r\n                $row = $(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\r\n                $row.addClass(ROW_FOCUSED_CLASS).attr(\"tabindex\", tabIndex)\r\n            }\r\n            return $row\r\n        }\r\n    };\r\n    return members\r\n}());\r\nexport var focusModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            focusedRowEnabled: false,\r\n            autoNavigateToFocusedRow: true,\r\n            focusedRowKey: null,\r\n            focusedRowIndex: -1,\r\n            focusedColumnIndex: -1\r\n        }\r\n    },\r\n    controllers: {\r\n        focus: FocusController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            keyboardNavigation: {\r\n                init: function() {\r\n                    var rowIndex = this.option(\"focusedRowIndex\");\r\n                    var columnIndex = this.option(\"focusedColumnIndex\");\r\n                    this.createAction(\"onFocusedRowChanging\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.createAction(\"onFocusedRowChanged\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.createAction(\"onFocusedCellChanging\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.createAction(\"onFocusedCellChanged\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.callBase();\r\n                    this.setRowFocusType();\r\n                    this._focusedCellPosition = {};\r\n                    if (isDefined(rowIndex) && rowIndex >= 0) {\r\n                        this._focusedCellPosition.rowIndex = rowIndex\r\n                    }\r\n                    if (isDefined(columnIndex) && columnIndex >= 0) {\r\n                        this._focusedCellPosition.columnIndex = columnIndex\r\n                    }\r\n                },\r\n                setFocusedRowIndex: function(rowIndex) {\r\n                    var dataController = this.getController(\"data\");\r\n                    this.callBase(rowIndex);\r\n                    var visibleRowIndex = rowIndex - dataController.getRowIndexOffset();\r\n                    var visibleRow = dataController.getVisibleRows()[visibleRowIndex];\r\n                    if (!visibleRow || !visibleRow.isNewRow) {\r\n                        this.option(\"focusedRowIndex\", rowIndex)\r\n                    }\r\n                },\r\n                setFocusedColumnIndex: function(columnIndex) {\r\n                    this.callBase(columnIndex);\r\n                    this.option(\"focusedColumnIndex\", columnIndex)\r\n                },\r\n                _escapeKeyHandler: function(eventArgs, isEditing) {\r\n                    if (isEditing || !this.option(\"focusedRowEnabled\")) {\r\n                        this.callBase(eventArgs, isEditing);\r\n                        return\r\n                    }\r\n                    if (this.isCellFocusType()) {\r\n                        this.setRowFocusType();\r\n                        this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true)\r\n                    }\r\n                },\r\n                _updateFocusedCellPosition: function($cell, direction) {\r\n                    var prevRowIndex = this.option(\"focusedRowIndex\");\r\n                    var prevColumnIndex = this.option(\"focusedColumnIndex\");\r\n                    var position = this.callBase($cell, direction);\r\n                    if (position && position.columnIndex >= 0) {\r\n                        this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex)\r\n                    }\r\n                }\r\n            },\r\n            editorFactory: {\r\n                renderFocusOverlay: function($element, isHideBorder) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var focusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n                    var editingController = this.getController(\"editing\");\r\n                    var $cell;\r\n                    if (!focusedRowEnabled || !(null !== keyboardController && void 0 !== keyboardController && keyboardController.isRowFocusType()) || editingController.isEditing()) {\r\n                        this.callBase($element, isHideBorder)\r\n                    } else if (focusedRowEnabled) {\r\n                        var isRowElement = \"row\" === keyboardController._getElementType($element);\r\n                        if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {\r\n                            $cell = keyboardController.getFirstValidCellInRow($element);\r\n                            keyboardController.focus($cell)\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            columns: {\r\n                getSortDataSourceParameters: function(_, sortByKey) {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var dataController = this.getController(\"data\");\r\n                    var dataSource = dataController._dataSource;\r\n                    var store = dataController.store();\r\n                    var key = store && store.key();\r\n                    var remoteOperations = dataSource && dataSource.remoteOperations() || {};\r\n                    var isLocalOperations = Object.keys(remoteOperations).every(operationName => !remoteOperations[operationName]);\r\n                    if (key && (this.option(\"focusedRowEnabled\") && false !== this.getController(\"focus\").isAutoNavigateToFocusedRow() || sortByKey)) {\r\n                        key = Array.isArray(key) ? key : [key];\r\n                        var notSortedKeys = key.filter(key => !this.columnOption(key, \"sortOrder\"));\r\n                        if (notSortedKeys.length) {\r\n                            result = result || [];\r\n                            if (isLocalOperations) {\r\n                                result.push({\r\n                                    selector: dataSource.getDataIndexGetter(),\r\n                                    desc: false\r\n                                })\r\n                            } else {\r\n                                notSortedKeys.forEach(notSortedKey => result.push({\r\n                                    selector: notSortedKey,\r\n                                    desc: false\r\n                                }))\r\n                            }\r\n                        }\r\n                    }\r\n                    return result\r\n                }\r\n            },\r\n            data: {\r\n                _applyChange: function(change) {\r\n                    if (change && \"updateFocusedRow\" === change.changeType) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _fireChanged: function(e) {\r\n                    this.callBase(e);\r\n                    if (this.option(\"focusedRowEnabled\") && this._dataSource) {\r\n                        var isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\r\n                        var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\r\n                        if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\r\n                            this._updatePageIndexes();\r\n                            this._updateFocusedRow(e)\r\n                        } else if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\r\n                            this._updatePageIndexes()\r\n                        } else if (\"update\" === e.changeType && e.repaintChangesOnly) {\r\n                            this._updateFocusedRow(e)\r\n                        }\r\n                    }\r\n                },\r\n                _updatePageIndexes: function() {\r\n                    var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\r\n                    var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\r\n                    this._lastRenderingPageIndex = renderingPageIndex;\r\n                    this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex\r\n                },\r\n                isPagingByRendering: function() {\r\n                    return this._isPagingByRendering\r\n                },\r\n                _updateFocusedRow: function(e) {\r\n                    var operationTypes = e.operationTypes || {};\r\n                    var focusController = this.getController(\"focus\");\r\n                    var {\r\n                        reload: reload,\r\n                        fullReload: fullReload,\r\n                        pageIndex: pageIndex,\r\n                        paging: paging\r\n                    } = operationTypes;\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var isVirtualScrolling = keyboardController._isVirtualScrolling();\r\n                    var pagingWithoutVirtualScrolling = paging && !isVirtualScrolling;\r\n                    var focusedRowKey = this.option(\"focusedRowKey\");\r\n                    var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();\r\n                    var isReload = reload && false === pageIndex;\r\n                    if (isReload && !fullReload && isDefined(focusedRowKey)) {\r\n                        focusController._navigateToRow(focusedRowKey, true).done((function(focusedRowIndex) {\r\n                            if (focusedRowIndex < 0) {\r\n                                focusController._focusRowByIndex(void 0, operationTypes)\r\n                            }\r\n                        }))\r\n                    } else if (pagingWithoutVirtualScrolling && isAutoNavigate) {\r\n                        var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\r\n                        var focusedRowIndex = this.option(\"focusedRowIndex\");\r\n                        var isValidRowIndexByKey = rowIndexByKey >= 0;\r\n                        var isValidFocusedRowIndex = focusedRowIndex >= 0;\r\n                        var isSameRowIndex = focusedRowIndex === rowIndexByKey;\r\n                        if (isValidFocusedRowIndex && (isSameRowIndex || !isValidRowIndexByKey)) {\r\n                            focusController._focusRowByIndex(focusedRowIndex, operationTypes)\r\n                        }\r\n                    } else if (pagingWithoutVirtualScrolling && !isAutoNavigate && this.getRowIndexByKey(focusedRowKey) < 0) {\r\n                        this.option(\"focusedRowIndex\", -1)\r\n                    } else if (operationTypes.fullReload) {\r\n                        focusController._focusRowByKeyOrIndex()\r\n                    }\r\n                },\r\n                getPageIndexByKey: function(key) {\r\n                    var that = this;\r\n                    var d = new Deferred;\r\n                    that.getGlobalRowIndexByKey(key).done((function(globalIndex) {\r\n                        d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1)\r\n                    })).fail(d.reject);\r\n                    return d.promise()\r\n                },\r\n                getGlobalRowIndexByKey: function(key) {\r\n                    if (this._dataSource.group()) {\r\n                        return this._calculateGlobalRowIndexByGroupedData(key)\r\n                    }\r\n                    return this._calculateGlobalRowIndexByFlatData(key)\r\n                },\r\n                _calculateGlobalRowIndexByFlatData: function(key, groupFilter, useGroup) {\r\n                    var that = this;\r\n                    var deferred = new Deferred;\r\n                    var dataSource = that._dataSource;\r\n                    if (Array.isArray(key)) {\r\n                        return deferred.resolve(-1).promise()\r\n                    }\r\n                    var filter = that._generateFilterByKey(key);\r\n                    dataSource.load({\r\n                        filter: that._concatWithCombinedFilter(filter),\r\n                        skip: 0,\r\n                        take: 1\r\n                    }).done((function(data) {\r\n                        if (data.length > 0) {\r\n                            filter = that._generateOperationFilterByKey(key, data[0], useGroup);\r\n                            dataSource.load({\r\n                                filter: that._concatWithCombinedFilter(filter, groupFilter),\r\n                                skip: 0,\r\n                                take: 1,\r\n                                requireTotalCount: true\r\n                            }).done((function(_, extra) {\r\n                                deferred.resolve(extra.totalCount)\r\n                            }))\r\n                        } else {\r\n                            deferred.resolve(-1)\r\n                        }\r\n                    }));\r\n                    return deferred.promise()\r\n                },\r\n                _concatWithCombinedFilter: function(filter, groupFilter) {\r\n                    var combinedFilter = this.getCombinedFilter();\r\n                    return gridCoreUtils.combineFilters([filter, combinedFilter, groupFilter])\r\n                },\r\n                _generateBooleanFilter: function(selector, value, sortInfo) {\r\n                    var {\r\n                        desc: desc\r\n                    } = sortInfo;\r\n                    switch (true) {\r\n                        case false === value && desc:\r\n                            return [selector, \"=\", true];\r\n                        case false === value && !desc:\r\n                            return [selector, \"=\", null];\r\n                        case true === value && !desc:\r\n                        case !isBoolean(value) && desc:\r\n                            return [selector, \"<>\", value];\r\n                        default:\r\n                            return\r\n                    }\r\n                },\r\n                _generateOperationFilterByKey: function(key, rowData, useGroup) {\r\n                    var that = this;\r\n                    var dateSerializationFormat = that.option(\"dateSerializationFormat\");\r\n                    var isRemoteFiltering = that._dataSource.remoteOperations().filtering;\r\n                    var filter = that._generateFilterByKey(key, \"<\");\r\n                    var sort = that._columnsController.getSortDataSourceParameters(!isRemoteFiltering, true);\r\n                    if (useGroup) {\r\n                        var group = that._columnsController.getGroupDataSourceParameters(!isRemoteFiltering);\r\n                        if (group) {\r\n                            sort = sort ? group.concat(sort) : group\r\n                        }\r\n                    }\r\n                    if (sort) {\r\n                        sort.slice().reverse().forEach((function(sortInfo) {\r\n                            var {\r\n                                selector: selector,\r\n                                desc: desc,\r\n                                compare: compare\r\n                            } = sortInfo;\r\n                            var {\r\n                                getter: getter,\r\n                                rawValue: rawValue,\r\n                                safeValue: safeValue\r\n                            } = UiGridCoreFocusUtils.getSortFilterValue(sortInfo, rowData, {\r\n                                isRemoteFiltering: isRemoteFiltering,\r\n                                dateSerializationFormat: dateSerializationFormat,\r\n                                getSelector: selector => that._columnsController.columnOption(selector, \"selector\")\r\n                            });\r\n                            filter = [\r\n                                [selector, \"=\", safeValue], \"and\", filter\r\n                            ];\r\n                            if (null === rawValue || isBoolean(rawValue)) {\r\n                                var booleanFilter = that._generateBooleanFilter(selector, safeValue, desc);\r\n                                if (booleanFilter) {\r\n                                    filter = [booleanFilter, \"or\", filter]\r\n                                }\r\n                            } else {\r\n                                var filterOperation = desc ? \">\" : \"<\";\r\n                                var sortFilter;\r\n                                if (compare) {\r\n                                    sortFilter = data => {\r\n                                        if (\"<\" === filterOperation) {\r\n                                            return compare(rawValue, getter(data)) >= 1\r\n                                        } else {\r\n                                            return compare(rawValue, getter(data)) <= -1\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    sortFilter = [selector, filterOperation, safeValue];\r\n                                    if (!desc) {\r\n                                        sortFilter = [sortFilter, \"or\", [selector, \"=\", null]]\r\n                                    }\r\n                                }\r\n                                filter = [sortFilter, \"or\", filter]\r\n                            }\r\n                        }))\r\n                    }\r\n                    return filter\r\n                },\r\n                _generateFilterByKey: function(key, operation) {\r\n                    var dataSourceKey = this._dataSource.key();\r\n                    var filter = [];\r\n                    if (!operation) {\r\n                        operation = \"=\"\r\n                    }\r\n                    if (Array.isArray(dataSourceKey)) {\r\n                        for (var i = 0; i < dataSourceKey.length; ++i) {\r\n                            var keyPart = key[dataSourceKey[i]];\r\n                            if (keyPart) {\r\n                                if (filter.length > 0) {\r\n                                    filter.push(\"and\")\r\n                                }\r\n                                filter.push([dataSourceKey[i], operation, keyPart])\r\n                            }\r\n                        }\r\n                    } else {\r\n                        filter = [dataSourceKey, operation, key]\r\n                    }\r\n                    return filter\r\n                },\r\n                _getLastItemIndex: function() {\r\n                    return this.items(true).length - 1\r\n                }\r\n            },\r\n            editing: {\r\n                _deleteRowCore: function(rowIndex) {\r\n                    var deferred = this.callBase.apply(this, arguments);\r\n                    var dataController = this.getController(\"data\");\r\n                    var rowKey = dataController.getKeyByRowIndex(rowIndex);\r\n                    deferred.done(() => {\r\n                        var rowIndex = dataController.getRowIndexByKey(rowKey);\r\n                        var visibleRows = dataController.getVisibleRows();\r\n                        if (-1 === rowIndex && !visibleRows.length) {\r\n                            this.getController(\"focus\")._resetFocusedRow()\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (this.option(\"focusedRowEnabled\") && row) {\r\n                        if (this.getController(\"focus\").isRowFocused(row.key)) {\r\n                            $row.addClass(ROW_FOCUSED_CLASS)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _checkRowKeys: function(options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\r\n                        var store = this._dataController.store();\r\n                        if (store && !store.key()) {\r\n                            this._dataController.fireError(\"E1042\", \"Row focusing\")\r\n                        }\r\n                    }\r\n                },\r\n                _update: function(change) {\r\n                    if (\"updateFocusedRow\" === change.changeType) {\r\n                        if (this.option(\"focusedRowEnabled\")) {\r\n                            this.getController(\"focus\").updateFocusedRow(change)\r\n                        }\r\n                    } else {\r\n                        this.callBase(change)\r\n                    }\r\n                },\r\n                updateFocusElementTabIndex: function($cellElements, preventScroll) {\r\n                    var rowIndex = this.getController(\"keyboardNavigation\").getVisibleRowIndex();\r\n                    var row = this._dataController.getVisibleRows()[rowIndex];\r\n                    if (this.option(\"focusedRowEnabled\") && !(null !== row && void 0 !== row && row.isNewRow)) {\r\n                        this._setFocusedRowElementTabIndex(preventScroll)\r\n                    } else {\r\n                        this.callBase($cellElements)\r\n                    }\r\n                },\r\n                _setFocusedRowElementTabIndex: function(preventScroll) {\r\n                    var focusedRowKey = this.option(\"focusedRowKey\");\r\n                    var tabIndex = this.option(\"tabIndex\") || 0;\r\n                    var dataController = this._dataController;\r\n                    var columnsController = this._columnsController;\r\n                    var rowIndex = dataController.getRowIndexByKey(focusedRowKey);\r\n                    var columnIndex = this.option(\"focusedColumnIndex\");\r\n                    var $row = this._findRowElementForTabIndex();\r\n                    if (!isDefined(this._scrollToFocusOnResize)) {\r\n                        this._scrollToFocusOnResize = () => {\r\n                            this.scrollToElementVertically(this._findRowElementForTabIndex());\r\n                            this.resizeCompleted.remove(this._scrollToFocusOnResize)\r\n                        }\r\n                    }\r\n                    $row.attr(\"tabIndex\", tabIndex);\r\n                    if (rowIndex >= 0 && !preventScroll) {\r\n                        if (columnIndex < 0) {\r\n                            columnIndex = 0\r\n                        }\r\n                        rowIndex += dataController.getRowIndexOffset();\r\n                        columnIndex += columnsController.getColumnIndexOffset();\r\n                        this.getController(\"keyboardNavigation\").setFocusedCellPosition(rowIndex, columnIndex);\r\n                        if (this.getController(\"focus\").isAutoNavigateToFocusedRow()) {\r\n                            var dataSource = dataController.dataSource();\r\n                            var operationTypes = dataSource && dataSource.operationTypes();\r\n                            if (operationTypes && !operationTypes.paging && !dataController.isPagingByRendering()) {\r\n                                this.resizeCompleted.remove(this._scrollToFocusOnResize);\r\n                                this.resizeCompleted.add(this._scrollToFocusOnResize)\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _findRowElementForTabIndex: function() {\r\n                    var focusedRowKey = this.option(\"focusedRowKey\");\r\n                    var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\r\n                    return $(this.getRowElement(rowIndex >= 0 ? rowIndex : 0))\r\n                },\r\n                scrollToRowElement: function(key) {\r\n                    var rowIndex = this.getController(\"data\").getRowIndexByKey(key);\r\n                    var $row = $(this.getRow(rowIndex));\r\n                    return this.scrollToElementVertically($row)\r\n                },\r\n                scrollToElementVertically: function($row) {\r\n                    var scrollable = this.getScrollable();\r\n                    if (scrollable && $row.length) {\r\n                        var position = scrollable.getScrollElementPosition($row, \"vertical\");\r\n                        return this.scrollTopPosition(position)\r\n                    }\r\n                    return (new Deferred).resolve()\r\n                },\r\n                scrollTopPosition: function(scrollTop) {\r\n                    var d = new Deferred;\r\n                    var scrollable = this.getScrollable();\r\n                    if (scrollable) {\r\n                        var currentScrollTop = scrollable.scrollTop();\r\n                        var scrollHandler = () => {\r\n                            scrollable.off(\"scroll\", scrollHandler);\r\n                            d.resolve()\r\n                        };\r\n                        if (scrollTop !== currentScrollTop) {\r\n                            scrollable.on(\"scroll\", scrollHandler);\r\n                            this._dataController.resetFilterApplying();\r\n                            scrollable.scrollTo({\r\n                                top: scrollTop\r\n                            });\r\n                            return d.promise()\r\n                        }\r\n                    }\r\n                    return d.resolve()\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}