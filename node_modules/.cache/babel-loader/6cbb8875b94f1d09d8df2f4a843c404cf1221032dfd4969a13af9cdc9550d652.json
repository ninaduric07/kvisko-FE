{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_form_based.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport Button from \"../button\";\nimport devices from \"../../core/devices\";\nimport Form from \"../form\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { isElementInDom } from \"../../core/utils/dom\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport Popup from \"../popup/ui.popup\";\nimport { EDIT_MODE_FORM, EDIT_MODE_POPUP, FOCUSABLE_ELEMENT_SELECTOR, EDITING_EDITROWKEY_OPTION_NAME, EDITING_POPUP_OPTION_NAME, DATA_EDIT_DATA_INSERT_TYPE, EDITING_FORM_OPTION_NAME } from \"./ui.grid_core.editing_constants\";\nvar isRenovatedScrollable = !!Scrollable.IS_RENOVATED_WIDGET;\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nvar EDIT_POPUP_CLASS = \"edit-popup\";\nvar EDIT_POPUP_FORM_CLASS = \"edit-popup-form\";\nvar FOCUSABLE_ELEMENT_CLASS = isRenovatedScrollable ? \"dx-scrollable\" : \"dx-scrollable-container\";\nvar BUTTON_CLASS = \"dx-button\";\nvar FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\";\nvar getEditorType = item => {\n  var _column$formItem;\n  var column = item.column;\n  return item.isCustomEditorType ? item.editorType : null === (_column$formItem = column.formItem) || void 0 === _column$formItem ? void 0 : _column$formItem.editorType;\n};\nvar forEachFormItems = (items, callBack) => {\n  items.forEach(item => {\n    if (item.items || item.tabs) {\n      forEachFormItems(item.items || item.tabs, callBack);\n    } else {\n      callBack(item);\n    }\n  });\n};\nexport var editingFormBasedModule = {\n  extenders: {\n    controllers: {\n      editing: {\n        init: function () {\n          this._editForm = null;\n          this._updateEditFormDeferred = null;\n          this.callBase.apply(this, arguments);\n        },\n        isFormOrPopupEditMode: function () {\n          return this.isPopupEditMode() || this.isFormEditMode();\n        },\n        isPopupEditMode: function () {\n          var editMode = this.option(\"editing.mode\");\n          return editMode === EDIT_MODE_POPUP;\n        },\n        isFormEditMode: function () {\n          var editMode = this.option(\"editing.mode\");\n          return editMode === EDIT_MODE_FORM;\n        },\n        getFirstEditableColumnIndex: function () {\n          var firstFormItem = this._firstFormItem;\n          if (this.isFormEditMode() && firstFormItem) {\n            var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n            var editRowIndex = this._dataController.getRowIndexByKey(editRowKey);\n            var $editFormElements = this._rowsView.getCellElements(editRowIndex);\n            return this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column);\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        getEditFormRowIndex: function () {\n          return this.isFormOrPopupEditMode() ? this._getVisibleEditRowIndex() : this.callBase.apply(this, arguments);\n        },\n        _isEditColumnVisible: function () {\n          var result = this.callBase.apply(this, arguments);\n          var editingOptions = this.option(\"editing\");\n          return this.isFormOrPopupEditMode() ? editingOptions.allowUpdating || result : result;\n        },\n        _handleDataChanged: function (args) {\n          if (this.isPopupEditMode()) {\n            var _args$items, _args$changeTypes;\n            var editRowKey = this.option(\"editing.editRowKey\");\n            var hasEditRow = null === args || void 0 === args ? void 0 : null === (_args$items = args.items) || void 0 === _args$items ? void 0 : _args$items.some(item => equalByValue(item.key, editRowKey));\n            var onlyInsertChanges = (null === (_args$changeTypes = args.changeTypes) || void 0 === _args$changeTypes ? void 0 : _args$changeTypes.length) && args.changeTypes.every(item => \"insert\" === item);\n            if ((\"refresh\" === args.changeType || hasEditRow && args.isOptionChanged) && !onlyInsertChanges) {\n              this._repaintEditPopup();\n            }\n          }\n          this.callBase.apply(this, arguments);\n        },\n        getPopupContent: function () {\n          var _this$_editPopup;\n          var popupVisible = null === (_this$_editPopup = this._editPopup) || void 0 === _this$_editPopup ? void 0 : _this$_editPopup.option(\"visible\");\n          if (this.isPopupEditMode() && popupVisible) {\n            return this._$popupContent;\n          }\n        },\n        _showAddedRow: function (rowIndex) {\n          if (this.isPopupEditMode()) {\n            this._showEditPopup(rowIndex);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cancelEditDataCore: function () {\n          this.callBase.apply(this, arguments);\n          if (this.isPopupEditMode()) {\n            this._hideEditPopup();\n          }\n        },\n        _updateEditRowCore: function (row, skipCurrentRow, isCustomSetCellValue) {\n          var editForm = this._editForm;\n          if (this.isPopupEditMode()) {\n            if (this.option(\"repaintChangesOnly\")) {\n              var _row$update;\n              null === (_row$update = row.update) || void 0 === _row$update ? void 0 : _row$update.call(row, row);\n              this._rowsView.renderDelayedTemplates();\n            } else if (editForm) {\n              this._updateEditFormDeferred = new Deferred().done(() => editForm.repaint());\n              if (!this._updateLockCount) {\n                this._updateEditFormDeferred.resolve();\n              }\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _showEditPopup: function (rowIndex, repaintForm) {\n          var isMobileDevice = \"desktop\" !== devices.current().deviceType;\n          var editPopupClass = this.addWidgetPrefix(EDIT_POPUP_CLASS);\n          var popupOptions = extend({\n            showTitle: false,\n            fullScreen: isMobileDevice,\n            wrapperAttr: {\n              class: editPopupClass\n            },\n            toolbarItems: [{\n              toolbar: \"bottom\",\n              location: \"after\",\n              widget: \"dxButton\",\n              options: this._getSaveButtonConfig()\n            }, {\n              toolbar: \"bottom\",\n              location: \"after\",\n              widget: \"dxButton\",\n              options: this._getCancelButtonConfig()\n            }],\n            contentTemplate: this._getPopupEditFormTemplate(rowIndex)\n          }, this.option(EDITING_POPUP_OPTION_NAME));\n          if (!this._editPopup) {\n            var $popupContainer = $(\"<div>\").appendTo(this.component.$element()).addClass(editPopupClass);\n            this._editPopup = this._createComponent($popupContainer, Popup);\n            this._editPopup.on(\"hiding\", this._getEditPopupHiddenHandler());\n            this._editPopup.on(\"shown\", e => {\n              eventsEngine.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\".concat(FOCUSABLE_ELEMENT_CLASS)).first(), \"focus\");\n              if (repaintForm) {\n                var _this$_editForm;\n                null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.repaint();\n              }\n            });\n          }\n          this._editPopup.option(popupOptions);\n          this._editPopup.show();\n          this.callBase.apply(this, arguments);\n        },\n        _getPopupEditFormTemplate: function (rowIndex) {\n          var row = this.component.getVisibleRows()[rowIndex];\n          var templateOptions = {\n            row: row,\n            values: row.values,\n            rowType: row.rowType,\n            key: row.key,\n            rowIndex: rowIndex\n          };\n          this._rowsView._addWatchMethod(templateOptions, row);\n          return container => {\n            var formTemplate = this.getEditFormTemplate();\n            var scrollable = this._createComponent($(\"<div>\").appendTo(container), Scrollable);\n            this._$popupContent = $(scrollable.content());\n            formTemplate(this._$popupContent, templateOptions, {\n              isPopupForm: true\n            });\n            this._rowsView.renderDelayedTemplates();\n          };\n        },\n        _repaintEditPopup: function () {\n          var rowIndex = this._getVisibleEditRowIndex();\n          if (rowIndex >= 0) {\n            var _this$_editPopup2, _this$_editPopup3;\n            var defaultAnimation = null === (_this$_editPopup2 = this._editPopup) || void 0 === _this$_editPopup2 ? void 0 : _this$_editPopup2.option(\"animation\");\n            null === (_this$_editPopup3 = this._editPopup) || void 0 === _this$_editPopup3 ? void 0 : _this$_editPopup3.option(\"animation\", null);\n            this._showEditPopup(rowIndex, true);\n            if (void 0 !== defaultAnimation) {\n              this._editPopup.option(\"animation\", defaultAnimation);\n            }\n          }\n        },\n        _hideEditPopup: function () {\n          var _this$_editPopup4;\n          null === (_this$_editPopup4 = this._editPopup) || void 0 === _this$_editPopup4 ? void 0 : _this$_editPopup4.option(\"visible\", false);\n        },\n        optionChanged: function (args) {\n          if (\"editing\" === args.name && this.isFormOrPopupEditMode()) {\n            var fullName = args.fullName;\n            if (0 === fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\n              this._handleFormOptionChange(args);\n              args.handled = true;\n            } else if (0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\n              this._handlePopupOptionChange(args);\n              args.handled = true;\n            }\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _handleFormOptionChange: function (args) {\n          var _this$_editPopup5;\n          if (this.isFormEditMode()) {\n            var editRowIndex = this._getVisibleEditRowIndex();\n            if (editRowIndex >= 0) {\n              this._dataController.updateItems({\n                changeType: \"update\",\n                rowIndices: [editRowIndex]\n              });\n            }\n          } else if (null !== (_this$_editPopup5 = this._editPopup) && void 0 !== _this$_editPopup5 && _this$_editPopup5.option(\"visible\") && 0 === args.fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\n            this._repaintEditPopup();\n          }\n        },\n        _handlePopupOptionChange: function (args) {\n          var editPopup = this._editPopup;\n          if (editPopup) {\n            var popupOptionName = args.fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\n            if (popupOptionName) {\n              editPopup.option(popupOptionName, args.value);\n            } else {\n              editPopup.option(args.value);\n            }\n          }\n        },\n        renderFormEditorTemplate: function (detailCellOptions, item, formTemplateOptions, container, isReadOnly) {\n          var that = this;\n          var $container = $(container);\n          var column = item.column;\n          var editorType = getEditorType(item);\n          var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;\n          var form = formTemplateOptions.component;\n          var {\n            label: label,\n            labelMark: labelMark,\n            labelMode: labelMode\n          } = formTemplateOptions.editorOptions || {};\n          var cellOptions = extend({}, detailCellOptions, {\n            data: rowData,\n            cellElement: null,\n            isOnForm: true,\n            item: item,\n            id: form.getItemID(item.name || item.dataField),\n            column: extend({}, column, {\n              editorType: editorType,\n              editorOptions: extend({\n                label: label,\n                labelMark: labelMark,\n                labelMode: labelMode\n              }, column.editorOptions, item.editorOptions)\n            }),\n            columnIndex: column.index,\n            setValue: !isReadOnly && column.allowEditing && function (value, text) {\n              that.updateFieldValue(cellOptions, value, text);\n            }\n          });\n          cellOptions.value = column.calculateCellValue(rowData);\n          var template = this._getFormEditItemTemplate.bind(this)(cellOptions, column);\n          this._rowsView.renderTemplate($container, template, cellOptions, !!isElementInDom($container)).done(() => {\n            this._rowsView._updateCell($container, cellOptions);\n          });\n          return cellOptions;\n        },\n        getFormEditorTemplate: function (cellOptions, item) {\n          var column = this.component.columnOption(item.dataField);\n          return (options, container) => {\n            var _cellOptions$row$watc, _cellOptions$row;\n            var $container = $(container);\n            null === (_cellOptions$row$watc = (_cellOptions$row = cellOptions.row).watch) || void 0 === _cellOptions$row$watc ? void 0 : _cellOptions$row$watc.call(_cellOptions$row, function () {\n              return column.selector(cellOptions.row.data);\n            }, () => {\n              var _validator;\n              var $editorElement = $container.find(\".dx-widget\").first();\n              var validator = $editorElement.data(\"dxValidator\");\n              var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\n              $container.contents().remove();\n              cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options, $container);\n              $editorElement = $container.find(\".dx-widget\").first();\n              validator = $editorElement.data(\"dxValidator\");\n              if (validatorOptions && !validator) {\n                $editorElement.dxValidator({\n                  validationRules: validatorOptions.validationRules,\n                  validationGroup: validatorOptions.validationGroup,\n                  dataGetter: validatorOptions.dataGetter\n                });\n              }\n            });\n            cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options, $container);\n          };\n        },\n        getEditFormOptions: function (detailOptions) {\n          var _this$_getValidationG;\n          var editFormOptions = null === (_this$_getValidationG = this._getValidationGroupsInForm) || void 0 === _this$_getValidationG ? void 0 : _this$_getValidationG.call(this, detailOptions);\n          var userCustomizeItem = this.option(\"editing.form.customizeItem\");\n          var editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\n          var items = this.option(\"editing.form.items\");\n          var isCustomEditorType = {};\n          if (!items) {\n            var columns = this.getController(\"columns\").getColumns();\n            items = [];\n            each(columns, function (_, column) {\n              if (!column.isBand && !column.type) {\n                items.push({\n                  column: column,\n                  name: column.name,\n                  dataField: column.dataField\n                });\n              }\n            });\n          } else {\n            forEachFormItems(items, item => {\n              var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\n              if (itemId) {\n                isCustomEditorType[itemId] = !!item.editorType;\n              }\n            });\n          }\n          return extend({}, editFormOptions, {\n            items: items,\n            formID: \"dx-\" + new Guid(),\n            customizeItem: item => {\n              var column;\n              var itemId = item.name || item.dataField;\n              if (item.column || itemId) {\n                column = item.column || this._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField);\n              }\n              if (column) {\n                item.label = item.label || {};\n                item.label.text = item.label.text || column.caption;\n                if (\"boolean\" === column.dataType && void 0 === item.label.visible) {\n                  var labelMode = this.option(\"editing.form.labelMode\");\n                  if (\"floating\" === labelMode || \"static\" === labelMode) {\n                    item.label.visible = true;\n                  }\n                }\n                item.template = item.template || this.getFormEditorTemplate(detailOptions, item);\n                item.column = column;\n                item.isCustomEditorType = isCustomEditorType[itemId];\n                if (column.formItem) {\n                  extend(item, column.formItem);\n                }\n                if (void 0 === item.isRequired && column.validationRules) {\n                  item.isRequired = column.validationRules.some(function (rule) {\n                    return \"required\" === rule.type;\n                  });\n                  item.validationRules = [];\n                }\n                var itemVisible = isDefined(item.visible) ? item.visible : true;\n                if (!this._firstFormItem && itemVisible) {\n                  this._firstFormItem = item;\n                }\n              }\n              null === userCustomizeItem || void 0 === userCustomizeItem ? void 0 : userCustomizeItem.call(this, item);\n              item.cssClass = isString(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass;\n            }\n          });\n        },\n        getEditFormTemplate: function () {\n          return ($container, detailOptions, options) => {\n            var editFormOptions = this.option(EDITING_FORM_OPTION_NAME);\n            var baseEditFormOptions = this.getEditFormOptions(detailOptions);\n            var $formContainer = $(\"<div>\").appendTo($container);\n            var isPopupForm = null === options || void 0 === options ? void 0 : options.isPopupForm;\n            this._firstFormItem = void 0;\n            if (isPopupForm) {\n              $formContainer.addClass(this.addWidgetPrefix(EDIT_POPUP_FORM_CLASS));\n            }\n            this._editForm = this._createComponent($formContainer, Form, extend({}, editFormOptions, baseEditFormOptions));\n            if (!isPopupForm) {\n              var $buttonsContainer = $(\"<div>\").addClass(this.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\n              this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getSaveButtonConfig());\n              this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getCancelButtonConfig());\n            }\n            this._editForm.on(\"contentReady\", () => {\n              var _this$_editPopup6;\n              this._rowsView.renderDelayedTemplates();\n              null === (_this$_editPopup6 = this._editPopup) || void 0 === _this$_editPopup6 ? void 0 : _this$_editPopup6.repaint();\n            });\n          };\n        },\n        getEditForm: function () {\n          return this._editForm;\n        },\n        _endUpdateCore: function () {\n          var _this$_updateEditForm;\n          null === (_this$_updateEditForm = this._updateEditFormDeferred) || void 0 === _this$_updateEditForm ? void 0 : _this$_updateEditForm.resolve();\n        },\n        _beforeEndSaving: function () {\n          this.callBase.apply(this, arguments);\n          if (this.isPopupEditMode()) {\n            var _this$_editPopup7;\n            null === (_this$_editPopup7 = this._editPopup) || void 0 === _this$_editPopup7 ? void 0 : _this$_editPopup7.hide();\n          }\n        },\n        _processDataItemCore: function (item, _ref) {\n          var {\n            type: type\n          } = _ref;\n          if (this.isPopupEditMode() && type === DATA_EDIT_DATA_INSERT_TYPE) {\n            item.visible = false;\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _editRowFromOptionChangedCore: function (rowIndices, rowIndex) {\n          var isPopupEditMode = this.isPopupEditMode();\n          this.callBase(rowIndices, rowIndex, isPopupEditMode);\n          if (isPopupEditMode) {\n            this._showEditPopup(rowIndex);\n          }\n        }\n      },\n      data: {\n        _updateEditItem: function (item) {\n          if (this._editingController.isFormEditMode()) {\n            item.rowType = \"detail\";\n          }\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          if (false === isLiveUpdate && newItem.isEditing && this._editingController.isFormEditMode()) {\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _renderCellContent: function ($cell, options) {\n          if (\"data\" === options.rowType && this._editingController.isPopupEditMode() && false === options.row.visible) {\n            return;\n          }\n          this.callBase.apply(this, arguments);\n        },\n        getCellElements: function (rowIndex) {\n          var $cellElements = this.callBase(rowIndex);\n          var editingController = this._editingController;\n          var editForm = editingController.getEditForm();\n          var editFormRowIndex = editingController.getEditFormRowIndex();\n          if (editFormRowIndex === rowIndex && $cellElements && editForm) {\n            return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS);\n          }\n          return $cellElements;\n        },\n        _getVisibleColumnIndex: function ($cells, rowIndex, columnIdentifier) {\n          var editFormRowIndex = this._editingController.getEditFormRowIndex();\n          if (editFormRowIndex === rowIndex && isString(columnIdentifier)) {\n            var column = this._columnsController.columnOption(columnIdentifier);\n            return this._getEditFormEditorVisibleIndex($cells, column);\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _getEditFormEditorVisibleIndex: function ($cells, column) {\n          var visibleIndex = -1;\n          each($cells, function (index, cellElement) {\n            var item = $(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\n            if (null !== item && void 0 !== item && item.column && column && item.column.index === column.index) {\n              visibleIndex = index;\n              return false;\n            }\n          });\n          return visibleIndex;\n        },\n        _isFormItem: function (parameters) {\n          var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\n          var isPopupEditing = \"data\" === parameters.rowType && this._editingController.isPopupEditMode();\n          return (isDetailRow || isPopupEditing) && parameters.item;\n        },\n        _updateCell: function ($cell, parameters) {\n          if (this._isFormItem(parameters)) {\n            this._formItemPrepared(parameters, $cell);\n          } else {\n            this.callBase($cell, parameters);\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["$","eventsEngine","Guid","isDefined","isString","each","extend","Button","devices","Form","Deferred","equalByValue","isElementInDom","Scrollable","Popup","EDIT_MODE_FORM","EDIT_MODE_POPUP","FOCUSABLE_ELEMENT_SELECTOR","EDITING_EDITROWKEY_OPTION_NAME","EDITING_POPUP_OPTION_NAME","DATA_EDIT_DATA_INSERT_TYPE","EDITING_FORM_OPTION_NAME","isRenovatedScrollable","IS_RENOVATED_WIDGET","EDIT_FORM_ITEM_CLASS","EDIT_POPUP_CLASS","EDIT_POPUP_FORM_CLASS","FOCUSABLE_ELEMENT_CLASS","BUTTON_CLASS","FORM_BUTTONS_CONTAINER_CLASS","getEditorType","item","_column$formItem","column","isCustomEditorType","editorType","formItem","forEachFormItems","items","callBack","forEach","tabs","editingFormBasedModule","extenders","controllers","editing","init","_editForm","_updateEditFormDeferred","callBase","apply","arguments","isFormOrPopupEditMode","isPopupEditMode","isFormEditMode","editMode","option","getFirstEditableColumnIndex","firstFormItem","_firstFormItem","editRowKey","editRowIndex","_dataController","getRowIndexByKey","$editFormElements","_rowsView","getCellElements","_getEditFormEditorVisibleIndex","getEditFormRowIndex","_getVisibleEditRowIndex","_isEditColumnVisible","result","editingOptions","allowUpdating","_handleDataChanged","args","_args$items","_args$changeTypes","hasEditRow","some","key","onlyInsertChanges","changeTypes","length","every","changeType","isOptionChanged","_repaintEditPopup","getPopupContent","_this$_editPopup","popupVisible","_editPopup","_$popupContent","_showAddedRow","rowIndex","_showEditPopup","_cancelEditDataCore","_hideEditPopup","_updateEditRowCore","row","skipCurrentRow","isCustomSetCellValue","editForm","_row$update","update","call","renderDelayedTemplates","done","repaint","_updateLockCount","resolve","repaintForm","isMobileDevice","current","deviceType","editPopupClass","addWidgetPrefix","popupOptions","showTitle","fullScreen","wrapperAttr","class","toolbarItems","toolbar","location","widget","options","_getSaveButtonConfig","_getCancelButtonConfig","contentTemplate","_getPopupEditFormTemplate","$popupContainer","appendTo","component","$element","addClass","_createComponent","on","_getEditPopupHiddenHandler","e","trigger","$content","find","not","concat","first","_this$_editForm","show","getVisibleRows","templateOptions","values","rowType","_addWatchMethod","container","formTemplate","getEditFormTemplate","scrollable","content","isPopupForm","_this$_editPopup2","_this$_editPopup3","defaultAnimation","_this$_editPopup4","optionChanged","name","fullName","indexOf","_handleFormOptionChange","handled","_handlePopupOptionChange","_this$_editPopup5","updateItems","rowIndices","editPopup","popupOptionName","slice","value","renderFormEditorTemplate","detailCellOptions","formTemplateOptions","isReadOnly","that","$container","rowData","data","form","label","labelMark","labelMode","editorOptions","cellOptions","cellElement","isOnForm","id","getItemID","dataField","columnIndex","index","setValue","allowEditing","text","updateFieldValue","calculateCellValue","template","_getFormEditItemTemplate","bind","renderTemplate","_updateCell","getFormEditorTemplate","columnOption","_cellOptions$row$watc","_cellOptions$row","watch","selector","_validator","$editorElement","validator","validatorOptions","contents","remove","dxValidator","validationRules","validationGroup","dataGetter","getEditFormOptions","detailOptions","_this$_getValidationG","editFormOptions","_getValidationGroupsInForm","userCustomizeItem","editFormItemClass","columns","getController","getColumns","_","isBand","type","push","itemId","formID","customizeItem","_columnsController","caption","dataType","visible","isRequired","rule","itemVisible","cssClass","baseEditFormOptions","$formContainer","$buttonsContainer","_this$_editPopup6","getEditForm","_endUpdateCore","_this$_updateEditForm","_beforeEndSaving","_this$_editPopup7","hide","_processDataItemCore","_ref","_editRowFromOptionChangedCore","_updateEditItem","_editingController","_getChangedColumnIndices","oldItem","newItem","visibleRowIndex","isLiveUpdate","isEditing","views","rowsView","_renderCellContent","$cell","$cellElements","editingController","editFormRowIndex","_getVisibleColumnIndex","$cells","columnIdentifier","visibleIndex","_isFormItem","parameters","isDetailRow","isPopupEditing","_formItemPrepared"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_form_based.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_form_based.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport Button from \"../button\";\r\nimport devices from \"../../core/devices\";\r\nimport Form from \"../form\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../core/utils/dom\";\r\nimport Scrollable from \"../scroll_view/ui.scrollable\";\r\nimport Popup from \"../popup/ui.popup\";\r\nimport {\r\n    EDIT_MODE_FORM,\r\n    EDIT_MODE_POPUP,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITING_POPUP_OPTION_NAME,\r\n    DATA_EDIT_DATA_INSERT_TYPE,\r\n    EDITING_FORM_OPTION_NAME\r\n} from \"./ui.grid_core.editing_constants\";\r\nvar isRenovatedScrollable = !!Scrollable.IS_RENOVATED_WIDGET;\r\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\r\nvar EDIT_POPUP_CLASS = \"edit-popup\";\r\nvar EDIT_POPUP_FORM_CLASS = \"edit-popup-form\";\r\nvar FOCUSABLE_ELEMENT_CLASS = isRenovatedScrollable ? \"dx-scrollable\" : \"dx-scrollable-container\";\r\nvar BUTTON_CLASS = \"dx-button\";\r\nvar FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\";\r\nvar getEditorType = item => {\r\n    var _column$formItem;\r\n    var column = item.column;\r\n    return item.isCustomEditorType ? item.editorType : null === (_column$formItem = column.formItem) || void 0 === _column$formItem ? void 0 : _column$formItem.editorType\r\n};\r\nvar forEachFormItems = (items, callBack) => {\r\n    items.forEach(item => {\r\n        if (item.items || item.tabs) {\r\n            forEachFormItems(item.items || item.tabs, callBack)\r\n        } else {\r\n            callBack(item)\r\n        }\r\n    })\r\n};\r\nexport var editingFormBasedModule = {\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                init: function() {\r\n                    this._editForm = null;\r\n                    this._updateEditFormDeferred = null;\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                isFormOrPopupEditMode: function() {\r\n                    return this.isPopupEditMode() || this.isFormEditMode()\r\n                },\r\n                isPopupEditMode: function() {\r\n                    var editMode = this.option(\"editing.mode\");\r\n                    return editMode === EDIT_MODE_POPUP\r\n                },\r\n                isFormEditMode: function() {\r\n                    var editMode = this.option(\"editing.mode\");\r\n                    return editMode === EDIT_MODE_FORM\r\n                },\r\n                getFirstEditableColumnIndex: function() {\r\n                    var firstFormItem = this._firstFormItem;\r\n                    if (this.isFormEditMode() && firstFormItem) {\r\n                        var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n                        var editRowIndex = this._dataController.getRowIndexByKey(editRowKey);\r\n                        var $editFormElements = this._rowsView.getCellElements(editRowIndex);\r\n                        return this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                getEditFormRowIndex: function() {\r\n                    return this.isFormOrPopupEditMode() ? this._getVisibleEditRowIndex() : this.callBase.apply(this, arguments)\r\n                },\r\n                _isEditColumnVisible: function() {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var editingOptions = this.option(\"editing\");\r\n                    return this.isFormOrPopupEditMode() ? editingOptions.allowUpdating || result : result\r\n                },\r\n                _handleDataChanged: function(args) {\r\n                    if (this.isPopupEditMode()) {\r\n                        var _args$items, _args$changeTypes;\r\n                        var editRowKey = this.option(\"editing.editRowKey\");\r\n                        var hasEditRow = null === args || void 0 === args ? void 0 : null === (_args$items = args.items) || void 0 === _args$items ? void 0 : _args$items.some(item => equalByValue(item.key, editRowKey));\r\n                        var onlyInsertChanges = (null === (_args$changeTypes = args.changeTypes) || void 0 === _args$changeTypes ? void 0 : _args$changeTypes.length) && args.changeTypes.every(item => \"insert\" === item);\r\n                        if ((\"refresh\" === args.changeType || hasEditRow && args.isOptionChanged) && !onlyInsertChanges) {\r\n                            this._repaintEditPopup()\r\n                        }\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                getPopupContent: function() {\r\n                    var _this$_editPopup;\r\n                    var popupVisible = null === (_this$_editPopup = this._editPopup) || void 0 === _this$_editPopup ? void 0 : _this$_editPopup.option(\"visible\");\r\n                    if (this.isPopupEditMode() && popupVisible) {\r\n                        return this._$popupContent\r\n                    }\r\n                },\r\n                _showAddedRow: function(rowIndex) {\r\n                    if (this.isPopupEditMode()) {\r\n                        this._showEditPopup(rowIndex)\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _cancelEditDataCore: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this.isPopupEditMode()) {\r\n                        this._hideEditPopup()\r\n                    }\r\n                },\r\n                _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n                    var editForm = this._editForm;\r\n                    if (this.isPopupEditMode()) {\r\n                        if (this.option(\"repaintChangesOnly\")) {\r\n                            var _row$update;\r\n                            null === (_row$update = row.update) || void 0 === _row$update ? void 0 : _row$update.call(row, row);\r\n                            this._rowsView.renderDelayedTemplates()\r\n                        } else if (editForm) {\r\n                            this._updateEditFormDeferred = (new Deferred).done(() => editForm.repaint());\r\n                            if (!this._updateLockCount) {\r\n                                this._updateEditFormDeferred.resolve()\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _showEditPopup: function(rowIndex, repaintForm) {\r\n                    var isMobileDevice = \"desktop\" !== devices.current().deviceType;\r\n                    var editPopupClass = this.addWidgetPrefix(EDIT_POPUP_CLASS);\r\n                    var popupOptions = extend({\r\n                        showTitle: false,\r\n                        fullScreen: isMobileDevice,\r\n                        wrapperAttr: {\r\n                            class: editPopupClass\r\n                        },\r\n                        toolbarItems: [{\r\n                            toolbar: \"bottom\",\r\n                            location: \"after\",\r\n                            widget: \"dxButton\",\r\n                            options: this._getSaveButtonConfig()\r\n                        }, {\r\n                            toolbar: \"bottom\",\r\n                            location: \"after\",\r\n                            widget: \"dxButton\",\r\n                            options: this._getCancelButtonConfig()\r\n                        }],\r\n                        contentTemplate: this._getPopupEditFormTemplate(rowIndex)\r\n                    }, this.option(EDITING_POPUP_OPTION_NAME));\r\n                    if (!this._editPopup) {\r\n                        var $popupContainer = $(\"<div>\").appendTo(this.component.$element()).addClass(editPopupClass);\r\n                        this._editPopup = this._createComponent($popupContainer, Popup);\r\n                        this._editPopup.on(\"hiding\", this._getEditPopupHiddenHandler());\r\n                        this._editPopup.on(\"shown\", e => {\r\n                            eventsEngine.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\".concat(FOCUSABLE_ELEMENT_CLASS)).first(), \"focus\");\r\n                            if (repaintForm) {\r\n                                var _this$_editForm;\r\n                                null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.repaint()\r\n                            }\r\n                        })\r\n                    }\r\n                    this._editPopup.option(popupOptions);\r\n                    this._editPopup.show();\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _getPopupEditFormTemplate: function(rowIndex) {\r\n                    var row = this.component.getVisibleRows()[rowIndex];\r\n                    var templateOptions = {\r\n                        row: row,\r\n                        values: row.values,\r\n                        rowType: row.rowType,\r\n                        key: row.key,\r\n                        rowIndex: rowIndex\r\n                    };\r\n                    this._rowsView._addWatchMethod(templateOptions, row);\r\n                    return container => {\r\n                        var formTemplate = this.getEditFormTemplate();\r\n                        var scrollable = this._createComponent($(\"<div>\").appendTo(container), Scrollable);\r\n                        this._$popupContent = $(scrollable.content());\r\n                        formTemplate(this._$popupContent, templateOptions, {\r\n                            isPopupForm: true\r\n                        });\r\n                        this._rowsView.renderDelayedTemplates()\r\n                    }\r\n                },\r\n                _repaintEditPopup: function() {\r\n                    var rowIndex = this._getVisibleEditRowIndex();\r\n                    if (rowIndex >= 0) {\r\n                        var _this$_editPopup2, _this$_editPopup3;\r\n                        var defaultAnimation = null === (_this$_editPopup2 = this._editPopup) || void 0 === _this$_editPopup2 ? void 0 : _this$_editPopup2.option(\"animation\");\r\n                        null === (_this$_editPopup3 = this._editPopup) || void 0 === _this$_editPopup3 ? void 0 : _this$_editPopup3.option(\"animation\", null);\r\n                        this._showEditPopup(rowIndex, true);\r\n                        if (void 0 !== defaultAnimation) {\r\n                            this._editPopup.option(\"animation\", defaultAnimation)\r\n                        }\r\n                    }\r\n                },\r\n                _hideEditPopup: function() {\r\n                    var _this$_editPopup4;\r\n                    null === (_this$_editPopup4 = this._editPopup) || void 0 === _this$_editPopup4 ? void 0 : _this$_editPopup4.option(\"visible\", false)\r\n                },\r\n                optionChanged: function(args) {\r\n                    if (\"editing\" === args.name && this.isFormOrPopupEditMode()) {\r\n                        var fullName = args.fullName;\r\n                        if (0 === fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\r\n                            this._handleFormOptionChange(args);\r\n                            args.handled = true\r\n                        } else if (0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\r\n                            this._handlePopupOptionChange(args);\r\n                            args.handled = true\r\n                        }\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _handleFormOptionChange: function(args) {\r\n                    var _this$_editPopup5;\r\n                    if (this.isFormEditMode()) {\r\n                        var editRowIndex = this._getVisibleEditRowIndex();\r\n                        if (editRowIndex >= 0) {\r\n                            this._dataController.updateItems({\r\n                                changeType: \"update\",\r\n                                rowIndices: [editRowIndex]\r\n                            })\r\n                        }\r\n                    } else if (null !== (_this$_editPopup5 = this._editPopup) && void 0 !== _this$_editPopup5 && _this$_editPopup5.option(\"visible\") && 0 === args.fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\r\n                        this._repaintEditPopup()\r\n                    }\r\n                },\r\n                _handlePopupOptionChange: function(args) {\r\n                    var editPopup = this._editPopup;\r\n                    if (editPopup) {\r\n                        var popupOptionName = args.fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\r\n                        if (popupOptionName) {\r\n                            editPopup.option(popupOptionName, args.value)\r\n                        } else {\r\n                            editPopup.option(args.value)\r\n                        }\r\n                    }\r\n                },\r\n                renderFormEditorTemplate: function(detailCellOptions, item, formTemplateOptions, container, isReadOnly) {\r\n                    var that = this;\r\n                    var $container = $(container);\r\n                    var column = item.column;\r\n                    var editorType = getEditorType(item);\r\n                    var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;\r\n                    var form = formTemplateOptions.component;\r\n                    var {\r\n                        label: label,\r\n                        labelMark: labelMark,\r\n                        labelMode: labelMode\r\n                    } = formTemplateOptions.editorOptions || {};\r\n                    var cellOptions = extend({}, detailCellOptions, {\r\n                        data: rowData,\r\n                        cellElement: null,\r\n                        isOnForm: true,\r\n                        item: item,\r\n                        id: form.getItemID(item.name || item.dataField),\r\n                        column: extend({}, column, {\r\n                            editorType: editorType,\r\n                            editorOptions: extend({\r\n                                label: label,\r\n                                labelMark: labelMark,\r\n                                labelMode: labelMode\r\n                            }, column.editorOptions, item.editorOptions)\r\n                        }),\r\n                        columnIndex: column.index,\r\n                        setValue: !isReadOnly && column.allowEditing && function(value, text) {\r\n                            that.updateFieldValue(cellOptions, value, text)\r\n                        }\r\n                    });\r\n                    cellOptions.value = column.calculateCellValue(rowData);\r\n                    var template = this._getFormEditItemTemplate.bind(this)(cellOptions, column);\r\n                    this._rowsView.renderTemplate($container, template, cellOptions, !!isElementInDom($container)).done(() => {\r\n                        this._rowsView._updateCell($container, cellOptions)\r\n                    });\r\n                    return cellOptions\r\n                },\r\n                getFormEditorTemplate: function(cellOptions, item) {\r\n                    var column = this.component.columnOption(item.dataField);\r\n                    return (options, container) => {\r\n                        var _cellOptions$row$watc, _cellOptions$row;\r\n                        var $container = $(container);\r\n                        null === (_cellOptions$row$watc = (_cellOptions$row = cellOptions.row).watch) || void 0 === _cellOptions$row$watc ? void 0 : _cellOptions$row$watc.call(_cellOptions$row, (function() {\r\n                            return column.selector(cellOptions.row.data)\r\n                        }), () => {\r\n                            var _validator;\r\n                            var $editorElement = $container.find(\".dx-widget\").first();\r\n                            var validator = $editorElement.data(\"dxValidator\");\r\n                            var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\r\n                            $container.contents().remove();\r\n                            cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options, $container);\r\n                            $editorElement = $container.find(\".dx-widget\").first();\r\n                            validator = $editorElement.data(\"dxValidator\");\r\n                            if (validatorOptions && !validator) {\r\n                                $editorElement.dxValidator({\r\n                                    validationRules: validatorOptions.validationRules,\r\n                                    validationGroup: validatorOptions.validationGroup,\r\n                                    dataGetter: validatorOptions.dataGetter\r\n                                })\r\n                            }\r\n                        });\r\n                        cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options, $container)\r\n                    }\r\n                },\r\n                getEditFormOptions: function(detailOptions) {\r\n                    var _this$_getValidationG;\r\n                    var editFormOptions = null === (_this$_getValidationG = this._getValidationGroupsInForm) || void 0 === _this$_getValidationG ? void 0 : _this$_getValidationG.call(this, detailOptions);\r\n                    var userCustomizeItem = this.option(\"editing.form.customizeItem\");\r\n                    var editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\r\n                    var items = this.option(\"editing.form.items\");\r\n                    var isCustomEditorType = {};\r\n                    if (!items) {\r\n                        var columns = this.getController(\"columns\").getColumns();\r\n                        items = [];\r\n                        each(columns, (function(_, column) {\r\n                            if (!column.isBand && !column.type) {\r\n                                items.push({\r\n                                    column: column,\r\n                                    name: column.name,\r\n                                    dataField: column.dataField\r\n                                })\r\n                            }\r\n                        }))\r\n                    } else {\r\n                        forEachFormItems(items, item => {\r\n                            var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\r\n                            if (itemId) {\r\n                                isCustomEditorType[itemId] = !!item.editorType\r\n                            }\r\n                        })\r\n                    }\r\n                    return extend({}, editFormOptions, {\r\n                        items: items,\r\n                        formID: \"dx-\" + new Guid,\r\n                        customizeItem: item => {\r\n                            var column;\r\n                            var itemId = item.name || item.dataField;\r\n                            if (item.column || itemId) {\r\n                                column = item.column || this._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField)\r\n                            }\r\n                            if (column) {\r\n                                item.label = item.label || {};\r\n                                item.label.text = item.label.text || column.caption;\r\n                                if (\"boolean\" === column.dataType && void 0 === item.label.visible) {\r\n                                    var labelMode = this.option(\"editing.form.labelMode\");\r\n                                    if (\"floating\" === labelMode || \"static\" === labelMode) {\r\n                                        item.label.visible = true\r\n                                    }\r\n                                }\r\n                                item.template = item.template || this.getFormEditorTemplate(detailOptions, item);\r\n                                item.column = column;\r\n                                item.isCustomEditorType = isCustomEditorType[itemId];\r\n                                if (column.formItem) {\r\n                                    extend(item, column.formItem)\r\n                                }\r\n                                if (void 0 === item.isRequired && column.validationRules) {\r\n                                    item.isRequired = column.validationRules.some((function(rule) {\r\n                                        return \"required\" === rule.type\r\n                                    }));\r\n                                    item.validationRules = []\r\n                                }\r\n                                var itemVisible = isDefined(item.visible) ? item.visible : true;\r\n                                if (!this._firstFormItem && itemVisible) {\r\n                                    this._firstFormItem = item\r\n                                }\r\n                            }\r\n                            null === userCustomizeItem || void 0 === userCustomizeItem ? void 0 : userCustomizeItem.call(this, item);\r\n                            item.cssClass = isString(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass\r\n                        }\r\n                    })\r\n                },\r\n                getEditFormTemplate: function() {\r\n                    return ($container, detailOptions, options) => {\r\n                        var editFormOptions = this.option(EDITING_FORM_OPTION_NAME);\r\n                        var baseEditFormOptions = this.getEditFormOptions(detailOptions);\r\n                        var $formContainer = $(\"<div>\").appendTo($container);\r\n                        var isPopupForm = null === options || void 0 === options ? void 0 : options.isPopupForm;\r\n                        this._firstFormItem = void 0;\r\n                        if (isPopupForm) {\r\n                            $formContainer.addClass(this.addWidgetPrefix(EDIT_POPUP_FORM_CLASS))\r\n                        }\r\n                        this._editForm = this._createComponent($formContainer, Form, extend({}, editFormOptions, baseEditFormOptions));\r\n                        if (!isPopupForm) {\r\n                            var $buttonsContainer = $(\"<div>\").addClass(this.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\r\n                            this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getSaveButtonConfig());\r\n                            this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getCancelButtonConfig())\r\n                        }\r\n                        this._editForm.on(\"contentReady\", () => {\r\n                            var _this$_editPopup6;\r\n                            this._rowsView.renderDelayedTemplates();\r\n                            null === (_this$_editPopup6 = this._editPopup) || void 0 === _this$_editPopup6 ? void 0 : _this$_editPopup6.repaint()\r\n                        })\r\n                    }\r\n                },\r\n                getEditForm: function() {\r\n                    return this._editForm\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var _this$_updateEditForm;\r\n                    null === (_this$_updateEditForm = this._updateEditFormDeferred) || void 0 === _this$_updateEditForm ? void 0 : _this$_updateEditForm.resolve()\r\n                },\r\n                _beforeEndSaving: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this.isPopupEditMode()) {\r\n                        var _this$_editPopup7;\r\n                        null === (_this$_editPopup7 = this._editPopup) || void 0 === _this$_editPopup7 ? void 0 : _this$_editPopup7.hide()\r\n                    }\r\n                },\r\n                _processDataItemCore: function(item, _ref) {\r\n                    var {\r\n                        type: type\r\n                    } = _ref;\r\n                    if (this.isPopupEditMode() && type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                        item.visible = false\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _editRowFromOptionChangedCore: function(rowIndices, rowIndex) {\r\n                    var isPopupEditMode = this.isPopupEditMode();\r\n                    this.callBase(rowIndices, rowIndex, isPopupEditMode);\r\n                    if (isPopupEditMode) {\r\n                        this._showEditPopup(rowIndex)\r\n                    }\r\n                }\r\n            },\r\n            data: {\r\n                _updateEditItem: function(item) {\r\n                    if (this._editingController.isFormEditMode()) {\r\n                        item.rowType = \"detail\"\r\n                    }\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    if (false === isLiveUpdate && newItem.isEditing && this._editingController.isFormEditMode()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _renderCellContent: function($cell, options) {\r\n                    if (\"data\" === options.rowType && this._editingController.isPopupEditMode() && false === options.row.visible) {\r\n                        return\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                getCellElements: function(rowIndex) {\r\n                    var $cellElements = this.callBase(rowIndex);\r\n                    var editingController = this._editingController;\r\n                    var editForm = editingController.getEditForm();\r\n                    var editFormRowIndex = editingController.getEditFormRowIndex();\r\n                    if (editFormRowIndex === rowIndex && $cellElements && editForm) {\r\n                        return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS)\r\n                    }\r\n                    return $cellElements\r\n                },\r\n                _getVisibleColumnIndex: function($cells, rowIndex, columnIdentifier) {\r\n                    var editFormRowIndex = this._editingController.getEditFormRowIndex();\r\n                    if (editFormRowIndex === rowIndex && isString(columnIdentifier)) {\r\n                        var column = this._columnsController.columnOption(columnIdentifier);\r\n                        return this._getEditFormEditorVisibleIndex($cells, column)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _getEditFormEditorVisibleIndex: function($cells, column) {\r\n                    var visibleIndex = -1;\r\n                    each($cells, (function(index, cellElement) {\r\n                        var item = $(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\r\n                        if (null !== item && void 0 !== item && item.column && column && item.column.index === column.index) {\r\n                            visibleIndex = index;\r\n                            return false\r\n                        }\r\n                    }));\r\n                    return visibleIndex\r\n                },\r\n                _isFormItem: function(parameters) {\r\n                    var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\r\n                    var isPopupEditing = \"data\" === parameters.rowType && this._editingController.isPopupEditMode();\r\n                    return (isDetailRow || isPopupEditing) && parameters.item\r\n                },\r\n                _updateCell: function($cell, parameters) {\r\n                    if (this._isFormItem(parameters)) {\r\n                        this._formItemPrepared(parameters, $cell)\r\n                    } else {\r\n                        this.callBase($cell, parameters)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}