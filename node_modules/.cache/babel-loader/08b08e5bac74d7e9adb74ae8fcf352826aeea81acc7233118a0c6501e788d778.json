{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_row_based.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { EDIT_MODE_ROW, MODES_WITH_DELAYED_FOCUS, ROW_SELECTED_CLASS, EDIT_FORM_CLASS, EDITING_EDITROWKEY_OPTION_NAME } from \"./ui.grid_core.editing_constants\";\nimport { equalByValue } from \"../../core/utils/common\";\nvar EDIT_ROW = \"dx-edit-row\";\nexport var editingRowBasedModule = {\n  extenders: {\n    controllers: {\n      editing: {\n        isRowEditMode: function () {\n          return this.getEditMode() === EDIT_MODE_ROW;\n        },\n        _afterCancelEditData: function (rowIndex) {\n          var dataController = this._dataController;\n          if (this.isRowBasedEditMode() && rowIndex >= 0) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [rowIndex, rowIndex + 1]\n            });\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _isDefaultButtonVisible: function (button, options) {\n          var isRowMode = this.isRowBasedEditMode();\n          var isEditRow = options.row && equalByValue(options.row.key, this.option(EDITING_EDITROWKEY_OPTION_NAME));\n          if (isRowMode) {\n            switch (button.name) {\n              case \"edit\":\n                return !isEditRow && this.allowUpdating(options);\n              case \"delete\":\n                return this.callBase.apply(this, arguments) && !isEditRow;\n              case \"save\":\n              case \"cancel\":\n                return isEditRow;\n              default:\n                return this.callBase.apply(this, arguments);\n            }\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        isEditRow: function (rowIndex) {\n          return this.isRowBasedEditMode() && this.isEditRowByIndex(rowIndex);\n        },\n        _cancelSaving: function () {\n          if (this.isRowBasedEditMode()) {\n            if (!this.hasChanges()) {\n              this._cancelEditDataCore();\n            }\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _refreshCore: function (params) {\n          var {\n            allowCancelEditing: allowCancelEditing\n          } = null !== params && void 0 !== params ? params : {};\n          if (this.isRowBasedEditMode()) {\n            var hasUpdateChanges = this.getChanges().filter(it => \"update\" === it.type).length > 0;\n            this.init();\n            allowCancelEditing && hasUpdateChanges && this._cancelEditDataCore();\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _isEditColumnVisible: function () {\n          var result = this.callBase.apply(this, arguments);\n          var editingOptions = this.option(\"editing\");\n          var isRowEditMode = this.isRowEditMode();\n          var isVisibleInRowEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\n          return result || isRowEditMode && isVisibleInRowEditMode;\n        },\n        _focusEditorIfNeed: function () {\n          var editMode = this.getEditMode();\n          if (this._needFocusEditor) {\n            if (-1 !== MODES_WITH_DELAYED_FOCUS.indexOf(editMode)) {\n              var $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());\n              this._delayedInputFocus($editingCell, () => {\n                $editingCell && this.component.focus($editingCell);\n              });\n            }\n            this._needFocusEditor = false;\n          }\n        }\n      },\n      data: {\n        _getChangedColumnIndices: function (oldItem, newItem, rowIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          if (editingController.isRowBasedEditMode() && oldItem.isEditing !== newItem.isEditing) {\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n          if (row) {\n            var editingController = this._editingController;\n            var isEditRow = editingController.isEditRow(row.rowIndex);\n            if (isEditRow) {\n              $row.addClass(EDIT_ROW);\n              $row.removeClass(ROW_SELECTED_CLASS);\n              if (\"detail\" === row.rowType) {\n                $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n              }\n            }\n          }\n          return $row;\n        },\n        _update: function (change) {\n          this.callBase(change);\n          if (\"updateSelection\" === change.changeType) {\n            this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED_CLASS);\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["EDIT_MODE_ROW","MODES_WITH_DELAYED_FOCUS","ROW_SELECTED_CLASS","EDIT_FORM_CLASS","EDITING_EDITROWKEY_OPTION_NAME","equalByValue","EDIT_ROW","editingRowBasedModule","extenders","controllers","editing","isRowEditMode","getEditMode","_afterCancelEditData","rowIndex","dataController","_dataController","isRowBasedEditMode","updateItems","changeType","rowIndices","callBase","apply","arguments","_isDefaultButtonVisible","button","options","isRowMode","isEditRow","row","key","option","name","allowUpdating","isEditRowByIndex","_cancelSaving","hasChanges","_cancelEditDataCore","_refreshCore","params","allowCancelEditing","hasUpdateChanges","getChanges","filter","it","type","length","init","_isEditColumnVisible","result","editingOptions","isVisibleInRowEditMode","allowAdding","_focusEditorIfNeed","editMode","_needFocusEditor","indexOf","$editingCell","getFocusedCellInRow","_getVisibleEditRowIndex","_delayedInputFocus","component","focus","data","_getChangedColumnIndices","oldItem","newItem","isLiveUpdate","editingController","getController","isEditing","views","rowsView","_createRow","$row","_editingController","addClass","removeClass","rowType","addWidgetPrefix","_update","change","getTableElements","children"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_row_based.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_row_based.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    EDIT_MODE_ROW,\r\n    MODES_WITH_DELAYED_FOCUS,\r\n    ROW_SELECTED_CLASS,\r\n    EDIT_FORM_CLASS,\r\n    EDITING_EDITROWKEY_OPTION_NAME\r\n} from \"./ui.grid_core.editing_constants\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nvar EDIT_ROW = \"dx-edit-row\";\r\nexport var editingRowBasedModule = {\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                isRowEditMode: function() {\r\n                    return this.getEditMode() === EDIT_MODE_ROW\r\n                },\r\n                _afterCancelEditData: function(rowIndex) {\r\n                    var dataController = this._dataController;\r\n                    if (this.isRowBasedEditMode() && rowIndex >= 0) {\r\n                        dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: [rowIndex, rowIndex + 1]\r\n                        })\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _isDefaultButtonVisible: function(button, options) {\r\n                    var isRowMode = this.isRowBasedEditMode();\r\n                    var isEditRow = options.row && equalByValue(options.row.key, this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n                    if (isRowMode) {\r\n                        switch (button.name) {\r\n                            case \"edit\":\r\n                                return !isEditRow && this.allowUpdating(options);\r\n                            case \"delete\":\r\n                                return this.callBase.apply(this, arguments) && !isEditRow;\r\n                            case \"save\":\r\n                            case \"cancel\":\r\n                                return isEditRow;\r\n                            default:\r\n                                return this.callBase.apply(this, arguments)\r\n                        }\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                isEditRow: function(rowIndex) {\r\n                    return this.isRowBasedEditMode() && this.isEditRowByIndex(rowIndex)\r\n                },\r\n                _cancelSaving: function() {\r\n                    if (this.isRowBasedEditMode()) {\r\n                        if (!this.hasChanges()) {\r\n                            this._cancelEditDataCore()\r\n                        }\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _refreshCore: function(params) {\r\n                    var {\r\n                        allowCancelEditing: allowCancelEditing\r\n                    } = null !== params && void 0 !== params ? params : {};\r\n                    if (this.isRowBasedEditMode()) {\r\n                        var hasUpdateChanges = this.getChanges().filter(it => \"update\" === it.type).length > 0;\r\n                        this.init();\r\n                        allowCancelEditing && hasUpdateChanges && this._cancelEditDataCore()\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _isEditColumnVisible: function() {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var editingOptions = this.option(\"editing\");\r\n                    var isRowEditMode = this.isRowEditMode();\r\n                    var isVisibleInRowEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\r\n                    return result || isRowEditMode && isVisibleInRowEditMode\r\n                },\r\n                _focusEditorIfNeed: function() {\r\n                    var editMode = this.getEditMode();\r\n                    if (this._needFocusEditor) {\r\n                        if (-1 !== MODES_WITH_DELAYED_FOCUS.indexOf(editMode)) {\r\n                            var $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());\r\n                            this._delayedInputFocus($editingCell, () => {\r\n                                $editingCell && this.component.focus($editingCell)\r\n                            })\r\n                        }\r\n                        this._needFocusEditor = false\r\n                    }\r\n                }\r\n            },\r\n            data: {\r\n                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    if (editingController.isRowBasedEditMode() && oldItem.isEditing !== newItem.isEditing) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var editingController = this._editingController;\r\n                        var isEditRow = editingController.isEditRow(row.rowIndex);\r\n                        if (isEditRow) {\r\n                            $row.addClass(EDIT_ROW);\r\n                            $row.removeClass(ROW_SELECTED_CLASS);\r\n                            if (\"detail\" === row.rowType) {\r\n                                $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS))\r\n                            }\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _update: function(change) {\r\n                    this.callBase(change);\r\n                    if (\"updateSelection\" === change.changeType) {\r\n                        this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED_CLASS)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}