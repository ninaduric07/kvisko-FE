{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/adaptivity/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../../../core/utils/size\";\nimport $ from \"../../../../core/renderer\";\nimport eventsEngine from \"../../../../events/core/events_engine\";\nimport { addNamespace } from \"../../../../events/utils/index\";\nimport { name as clickEventName } from \"../../../../events/click\";\nimport { isDefined, isString } from \"../../../../core/utils/type\";\nimport Guid from \"../../../../core/guid\";\nimport Form from \"../../../../ui/form\";\nimport { isMaterial } from \"../../../../ui/themes\";\nimport { equalByValue } from \"../../../../core/utils/common\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { isElementInDom } from \"../../../../core/utils/dom\";\nimport messageLocalization from \"../../../../localization/message\";\nimport gridCoreUtils from \"../module_utils\";\nimport modules from \"../modules\";\nconst COLUMN_HEADERS_VIEW = \"columnHeadersView\";\nconst ROWS_VIEW = \"rowsView\";\nconst FOOTER_VIEW = \"footerView\";\nconst COLUMN_VIEWS = [\"columnHeadersView\", ROWS_VIEW, FOOTER_VIEW];\nconst ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\nconst HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nconst ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\nconst FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nconst FORM_ITEM_MODIFIED = \"dx-item-modified\";\nconst HIDDEN_COLUMN_CLASS = \"hidden-column\";\nconst ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\nconst ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\nconst COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\nconst ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\nconst ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nconst LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\nconst ADAPTIVE_COLUMN_NAME = \"adaptive\";\nconst EDIT_MODE_BATCH = \"batch\";\nconst EDIT_MODE_ROW = \"row\";\nconst EDIT_MODE_FORM = \"form\";\nconst EDIT_MODE_POPUP = \"popup\";\nconst REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\nconst GROUP_ROW_CLASS = \"dx-group-row\";\nconst EXPAND_ARIA_NAME = \"dxDataGrid-ariaAdaptiveExpand\";\nconst COLLAPSE_ARIA_NAME = \"dxDataGrid-ariaAdaptiveCollapse\";\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\nfunction getColumnId(that, column) {\n  return that._columnsController.getColumnId(column);\n}\nfunction getDataCellElements($row) {\n  return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\");\n}\nfunction adaptiveCellTemplate(container, options) {\n  let $adaptiveColumnButton;\n  const $container = $(container);\n  const adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\n  if (\"data\" === options.rowType) {\n    $adaptiveColumnButton = $(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(\"adaptive-more\"));\n    eventsEngine.on($adaptiveColumnButton, addNamespace(clickEventName, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(() => {\n      adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key);\n    }));\n    $adaptiveColumnButton.appendTo($container);\n  } else {\n    gridCoreUtils.setEmptyText($container);\n  }\n}\nfunction focusCellHandler(e) {\n  var _a;\n  const $nextCell = null === (_a = e.data) || void 0 === _a ? void 0 : _a.$nextCell;\n  eventsEngine.off($nextCell, \"focus\", focusCellHandler);\n  eventsEngine.trigger($nextCell, \"dxclick\");\n}\nconst adaptiveColumnsControllerMembers = {\n  _isRowEditMode() {\n    const editMode = this._getEditMode();\n    return \"row\" === editMode;\n  },\n  _isItemModified(item, cellOptions) {\n    const columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n    const rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\n    const row = this._dataController.items()[rowIndex + 1];\n    return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex]);\n  },\n  _renderFormViewTemplate(item, cellOptions, $container) {\n    const that = this;\n    const {\n      column: column\n    } = item;\n    const focusAction = that.createAction(() => {\n      if (that._editingController.isEditing()) {\n        eventsEngine.trigger($container, clickEventName);\n      }\n    });\n    const rowData = cellOptions.row.data;\n    const value = column.calculateCellValue(rowData);\n    const displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, cellOptions.rowType);\n    const text = gridCoreUtils.formatValue(displayValue, column);\n    const isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\n    const rowsView = that._rowsView;\n    if (column.allowEditing && that.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\n      $container.attr(\"tabIndex\", that.option(\"tabIndex\"));\n      if (isCellOrBatchEditMode) {\n        eventsEngine.off($container, \"focus\", focusAction);\n        eventsEngine.on($container, \"focus\", focusAction);\n      }\n    }\n    if (column.cellTemplate) {\n      const templateOptions = extend({}, cellOptions, {\n        value: value,\n        displayValue: displayValue,\n        text: text,\n        column: column\n      });\n      rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isElementInDom($container)).done(() => {\n        rowsView._cellPrepared($container, cellOptions);\n      });\n    } else {\n      const container = $container.get(0);\n      if (column.encodeHtml) {\n        container.textContent = text;\n      } else {\n        container.innerHTML = text;\n      }\n      $container.addClass(\"dx-adaptive-item-text\");\n      if (!isDefined(text) || \"\" === text) {\n        $container.html(\"&nbsp;\");\n      }\n      if (!that._isRowEditMode()) {\n        if (that._isItemModified(item, cellOptions)) {\n          $container.addClass(\"dx-item-modified\");\n        }\n      }\n      rowsView._cellPrepared($container, cellOptions);\n    }\n  },\n  _getTemplate(item, cellOptions) {\n    const that = this;\n    const {\n      column: column\n    } = item;\n    const editingController = this.getController(\"editing\");\n    return function (options, container) {\n      const $container = $(container);\n      const columnIndex = that._columnsController.getVisibleIndex(column.index);\n      const templateOptions = extend({}, cellOptions);\n      const renderFormTemplate = function () {\n        const isItemEdited = that._isItemEdited(item);\n        templateOptions.value = cellOptions.row.values[columnIndex];\n        if (isItemEdited || column.showEditorAlways) {\n          editingController.renderFormEditorTemplate(templateOptions, item, options, $container, !isItemEdited);\n        } else {\n          templateOptions.column = column;\n          templateOptions.columnIndex = columnIndex;\n          that._renderFormViewTemplate(item, templateOptions, $container);\n        }\n      };\n      renderFormTemplate();\n      templateOptions.watch && templateOptions.watch(() => ({\n        isItemEdited: that._isItemEdited(item),\n        value: cellOptions.row.values[columnIndex]\n      }), () => {\n        $container.contents().remove();\n        $container.removeClass(\"dx-adaptive-item-text\");\n        renderFormTemplate();\n      });\n    };\n  },\n  _isVisibleColumnsValid(visibleColumns) {\n    if (visibleColumns < 2) {\n      return false;\n    }\n    if (visibleColumns.length - function () {\n      let result = 0;\n      for (let j = 0; j < visibleColumns.length; j++) {\n        const visibleColumn = visibleColumns[j];\n        if (visibleColumn.command) {\n          result++;\n        }\n      }\n      return result;\n    }() <= 1) {\n      return false;\n    }\n    return true;\n  },\n  _calculatePercentWidths(widths, visibleColumns) {\n    const that = this;\n    let percentWidths = 0;\n    visibleColumns.forEach((item, index) => {\n      if (\"adaptiveHidden\" !== widths[index]) {\n        percentWidths += that._getItemPercentWidth(item);\n      }\n    });\n    return percentWidths;\n  },\n  _isPercentWidth: width => isString(width) && width.endsWith(\"%\"),\n  _isColumnHidden(column) {\n    return this._hiddenColumns.filter(hiddenColumn => hiddenColumn.index === column.index).length > 0;\n  },\n  _getAverageColumnsWidth(containerWidth, columns, columnsCanFit) {\n    const that = this;\n    let fixedColumnsWidth = 0;\n    let columnsWithoutFixedWidthCount = 0;\n    columns.forEach(column => {\n      if (!that._isColumnHidden(column)) {\n        const {\n          width: width\n        } = column;\n        if (isDefined(width) && !isNaN(parseFloat(width))) {\n          fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\n            visibleIndex: column.visibleIndex,\n            columnsCount: columns.length,\n            columnsCanFit: columnsCanFit,\n            bestFitWidth: column.bestFitWidth,\n            columnWidth: width,\n            containerWidth: containerWidth\n          }) : parseFloat(width);\n        } else {\n          columnsWithoutFixedWidthCount++;\n        }\n      }\n    });\n    return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount;\n  },\n  _calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\n    const columnId = getColumnId(this, column);\n    const widthOption = this._columnsController.columnOption(columnId, \"width\");\n    const bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n    const columnsCount = contentColumns.length;\n    let colWidth;\n    if (widthOption && \"auto\" !== widthOption) {\n      if (this._isPercentWidth(widthOption)) {\n        colWidth = this._calculatePercentWidth({\n          visibleIndex: column.visibleIndex,\n          columnsCount: columnsCount,\n          columnsCanFit: columnsCanFit,\n          bestFitWidth: bestFitWidth,\n          columnWidth: widthOption,\n          containerWidth: containerWidth\n        });\n      } else {\n        return parseFloat(widthOption);\n      }\n    } else {\n      const columnAutoWidth = this.option(\"columnAutoWidth\");\n      colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit);\n    }\n    return colWidth;\n  },\n  _calculatePercentWidth(options) {\n    const columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\n    const partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\n    const resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\n    return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth;\n  },\n  _getNotTruncatedColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\n    const columnId = getColumnId(this, column);\n    const widthOption = this._columnsController.columnOption(columnId, \"width\");\n    const bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n    if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\n      return parseFloat(widthOption);\n    }\n    const colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\n    return colWidth < bestFitWidth ? null : colWidth;\n  },\n  _getItemPercentWidth(item) {\n    let result = 0;\n    if (item.width && this._isPercentWidth(item.width)) {\n      result = parseFloat(item.width);\n    }\n    return result;\n  },\n  _getCommandColumnsWidth() {\n    const that = this;\n    const columns = that._columnsController.getVisibleColumns();\n    let colWidth = 0;\n    each(columns, (index, column) => {\n      if (column.index < 0 || column.command) {\n        colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0;\n      }\n    });\n    return colWidth;\n  },\n  _isItemEdited(item) {\n    if (this.isFormOrPopupEditMode()) {\n      return false;\n    }\n    if (this._isRowEditMode()) {\n      const editRowKey = this.option(\"editing.editRowKey\");\n      if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {\n        return true;\n      }\n    } else {\n      const rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n      const columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n      return this._editingController.isEditCell(rowIndex, columnIndex);\n    }\n  },\n  _getFormItemsByHiddenColumns(hiddenColumns) {\n    const items = [];\n    each(hiddenColumns, (_, column) => {\n      items.push({\n        column: column,\n        name: column.name,\n        dataField: column.dataField,\n        visibleIndex: column.visibleIndex\n      });\n    });\n    return items;\n  },\n  _getAdaptiveColumnVisibleIndex(visibleColumns) {\n    for (let i = 0; i < visibleColumns.length; i++) {\n      const column = visibleColumns[i];\n      if (\"adaptive\" === column.command) {\n        return i;\n      }\n    }\n    return;\n  },\n  _hideAdaptiveColumn(resultWidths, visibleColumns) {\n    const visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\n    if (isDefined(visibleIndex)) {\n      resultWidths[visibleIndex] = \"adaptiveHidden\";\n      this._hideVisibleColumn({\n        isCommandColumn: true,\n        visibleIndex: visibleIndex\n      });\n    }\n  },\n  _showHiddenCellsInView(_ref) {\n    let {\n      $cells: $cells,\n      isCommandColumn: isCommandColumn\n    } = _ref;\n    let cssClassNameToRemove = this.addWidgetPrefix(\"hidden-column\");\n    if (isCommandColumn) {\n      cssClassNameToRemove = \"dx-command-adaptive-hidden\";\n      $cells.attr({\n        tabIndex: 0,\n        \"aria-hidden\": null\n      }).removeClass(cssClassNameToRemove);\n    } else {\n      $cells.removeClass(cssClassNameToRemove);\n    }\n  },\n  _showHiddenColumns() {\n    for (let i = 0; i < COLUMN_VIEWS.length; i++) {\n      const view = this.getView(COLUMN_VIEWS[i]);\n      if (view && view.isVisible() && view.element()) {\n        const viewName = view.name;\n        const $hiddenCommandCells = view.element().find(\".dx-command-adaptive-hidden\");\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCommandCells,\n          isCommandColumn: true\n        });\n        const $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(\"hidden-column\"));\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCells\n        });\n      }\n    }\n  },\n  _isCellValid: $cell => $cell && $cell.length && !$cell.hasClass(\"dx-master-detail-cell\") && !$cell.hasClass(\"dx-group-cell\"),\n  _hideVisibleColumn(_ref2) {\n    let {\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    } = _ref2;\n    const that = this;\n    COLUMN_VIEWS.forEach(viewName => {\n      const view = that.getView(viewName);\n      view && that._hideVisibleColumnInView({\n        view: view,\n        isCommandColumn: isCommandColumn,\n        visibleIndex: visibleIndex\n      });\n    });\n  },\n  _hideVisibleColumnInView(_ref3) {\n    let {\n      view: view,\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    } = _ref3;\n    const viewName = view.name;\n    let $cellElement;\n    const column = this._columnsController.getVisibleColumns()[visibleIndex];\n    const editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\n    if (view && view.isVisible() && column) {\n      const rowsCount = view.getRowsCount();\n      const $rowElements = view._getRowElements();\n      for (let rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\n        const cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\n        if (!cancelClassAdding) {\n          const currentVisibleIndex = \"columnHeadersView\" === viewName ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\n          if (currentVisibleIndex >= 0) {\n            const $rowElement = $rowElements.eq(rowIndex);\n            $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\n            this._isCellValid($cellElement) && this._hideVisibleCellInView({\n              viewName: viewName,\n              isCommandColumn: isCommandColumn,\n              $cell: $cellElement\n            });\n          }\n        }\n      }\n    }\n  },\n  _findCellElementInRow($rowElement, visibleColumnIndex) {\n    const $rowCells = $rowElement.children();\n    let visibleIndex = visibleColumnIndex;\n    let cellIsInsideGroup = false;\n    if ($rowElement.hasClass(\"dx-group-row\")) {\n      const $groupCell = $rowElement.find(\".dx-group-cell\");\n      const colSpan = $groupCell.attr(\"colspan\");\n      if ($groupCell.length && isDefined(colSpan)) {\n        const groupCellLength = parseInt(colSpan);\n        const endGroupIndex = $groupCell.index() + groupCellLength - 1;\n        if (visibleColumnIndex > endGroupIndex) {\n          visibleIndex = visibleColumnIndex - groupCellLength + 1;\n        } else {\n          cellIsInsideGroup = true;\n        }\n      }\n    }\n    const $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\n    return $cellElement;\n  },\n  _hideVisibleCellInView(_ref4) {\n    let {\n      $cell: $cell,\n      isCommandColumn: isCommandColumn\n    } = _ref4;\n    const cssClassNameToAdd = isCommandColumn ? \"dx-command-adaptive-hidden\" : this.addWidgetPrefix(\"hidden-column\");\n    $cell.attr({\n      tabIndex: -1,\n      \"aria-hidden\": true\n    }).addClass(cssClassNameToAdd);\n  },\n  _getEditMode() {\n    return this._editingController.getEditMode();\n  },\n  isFormOrPopupEditMode() {\n    const editMode = this._getEditMode();\n    return \"form\" === editMode || \"popup\" === editMode;\n  },\n  hideRedundantColumns(resultWidths, visibleColumns, hiddenQueue) {\n    const that = this;\n    this._hiddenColumns = [];\n    if (that._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\n      let totalWidth = 0;\n      const $rootElement = that.component.$element();\n      let rootElementWidth = getWidth($rootElement) - that._getCommandColumnsWidth();\n      const getVisibleContentColumns = function () {\n        return visibleColumns.filter(item => !item.command && 0 === this._hiddenColumns.filter(i => i.index === item.index).length);\n      }.bind(this);\n      let visibleContentColumns = getVisibleContentColumns();\n      const contentColumnsCount = visibleContentColumns.length;\n      let i;\n      let hasHiddenColumns;\n      let needHideColumn;\n      do {\n        needHideColumn = false;\n        totalWidth = 0;\n        const percentWidths = that._calculatePercentWidths(resultWidths, visibleColumns);\n        const columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\n        for (i = 0; i < visibleColumns.length; i++) {\n          const visibleColumn = visibleColumns[i];\n          let columnWidth = that._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\n          const columnId = getColumnId(that, visibleColumn);\n          const widthOption = that._columnsController.columnOption(columnId, \"width\");\n          const minWidth = that._columnsController.columnOption(columnId, \"minWidth\");\n          const columnBestFitWidth = that._columnsController.columnOption(columnId, \"bestFitWidth\");\n          if (\"adaptiveHidden\" === resultWidths[i]) {\n            hasHiddenColumns = true;\n            continue;\n          }\n          if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\n            needHideColumn = true;\n            break;\n          }\n          if (!widthOption || \"auto\" === widthOption) {\n            columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0);\n          }\n          if (\"adaptive\" !== visibleColumn.command || hasHiddenColumns) {\n            totalWidth += columnWidth;\n          }\n        }\n        needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);\n        if (needHideColumn) {\n          const column = hiddenQueue.pop();\n          const visibleIndex = that._columnsController.getVisibleIndex(column.index);\n          rootElementWidth += that._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\n          that._hideVisibleColumn({\n            visibleIndex: visibleIndex\n          });\n          resultWidths[visibleIndex] = \"adaptiveHidden\";\n          this._hiddenColumns.push(column);\n          visibleContentColumns = getVisibleContentColumns();\n        }\n      } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\n      if (contentColumnsCount === visibleContentColumns.length) {\n        that._hideAdaptiveColumn(resultWidths, visibleColumns);\n      }\n    } else {\n      that._hideAdaptiveColumn(resultWidths, visibleColumns);\n    }\n  },\n  getAdaptiveDetailItems() {\n    return this._$itemContents;\n  },\n  getItemContentByColumnIndex(visibleColumnIndex) {\n    let $itemContent;\n    for (let i = 0; i < this._$itemContents.length; i++) {\n      $itemContent = this._$itemContents.eq(i);\n      const item = $itemContent.data(\"dx-form-item\");\n      if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\n        return $itemContent;\n      }\n    }\n  },\n  toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\n    if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {\n      this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded);\n    }\n  },\n  createFormByHiddenColumns(container, options) {\n    const that = this;\n    const $container = $(container);\n    const userFormOptions = {\n      items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\n      formID: \"dx-\" + new Guid()\n    };\n    const defaultFormOptions = isMaterial() ? {\n      colCount: 2\n    } : {};\n    this.executeAction(\"onAdaptiveDetailRowPreparing\", {\n      formOptions: userFormOptions\n    });\n    that._$itemContents = null;\n    that._form = that._createComponent($(\"<div>\").appendTo($container), Form, extend(defaultFormOptions, userFormOptions, {\n      customizeItem(item) {\n        const column = item.column || that._columnsController.columnOption(item.name || item.dataField);\n        if (column) {\n          item.label = item.label || {};\n          item.label.text = item.label.text || column.caption;\n          item.column = column;\n          item.template = that._getTemplate(item, options, that.updateForm.bind(that));\n        }\n        userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item);\n      },\n      onContentReady(e) {\n        userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\n        that._$itemContents = $container.find(\".dx-field-item-content\");\n      }\n    }));\n  },\n  hasAdaptiveDetailRowExpanded() {\n    return isDefined(this._dataController.adaptiveExpandedKey());\n  },\n  updateForm(hiddenColumns) {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      if (this._form && isDefined(this._form._contentReadyAction)) {\n        if (hiddenColumns && hiddenColumns.length) {\n          this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns));\n        } else {\n          this._form.repaint();\n        }\n      }\n    }\n  },\n  updateHidingQueue(columns) {\n    const that = this;\n    const hideableColumns = columns.filter(column => column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0));\n    let columnsHasHidingPriority;\n    let i;\n    that._hidingColumnsQueue = [];\n    if (that.option(\"allowColumnResizing\") && \"widget\" === that.option(\"columnResizingMode\")) {\n      return that._hidingColumnsQueue;\n    }\n    for (i = 0; i < hideableColumns.length; i++) {\n      if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\n        columnsHasHidingPriority = true;\n        that._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i];\n      }\n    }\n    if (columnsHasHidingPriority) {\n      that._hidingColumnsQueue.reverse();\n    } else if (that.option(\"columnHidingEnabled\")) {\n      for (i = 0; i < hideableColumns.length; i++) {\n        const visibleIndex = that._columnsController.getVisibleIndex(hideableColumns[i].index);\n        that._hidingColumnsQueue[visibleIndex] = hideableColumns[i];\n      }\n    }\n    that._hidingColumnsQueue = that._hidingColumnsQueue.filter(Object);\n    return that._hidingColumnsQueue;\n  },\n  getHiddenColumns() {\n    return this._hiddenColumns;\n  },\n  hasHiddenColumns() {\n    return this._hiddenColumns.length > 0;\n  },\n  getHidingColumnsQueue() {\n    return this._hidingColumnsQueue;\n  },\n  init() {\n    const that = this;\n    that._columnsController = that.getController(\"columns\");\n    that._dataController = that.getController(\"data\");\n    that._rowsView = that.getView(\"rowsView\");\n    that._columnsController.addCommandColumn({\n      type: \"adaptive\",\n      command: \"adaptive\",\n      visible: true,\n      adaptiveHidden: true,\n      cssClass: \"dx-command-adaptive\",\n      alignment: \"center\",\n      width: \"auto\",\n      cellTemplate: adaptiveCellTemplate,\n      fixedPosition: \"right\"\n    });\n    that._columnsController.columnsChanged.add(() => {\n      const isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\n      that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true);\n    });\n    that._editingController = that.getController(\"editing\");\n    that._hidingColumnsQueue = [];\n    that._hiddenColumns = [];\n    that.createAction(\"onAdaptiveDetailRowPreparing\");\n    that.callBase();\n  },\n  optionChanged(args) {\n    if (\"columnHidingEnabled\" === args.name) {\n      this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value);\n    }\n    this.callBase(args);\n  },\n  publicMethods: () => [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"],\n  isAdaptiveDetailRowExpanded(key) {\n    return this._dataController.adaptiveExpandedKey() && equalByValue(this._dataController.adaptiveExpandedKey(), key);\n  },\n  expandAdaptiveDetailRow(key) {\n    if (!this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow(key);\n    }\n  },\n  collapseAdaptiveDetailRow() {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow();\n    }\n  },\n  updateCommandAdaptiveAriaLabel(key, label) {\n    const rowIndex = this._dataController.getRowIndexByKey(key);\n    if (-1 === rowIndex) {\n      return;\n    }\n    const $row = $(this.component.getRowElement(rowIndex));\n    this.setCommandAdaptiveAriaLabel($row, label);\n  },\n  setCommandAdaptiveAriaLabel($row, labelName) {\n    const $adaptiveCommand = $row.find(\".dx-command-adaptive\");\n    $adaptiveCommand.attr(\"aria-label\", messageLocalization.format(labelName));\n  }\n};\nconst AdaptiveColumnsController = modules.ViewController.inherit(adaptiveColumnsControllerMembers);\nexport const adaptivityModule = {\n  defaultOptions: () => ({\n    columnHidingEnabled: false,\n    onAdaptiveDetailRowPreparing: null\n  }),\n  controllers: {\n    adaptiveColumns: AdaptiveColumnsController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _getCellTemplate(options) {\n          const that = this;\n          const {\n            column: column\n          } = options;\n          if (\"detailAdaptive\" === options.rowType && \"detail\" === column.command) {\n            return function (container, options) {\n              that._adaptiveColumnsController.createFormByHiddenColumns($(container), options);\n            };\n          }\n          return that.callBase(options);\n        },\n        _createRow(row) {\n          const $row = this.callBase.apply(this, arguments);\n          if (row && \"detailAdaptive\" === row.rowType && row.key === this._dataController.adaptiveExpandedKey()) {\n            $row.addClass(\"dx-adaptive-detail-row\");\n          }\n          return $row;\n        },\n        _renderCells($row, options) {\n          this.callBase($row, options);\n          const adaptiveColumnsController = this._adaptiveColumnsController;\n          const hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;\n          const hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;\n          if (hidingColumnsQueueLength && !hiddenColumnsLength) {\n            getDataCellElements($row).last().addClass(\"dx-last-data-cell\");\n          }\n          if (\"data\" === options.row.rowType) {\n            adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME);\n          }\n        },\n        _getColumnIndexByElementCore($element) {\n          const $itemContent = $element.closest(\".dx-field-item-content\");\n          if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\n            const formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\n            return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n          }\n          return this.callBase($element);\n        },\n        _cellPrepared($cell, options) {\n          this.callBase.apply(this, arguments);\n          if (\"detailAdaptive\" !== options.row.rowType && \"adaptiveHidden\" === options.column.visibleWidth) {\n            $cell.addClass(this.addWidgetPrefix(\"hidden-column\"));\n          }\n        },\n        getCell(cellPosition, rows) {\n          const item = this._dataController.items()[null === cellPosition || void 0 === cellPosition ? void 0 : cellPosition.rowIndex];\n          if (\"detailAdaptive\" === (null === item || void 0 === item ? void 0 : item.rowType)) {\n            const $adaptiveDetailItems = this._adaptiveColumnsController.getAdaptiveDetailItems();\n            return this.callBase(cellPosition, rows, $adaptiveDetailItems);\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _getCellElement(rowIndex, columnIdentifier) {\n          const item = this._dataController.items()[rowIndex];\n          if (item && \"detailAdaptive\" === item.rowType) {\n            return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier);\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        getContextMenuItems(options) {\n          if (options.row && \"detailAdaptive\" === options.row.rowType) {\n            const view = this.component.getView(\"columnHeadersView\");\n            const formItem = $(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\n            options.column = formItem ? formItem.column : options.column;\n            return view.getContextMenuItems && view.getContextMenuItems(options);\n          }\n          return this.callBase && this.callBase(options);\n        },\n        isClickableElement($target) {\n          const isClickable = this.callBase ? this.callBase($target) : false;\n          return isClickable || !!$target.closest(\".dx-command-adaptive\").length;\n        },\n        init() {\n          this.callBase();\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    },\n    controllers: {\n      export: {\n        _updateColumnWidth(column, width) {\n          this.callBase(column, \"adaptiveHidden\" === column.visibleWidth ? column.bestFitWidth : width);\n        }\n      },\n      columnsResizer: {\n        _pointCreated(point, cellsLength, columns) {\n          const result = this.callBase(point, cellsLength, columns);\n          const currentColumn = columns[point.columnIndex] || {};\n          const nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\n          const nextColumn = columns[nextColumnIndex] || {};\n          const hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\n          const hasAdaptiveHiddenWidth = \"adaptiveHidden\" === currentColumn.visibleWidth || hasHiddenColumnsOnly;\n          return result || hasAdaptiveHiddenWidth;\n        },\n        _getNextColumnIndex(currentColumnIndex) {\n          const visibleColumns = this._columnsController.getVisibleColumns();\n          let index = this.callBase(currentColumnIndex);\n          while (visibleColumns[index] && \"adaptiveHidden\" === visibleColumns[index].visibleWidth) {\n            index++;\n          }\n          return index;\n        }\n      },\n      draggingHeader: {\n        _pointCreated(point, columns, location, sourceColumn) {\n          const result = this.callBase(point, columns, location, sourceColumn);\n          const column = columns[point.columnIndex - 1] || {};\n          const hasAdaptiveHiddenWidth = \"adaptiveHidden\" === column.visibleWidth;\n          return result || hasAdaptiveHiddenWidth;\n        }\n      },\n      editing: {\n        _isRowEditMode() {\n          return \"row\" === this.getEditMode();\n        },\n        _getFormEditItemTemplate(cellOptions, column) {\n          if (\"row\" !== this.getEditMode() && \"detailAdaptive\" === cellOptions.rowType) {\n            cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\n            return this.getColumnTemplate(cellOptions);\n          }\n          return this.callBase(cellOptions, column);\n        },\n        _closeEditItem($targetElement) {\n          const $itemContents = $targetElement.closest(\".dx-field-item-content\");\n          const rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n          const formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\n          const columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n          if (!this.isEditCell(rowIndex, columnIndex)) {\n            this.callBase($targetElement);\n          }\n        },\n        _beforeUpdateItems(rowIndices, rowIndex) {\n          if (!this._adaptiveController.isFormOrPopupEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            const items = this._dataController.items();\n            const item = items[rowIndex];\n            const oldExpandRowIndex = gridCoreUtils.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\n            this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\n            if (oldExpandRowIndex >= 0) {\n              rowIndices.push(oldExpandRowIndex + 1);\n            }\n            rowIndices.push(rowIndex + 1);\n            this._dataController.adaptiveExpandedKey(item.key);\n          }\n        },\n        _afterInsertRow(key) {\n          this.callBase.apply(this, arguments);\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._adaptiveController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());\n            this._isForceRowAdaptiveExpand = true;\n          }\n        },\n        _collapseAdaptiveDetailRow() {\n          if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n            this._isForceRowAdaptiveExpand = false;\n          }\n        },\n        _cancelEditAdaptiveDetailRow() {\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._collapseAdaptiveDetailRow();\n          }\n        },\n        _afterSaveEditData() {\n          this.callBase.apply(this, arguments);\n          const deferred = new Deferred();\n          if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            when(this.getController(\"validating\").validate(true)).done(isValid => {\n              if (isValid) {\n                this._cancelEditAdaptiveDetailRow();\n              }\n              deferred.resolve();\n            });\n          } else {\n            deferred.resolve();\n          }\n          return deferred.promise();\n        },\n        _beforeCancelEditData() {\n          this.callBase();\n          this._cancelEditAdaptiveDetailRow();\n        },\n        _getRowIndicesForCascadeUpdating(row) {\n          const rowIndices = this.callBase.apply(this, arguments);\n          if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\n            rowIndices.push(\"detailAdaptive\" === row.rowType ? row.rowIndex - 1 : row.rowIndex + 1);\n          }\n          return rowIndices;\n        },\n        _beforeCloseEditCellInBatchMode(rowIndices) {\n          const expandedKey = this._dataController._adaptiveExpandedKey;\n          if (expandedKey) {\n            const rowIndex = gridCoreUtils.getIndexByKey(expandedKey, this._dataController.items());\n            if (rowIndex > -1) {\n              rowIndices.unshift(rowIndex);\n            }\n          }\n        },\n        editRow(rowIndex) {\n          if (this._adaptiveController.isFormOrPopupEditMode()) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n          this.callBase(rowIndex);\n        },\n        deleteRow(rowIndex) {\n          const rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n          if (\"batch\" === this.getEditMode() && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n          this.callBase(rowIndex);\n        },\n        init() {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      },\n      resizing: {\n        _needBestFit() {\n          return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length;\n        },\n        _correctColumnWidths(resultWidths, visibleColumns) {\n          const adaptiveController = this._adaptiveColumnsController;\n          const oldHiddenColumns = adaptiveController.getHiddenColumns();\n          const hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\n          adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\n          const hiddenColumns = adaptiveController.getHiddenColumns();\n          if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\n            if (oldHiddenColumns.length !== hiddenColumns.length) {\n              adaptiveController.updateForm(hiddenColumns);\n            }\n          }\n          !hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\n          return this.callBase.apply(this, arguments);\n        },\n        _toggleBestFitMode(isBestFit) {\n          isBestFit && this._adaptiveColumnsController._showHiddenColumns();\n          this.callBase(isBestFit);\n        },\n        _needStretch() {\n          const adaptiveColumnsController = this._adaptiveColumnsController;\n          return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns();\n        },\n        init() {\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          this.callBase();\n        },\n        dispose() {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._updateScrollableTimeoutID);\n        }\n      },\n      data: {\n        _processItems(items, change) {\n          const {\n            changeType: changeType\n          } = change;\n          items = this.callBase.apply(this, arguments);\n          if (\"loadingAll\" === changeType || !isDefined(this._adaptiveExpandedKey)) {\n            return items;\n          }\n          const expandRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, items);\n          const newMode = false === this.option(LEGACY_SCROLLING_MODE);\n          if (expandRowIndex >= 0) {\n            const item = items[expandRowIndex];\n            items.splice(expandRowIndex + 1, 0, {\n              visible: true,\n              rowType: \"detailAdaptive\",\n              key: item.key,\n              data: item.data,\n              node: item.node,\n              modifiedValues: item.modifiedValues,\n              isNewRow: item.isNewRow,\n              values: item.values\n            });\n          } else if (\"refresh\" === changeType && !(newMode && change.repaintChangesOnly)) {\n            this._adaptiveExpandedKey = void 0;\n          }\n          return items;\n        },\n        _getRowIndicesForExpand(key) {\n          const rowIndices = this.callBase.apply(this, arguments);\n          if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\n            const lastRowIndex = rowIndices[rowIndices.length - 1];\n            rowIndices.push(lastRowIndex + 1);\n          }\n          return rowIndices;\n        },\n        adaptiveExpandedKey(value) {\n          if (isDefined(value)) {\n            this._adaptiveExpandedKey = value;\n          } else {\n            return this._adaptiveExpandedKey;\n          }\n        },\n        toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\n          let oldExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, this._items);\n          let newExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(key, this._items);\n          if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\n            key = void 0;\n            newExpandLoadedRowIndex = -1;\n          }\n          const oldKey = this._adaptiveExpandedKey;\n          this._adaptiveExpandedKey = key;\n          if (oldExpandLoadedRowIndex >= 0) {\n            oldExpandLoadedRowIndex++;\n          }\n          if (newExpandLoadedRowIndex >= 0) {\n            newExpandLoadedRowIndex++;\n          }\n          const rowIndexDelta = this.getRowIndexDelta();\n          this.updateItems({\n            allowInvisibleRowIndices: true,\n            changeType: \"update\",\n            rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\n          });\n          const adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);\n          adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME);\n        },\n        init() {\n          this.callBase();\n          this._adaptiveExpandedKey = void 0;\n        }\n      },\n      editorFactory: {\n        _needHideBorder($element) {\n          return this.callBase($element) || (null === $element || void 0 === $element ? void 0 : $element.hasClass(\"dx-field-item-content\")) && (null === $element || void 0 === $element ? void 0 : $element.find(\".dx-checkbox\").length);\n        },\n        _getFocusCellSelector() {\n          return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\";\n        },\n        _getRevertTooltipsSelector() {\n          return `${this.callBase()}, .dx-field-item-content .${this.addWidgetPrefix(\"revert-tooltip\")}`;\n        }\n      },\n      columns: {\n        _isColumnVisible(column) {\n          return this.callBase(column) && !column.adaptiveHidden;\n        }\n      },\n      keyboardNavigation: {\n        _isCellValid($cell) {\n          return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(\"hidden-column\")) && !$cell.hasClass(\"dx-command-adaptive-hidden\");\n        },\n        _processNextCellInMasterDetail($nextCell, $cell) {\n          this.callBase($nextCell);\n          const isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\n          const isEditing = this._editingController.isEditing();\n          if (isEditing && $nextCell && isCellOrBatchMode && !this._isInsideEditForm($nextCell)) {\n            eventsEngine.off($nextCell, \"focus\", focusCellHandler);\n            eventsEngine.on($nextCell, \"focus\", {\n              $nextCell: $nextCell\n            }, focusCellHandler);\n            eventsEngine.trigger($cell, \"focus\");\n          }\n        },\n        _isCellElement($cell) {\n          return this.callBase.apply(this, arguments) || $cell.hasClass(\"dx-adaptive-item-text\");\n        },\n        init() {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["getWidth","$","eventsEngine","addNamespace","name","clickEventName","isDefined","isString","Guid","Form","isMaterial","equalByValue","each","extend","Deferred","when","isElementInDom","messageLocalization","gridCoreUtils","modules","COLUMN_HEADERS_VIEW","ROWS_VIEW","FOOTER_VIEW","COLUMN_VIEWS","ADAPTIVE_NAMESPACE","HIDDEN_COLUMNS_WIDTH","ADAPTIVE_ROW_TYPE","FORM_ITEM_CONTENT_CLASS","FORM_ITEM_MODIFIED","HIDDEN_COLUMN_CLASS","ADAPTIVE_COLUMN_BUTTON_CLASS","ADAPTIVE_COLUMN_NAME_CLASS","COMMAND_ADAPTIVE_HIDDEN_CLASS","ADAPTIVE_DETAIL_ROW_CLASS","ADAPTIVE_ITEM_TEXT_CLASS","MASTER_DETAIL_CELL_CLASS","LAST_DATA_CELL_CLASS","ADAPTIVE_COLUMN_NAME","EDIT_MODE_BATCH","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_POPUP","REVERT_TOOLTIP_CLASS","GROUP_CELL_CLASS","GROUP_ROW_CLASS","EXPAND_ARIA_NAME","COLLAPSE_ARIA_NAME","LEGACY_SCROLLING_MODE","getColumnId","that","column","_columnsController","getDataCellElements","$row","find","adaptiveCellTemplate","container","options","$adaptiveColumnButton","$container","adaptiveColumnsController","component","getController","rowType","addClass","addWidgetPrefix","on","createAction","toggleExpandAdaptiveDetailRow","key","appendTo","setEmptyText","focusCellHandler","e","_a","$nextCell","data","off","trigger","adaptiveColumnsControllerMembers","_isRowEditMode","editMode","_getEditMode","_isItemModified","item","cellOptions","columnIndex","getVisibleIndex","index","rowIndex","_dataController","getRowIndexByKey","row","items","modifiedValues","_renderFormViewTemplate","focusAction","_editingController","isEditing","rowData","value","calculateCellValue","displayValue","getDisplayValue","text","formatValue","isCellOrBatchEditMode","rowsView","_rowsView","allowEditing","isKeyboardEnabled","attr","option","cellTemplate","templateOptions","renderTemplate","done","_cellPrepared","get","encodeHtml","textContent","innerHTML","html","_getTemplate","editingController","renderFormTemplate","isItemEdited","_isItemEdited","values","showEditorAlways","renderFormEditorTemplate","watch","contents","remove","removeClass","_isVisibleColumnsValid","visibleColumns","length","result","j","visibleColumn","command","_calculatePercentWidths","widths","percentWidths","forEach","_getItemPercentWidth","_isPercentWidth","width","endsWith","_isColumnHidden","_hiddenColumns","filter","hiddenColumn","_getAverageColumnsWidth","containerWidth","columns","columnsCanFit","fixedColumnsWidth","columnsWithoutFixedWidthCount","isNaN","parseFloat","_calculatePercentWidth","visibleIndex","columnsCount","bestFitWidth","columnWidth","_calculateColumnWidth","contentColumns","columnId","widthOption","columnOption","colWidth","columnAutoWidth","columnFitted","partialWidth","resultWidth","_getNotTruncatedColumnWidth","_getCommandColumnsWidth","getVisibleColumns","isFormOrPopupEditMode","editRowKey","adaptiveExpandedKey","isEditCell","_getFormItemsByHiddenColumns","hiddenColumns","_","push","dataField","_getAdaptiveColumnVisibleIndex","i","_hideAdaptiveColumn","resultWidths","_hideVisibleColumn","isCommandColumn","_showHiddenCellsInView","_ref","$cells","cssClassNameToRemove","tabIndex","_showHiddenColumns","view","getView","isVisible","element","viewName","$hiddenCommandCells","$hiddenCells","_isCellValid","$cell","hasClass","_ref2","_hideVisibleColumnInView","_ref3","$cellElement","editFormRowIndex","getEditFormRowIndex","rowsCount","getRowsCount","$rowElements","_getRowElements","cancelClassAdding","currentVisibleIndex","$rowElement","eq","_findCellElementInRow","_hideVisibleCellInView","visibleColumnIndex","$rowCells","children","cellIsInsideGroup","$groupCell","colSpan","groupCellLength","parseInt","endGroupIndex","_ref4","cssClassNameToAdd","getEditMode","hideRedundantColumns","hiddenQueue","totalWidth","$rootElement","$element","rootElementWidth","getVisibleContentColumns","bind","visibleContentColumns","contentColumnsCount","hasHiddenColumns","needHideColumn","minWidth","columnBestFitWidth","fixed","Math","max","pop","getAdaptiveDetailItems","_$itemContents","getItemContentByColumnIndex","$itemContent","alwaysExpanded","createFormByHiddenColumns","userFormOptions","formID","defaultFormOptions","colCount","executeAction","formOptions","_form","_createComponent","customizeItem","label","caption","template","updateForm","call","onContentReady","hasAdaptiveDetailRowExpanded","_contentReadyAction","repaint","updateHidingQueue","hideableColumns","visible","type","groupIndex","columnsHasHidingPriority","_hidingColumnsQueue","hidingPriority","reverse","Object","getHiddenColumns","getHidingColumnsQueue","init","addCommandColumn","adaptiveHidden","cssClass","alignment","fixedPosition","columnsChanged","add","isAdaptiveVisible","getColumns","callBase","optionChanged","args","publicMethods","isAdaptiveDetailRowExpanded","expandAdaptiveDetailRow","collapseAdaptiveDetailRow","updateCommandAdaptiveAriaLabel","getRowElement","setCommandAdaptiveAriaLabel","labelName","$adaptiveCommand","format","AdaptiveColumnsController","ViewController","inherit","adaptivityModule","defaultOptions","columnHidingEnabled","onAdaptiveDetailRowPreparing","controllers","adaptiveColumns","extenders","views","_getCellTemplate","_adaptiveColumnsController","_createRow","apply","arguments","_renderCells","hidingColumnsQueueLength","hiddenColumnsLength","last","_getColumnIndexByElementCore","closest","formItem","first","visibleWidth","getCell","cellPosition","rows","$adaptiveDetailItems","_getCellElement","columnIdentifier","getContextMenuItems","targetElement","next","isClickableElement","$target","isClickable","export","_updateColumnWidth","columnsResizer","_pointCreated","point","cellsLength","currentColumn","nextColumnIndex","_getNextColumnIndex","nextColumn","hasHiddenColumnsOnly","hasAdaptiveHiddenWidth","currentColumnIndex","draggingHeader","location","sourceColumn","editing","_getFormEditItemTemplate","getColumnTemplate","_closeEditItem","$targetElement","$itemContents","_beforeUpdateItems","rowIndices","_adaptiveController","oldExpandRowIndex","getIndexByKey","_isForceRowAdaptiveExpand","_afterInsertRow","isRowEditMode","_collapseAdaptiveDetailRow","_cancelEditAdaptiveDetailRow","_afterSaveEditData","deferred","validate","isValid","resolve","promise","_beforeCancelEditData","_getRowIndicesForCascadeUpdating","_beforeCloseEditCellInBatchMode","expandedKey","_adaptiveExpandedKey","unshift","editRow","deleteRow","rowKey","getKeyByRowIndex","resizing","_needBestFit","_correctColumnWidths","adaptiveController","oldHiddenColumns","hidingColumnsQueue","_toggleBestFitMode","isBestFit","_needStretch","dispose","clearTimeout","_updateScrollableTimeoutID","_processItems","change","changeType","expandRowIndex","newMode","splice","node","isNewRow","repaintChangesOnly","_getRowIndicesForExpand","lastRowIndex","oldExpandLoadedRowIndex","_items","newExpandLoadedRowIndex","oldKey","rowIndexDelta","getRowIndexDelta","updateItems","allowInvisibleRowIndices","editorFactory","_needHideBorder","_getFocusCellSelector","_getRevertTooltipsSelector","_isColumnVisible","keyboardNavigation","_processNextCellInMasterDetail","isCellOrBatchMode","_isInsideEditForm","_isCellElement"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/__internal/grids/grid_core/adaptivity/module.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/adaptivity/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWidth\r\n} from \"../../../../core/utils/size\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport eventsEngine from \"../../../../events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../../events/utils/index\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../events/click\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport Guid from \"../../../../core/guid\";\r\nimport Form from \"../../../../ui/form\";\r\nimport {\r\n    isMaterial\r\n} from \"../../../../ui/themes\";\r\nimport {\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../../../core/utils/dom\";\r\nimport messageLocalization from \"../../../../localization/message\";\r\nimport gridCoreUtils from \"../module_utils\";\r\nimport modules from \"../modules\";\r\nconst COLUMN_HEADERS_VIEW = \"columnHeadersView\";\r\nconst ROWS_VIEW = \"rowsView\";\r\nconst FOOTER_VIEW = \"footerView\";\r\nconst COLUMN_VIEWS = [\"columnHeadersView\", ROWS_VIEW, FOOTER_VIEW];\r\nconst ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\r\nconst HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nconst ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\r\nconst FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\r\nconst FORM_ITEM_MODIFIED = \"dx-item-modified\";\r\nconst HIDDEN_COLUMN_CLASS = \"hidden-column\";\r\nconst ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\r\nconst ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\r\nconst COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\r\nconst ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\r\nconst ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\r\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nconst LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\r\nconst ADAPTIVE_COLUMN_NAME = \"adaptive\";\r\nconst EDIT_MODE_BATCH = \"batch\";\r\nconst EDIT_MODE_ROW = \"row\";\r\nconst EDIT_MODE_FORM = \"form\";\r\nconst EDIT_MODE_POPUP = \"popup\";\r\nconst REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\r\nconst GROUP_ROW_CLASS = \"dx-group-row\";\r\nconst EXPAND_ARIA_NAME = \"dxDataGrid-ariaAdaptiveExpand\";\r\nconst COLLAPSE_ARIA_NAME = \"dxDataGrid-ariaAdaptiveCollapse\";\r\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\n\r\nfunction getColumnId(that, column) {\r\n    return that._columnsController.getColumnId(column)\r\n}\r\n\r\nfunction getDataCellElements($row) {\r\n    return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\")\r\n}\r\n\r\nfunction adaptiveCellTemplate(container, options) {\r\n    let $adaptiveColumnButton;\r\n    const $container = $(container);\r\n    const adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\r\n    if (\"data\" === options.rowType) {\r\n        $adaptiveColumnButton = $(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(\"adaptive-more\"));\r\n        eventsEngine.on($adaptiveColumnButton, addNamespace(clickEventName, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(() => {\r\n            adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key)\r\n        }));\r\n        $adaptiveColumnButton.appendTo($container)\r\n    } else {\r\n        gridCoreUtils.setEmptyText($container)\r\n    }\r\n}\r\n\r\nfunction focusCellHandler(e) {\r\n    var _a;\r\n    const $nextCell = null === (_a = e.data) || void 0 === _a ? void 0 : _a.$nextCell;\r\n    eventsEngine.off($nextCell, \"focus\", focusCellHandler);\r\n    eventsEngine.trigger($nextCell, \"dxclick\")\r\n}\r\nconst adaptiveColumnsControllerMembers = {\r\n    _isRowEditMode() {\r\n        const editMode = this._getEditMode();\r\n        return \"row\" === editMode\r\n    },\r\n    _isItemModified(item, cellOptions) {\r\n        const columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n        const rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\r\n        const row = this._dataController.items()[rowIndex + 1];\r\n        return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex])\r\n    },\r\n    _renderFormViewTemplate(item, cellOptions, $container) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = item;\r\n        const focusAction = that.createAction(() => {\r\n            if (that._editingController.isEditing()) {\r\n                eventsEngine.trigger($container, clickEventName)\r\n            }\r\n        });\r\n        const rowData = cellOptions.row.data;\r\n        const value = column.calculateCellValue(rowData);\r\n        const displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, cellOptions.rowType);\r\n        const text = gridCoreUtils.formatValue(displayValue, column);\r\n        const isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\r\n        const rowsView = that._rowsView;\r\n        if (column.allowEditing && that.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\r\n            $container.attr(\"tabIndex\", that.option(\"tabIndex\"));\r\n            if (isCellOrBatchEditMode) {\r\n                eventsEngine.off($container, \"focus\", focusAction);\r\n                eventsEngine.on($container, \"focus\", focusAction)\r\n            }\r\n        }\r\n        if (column.cellTemplate) {\r\n            const templateOptions = extend({}, cellOptions, {\r\n                value: value,\r\n                displayValue: displayValue,\r\n                text: text,\r\n                column: column\r\n            });\r\n            rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isElementInDom($container)).done(() => {\r\n                rowsView._cellPrepared($container, cellOptions)\r\n            })\r\n        } else {\r\n            const container = $container.get(0);\r\n            if (column.encodeHtml) {\r\n                container.textContent = text\r\n            } else {\r\n                container.innerHTML = text\r\n            }\r\n            $container.addClass(\"dx-adaptive-item-text\");\r\n            if (!isDefined(text) || \"\" === text) {\r\n                $container.html(\"&nbsp;\")\r\n            }\r\n            if (!that._isRowEditMode()) {\r\n                if (that._isItemModified(item, cellOptions)) {\r\n                    $container.addClass(\"dx-item-modified\")\r\n                }\r\n            }\r\n            rowsView._cellPrepared($container, cellOptions)\r\n        }\r\n    },\r\n    _getTemplate(item, cellOptions) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = item;\r\n        const editingController = this.getController(\"editing\");\r\n        return function(options, container) {\r\n            const $container = $(container);\r\n            const columnIndex = that._columnsController.getVisibleIndex(column.index);\r\n            const templateOptions = extend({}, cellOptions);\r\n            const renderFormTemplate = function() {\r\n                const isItemEdited = that._isItemEdited(item);\r\n                templateOptions.value = cellOptions.row.values[columnIndex];\r\n                if (isItemEdited || column.showEditorAlways) {\r\n                    editingController.renderFormEditorTemplate(templateOptions, item, options, $container, !isItemEdited)\r\n                } else {\r\n                    templateOptions.column = column;\r\n                    templateOptions.columnIndex = columnIndex;\r\n                    that._renderFormViewTemplate(item, templateOptions, $container)\r\n                }\r\n            };\r\n            renderFormTemplate();\r\n            templateOptions.watch && templateOptions.watch(() => ({\r\n                isItemEdited: that._isItemEdited(item),\r\n                value: cellOptions.row.values[columnIndex]\r\n            }), () => {\r\n                $container.contents().remove();\r\n                $container.removeClass(\"dx-adaptive-item-text\");\r\n                renderFormTemplate()\r\n            })\r\n        }\r\n    },\r\n    _isVisibleColumnsValid(visibleColumns) {\r\n        if (visibleColumns < 2) {\r\n            return false\r\n        }\r\n        if (visibleColumns.length - function() {\r\n                let result = 0;\r\n                for (let j = 0; j < visibleColumns.length; j++) {\r\n                    const visibleColumn = visibleColumns[j];\r\n                    if (visibleColumn.command) {\r\n                        result++\r\n                    }\r\n                }\r\n                return result\r\n            }() <= 1) {\r\n            return false\r\n        }\r\n        return true\r\n    },\r\n    _calculatePercentWidths(widths, visibleColumns) {\r\n        const that = this;\r\n        let percentWidths = 0;\r\n        visibleColumns.forEach((item, index) => {\r\n            if (\"adaptiveHidden\" !== widths[index]) {\r\n                percentWidths += that._getItemPercentWidth(item)\r\n            }\r\n        });\r\n        return percentWidths\r\n    },\r\n    _isPercentWidth: width => isString(width) && width.endsWith(\"%\"),\r\n    _isColumnHidden(column) {\r\n        return this._hiddenColumns.filter(hiddenColumn => hiddenColumn.index === column.index).length > 0\r\n    },\r\n    _getAverageColumnsWidth(containerWidth, columns, columnsCanFit) {\r\n        const that = this;\r\n        let fixedColumnsWidth = 0;\r\n        let columnsWithoutFixedWidthCount = 0;\r\n        columns.forEach(column => {\r\n            if (!that._isColumnHidden(column)) {\r\n                const {\r\n                    width: width\r\n                } = column;\r\n                if (isDefined(width) && !isNaN(parseFloat(width))) {\r\n                    fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\r\n                        visibleIndex: column.visibleIndex,\r\n                        columnsCount: columns.length,\r\n                        columnsCanFit: columnsCanFit,\r\n                        bestFitWidth: column.bestFitWidth,\r\n                        columnWidth: width,\r\n                        containerWidth: containerWidth\r\n                    }) : parseFloat(width)\r\n                } else {\r\n                    columnsWithoutFixedWidthCount++\r\n                }\r\n            }\r\n        });\r\n        return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount\r\n    },\r\n    _calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\r\n        const columnId = getColumnId(this, column);\r\n        const widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        const bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        const columnsCount = contentColumns.length;\r\n        let colWidth;\r\n        if (widthOption && \"auto\" !== widthOption) {\r\n            if (this._isPercentWidth(widthOption)) {\r\n                colWidth = this._calculatePercentWidth({\r\n                    visibleIndex: column.visibleIndex,\r\n                    columnsCount: columnsCount,\r\n                    columnsCanFit: columnsCanFit,\r\n                    bestFitWidth: bestFitWidth,\r\n                    columnWidth: widthOption,\r\n                    containerWidth: containerWidth\r\n                })\r\n            } else {\r\n                return parseFloat(widthOption)\r\n            }\r\n        } else {\r\n            const columnAutoWidth = this.option(\"columnAutoWidth\");\r\n            colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit)\r\n        }\r\n        return colWidth\r\n    },\r\n    _calculatePercentWidth(options) {\r\n        const columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\r\n        const partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\r\n        const resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\r\n        return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth\r\n    },\r\n    _getNotTruncatedColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\r\n        const columnId = getColumnId(this, column);\r\n        const widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        const bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\r\n            return parseFloat(widthOption)\r\n        }\r\n        const colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\r\n        return colWidth < bestFitWidth ? null : colWidth\r\n    },\r\n    _getItemPercentWidth(item) {\r\n        let result = 0;\r\n        if (item.width && this._isPercentWidth(item.width)) {\r\n            result = parseFloat(item.width)\r\n        }\r\n        return result\r\n    },\r\n    _getCommandColumnsWidth() {\r\n        const that = this;\r\n        const columns = that._columnsController.getVisibleColumns();\r\n        let colWidth = 0;\r\n        each(columns, (index, column) => {\r\n            if (column.index < 0 || column.command) {\r\n                colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0\r\n            }\r\n        });\r\n        return colWidth\r\n    },\r\n    _isItemEdited(item) {\r\n        if (this.isFormOrPopupEditMode()) {\r\n            return false\r\n        }\r\n        if (this._isRowEditMode()) {\r\n            const editRowKey = this.option(\"editing.editRowKey\");\r\n            if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {\r\n                return true\r\n            }\r\n        } else {\r\n            const rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n            const columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n            return this._editingController.isEditCell(rowIndex, columnIndex)\r\n        }\r\n    },\r\n    _getFormItemsByHiddenColumns(hiddenColumns) {\r\n        const items = [];\r\n        each(hiddenColumns, (_, column) => {\r\n            items.push({\r\n                column: column,\r\n                name: column.name,\r\n                dataField: column.dataField,\r\n                visibleIndex: column.visibleIndex\r\n            })\r\n        });\r\n        return items\r\n    },\r\n    _getAdaptiveColumnVisibleIndex(visibleColumns) {\r\n        for (let i = 0; i < visibleColumns.length; i++) {\r\n            const column = visibleColumns[i];\r\n            if (\"adaptive\" === column.command) {\r\n                return i\r\n            }\r\n        }\r\n        return\r\n    },\r\n    _hideAdaptiveColumn(resultWidths, visibleColumns) {\r\n        const visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\r\n        if (isDefined(visibleIndex)) {\r\n            resultWidths[visibleIndex] = \"adaptiveHidden\";\r\n            this._hideVisibleColumn({\r\n                isCommandColumn: true,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        }\r\n    },\r\n    _showHiddenCellsInView({\r\n        $cells: $cells,\r\n        isCommandColumn: isCommandColumn\r\n    }) {\r\n        let cssClassNameToRemove = this.addWidgetPrefix(\"hidden-column\");\r\n        if (isCommandColumn) {\r\n            cssClassNameToRemove = \"dx-command-adaptive-hidden\";\r\n            $cells.attr({\r\n                tabIndex: 0,\r\n                \"aria-hidden\": null\r\n            }).removeClass(cssClassNameToRemove)\r\n        } else {\r\n            $cells.removeClass(cssClassNameToRemove)\r\n        }\r\n    },\r\n    _showHiddenColumns() {\r\n        for (let i = 0; i < COLUMN_VIEWS.length; i++) {\r\n            const view = this.getView(COLUMN_VIEWS[i]);\r\n            if (view && view.isVisible() && view.element()) {\r\n                const viewName = view.name;\r\n                const $hiddenCommandCells = view.element().find(\".dx-command-adaptive-hidden\");\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCommandCells,\r\n                    isCommandColumn: true\r\n                });\r\n                const $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(\"hidden-column\"));\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCells\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _isCellValid: $cell => $cell && $cell.length && !$cell.hasClass(\"dx-master-detail-cell\") && !$cell.hasClass(\"dx-group-cell\"),\r\n    _hideVisibleColumn({\r\n        isCommandColumn: isCommandColumn,\r\n        visibleIndex: visibleIndex\r\n    }) {\r\n        const that = this;\r\n        COLUMN_VIEWS.forEach(viewName => {\r\n            const view = that.getView(viewName);\r\n            view && that._hideVisibleColumnInView({\r\n                view: view,\r\n                isCommandColumn: isCommandColumn,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        })\r\n    },\r\n    _hideVisibleColumnInView({\r\n        view: view,\r\n        isCommandColumn: isCommandColumn,\r\n        visibleIndex: visibleIndex\r\n    }) {\r\n        const viewName = view.name;\r\n        let $cellElement;\r\n        const column = this._columnsController.getVisibleColumns()[visibleIndex];\r\n        const editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\r\n        if (view && view.isVisible() && column) {\r\n            const rowsCount = view.getRowsCount();\r\n            const $rowElements = view._getRowElements();\r\n            for (let rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\r\n                const cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\r\n                if (!cancelClassAdding) {\r\n                    const currentVisibleIndex = \"columnHeadersView\" === viewName ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\r\n                    if (currentVisibleIndex >= 0) {\r\n                        const $rowElement = $rowElements.eq(rowIndex);\r\n                        $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\r\n                        this._isCellValid($cellElement) && this._hideVisibleCellInView({\r\n                            viewName: viewName,\r\n                            isCommandColumn: isCommandColumn,\r\n                            $cell: $cellElement\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _findCellElementInRow($rowElement, visibleColumnIndex) {\r\n        const $rowCells = $rowElement.children();\r\n        let visibleIndex = visibleColumnIndex;\r\n        let cellIsInsideGroup = false;\r\n        if ($rowElement.hasClass(\"dx-group-row\")) {\r\n            const $groupCell = $rowElement.find(\".dx-group-cell\");\r\n            const colSpan = $groupCell.attr(\"colspan\");\r\n            if ($groupCell.length && isDefined(colSpan)) {\r\n                const groupCellLength = parseInt(colSpan);\r\n                const endGroupIndex = $groupCell.index() + groupCellLength - 1;\r\n                if (visibleColumnIndex > endGroupIndex) {\r\n                    visibleIndex = visibleColumnIndex - groupCellLength + 1\r\n                } else {\r\n                    cellIsInsideGroup = true\r\n                }\r\n            }\r\n        }\r\n        const $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\r\n        return $cellElement\r\n    },\r\n    _hideVisibleCellInView({\r\n        $cell: $cell,\r\n        isCommandColumn: isCommandColumn\r\n    }) {\r\n        const cssClassNameToAdd = isCommandColumn ? \"dx-command-adaptive-hidden\" : this.addWidgetPrefix(\"hidden-column\");\r\n        $cell.attr({\r\n            tabIndex: -1,\r\n            \"aria-hidden\": true\r\n        }).addClass(cssClassNameToAdd)\r\n    },\r\n    _getEditMode() {\r\n        return this._editingController.getEditMode()\r\n    },\r\n    isFormOrPopupEditMode() {\r\n        const editMode = this._getEditMode();\r\n        return \"form\" === editMode || \"popup\" === editMode\r\n    },\r\n    hideRedundantColumns(resultWidths, visibleColumns, hiddenQueue) {\r\n        const that = this;\r\n        this._hiddenColumns = [];\r\n        if (that._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\r\n            let totalWidth = 0;\r\n            const $rootElement = that.component.$element();\r\n            let rootElementWidth = getWidth($rootElement) - that._getCommandColumnsWidth();\r\n            const getVisibleContentColumns = function() {\r\n                return visibleColumns.filter(item => !item.command && 0 === this._hiddenColumns.filter(i => i.index === item.index).length)\r\n            }.bind(this);\r\n            let visibleContentColumns = getVisibleContentColumns();\r\n            const contentColumnsCount = visibleContentColumns.length;\r\n            let i;\r\n            let hasHiddenColumns;\r\n            let needHideColumn;\r\n            do {\r\n                needHideColumn = false;\r\n                totalWidth = 0;\r\n                const percentWidths = that._calculatePercentWidths(resultWidths, visibleColumns);\r\n                const columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\r\n                for (i = 0; i < visibleColumns.length; i++) {\r\n                    const visibleColumn = visibleColumns[i];\r\n                    let columnWidth = that._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    const columnId = getColumnId(that, visibleColumn);\r\n                    const widthOption = that._columnsController.columnOption(columnId, \"width\");\r\n                    const minWidth = that._columnsController.columnOption(columnId, \"minWidth\");\r\n                    const columnBestFitWidth = that._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n                    if (\"adaptiveHidden\" === resultWidths[i]) {\r\n                        hasHiddenColumns = true;\r\n                        continue\r\n                    }\r\n                    if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\r\n                        needHideColumn = true;\r\n                        break\r\n                    }\r\n                    if (!widthOption || \"auto\" === widthOption) {\r\n                        columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0)\r\n                    }\r\n                    if (\"adaptive\" !== visibleColumn.command || hasHiddenColumns) {\r\n                        totalWidth += columnWidth\r\n                    }\r\n                }\r\n                needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);\r\n                if (needHideColumn) {\r\n                    const column = hiddenQueue.pop();\r\n                    const visibleIndex = that._columnsController.getVisibleIndex(column.index);\r\n                    rootElementWidth += that._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    that._hideVisibleColumn({\r\n                        visibleIndex: visibleIndex\r\n                    });\r\n                    resultWidths[visibleIndex] = \"adaptiveHidden\";\r\n                    this._hiddenColumns.push(column);\r\n                    visibleContentColumns = getVisibleContentColumns()\r\n                }\r\n            } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\r\n            if (contentColumnsCount === visibleContentColumns.length) {\r\n                that._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n            }\r\n        } else {\r\n            that._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n        }\r\n    },\r\n    getAdaptiveDetailItems() {\r\n        return this._$itemContents\r\n    },\r\n    getItemContentByColumnIndex(visibleColumnIndex) {\r\n        let $itemContent;\r\n        for (let i = 0; i < this._$itemContents.length; i++) {\r\n            $itemContent = this._$itemContents.eq(i);\r\n            const item = $itemContent.data(\"dx-form-item\");\r\n            if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\r\n                return $itemContent\r\n            }\r\n        }\r\n    },\r\n    toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\r\n        if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {\r\n            this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded)\r\n        }\r\n    },\r\n    createFormByHiddenColumns(container, options) {\r\n        const that = this;\r\n        const $container = $(container);\r\n        const userFormOptions = {\r\n            items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\r\n            formID: \"dx-\" + new Guid\r\n        };\r\n        const defaultFormOptions = isMaterial() ? {\r\n            colCount: 2\r\n        } : {};\r\n        this.executeAction(\"onAdaptiveDetailRowPreparing\", {\r\n            formOptions: userFormOptions\r\n        });\r\n        that._$itemContents = null;\r\n        that._form = that._createComponent($(\"<div>\").appendTo($container), Form, extend(defaultFormOptions, userFormOptions, {\r\n            customizeItem(item) {\r\n                const column = item.column || that._columnsController.columnOption(item.name || item.dataField);\r\n                if (column) {\r\n                    item.label = item.label || {};\r\n                    item.label.text = item.label.text || column.caption;\r\n                    item.column = column;\r\n                    item.template = that._getTemplate(item, options, that.updateForm.bind(that))\r\n                }\r\n                userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item)\r\n            },\r\n            onContentReady(e) {\r\n                userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\r\n                that._$itemContents = $container.find(\".dx-field-item-content\")\r\n            }\r\n        }))\r\n    },\r\n    hasAdaptiveDetailRowExpanded() {\r\n        return isDefined(this._dataController.adaptiveExpandedKey())\r\n    },\r\n    updateForm(hiddenColumns) {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            if (this._form && isDefined(this._form._contentReadyAction)) {\r\n                if (hiddenColumns && hiddenColumns.length) {\r\n                    this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns))\r\n                } else {\r\n                    this._form.repaint()\r\n                }\r\n            }\r\n        }\r\n    },\r\n    updateHidingQueue(columns) {\r\n        const that = this;\r\n        const hideableColumns = columns.filter(column => column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0));\r\n        let columnsHasHidingPriority;\r\n        let i;\r\n        that._hidingColumnsQueue = [];\r\n        if (that.option(\"allowColumnResizing\") && \"widget\" === that.option(\"columnResizingMode\")) {\r\n            return that._hidingColumnsQueue\r\n        }\r\n        for (i = 0; i < hideableColumns.length; i++) {\r\n            if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\r\n                columnsHasHidingPriority = true;\r\n                that._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i]\r\n            }\r\n        }\r\n        if (columnsHasHidingPriority) {\r\n            that._hidingColumnsQueue.reverse()\r\n        } else if (that.option(\"columnHidingEnabled\")) {\r\n            for (i = 0; i < hideableColumns.length; i++) {\r\n                const visibleIndex = that._columnsController.getVisibleIndex(hideableColumns[i].index);\r\n                that._hidingColumnsQueue[visibleIndex] = hideableColumns[i]\r\n            }\r\n        }\r\n        that._hidingColumnsQueue = that._hidingColumnsQueue.filter(Object);\r\n        return that._hidingColumnsQueue\r\n    },\r\n    getHiddenColumns() {\r\n        return this._hiddenColumns\r\n    },\r\n    hasHiddenColumns() {\r\n        return this._hiddenColumns.length > 0\r\n    },\r\n    getHidingColumnsQueue() {\r\n        return this._hidingColumnsQueue\r\n    },\r\n    init() {\r\n        const that = this;\r\n        that._columnsController = that.getController(\"columns\");\r\n        that._dataController = that.getController(\"data\");\r\n        that._rowsView = that.getView(\"rowsView\");\r\n        that._columnsController.addCommandColumn({\r\n            type: \"adaptive\",\r\n            command: \"adaptive\",\r\n            visible: true,\r\n            adaptiveHidden: true,\r\n            cssClass: \"dx-command-adaptive\",\r\n            alignment: \"center\",\r\n            width: \"auto\",\r\n            cellTemplate: adaptiveCellTemplate,\r\n            fixedPosition: \"right\"\r\n        });\r\n        that._columnsController.columnsChanged.add(() => {\r\n            const isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\r\n            that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true)\r\n        });\r\n        that._editingController = that.getController(\"editing\");\r\n        that._hidingColumnsQueue = [];\r\n        that._hiddenColumns = [];\r\n        that.createAction(\"onAdaptiveDetailRowPreparing\");\r\n        that.callBase()\r\n    },\r\n    optionChanged(args) {\r\n        if (\"columnHidingEnabled\" === args.name) {\r\n            this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value)\r\n        }\r\n        this.callBase(args)\r\n    },\r\n    publicMethods: () => [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"],\r\n    isAdaptiveDetailRowExpanded(key) {\r\n        return this._dataController.adaptiveExpandedKey() && equalByValue(this._dataController.adaptiveExpandedKey(), key)\r\n    },\r\n    expandAdaptiveDetailRow(key) {\r\n        if (!this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow(key)\r\n        }\r\n    },\r\n    collapseAdaptiveDetailRow() {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow()\r\n        }\r\n    },\r\n    updateCommandAdaptiveAriaLabel(key, label) {\r\n        const rowIndex = this._dataController.getRowIndexByKey(key);\r\n        if (-1 === rowIndex) {\r\n            return\r\n        }\r\n        const $row = $(this.component.getRowElement(rowIndex));\r\n        this.setCommandAdaptiveAriaLabel($row, label)\r\n    },\r\n    setCommandAdaptiveAriaLabel($row, labelName) {\r\n        const $adaptiveCommand = $row.find(\".dx-command-adaptive\");\r\n        $adaptiveCommand.attr(\"aria-label\", messageLocalization.format(labelName))\r\n    }\r\n};\r\nconst AdaptiveColumnsController = modules.ViewController.inherit(adaptiveColumnsControllerMembers);\r\nexport const adaptivityModule = {\r\n    defaultOptions: () => ({\r\n        columnHidingEnabled: false,\r\n        onAdaptiveDetailRowPreparing: null\r\n    }),\r\n    controllers: {\r\n        adaptiveColumns: AdaptiveColumnsController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: {\r\n                _getCellTemplate(options) {\r\n                    const that = this;\r\n                    const {\r\n                        column: column\r\n                    } = options;\r\n                    if (\"detailAdaptive\" === options.rowType && \"detail\" === column.command) {\r\n                        return function(container, options) {\r\n                            that._adaptiveColumnsController.createFormByHiddenColumns($(container), options)\r\n                        }\r\n                    }\r\n                    return that.callBase(options)\r\n                },\r\n                _createRow(row) {\r\n                    const $row = this.callBase.apply(this, arguments);\r\n                    if (row && \"detailAdaptive\" === row.rowType && row.key === this._dataController.adaptiveExpandedKey()) {\r\n                        $row.addClass(\"dx-adaptive-detail-row\")\r\n                    }\r\n                    return $row\r\n                },\r\n                _renderCells($row, options) {\r\n                    this.callBase($row, options);\r\n                    const adaptiveColumnsController = this._adaptiveColumnsController;\r\n                    const hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;\r\n                    const hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;\r\n                    if (hidingColumnsQueueLength && !hiddenColumnsLength) {\r\n                        getDataCellElements($row).last().addClass(\"dx-last-data-cell\")\r\n                    }\r\n                    if (\"data\" === options.row.rowType) {\r\n                        adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME)\r\n                    }\r\n                },\r\n                _getColumnIndexByElementCore($element) {\r\n                    const $itemContent = $element.closest(\".dx-field-item-content\");\r\n                    if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\r\n                        const formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\r\n                        return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index)\r\n                    }\r\n                    return this.callBase($element)\r\n                },\r\n                _cellPrepared($cell, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (\"detailAdaptive\" !== options.row.rowType && \"adaptiveHidden\" === options.column.visibleWidth) {\r\n                        $cell.addClass(this.addWidgetPrefix(\"hidden-column\"))\r\n                    }\r\n                },\r\n                getCell(cellPosition, rows) {\r\n                    const item = this._dataController.items()[null === cellPosition || void 0 === cellPosition ? void 0 : cellPosition.rowIndex];\r\n                    if (\"detailAdaptive\" === (null === item || void 0 === item ? void 0 : item.rowType)) {\r\n                        const $adaptiveDetailItems = this._adaptiveColumnsController.getAdaptiveDetailItems();\r\n                        return this.callBase(cellPosition, rows, $adaptiveDetailItems)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _getCellElement(rowIndex, columnIdentifier) {\r\n                    const item = this._dataController.items()[rowIndex];\r\n                    if (item && \"detailAdaptive\" === item.rowType) {\r\n                        return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                getContextMenuItems(options) {\r\n                    if (options.row && \"detailAdaptive\" === options.row.rowType) {\r\n                        const view = this.component.getView(\"columnHeadersView\");\r\n                        const formItem = $(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\r\n                        options.column = formItem ? formItem.column : options.column;\r\n                        return view.getContextMenuItems && view.getContextMenuItems(options)\r\n                    }\r\n                    return this.callBase && this.callBase(options)\r\n                },\r\n                isClickableElement($target) {\r\n                    const isClickable = this.callBase ? this.callBase($target) : false;\r\n                    return isClickable || !!$target.closest(\".dx-command-adaptive\").length\r\n                },\r\n                init() {\r\n                    this.callBase();\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            export: {\r\n                _updateColumnWidth(column, width) {\r\n                    this.callBase(column, \"adaptiveHidden\" === column.visibleWidth ? column.bestFitWidth : width)\r\n                }\r\n            },\r\n            columnsResizer: {\r\n                _pointCreated(point, cellsLength, columns) {\r\n                    const result = this.callBase(point, cellsLength, columns);\r\n                    const currentColumn = columns[point.columnIndex] || {};\r\n                    const nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\r\n                    const nextColumn = columns[nextColumnIndex] || {};\r\n                    const hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\r\n                    const hasAdaptiveHiddenWidth = \"adaptiveHidden\" === currentColumn.visibleWidth || hasHiddenColumnsOnly;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                },\r\n                _getNextColumnIndex(currentColumnIndex) {\r\n                    const visibleColumns = this._columnsController.getVisibleColumns();\r\n                    let index = this.callBase(currentColumnIndex);\r\n                    while (visibleColumns[index] && \"adaptiveHidden\" === visibleColumns[index].visibleWidth) {\r\n                        index++\r\n                    }\r\n                    return index\r\n                }\r\n            },\r\n            draggingHeader: {\r\n                _pointCreated(point, columns, location, sourceColumn) {\r\n                    const result = this.callBase(point, columns, location, sourceColumn);\r\n                    const column = columns[point.columnIndex - 1] || {};\r\n                    const hasAdaptiveHiddenWidth = \"adaptiveHidden\" === column.visibleWidth;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                }\r\n            },\r\n            editing: {\r\n                _isRowEditMode() {\r\n                    return \"row\" === this.getEditMode()\r\n                },\r\n                _getFormEditItemTemplate(cellOptions, column) {\r\n                    if (\"row\" !== this.getEditMode() && \"detailAdaptive\" === cellOptions.rowType) {\r\n                        cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\r\n                        return this.getColumnTemplate(cellOptions)\r\n                    }\r\n                    return this.callBase(cellOptions, column)\r\n                },\r\n                _closeEditItem($targetElement) {\r\n                    const $itemContents = $targetElement.closest(\".dx-field-item-content\");\r\n                    const rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n                    const formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\r\n                    const columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\r\n                    if (!this.isEditCell(rowIndex, columnIndex)) {\r\n                        this.callBase($targetElement)\r\n                    }\r\n                },\r\n                _beforeUpdateItems(rowIndices, rowIndex) {\r\n                    if (!this._adaptiveController.isFormOrPopupEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        const items = this._dataController.items();\r\n                        const item = items[rowIndex];\r\n                        const oldExpandRowIndex = gridCoreUtils.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\r\n                        this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\r\n                        if (oldExpandRowIndex >= 0) {\r\n                            rowIndices.push(oldExpandRowIndex + 1)\r\n                        }\r\n                        rowIndices.push(rowIndex + 1);\r\n                        this._dataController.adaptiveExpandedKey(item.key)\r\n                    }\r\n                },\r\n                _afterInsertRow(key) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._adaptiveController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());\r\n                        this._isForceRowAdaptiveExpand = true\r\n                    }\r\n                },\r\n                _collapseAdaptiveDetailRow() {\r\n                    if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow();\r\n                        this._isForceRowAdaptiveExpand = false\r\n                    }\r\n                },\r\n                _cancelEditAdaptiveDetailRow() {\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._collapseAdaptiveDetailRow()\r\n                    }\r\n                },\r\n                _afterSaveEditData() {\r\n                    this.callBase.apply(this, arguments);\r\n                    const deferred = new Deferred;\r\n                    if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        when(this.getController(\"validating\").validate(true)).done(isValid => {\r\n                            if (isValid) {\r\n                                this._cancelEditAdaptiveDetailRow()\r\n                            }\r\n                            deferred.resolve()\r\n                        })\r\n                    } else {\r\n                        deferred.resolve()\r\n                    }\r\n                    return deferred.promise()\r\n                },\r\n                _beforeCancelEditData() {\r\n                    this.callBase();\r\n                    this._cancelEditAdaptiveDetailRow()\r\n                },\r\n                _getRowIndicesForCascadeUpdating(row) {\r\n                    const rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\r\n                        rowIndices.push(\"detailAdaptive\" === row.rowType ? row.rowIndex - 1 : row.rowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _beforeCloseEditCellInBatchMode(rowIndices) {\r\n                    const expandedKey = this._dataController._adaptiveExpandedKey;\r\n                    if (expandedKey) {\r\n                        const rowIndex = gridCoreUtils.getIndexByKey(expandedKey, this._dataController.items());\r\n                        if (rowIndex > -1) {\r\n                            rowIndices.unshift(rowIndex)\r\n                        }\r\n                    }\r\n                },\r\n                editRow(rowIndex) {\r\n                    if (this._adaptiveController.isFormOrPopupEditMode()) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                deleteRow(rowIndex) {\r\n                    const rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n                    if (\"batch\" === this.getEditMode() && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                init() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            },\r\n            resizing: {\r\n                _needBestFit() {\r\n                    return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length\r\n                },\r\n                _correctColumnWidths(resultWidths, visibleColumns) {\r\n                    const adaptiveController = this._adaptiveColumnsController;\r\n                    const oldHiddenColumns = adaptiveController.getHiddenColumns();\r\n                    const hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\r\n                    adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\r\n                    const hiddenColumns = adaptiveController.getHiddenColumns();\r\n                    if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\r\n                        if (oldHiddenColumns.length !== hiddenColumns.length) {\r\n                            adaptiveController.updateForm(hiddenColumns)\r\n                        }\r\n                    }!hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _toggleBestFitMode(isBestFit) {\r\n                    isBestFit && this._adaptiveColumnsController._showHiddenColumns();\r\n                    this.callBase(isBestFit)\r\n                },\r\n                _needStretch() {\r\n                    const adaptiveColumnsController = this._adaptiveColumnsController;\r\n                    return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns()\r\n                },\r\n                init() {\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n                    this.callBase()\r\n                },\r\n                dispose() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._updateScrollableTimeoutID)\r\n                }\r\n            },\r\n            data: {\r\n                _processItems(items, change) {\r\n                    const {\r\n                        changeType: changeType\r\n                    } = change;\r\n                    items = this.callBase.apply(this, arguments);\r\n                    if (\"loadingAll\" === changeType || !isDefined(this._adaptiveExpandedKey)) {\r\n                        return items\r\n                    }\r\n                    const expandRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, items);\r\n                    const newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n                    if (expandRowIndex >= 0) {\r\n                        const item = items[expandRowIndex];\r\n                        items.splice(expandRowIndex + 1, 0, {\r\n                            visible: true,\r\n                            rowType: \"detailAdaptive\",\r\n                            key: item.key,\r\n                            data: item.data,\r\n                            node: item.node,\r\n                            modifiedValues: item.modifiedValues,\r\n                            isNewRow: item.isNewRow,\r\n                            values: item.values\r\n                        })\r\n                    } else if (\"refresh\" === changeType && !(newMode && change.repaintChangesOnly)) {\r\n                        this._adaptiveExpandedKey = void 0\r\n                    }\r\n                    return items\r\n                },\r\n                _getRowIndicesForExpand(key) {\r\n                    const rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\r\n                        const lastRowIndex = rowIndices[rowIndices.length - 1];\r\n                        rowIndices.push(lastRowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                adaptiveExpandedKey(value) {\r\n                    if (isDefined(value)) {\r\n                        this._adaptiveExpandedKey = value\r\n                    } else {\r\n                        return this._adaptiveExpandedKey\r\n                    }\r\n                },\r\n                toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\r\n                    let oldExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, this._items);\r\n                    let newExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(key, this._items);\r\n                    if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\r\n                        key = void 0;\r\n                        newExpandLoadedRowIndex = -1\r\n                    }\r\n                    const oldKey = this._adaptiveExpandedKey;\r\n                    this._adaptiveExpandedKey = key;\r\n                    if (oldExpandLoadedRowIndex >= 0) {\r\n                        oldExpandLoadedRowIndex++\r\n                    }\r\n                    if (newExpandLoadedRowIndex >= 0) {\r\n                        newExpandLoadedRowIndex++\r\n                    }\r\n                    const rowIndexDelta = this.getRowIndexDelta();\r\n                    this.updateItems({\r\n                        allowInvisibleRowIndices: true,\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\r\n                    });\r\n                    const adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n                    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);\r\n                    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME)\r\n                },\r\n                init() {\r\n                    this.callBase();\r\n                    this._adaptiveExpandedKey = void 0\r\n                }\r\n            },\r\n            editorFactory: {\r\n                _needHideBorder($element) {\r\n                    return this.callBase($element) || (null === $element || void 0 === $element ? void 0 : $element.hasClass(\"dx-field-item-content\")) && (null === $element || void 0 === $element ? void 0 : $element.find(\".dx-checkbox\").length)\r\n                },\r\n                _getFocusCellSelector() {\r\n                    return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\"\r\n                },\r\n                _getRevertTooltipsSelector() {\r\n                    return `${this.callBase()}, .dx-field-item-content .${this.addWidgetPrefix(\"revert-tooltip\")}`\r\n                }\r\n            },\r\n            columns: {\r\n                _isColumnVisible(column) {\r\n                    return this.callBase(column) && !column.adaptiveHidden\r\n                }\r\n            },\r\n            keyboardNavigation: {\r\n                _isCellValid($cell) {\r\n                    return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(\"hidden-column\")) && !$cell.hasClass(\"dx-command-adaptive-hidden\")\r\n                },\r\n                _processNextCellInMasterDetail($nextCell, $cell) {\r\n                    this.callBase($nextCell);\r\n                    const isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\r\n                    const isEditing = this._editingController.isEditing();\r\n                    if (isEditing && $nextCell && isCellOrBatchMode && !this._isInsideEditForm($nextCell)) {\r\n                        eventsEngine.off($nextCell, \"focus\", focusCellHandler);\r\n                        eventsEngine.on($nextCell, \"focus\", {\r\n                            $nextCell: $nextCell\r\n                        }, focusCellHandler);\r\n                        eventsEngine.trigger($cell, \"focus\")\r\n                    }\r\n                },\r\n                _isCellElement($cell) {\r\n                    return this.callBase.apply(this, arguments) || $cell.hasClass(\"dx-adaptive-item-text\")\r\n                },\r\n                init() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}