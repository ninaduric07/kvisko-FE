{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/data_grid/export/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../../core/renderer\";\nimport Class from \"../../../../core/class\";\nimport { isDefined, isFunction } from \"../../../../core/utils/type\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { getDefaultAlignment } from \"../../../../core/utils/position\";\nimport { export as clientExport, excel } from \"../../../../exporter\";\nimport { format } from \"../../../../core/utils/string\";\nimport messageLocalization from \"../../../../localization/message\";\nimport \"../../../../ui/button\";\nimport \"../../../../ui/drop_down_button\";\nimport { when, Deferred } from \"../../../../core/utils/deferred\";\nimport List from \"../../../../ui/list_light\";\nimport { prepareItems } from \"../../../../ui/grid_core/ui.grid_core.export\";\nimport dataGridCore from \"../module_core\";\nconst DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\";\nconst DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\";\nconst DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME = \"exportButton\";\nconst DATAGRID_EXPORT_ICON = \"export\";\nconst DATAGRID_EXPORT_EXCEL_ICON = \"xlsxfile\";\nconst DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\";\nconst DATAGRID_PDF_EXPORT_ICON = \"pdffile\";\nexport const DataProvider = Class.inherit({\n  ctor(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\n    this._exportController = exportController;\n    this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n    this._selectedRowsOnly = selectedRowsOnly;\n  },\n  _getGroupValue(item) {\n    const {\n      key: key,\n      data: data,\n      rowType: rowType,\n      groupIndex: groupIndex,\n      summaryCells: summaryCells\n    } = item;\n    const groupColumn = this._options.groupColumns[groupIndex];\n    const value = dataGridCore.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);\n    let result = `${groupColumn.caption}: ${dataGridCore.formatValue(value, groupColumn)}`;\n    if (summaryCells && summaryCells[0] && summaryCells[0].length) {\n      result += \" \" + dataGridCore.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts);\n    }\n    return result;\n  },\n  _correctCellIndex: cellIndex => cellIndex,\n  _initOptions() {\n    const exportController = this._exportController;\n    const groupColumns = exportController._columnsController.getGroupColumns();\n    const excelWrapTextEnabled = exportController.option(\"export.excelWrapTextEnabled\");\n    this._options = {\n      columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\n      groupColumns: groupColumns,\n      items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\n      getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),\n      isHeadersVisible: exportController.option(\"showColumnHeaders\"),\n      summaryTexts: exportController.option(\"summary.texts\"),\n      customizeExportData: exportController.option(\"customizeExportData\"),\n      rtlEnabled: exportController.option(\"rtlEnabled\"),\n      wrapTextEnabled: isDefined(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option(\"wordWrapEnabled\"),\n      customizeExcelCell: exportController.option(\"export.customizeExcelCell\")\n    };\n  },\n  hasCustomizeExcelCell() {\n    return isDefined(this._options.customizeExcelCell);\n  },\n  customizeExcelCell(e, cellSourceData) {\n    if (this._options.customizeExcelCell) {\n      e.gridCell = cellSourceData;\n      if (isDefined(this._exportController) && isDefined(this._exportController.component)) {\n        e.component = this._exportController.component;\n      }\n      this._options.customizeExcelCell(e);\n    }\n  },\n  getHeaderStyles: () => [{\n    bold: true,\n    alignment: \"center\",\n    wrapText: true\n  }, {\n    bold: true,\n    alignment: \"left\",\n    wrapText: true\n  }, {\n    bold: true,\n    alignment: \"right\",\n    wrapText: true\n  }],\n  getGroupRowStyle() {\n    return {\n      bold: true,\n      wrapText: false,\n      alignment: getDefaultAlignment(this._options.rtlEnabled)\n    };\n  },\n  getColumnStyles() {\n    const {\n      wrapTextEnabled: wrapTextEnabled\n    } = this._options;\n    const columnStyles = [];\n    this.getColumns().forEach(column => {\n      columnStyles.push({\n        alignment: column.alignment || \"left\",\n        format: column.format,\n        wrapText: wrapTextEnabled,\n        dataType: column.dataType\n      });\n    });\n    return columnStyles;\n  },\n  getStyles() {\n    return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()];\n  },\n  _getTotalCellStyleId(cellIndex) {\n    var _a;\n    const alignment = (null === (_a = this.getColumns()[cellIndex]) || void 0 === _a ? void 0 : _a.alignment) || \"right\";\n    return this.getHeaderStyles().map(style => style.alignment).indexOf(alignment);\n  },\n  getStyleId(rowIndex, cellIndex) {\n    if (rowIndex < this.getHeaderRowCount()) {\n      return 0;\n    }\n    if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\n      return this._getTotalCellStyleId(cellIndex);\n    }\n    if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\n      return this.getHeaderStyles().length + this.getColumns().length;\n    }\n    return cellIndex + this.getHeaderStyles().length;\n  },\n  getColumns(getColumnsByAllRows) {\n    const {\n      columns: columns\n    } = this._options;\n    return getColumnsByAllRows ? columns : columns[columns.length - 1];\n  },\n  getColumnsWidths() {\n    const columns = this.getColumns();\n    return isDefined(columns) ? columns.map(c => c.width) : void 0;\n  },\n  getRowsCount() {\n    return this._options.items.length + this.getHeaderRowCount();\n  },\n  getHeaderRowCount() {\n    if (this.isHeadersVisible()) {\n      return this._options.columns.length - 1;\n    }\n    return 0;\n  },\n  isGroupRow(rowIndex) {\n    return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType;\n  },\n  getGroupLevel(rowIndex) {\n    const item = this._options.items[rowIndex - this.getHeaderRowCount()];\n    const groupIndex = item && item.groupIndex;\n    if (item && \"totalFooter\" === item.rowType) {\n      return 0;\n    }\n    return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length;\n  },\n  getCellType(rowIndex, cellIndex) {\n    const columns = this.getColumns();\n    if (rowIndex < this.getHeaderRowCount()) {\n      return \"string\";\n    }\n    rowIndex -= this.getHeaderRowCount();\n    if (cellIndex < columns.length) {\n      const item = this._options.items.length && this._options.items[rowIndex];\n      const column = columns[cellIndex];\n      if (item && \"data\" === item.rowType) {\n        if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {\n          return isDefined(column.lookup) ? column.lookup.dataType : column.dataType;\n        }\n      }\n      return \"string\";\n    }\n  },\n  ready() {\n    const that = this;\n    that._initOptions();\n    const options = that._options;\n    return when(options.items).done(items => {\n      options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);\n      options.items = items;\n    }).fail(() => {\n      options.items = [];\n    });\n  },\n  _convertFromGridGroupSummaryItems(gridGroupSummaryItems) {\n    if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\n      return gridGroupSummaryItems.map(item => ({\n        value: item.value,\n        name: item.name\n      }));\n    }\n  },\n  getCellData(rowIndex, cellIndex, isExcelJS) {\n    let value;\n    let column;\n    const result = {\n      cellSourceData: {},\n      value: value\n    };\n    const columns = this.getColumns();\n    const correctedCellIndex = this._correctCellIndex(cellIndex);\n    if (rowIndex < this.getHeaderRowCount()) {\n      const columnsRow = this.getColumns(true)[rowIndex];\n      column = columnsRow[cellIndex];\n      result.cellSourceData.rowType = \"header\";\n      result.cellSourceData.column = column && column.gridColumn;\n      result.value = column && column.caption;\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n      const item = this._options.items.length && this._options.items[rowIndex];\n      if (item) {\n        const itemValues = item.values;\n        result.cellSourceData.rowType = item.rowType;\n        result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\n        switch (item.rowType) {\n          case \"groupFooter\":\n          case \"totalFooter\":\n            if (correctedCellIndex < itemValues.length) {\n              value = itemValues[correctedCellIndex];\n              if (isDefined(value)) {\n                result.cellSourceData.value = value.value;\n                result.cellSourceData.totalSummaryItemName = value.name;\n                result.value = dataGridCore.getSummaryText(value, this._options.summaryTexts);\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n            break;\n          case \"group\":\n            result.cellSourceData.groupIndex = item.groupIndex;\n            if (cellIndex < 1) {\n              result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\n              result.cellSourceData.value = item.key[item.groupIndex];\n              result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\n              result.value = this._getGroupValue(item);\n            } else {\n              const summaryItems = item.values[correctedCellIndex];\n              if (Array.isArray(summaryItems)) {\n                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\n                value = \"\";\n                for (let i = 0; i < summaryItems.length; i++) {\n                  value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + dataGridCore.getSummaryText(summaryItems[i], this._options.summaryTexts);\n                }\n                result.value = value;\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n            break;\n          default:\n            column = columns[cellIndex];\n            if (column) {\n              const value = itemValues[correctedCellIndex];\n              const displayValue = dataGridCore.getDisplayValue(column, value, item.data, item.rowType);\n              if (!isFinite(displayValue) || isDefined(column.customizeText)) {\n                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType(\"boolean\")) {\n                  result.value = displayValue;\n                } else {\n                  result.value = dataGridCore.formatValue(displayValue, column);\n                }\n              } else {\n                result.value = displayValue;\n              }\n              result.cellSourceData.value = value;\n            }\n            result.cellSourceData.data = item.data;\n        }\n      }\n    }\n    return result;\n  },\n  isHeadersVisible() {\n    return this._options.isHeadersVisible;\n  },\n  isTotalCell(rowIndex, cellIndex) {\n    const {\n      items: items\n    } = this._options;\n    const item = items[rowIndex];\n    const correctCellIndex = this._correctCellIndex(cellIndex);\n    const isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\n    return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn;\n  },\n  getCellMerging(rowIndex, cellIndex) {\n    const {\n      columns: columns\n    } = this._options;\n    const column = columns[rowIndex] && columns[rowIndex][cellIndex];\n    return column ? {\n      colspan: (column.exportColspan || 1) - 1,\n      rowspan: (column.rowspan || 1) - 1\n    } : {\n      colspan: 0,\n      rowspan: 0\n    };\n  },\n  getFrozenArea() {\n    return {\n      x: 0,\n      y: this.getHeaderRowCount()\n    };\n  }\n});\nexport const ExportController = dataGridCore.ViewController.inherit({}).inherit({\n  _getEmptyCell: () => ({\n    caption: \"\",\n    colspan: 1,\n    rowspan: 1\n  }),\n  _updateColumnWidth(column, width) {\n    column.width = width;\n  },\n  _getColumns(initialColumnWidthsByColumnIndex) {\n    let result = [];\n    let i;\n    let columns;\n    const columnsController = this._columnsController;\n    const rowCount = columnsController.getRowCount();\n    for (i = 0; i <= rowCount; i++) {\n      const currentHeaderRow = [];\n      columns = columnsController.getVisibleColumns(i, true);\n      let columnWidthsByColumnIndex;\n      if (i === rowCount) {\n        if (this._updateLockCount) {\n          columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n        } else {\n          const columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n          if (columnWidths && columnWidths.length) {\n            columnWidthsByColumnIndex = {};\n            for (let i = 0; i < columns.length; i++) {\n              columnWidthsByColumnIndex[columns[i].index] = columnWidths[i];\n            }\n          }\n        }\n      }\n      for (let j = 0; j < columns.length; j++) {\n        const column = extend({}, columns[j], {\n          dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\n          gridColumn: columns[j]\n        });\n        if (this._needColumnExporting(column)) {\n          const currentColspan = this._calculateExportColspan(column);\n          if (isDefined(currentColspan)) {\n            column.exportColspan = currentColspan;\n          }\n          if (columnWidthsByColumnIndex) {\n            this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index]);\n          }\n          currentHeaderRow.push(column);\n        }\n      }\n      result.push(currentHeaderRow);\n    }\n    columns = result[rowCount];\n    result = prepareItems(result.slice(0, -1), this._getEmptyCell());\n    result.push(columns);\n    return result;\n  },\n  _calculateExportColspan(column) {\n    if (!column.isBand) {\n      return;\n    }\n    const childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\n    if (!isDefined(childColumns)) {\n      return;\n    }\n    return childColumns.reduce((result, childColumn) => {\n      if (this._needColumnExporting(childColumn)) {\n        return result + (this._calculateExportColspan(childColumn) || 1);\n      }\n      return result;\n    }, 0);\n  },\n  _needColumnExporting: column => !column.command && (column.allowExporting || void 0 === column.allowExporting),\n  _getFooterSummaryItems(summaryCells, isTotal) {\n    const result = [];\n    let estimatedItemsCount = 1;\n    let i = 0;\n    do {\n      const values = [];\n      for (let j = 0; j < summaryCells.length; j++) {\n        const summaryCell = summaryCells[j];\n        const itemsLength = summaryCell.length;\n        if (estimatedItemsCount < itemsLength) {\n          estimatedItemsCount = itemsLength;\n        }\n        values.push(summaryCell[i]);\n      }\n      result.push({\n        values: values,\n        rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\n      });\n    } while (i++ < estimatedItemsCount - 1);\n    return result;\n  },\n  _hasSummaryGroupFooters() {\n    const groupItems = this.option(\"summary.groupItems\");\n    if (isDefined(groupItems)) {\n      for (let i = 0; i < groupItems.length; i++) {\n        if (groupItems[i].showInGroupFooter) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  _getItemsWithSummaryGroupFooters(sourceItems) {\n    let result = [];\n    let beforeGroupFooterItems = [];\n    let groupFooterItems = [];\n    for (let i = 0; i < sourceItems.length; i++) {\n      const item = sourceItems[i];\n      if (\"groupFooter\" === item.rowType) {\n        groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\n        result = result.concat(beforeGroupFooterItems, groupFooterItems);\n        beforeGroupFooterItems = [];\n      } else {\n        beforeGroupFooterItems.push(item);\n      }\n    }\n    return result.length ? result : beforeGroupFooterItems;\n  },\n  _updateGroupValuesWithSummaryByColumn(sourceItems) {\n    let summaryValues = [];\n    for (let i = 0; i < sourceItems.length; i++) {\n      const item = sourceItems[i];\n      const {\n        summaryCells: summaryCells\n      } = item;\n      if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\n        const groupColumnCount = item.values.length;\n        for (let j = 1; j < summaryCells.length; j++) {\n          for (let k = 0; k < summaryCells[j].length; k++) {\n            const summaryItem = summaryCells[j][k];\n            if (summaryItem && summaryItem.alignByColumn) {\n              if (!Array.isArray(summaryValues[j - groupColumnCount])) {\n                summaryValues[j - groupColumnCount] = [];\n              }\n              summaryValues[j - groupColumnCount].push(summaryItem);\n            }\n          }\n        }\n        if (summaryValues.length > 0) {\n          item.values.push(...summaryValues);\n          summaryValues = [];\n        }\n      }\n    }\n  },\n  _processUnExportedItems(items) {\n    const columns = this._columnsController.getVisibleColumns(null, true);\n    const groupColumns = this._columnsController.getGroupColumns();\n    let values;\n    let summaryCells;\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      let isCommand = false;\n      values = [];\n      summaryCells = [];\n      for (let j = 0; j < columns.length; j++) {\n        const column = columns[j];\n        isCommand || (isCommand = [\"detailExpand\", \"buttons\"].includes(column.type));\n        if (this._needColumnExporting(column)) {\n          if (item.values) {\n            if (\"group\" === item.rowType && !values.length) {\n              values.push(item.key[item.groupIndex]);\n            } else {\n              values.push(item.values[j]);\n            }\n          }\n          if (item.summaryCells) {\n            if (\"group\" === item.rowType && !summaryCells.length) {\n              const index = j - groupColumns.length + item.groupIndex;\n              summaryCells.push(item.summaryCells[isCommand ? index : index + 1]);\n            } else {\n              summaryCells.push(item.summaryCells[j]);\n            }\n          }\n        }\n      }\n      if (values.length) {\n        item.values = values;\n      }\n      if (summaryCells.length) {\n        item.summaryCells = summaryCells;\n      }\n    }\n  },\n  _getAllItems(data) {\n    const that = this;\n    const d = new Deferred();\n    const dataController = this.getController(\"data\");\n    const footerItems = dataController.footerItems();\n    const totalItem = footerItems.length && footerItems[0];\n    const summaryTotalItems = that.option(\"summary.totalItems\");\n    let summaryCells;\n    when(data).done(data => {\n      dataController.loadAll(data).done((sourceItems, totalAggregates) => {\n        that._updateGroupValuesWithSummaryByColumn(sourceItems);\n        if (that._hasSummaryGroupFooters()) {\n          sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems);\n        }\n        summaryCells = totalItem && totalItem.summaryCells;\n        if (isDefined(totalAggregates) && summaryTotalItems) {\n          summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n        }\n        const summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\n        if (summaryItems) {\n          sourceItems = sourceItems.concat(summaryItems);\n        }\n        that._processUnExportedItems(sourceItems);\n        d.resolve(sourceItems);\n      }).fail(d.reject);\n    }).fail(d.reject);\n    return d;\n  },\n  _getSummaryCells(summaryTotalItems, totalAggregates) {\n    const dataController = this.getController(\"data\");\n    const columnsController = dataController._columnsController;\n    return dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), (summaryItem, column) => dataController._isDataColumn(column) ? column.index : -1);\n  },\n  _getSelectedItems() {\n    const selectionController = this.getController(\"selection\");\n    const selectedRowData = selectionController.getSelectedRowsData();\n    return this._getAllItems(selectedRowData);\n  },\n  _getColumnWidths: (headersView, rowsView) => headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths(),\n  init() {\n    this._columnsController = this.getController(\"columns\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._headersView = this.getView(\"columnHeadersView\");\n    this.createAction(\"onExporting\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onExported\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onFileSaving\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  callbackNames: () => [\"selectionOnlyChanged\"],\n  getDataProvider(selectedRowsOnly) {\n    const columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n    let initialColumnWidthsByColumnIndex;\n    if (columnWidths && columnWidths.length) {\n      initialColumnWidthsByColumnIndex = {};\n      const columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\n      for (let i = 0; i < columnsLastRowVisibleColumns.length; i++) {\n        initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i];\n      }\n    }\n    return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly);\n  },\n  exportToExcel(selectedRowsOnly) {\n    this._selectionOnly = selectedRowsOnly;\n    clientExport(this.component.getDataProvider(), {\n      fileName: this.option(\"export.fileName\"),\n      format: \"xlsx\",\n      selectedRowsOnly: !!selectedRowsOnly,\n      autoFilterEnabled: !!this.option(\"export.excelFilterEnabled\"),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      exportingAction: this.getAction(\"onExporting\"),\n      exportedAction: this.getAction(\"onExported\"),\n      fileSavingAction: this.getAction(\"onFileSaving\")\n    }, excel.getData);\n  },\n  exportTo(selectedRowsOnly, format) {\n    this._selectionOnly = selectedRowsOnly;\n    const onExporting = this.getAction(\"onExporting\");\n    const eventArgs = {\n      selectedRowsOnly: !!selectedRowsOnly,\n      format: format,\n      fileName: this.option(\"export.fileName\"),\n      cancel: false\n    };\n    isFunction(onExporting) && onExporting(eventArgs);\n  },\n  publicMethods: () => [\"getDataProvider\", \"exportToExcel\"],\n  selectionOnly(value) {\n    if (isDefined(value)) {\n      this._isSelectedRows = value;\n      this.selectionOnlyChanged.fire();\n    } else {\n      return this._isSelectedRows;\n    }\n  }\n});\ndataGridCore.registerModule(\"export\", {\n  defaultOptions: () => ({\n    export: {\n      enabled: false,\n      fileName: \"DataGrid\",\n      excelFilterEnabled: false,\n      formats: [\"xlsx\"],\n      excelWrapTextEnabled: void 0,\n      allowExportSelectedData: false,\n      texts: {\n        exportTo: messageLocalization.format(\"dxDataGrid-exportTo\"),\n        exportAll: messageLocalization.format(\"dxDataGrid-exportAll\"),\n        exportSelectedRows: messageLocalization.format(\"dxDataGrid-exportSelectedRows\")\n      }\n    }\n  }),\n  controllers: {\n    export: ExportController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        callbackNames() {\n          const callbackList = this.callBase();\n          return isDefined(callbackList) ? callbackList.push(\"editingChanged\") : [\"editingChanged\"];\n        },\n        _updateEditButtons() {\n          this.callBase();\n          this.editingChanged.fire(this.hasChanges());\n        }\n      }\n    },\n    views: {\n      headerPanel: {\n        _getToolbarItems() {\n          const items = this.callBase();\n          const exportButton = this._getExportToolbarButton();\n          if (exportButton) {\n            items.push(exportButton);\n            this._correctItemsPosition(items);\n          }\n          return items;\n        },\n        _getExportToolbarButton() {\n          const items = this._getExportToolbarItems();\n          if (0 === items.length) {\n            return null;\n          }\n          const toolbarButtonOptions = {\n            name: \"exportButton\",\n            location: \"after\",\n            locateInMenu: \"auto\",\n            sortIndex: 30,\n            options: {\n              items: items\n            }\n          };\n          if (1 === items.length) {\n            const widgetOptions = Object.assign(Object.assign({}, items[0]), {\n              hint: items[0].text,\n              elementAttr: {\n                class: \"dx-datagrid-export-button\"\n              }\n            });\n            toolbarButtonOptions.widget = \"dxButton\";\n            toolbarButtonOptions.showText = \"inMenu\";\n            toolbarButtonOptions.options = widgetOptions;\n          } else {\n            const widgetOptions = {\n              icon: \"export\",\n              displayExpr: \"text\",\n              items: items,\n              hint: this.option(\"export.texts.exportTo\"),\n              elementAttr: {\n                class: \"dx-datagrid-export-button\"\n              },\n              dropDownOptions: {\n                width: \"auto\",\n                _wrapperClassExternal: \"dx-datagrid-export-menu\"\n              }\n            };\n            toolbarButtonOptions.options = widgetOptions;\n            toolbarButtonOptions.widget = \"dxDropDownButton\";\n            toolbarButtonOptions.menuItemTemplate = (_data, _index, container) => {\n              this._createComponent($(container), List, {\n                items: items\n              });\n            };\n          }\n          return toolbarButtonOptions;\n        },\n        _getExportToolbarItems() {\n          var _a;\n          const exportOptions = this.option(\"export\");\n          const texts = this.option(\"export.texts\");\n          const formats = null !== (_a = this.option(\"export.formats\")) && void 0 !== _a ? _a : [];\n          if (!exportOptions.enabled) {\n            return [];\n          }\n          const items = [];\n          formats.forEach(formatType => {\n            let exportMethod = \"exportTo\";\n            let formatName = formatType.toUpperCase();\n            let exportAllIcon = \"export\";\n            if (\"xlsx\" === formatType) {\n              exportMethod = \"exportToExcel\";\n              formatName = \"Excel\";\n              exportAllIcon = \"xlsxfile\";\n            }\n            if (\"pdf\" === formatType) {\n              exportAllIcon = \"pdffile\";\n            }\n            items.push({\n              text: format(texts.exportAll, formatName),\n              icon: exportAllIcon,\n              onClick: () => {\n                this._exportController[exportMethod](false, formatType);\n              }\n            });\n            if (exportOptions.allowExportSelectedData) {\n              items.push({\n                text: format(texts.exportSelectedRows, formatName),\n                icon: \"exportselected\",\n                onClick: () => {\n                  this._exportController[exportMethod](true, formatType);\n                }\n              });\n            }\n          });\n          return items;\n        },\n        _correctItemsPosition(items) {\n          items.sort((itemA, itemB) => itemA.sortIndex - itemB.sortIndex);\n        },\n        _isExportButtonVisible() {\n          return this.option(\"export.enabled\");\n        },\n        optionChanged(args) {\n          this.callBase(args);\n          if (\"export\" === args.name) {\n            args.handled = true;\n            this._invalidate();\n          }\n        },\n        init() {\n          const that = this;\n          this.callBase();\n          this._exportController = this.getController(\"export\");\n          this._editingController = this.getController(\"editing\");\n          this._editingController.editingChanged.add(hasChanges => {\n            that.setToolbarItemDisabled(\"exportButton\", hasChanges);\n          });\n        },\n        isVisible() {\n          return this.callBase() || this._isExportButtonVisible();\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["$","Class","isDefined","isFunction","extend","getDefaultAlignment","export","clientExport","excel","format","messageLocalization","when","Deferred","List","prepareItems","dataGridCore","DATAGRID_EXPORT_MENU_CLASS","DATAGRID_EXPORT_BUTTON_CLASS","DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME","DATAGRID_EXPORT_ICON","DATAGRID_EXPORT_EXCEL_ICON","DATAGRID_EXPORT_SELECTED_ICON","DATAGRID_PDF_EXPORT_ICON","DataProvider","inherit","ctor","exportController","initialColumnWidthsByColumnIndex","selectedRowsOnly","_exportController","_initialColumnWidthsByColumnIndex","_selectedRowsOnly","_getGroupValue","item","key","data","rowType","groupIndex","summaryCells","groupColumn","_options","groupColumns","value","getDisplayValue","deserializeValue","result","caption","formatValue","length","getGroupRowSummaryText","summaryTexts","_correctCellIndex","cellIndex","_initOptions","_columnsController","getGroupColumns","excelWrapTextEnabled","option","columns","_getColumns","items","_selectionOnly","_getSelectedItems","_getAllItems","getVisibleIndex","bind","isHeadersVisible","customizeExportData","rtlEnabled","wrapTextEnabled","customizeExcelCell","hasCustomizeExcelCell","e","cellSourceData","gridCell","component","getHeaderStyles","bold","alignment","wrapText","getGroupRowStyle","getColumnStyles","columnStyles","getColumns","forEach","column","push","dataType","getStyles","_getTotalCellStyleId","_a","map","style","indexOf","getStyleId","rowIndex","getHeaderRowCount","isTotalCell","isGroupRow","getColumnsByAllRows","getColumnsWidths","c","width","getRowsCount","getGroupLevel","getCellType","isFinite","values","customizeText","lookup","ready","that","options","done","fail","_convertFromGridGroupSummaryItems","gridGroupSummaryItems","name","getCellData","isExcelJS","correctedCellIndex","columnsRow","gridColumn","itemValues","totalSummaryItemName","getSummaryText","groupSummaryItems","summaryItems","Array","isArray","i","displayValue","getCustomizeTextByDataType","correctCellIndex","isSummaryAlignByColumn","alignByColumn","getCellMerging","colspan","exportColspan","rowspan","getFrozenArea","x","y","ExportController","ViewController","_getEmptyCell","_updateColumnWidth","columnsController","rowCount","getRowCount","currentHeaderRow","getVisibleColumns","columnWidthsByColumnIndex","_updateLockCount","columnWidths","_getColumnWidths","_headersView","_rowsView","index","j","_needColumnExporting","currentColspan","_calculateExportColspan","slice","isBand","childColumns","getChildrenByBandColumn","reduce","childColumn","command","allowExporting","_getFooterSummaryItems","isTotal","estimatedItemsCount","summaryCell","itemsLength","_hasSummaryGroupFooters","groupItems","showInGroupFooter","_getItemsWithSummaryGroupFooters","sourceItems","beforeGroupFooterItems","groupFooterItems","concat","_updateGroupValuesWithSummaryByColumn","summaryValues","groupColumnCount","k","summaryItem","_processUnExportedItems","isCommand","includes","type","d","dataController","getController","footerItems","totalItem","summaryTotalItems","loadAll","totalAggregates","_getSummaryCells","resolve","reject","_calculateSummaryCells","_isDataColumn","selectionController","selectedRowData","getSelectedRowsData","headersView","rowsView","isVisible","getColumnWidths","init","getView","createAction","excludeValidators","callbackNames","getDataProvider","columnsLastRowVisibleColumns","exportToExcel","fileName","autoFilterEnabled","exportingAction","getAction","exportedAction","fileSavingAction","getData","exportTo","onExporting","eventArgs","cancel","publicMethods","selectionOnly","_isSelectedRows","selectionOnlyChanged","fire","registerModule","defaultOptions","enabled","excelFilterEnabled","formats","allowExportSelectedData","texts","exportAll","exportSelectedRows","controllers","extenders","editing","callbackList","callBase","_updateEditButtons","editingChanged","hasChanges","views","headerPanel","_getToolbarItems","exportButton","_getExportToolbarButton","_correctItemsPosition","_getExportToolbarItems","toolbarButtonOptions","location","locateInMenu","sortIndex","widgetOptions","Object","assign","hint","text","elementAttr","class","widget","showText","icon","displayExpr","dropDownOptions","_wrapperClassExternal","menuItemTemplate","_data","_index","container","_createComponent","exportOptions","formatType","exportMethod","formatName","toUpperCase","exportAllIcon","onClick","sort","itemA","itemB","_isExportButtonVisible","optionChanged","args","handled","_invalidate","_editingController","add","setToolbarItemDisabled"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/__internal/grids/data_grid/export/module.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/data_grid/export/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../../core/renderer\";\r\nimport Class from \"../../../../core/class\";\r\nimport {\r\n    isDefined,\r\n    isFunction\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    getDefaultAlignment\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    export as clientExport,\r\n    excel\r\n} from \"../../../../exporter\";\r\nimport {\r\n    format\r\n} from \"../../../../core/utils/string\";\r\nimport messageLocalization from \"../../../../localization/message\";\r\nimport \"../../../../ui/button\";\r\nimport \"../../../../ui/drop_down_button\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../../../core/utils/deferred\";\r\nimport List from \"../../../../ui/list_light\";\r\nimport {\r\n    prepareItems\r\n} from \"../../../../ui/grid_core/ui.grid_core.export\";\r\nimport dataGridCore from \"../module_core\";\r\nconst DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\";\r\nconst DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\";\r\nconst DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME = \"exportButton\";\r\nconst DATAGRID_EXPORT_ICON = \"export\";\r\nconst DATAGRID_EXPORT_EXCEL_ICON = \"xlsxfile\";\r\nconst DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\";\r\nconst DATAGRID_PDF_EXPORT_ICON = \"pdffile\";\r\nexport const DataProvider = Class.inherit({\r\n    ctor(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\r\n        this._exportController = exportController;\r\n        this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\r\n        this._selectedRowsOnly = selectedRowsOnly\r\n    },\r\n    _getGroupValue(item) {\r\n        const {\r\n            key: key,\r\n            data: data,\r\n            rowType: rowType,\r\n            groupIndex: groupIndex,\r\n            summaryCells: summaryCells\r\n        } = item;\r\n        const groupColumn = this._options.groupColumns[groupIndex];\r\n        const value = dataGridCore.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);\r\n        let result = `${groupColumn.caption}: ${dataGridCore.formatValue(value,groupColumn)}`;\r\n        if (summaryCells && summaryCells[0] && summaryCells[0].length) {\r\n            result += \" \" + dataGridCore.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts)\r\n        }\r\n        return result\r\n    },\r\n    _correctCellIndex: cellIndex => cellIndex,\r\n    _initOptions() {\r\n        const exportController = this._exportController;\r\n        const groupColumns = exportController._columnsController.getGroupColumns();\r\n        const excelWrapTextEnabled = exportController.option(\"export.excelWrapTextEnabled\");\r\n        this._options = {\r\n            columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\r\n            groupColumns: groupColumns,\r\n            items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\r\n            getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),\r\n            isHeadersVisible: exportController.option(\"showColumnHeaders\"),\r\n            summaryTexts: exportController.option(\"summary.texts\"),\r\n            customizeExportData: exportController.option(\"customizeExportData\"),\r\n            rtlEnabled: exportController.option(\"rtlEnabled\"),\r\n            wrapTextEnabled: isDefined(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option(\"wordWrapEnabled\"),\r\n            customizeExcelCell: exportController.option(\"export.customizeExcelCell\")\r\n        }\r\n    },\r\n    hasCustomizeExcelCell() {\r\n        return isDefined(this._options.customizeExcelCell)\r\n    },\r\n    customizeExcelCell(e, cellSourceData) {\r\n        if (this._options.customizeExcelCell) {\r\n            e.gridCell = cellSourceData;\r\n            if (isDefined(this._exportController) && isDefined(this._exportController.component)) {\r\n                e.component = this._exportController.component\r\n            }\r\n            this._options.customizeExcelCell(e)\r\n        }\r\n    },\r\n    getHeaderStyles: () => [{\r\n        bold: true,\r\n        alignment: \"center\",\r\n        wrapText: true\r\n    }, {\r\n        bold: true,\r\n        alignment: \"left\",\r\n        wrapText: true\r\n    }, {\r\n        bold: true,\r\n        alignment: \"right\",\r\n        wrapText: true\r\n    }],\r\n    getGroupRowStyle() {\r\n        return {\r\n            bold: true,\r\n            wrapText: false,\r\n            alignment: getDefaultAlignment(this._options.rtlEnabled)\r\n        }\r\n    },\r\n    getColumnStyles() {\r\n        const {\r\n            wrapTextEnabled: wrapTextEnabled\r\n        } = this._options;\r\n        const columnStyles = [];\r\n        this.getColumns().forEach(column => {\r\n            columnStyles.push({\r\n                alignment: column.alignment || \"left\",\r\n                format: column.format,\r\n                wrapText: wrapTextEnabled,\r\n                dataType: column.dataType\r\n            })\r\n        });\r\n        return columnStyles\r\n    },\r\n    getStyles() {\r\n        return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()]\r\n    },\r\n    _getTotalCellStyleId(cellIndex) {\r\n        var _a;\r\n        const alignment = (null === (_a = this.getColumns()[cellIndex]) || void 0 === _a ? void 0 : _a.alignment) || \"right\";\r\n        return this.getHeaderStyles().map(style => style.alignment).indexOf(alignment)\r\n    },\r\n    getStyleId(rowIndex, cellIndex) {\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            return 0\r\n        }\r\n        if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\r\n            return this._getTotalCellStyleId(cellIndex)\r\n        }\r\n        if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\r\n            return this.getHeaderStyles().length + this.getColumns().length\r\n        }\r\n        return cellIndex + this.getHeaderStyles().length\r\n    },\r\n    getColumns(getColumnsByAllRows) {\r\n        const {\r\n            columns: columns\r\n        } = this._options;\r\n        return getColumnsByAllRows ? columns : columns[columns.length - 1]\r\n    },\r\n    getColumnsWidths() {\r\n        const columns = this.getColumns();\r\n        return isDefined(columns) ? columns.map(c => c.width) : void 0\r\n    },\r\n    getRowsCount() {\r\n        return this._options.items.length + this.getHeaderRowCount()\r\n    },\r\n    getHeaderRowCount() {\r\n        if (this.isHeadersVisible()) {\r\n            return this._options.columns.length - 1\r\n        }\r\n        return 0\r\n    },\r\n    isGroupRow(rowIndex) {\r\n        return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType\r\n    },\r\n    getGroupLevel(rowIndex) {\r\n        const item = this._options.items[rowIndex - this.getHeaderRowCount()];\r\n        const groupIndex = item && item.groupIndex;\r\n        if (item && \"totalFooter\" === item.rowType) {\r\n            return 0\r\n        }\r\n        return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length\r\n    },\r\n    getCellType(rowIndex, cellIndex) {\r\n        const columns = this.getColumns();\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            return \"string\"\r\n        }\r\n        rowIndex -= this.getHeaderRowCount();\r\n        if (cellIndex < columns.length) {\r\n            const item = this._options.items.length && this._options.items[rowIndex];\r\n            const column = columns[cellIndex];\r\n            if (item && \"data\" === item.rowType) {\r\n                if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {\r\n                    return isDefined(column.lookup) ? column.lookup.dataType : column.dataType\r\n                }\r\n            }\r\n            return \"string\"\r\n        }\r\n    },\r\n    ready() {\r\n        const that = this;\r\n        that._initOptions();\r\n        const options = that._options;\r\n        return when(options.items).done(items => {\r\n            options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);\r\n            options.items = items\r\n        }).fail(() => {\r\n            options.items = []\r\n        })\r\n    },\r\n    _convertFromGridGroupSummaryItems(gridGroupSummaryItems) {\r\n        if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\r\n            return gridGroupSummaryItems.map(item => ({\r\n                value: item.value,\r\n                name: item.name\r\n            }))\r\n        }\r\n    },\r\n    getCellData(rowIndex, cellIndex, isExcelJS) {\r\n        let value;\r\n        let column;\r\n        const result = {\r\n            cellSourceData: {},\r\n            value: value\r\n        };\r\n        const columns = this.getColumns();\r\n        const correctedCellIndex = this._correctCellIndex(cellIndex);\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            const columnsRow = this.getColumns(true)[rowIndex];\r\n            column = columnsRow[cellIndex];\r\n            result.cellSourceData.rowType = \"header\";\r\n            result.cellSourceData.column = column && column.gridColumn;\r\n            result.value = column && column.caption\r\n        } else {\r\n            rowIndex -= this.getHeaderRowCount();\r\n            const item = this._options.items.length && this._options.items[rowIndex];\r\n            if (item) {\r\n                const itemValues = item.values;\r\n                result.cellSourceData.rowType = item.rowType;\r\n                result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\r\n                switch (item.rowType) {\r\n                    case \"groupFooter\":\r\n                    case \"totalFooter\":\r\n                        if (correctedCellIndex < itemValues.length) {\r\n                            value = itemValues[correctedCellIndex];\r\n                            if (isDefined(value)) {\r\n                                result.cellSourceData.value = value.value;\r\n                                result.cellSourceData.totalSummaryItemName = value.name;\r\n                                result.value = dataGridCore.getSummaryText(value, this._options.summaryTexts)\r\n                            } else {\r\n                                result.cellSourceData.value = void 0\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"group\":\r\n                        result.cellSourceData.groupIndex = item.groupIndex;\r\n                        if (cellIndex < 1) {\r\n                            result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\r\n                            result.cellSourceData.value = item.key[item.groupIndex];\r\n                            result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\r\n                            result.value = this._getGroupValue(item)\r\n                        } else {\r\n                            const summaryItems = item.values[correctedCellIndex];\r\n                            if (Array.isArray(summaryItems)) {\r\n                                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\r\n                                value = \"\";\r\n                                for (let i = 0; i < summaryItems.length; i++) {\r\n                                    value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + dataGridCore.getSummaryText(summaryItems[i], this._options.summaryTexts)\r\n                                }\r\n                                result.value = value\r\n                            } else {\r\n                                result.cellSourceData.value = void 0\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        column = columns[cellIndex];\r\n                        if (column) {\r\n                            const value = itemValues[correctedCellIndex];\r\n                            const displayValue = dataGridCore.getDisplayValue(column, value, item.data, item.rowType);\r\n                            if (!isFinite(displayValue) || isDefined(column.customizeText)) {\r\n                                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType(\"boolean\")) {\r\n                                    result.value = displayValue\r\n                                } else {\r\n                                    result.value = dataGridCore.formatValue(displayValue, column)\r\n                                }\r\n                            } else {\r\n                                result.value = displayValue\r\n                            }\r\n                            result.cellSourceData.value = value\r\n                        }\r\n                        result.cellSourceData.data = item.data\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    isHeadersVisible() {\r\n        return this._options.isHeadersVisible\r\n    },\r\n    isTotalCell(rowIndex, cellIndex) {\r\n        const {\r\n            items: items\r\n        } = this._options;\r\n        const item = items[rowIndex];\r\n        const correctCellIndex = this._correctCellIndex(cellIndex);\r\n        const isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\r\n        return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn\r\n    },\r\n    getCellMerging(rowIndex, cellIndex) {\r\n        const {\r\n            columns: columns\r\n        } = this._options;\r\n        const column = columns[rowIndex] && columns[rowIndex][cellIndex];\r\n        return column ? {\r\n            colspan: (column.exportColspan || 1) - 1,\r\n            rowspan: (column.rowspan || 1) - 1\r\n        } : {\r\n            colspan: 0,\r\n            rowspan: 0\r\n        }\r\n    },\r\n    getFrozenArea() {\r\n        return {\r\n            x: 0,\r\n            y: this.getHeaderRowCount()\r\n        }\r\n    }\r\n});\r\nexport const ExportController = dataGridCore.ViewController.inherit({}).inherit({\r\n    _getEmptyCell: () => ({\r\n        caption: \"\",\r\n        colspan: 1,\r\n        rowspan: 1\r\n    }),\r\n    _updateColumnWidth(column, width) {\r\n        column.width = width\r\n    },\r\n    _getColumns(initialColumnWidthsByColumnIndex) {\r\n        let result = [];\r\n        let i;\r\n        let columns;\r\n        const columnsController = this._columnsController;\r\n        const rowCount = columnsController.getRowCount();\r\n        for (i = 0; i <= rowCount; i++) {\r\n            const currentHeaderRow = [];\r\n            columns = columnsController.getVisibleColumns(i, true);\r\n            let columnWidthsByColumnIndex;\r\n            if (i === rowCount) {\r\n                if (this._updateLockCount) {\r\n                    columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex\r\n                } else {\r\n                    const columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\r\n                    if (columnWidths && columnWidths.length) {\r\n                        columnWidthsByColumnIndex = {};\r\n                        for (let i = 0; i < columns.length; i++) {\r\n                            columnWidthsByColumnIndex[columns[i].index] = columnWidths[i]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let j = 0; j < columns.length; j++) {\r\n                const column = extend({}, columns[j], {\r\n                    dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\r\n                    gridColumn: columns[j]\r\n                });\r\n                if (this._needColumnExporting(column)) {\r\n                    const currentColspan = this._calculateExportColspan(column);\r\n                    if (isDefined(currentColspan)) {\r\n                        column.exportColspan = currentColspan\r\n                    }\r\n                    if (columnWidthsByColumnIndex) {\r\n                        this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index])\r\n                    }\r\n                    currentHeaderRow.push(column)\r\n                }\r\n            }\r\n            result.push(currentHeaderRow)\r\n        }\r\n        columns = result[rowCount];\r\n        result = prepareItems(result.slice(0, -1), this._getEmptyCell());\r\n        result.push(columns);\r\n        return result\r\n    },\r\n    _calculateExportColspan(column) {\r\n        if (!column.isBand) {\r\n            return\r\n        }\r\n        const childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\r\n        if (!isDefined(childColumns)) {\r\n            return\r\n        }\r\n        return childColumns.reduce((result, childColumn) => {\r\n            if (this._needColumnExporting(childColumn)) {\r\n                return result + (this._calculateExportColspan(childColumn) || 1)\r\n            }\r\n            return result\r\n        }, 0)\r\n    },\r\n    _needColumnExporting: column => !column.command && (column.allowExporting || void 0 === column.allowExporting),\r\n    _getFooterSummaryItems(summaryCells, isTotal) {\r\n        const result = [];\r\n        let estimatedItemsCount = 1;\r\n        let i = 0;\r\n        do {\r\n            const values = [];\r\n            for (let j = 0; j < summaryCells.length; j++) {\r\n                const summaryCell = summaryCells[j];\r\n                const itemsLength = summaryCell.length;\r\n                if (estimatedItemsCount < itemsLength) {\r\n                    estimatedItemsCount = itemsLength\r\n                }\r\n                values.push(summaryCell[i])\r\n            }\r\n            result.push({\r\n                values: values,\r\n                rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\r\n            })\r\n        } while (i++ < estimatedItemsCount - 1);\r\n        return result\r\n    },\r\n    _hasSummaryGroupFooters() {\r\n        const groupItems = this.option(\"summary.groupItems\");\r\n        if (isDefined(groupItems)) {\r\n            for (let i = 0; i < groupItems.length; i++) {\r\n                if (groupItems[i].showInGroupFooter) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    },\r\n    _getItemsWithSummaryGroupFooters(sourceItems) {\r\n        let result = [];\r\n        let beforeGroupFooterItems = [];\r\n        let groupFooterItems = [];\r\n        for (let i = 0; i < sourceItems.length; i++) {\r\n            const item = sourceItems[i];\r\n            if (\"groupFooter\" === item.rowType) {\r\n                groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\r\n                result = result.concat(beforeGroupFooterItems, groupFooterItems);\r\n                beforeGroupFooterItems = []\r\n            } else {\r\n                beforeGroupFooterItems.push(item)\r\n            }\r\n        }\r\n        return result.length ? result : beforeGroupFooterItems\r\n    },\r\n    _updateGroupValuesWithSummaryByColumn(sourceItems) {\r\n        let summaryValues = [];\r\n        for (let i = 0; i < sourceItems.length; i++) {\r\n            const item = sourceItems[i];\r\n            const {\r\n                summaryCells: summaryCells\r\n            } = item;\r\n            if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\r\n                const groupColumnCount = item.values.length;\r\n                for (let j = 1; j < summaryCells.length; j++) {\r\n                    for (let k = 0; k < summaryCells[j].length; k++) {\r\n                        const summaryItem = summaryCells[j][k];\r\n                        if (summaryItem && summaryItem.alignByColumn) {\r\n                            if (!Array.isArray(summaryValues[j - groupColumnCount])) {\r\n                                summaryValues[j - groupColumnCount] = []\r\n                            }\r\n                            summaryValues[j - groupColumnCount].push(summaryItem)\r\n                        }\r\n                    }\r\n                }\r\n                if (summaryValues.length > 0) {\r\n                    item.values.push(...summaryValues);\r\n                    summaryValues = []\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _processUnExportedItems(items) {\r\n        const columns = this._columnsController.getVisibleColumns(null, true);\r\n        const groupColumns = this._columnsController.getGroupColumns();\r\n        let values;\r\n        let summaryCells;\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            let isCommand = false;\r\n            values = [];\r\n            summaryCells = [];\r\n            for (let j = 0; j < columns.length; j++) {\r\n                const column = columns[j];\r\n                isCommand || (isCommand = [\"detailExpand\", \"buttons\"].includes(column.type));\r\n                if (this._needColumnExporting(column)) {\r\n                    if (item.values) {\r\n                        if (\"group\" === item.rowType && !values.length) {\r\n                            values.push(item.key[item.groupIndex])\r\n                        } else {\r\n                            values.push(item.values[j])\r\n                        }\r\n                    }\r\n                    if (item.summaryCells) {\r\n                        if (\"group\" === item.rowType && !summaryCells.length) {\r\n                            const index = j - groupColumns.length + item.groupIndex;\r\n                            summaryCells.push(item.summaryCells[isCommand ? index : index + 1])\r\n                        } else {\r\n                            summaryCells.push(item.summaryCells[j])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (values.length) {\r\n                item.values = values\r\n            }\r\n            if (summaryCells.length) {\r\n                item.summaryCells = summaryCells\r\n            }\r\n        }\r\n    },\r\n    _getAllItems(data) {\r\n        const that = this;\r\n        const d = new Deferred;\r\n        const dataController = this.getController(\"data\");\r\n        const footerItems = dataController.footerItems();\r\n        const totalItem = footerItems.length && footerItems[0];\r\n        const summaryTotalItems = that.option(\"summary.totalItems\");\r\n        let summaryCells;\r\n        when(data).done(data => {\r\n            dataController.loadAll(data).done((sourceItems, totalAggregates) => {\r\n                that._updateGroupValuesWithSummaryByColumn(sourceItems);\r\n                if (that._hasSummaryGroupFooters()) {\r\n                    sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems)\r\n                }\r\n                summaryCells = totalItem && totalItem.summaryCells;\r\n                if (isDefined(totalAggregates) && summaryTotalItems) {\r\n                    summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates)\r\n                }\r\n                const summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\r\n                if (summaryItems) {\r\n                    sourceItems = sourceItems.concat(summaryItems)\r\n                }\r\n                that._processUnExportedItems(sourceItems);\r\n                d.resolve(sourceItems)\r\n            }).fail(d.reject)\r\n        }).fail(d.reject);\r\n        return d\r\n    },\r\n    _getSummaryCells(summaryTotalItems, totalAggregates) {\r\n        const dataController = this.getController(\"data\");\r\n        const columnsController = dataController._columnsController;\r\n        return dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), (summaryItem, column) => dataController._isDataColumn(column) ? column.index : -1)\r\n    },\r\n    _getSelectedItems() {\r\n        const selectionController = this.getController(\"selection\");\r\n        const selectedRowData = selectionController.getSelectedRowsData();\r\n        return this._getAllItems(selectedRowData)\r\n    },\r\n    _getColumnWidths: (headersView, rowsView) => headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths(),\r\n    init() {\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._headersView = this.getView(\"columnHeadersView\");\r\n        this.createAction(\"onExporting\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this.createAction(\"onExported\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this.createAction(\"onFileSaving\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        })\r\n    },\r\n    callbackNames: () => [\"selectionOnlyChanged\"],\r\n    getDataProvider(selectedRowsOnly) {\r\n        const columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\r\n        let initialColumnWidthsByColumnIndex;\r\n        if (columnWidths && columnWidths.length) {\r\n            initialColumnWidthsByColumnIndex = {};\r\n            const columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\r\n            for (let i = 0; i < columnsLastRowVisibleColumns.length; i++) {\r\n                initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i]\r\n            }\r\n        }\r\n        return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly)\r\n    },\r\n    exportToExcel(selectedRowsOnly) {\r\n        this._selectionOnly = selectedRowsOnly;\r\n        clientExport(this.component.getDataProvider(), {\r\n            fileName: this.option(\"export.fileName\"),\r\n            format: \"xlsx\",\r\n            selectedRowsOnly: !!selectedRowsOnly,\r\n            autoFilterEnabled: !!this.option(\"export.excelFilterEnabled\"),\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            exportingAction: this.getAction(\"onExporting\"),\r\n            exportedAction: this.getAction(\"onExported\"),\r\n            fileSavingAction: this.getAction(\"onFileSaving\")\r\n        }, excel.getData)\r\n    },\r\n    exportTo(selectedRowsOnly, format) {\r\n        this._selectionOnly = selectedRowsOnly;\r\n        const onExporting = this.getAction(\"onExporting\");\r\n        const eventArgs = {\r\n            selectedRowsOnly: !!selectedRowsOnly,\r\n            format: format,\r\n            fileName: this.option(\"export.fileName\"),\r\n            cancel: false\r\n        };\r\n        isFunction(onExporting) && onExporting(eventArgs)\r\n    },\r\n    publicMethods: () => [\"getDataProvider\", \"exportToExcel\"],\r\n    selectionOnly(value) {\r\n        if (isDefined(value)) {\r\n            this._isSelectedRows = value;\r\n            this.selectionOnlyChanged.fire()\r\n        } else {\r\n            return this._isSelectedRows\r\n        }\r\n    }\r\n});\r\ndataGridCore.registerModule(\"export\", {\r\n    defaultOptions: () => ({\r\n        export: {\r\n            enabled: false,\r\n            fileName: \"DataGrid\",\r\n            excelFilterEnabled: false,\r\n            formats: [\"xlsx\"],\r\n            excelWrapTextEnabled: void 0,\r\n            allowExportSelectedData: false,\r\n            texts: {\r\n                exportTo: messageLocalization.format(\"dxDataGrid-exportTo\"),\r\n                exportAll: messageLocalization.format(\"dxDataGrid-exportAll\"),\r\n                exportSelectedRows: messageLocalization.format(\"dxDataGrid-exportSelectedRows\")\r\n            }\r\n        }\r\n    }),\r\n    controllers: {\r\n        export: ExportController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                callbackNames() {\r\n                    const callbackList = this.callBase();\r\n                    return isDefined(callbackList) ? callbackList.push(\"editingChanged\") : [\"editingChanged\"]\r\n                },\r\n                _updateEditButtons() {\r\n                    this.callBase();\r\n                    this.editingChanged.fire(this.hasChanges())\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            headerPanel: {\r\n                _getToolbarItems() {\r\n                    const items = this.callBase();\r\n                    const exportButton = this._getExportToolbarButton();\r\n                    if (exportButton) {\r\n                        items.push(exportButton);\r\n                        this._correctItemsPosition(items)\r\n                    }\r\n                    return items\r\n                },\r\n                _getExportToolbarButton() {\r\n                    const items = this._getExportToolbarItems();\r\n                    if (0 === items.length) {\r\n                        return null\r\n                    }\r\n                    const toolbarButtonOptions = {\r\n                        name: \"exportButton\",\r\n                        location: \"after\",\r\n                        locateInMenu: \"auto\",\r\n                        sortIndex: 30,\r\n                        options: {\r\n                            items: items\r\n                        }\r\n                    };\r\n                    if (1 === items.length) {\r\n                        const widgetOptions = Object.assign(Object.assign({}, items[0]), {\r\n                            hint: items[0].text,\r\n                            elementAttr: {\r\n                                class: \"dx-datagrid-export-button\"\r\n                            }\r\n                        });\r\n                        toolbarButtonOptions.widget = \"dxButton\";\r\n                        toolbarButtonOptions.showText = \"inMenu\";\r\n                        toolbarButtonOptions.options = widgetOptions\r\n                    } else {\r\n                        const widgetOptions = {\r\n                            icon: \"export\",\r\n                            displayExpr: \"text\",\r\n                            items: items,\r\n                            hint: this.option(\"export.texts.exportTo\"),\r\n                            elementAttr: {\r\n                                class: \"dx-datagrid-export-button\"\r\n                            },\r\n                            dropDownOptions: {\r\n                                width: \"auto\",\r\n                                _wrapperClassExternal: \"dx-datagrid-export-menu\"\r\n                            }\r\n                        };\r\n                        toolbarButtonOptions.options = widgetOptions;\r\n                        toolbarButtonOptions.widget = \"dxDropDownButton\";\r\n                        toolbarButtonOptions.menuItemTemplate = (_data, _index, container) => {\r\n                            this._createComponent($(container), List, {\r\n                                items: items\r\n                            })\r\n                        }\r\n                    }\r\n                    return toolbarButtonOptions\r\n                },\r\n                _getExportToolbarItems() {\r\n                    var _a;\r\n                    const exportOptions = this.option(\"export\");\r\n                    const texts = this.option(\"export.texts\");\r\n                    const formats = null !== (_a = this.option(\"export.formats\")) && void 0 !== _a ? _a : [];\r\n                    if (!exportOptions.enabled) {\r\n                        return []\r\n                    }\r\n                    const items = [];\r\n                    formats.forEach(formatType => {\r\n                        let exportMethod = \"exportTo\";\r\n                        let formatName = formatType.toUpperCase();\r\n                        let exportAllIcon = \"export\";\r\n                        if (\"xlsx\" === formatType) {\r\n                            exportMethod = \"exportToExcel\";\r\n                            formatName = \"Excel\";\r\n                            exportAllIcon = \"xlsxfile\"\r\n                        }\r\n                        if (\"pdf\" === formatType) {\r\n                            exportAllIcon = \"pdffile\"\r\n                        }\r\n                        items.push({\r\n                            text: format(texts.exportAll, formatName),\r\n                            icon: exportAllIcon,\r\n                            onClick: () => {\r\n                                this._exportController[exportMethod](false, formatType)\r\n                            }\r\n                        });\r\n                        if (exportOptions.allowExportSelectedData) {\r\n                            items.push({\r\n                                text: format(texts.exportSelectedRows, formatName),\r\n                                icon: \"exportselected\",\r\n                                onClick: () => {\r\n                                    this._exportController[exportMethod](true, formatType)\r\n                                }\r\n                            })\r\n                        }\r\n                    });\r\n                    return items\r\n                },\r\n                _correctItemsPosition(items) {\r\n                    items.sort((itemA, itemB) => itemA.sortIndex - itemB.sortIndex)\r\n                },\r\n                _isExportButtonVisible() {\r\n                    return this.option(\"export.enabled\")\r\n                },\r\n                optionChanged(args) {\r\n                    this.callBase(args);\r\n                    if (\"export\" === args.name) {\r\n                        args.handled = true;\r\n                        this._invalidate()\r\n                    }\r\n                },\r\n                init() {\r\n                    const that = this;\r\n                    this.callBase();\r\n                    this._exportController = this.getController(\"export\");\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this._editingController.editingChanged.add(hasChanges => {\r\n                        that.setToolbarItemDisabled(\"exportButton\", hasChanges)\r\n                    })\r\n                },\r\n                isVisible() {\r\n                    return this.callBase() || this._isExportButtonVisible()\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}