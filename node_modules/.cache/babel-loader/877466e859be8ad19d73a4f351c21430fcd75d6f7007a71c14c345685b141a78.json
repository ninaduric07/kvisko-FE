{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/selection/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../../core/renderer\";\nimport eventsEngine from \"../../../../events/core/events_engine\";\nimport { isDefined } from \"../../../../core/utils/type\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { touch } from \"../../../../core/utils/support\";\nimport { name as clickEventName } from \"../../../../events/click\";\nimport messageLocalization from \"../../../../localization/message\";\nimport { addNamespace, isCommandKeyPressed } from \"../../../../events/utils/index\";\nimport holdEvent from \"../../../../events/hold\";\nimport Selection from \"../../../../ui/selection/selection\";\nimport { Deferred } from \"../../../../core/utils/deferred\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport { equalByValue } from \"../../../../core/utils/common\";\nimport gridCoreUtils from \"../module_utils\";\nimport modules from \"../modules\";\nconst EDITOR_CELL_CLASS = \"dx-editor-cell\";\nconst ROW_CLASS = \"dx-row\";\nconst ROW_SELECTION_CLASS = \"dx-selection\";\nconst SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nconst CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\nconst COMMAND_SELECT_CLASS = \"dx-command-select\";\nconst SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nconst DATA_ROW_CLASS = \"dx-data-row\";\nconst SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\nconst SELECTION_MODE = \"selection.mode\";\nconst processLongTap = function (that, dxEvent) {\n  const selectionController = that.getController(\"selection\");\n  const rowsView = that.getView(\"rowsView\");\n  const $row = $(dxEvent.target).closest(\".dx-data-row\");\n  const rowIndex = rowsView.getRowIndex($row);\n  if (rowIndex < 0) {\n    return;\n  }\n  if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\n    if (selectionController.isSelectionWithCheckboxes()) {\n      selectionController.stopSelectionWithCheckboxes();\n    } else {\n      selectionController.startSelectionWithCheckboxes();\n    }\n  } else {\n    if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.startSelectionWithCheckboxes();\n    }\n    if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.changeItemSelection(rowIndex, {\n        control: true\n      });\n    }\n  }\n};\nconst SelectionController = modules.Controller.inherit(function () {\n  const selectionCellTemplate = (container, options) => {\n    const {\n      component: component\n    } = options;\n    const rowsView = component.getView(\"rowsView\");\n    if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\n      options.value = component.isRowSelected(options.row.key);\n    }\n    rowsView.renderSelectCheckBoxContainer($(container), options);\n  };\n  const selectionHeaderTemplate = (container, options) => {\n    const {\n      column: column\n    } = options;\n    const $cellElement = $(container);\n    const columnHeadersView = options.component.getView(\"columnHeadersView\");\n    $cellElement.addClass(\"dx-editor-cell\");\n    columnHeadersView._renderSelectAllCheckBox($cellElement, column);\n    columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement);\n  };\n  return {\n    init() {\n      const {\n        deferred: deferred,\n        selectAllMode: selectAllMode,\n        mode: mode\n      } = this.option(\"selection\") || {};\n      if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\n        errors.log(\"W1018\");\n      }\n      this._dataController = this.getController(\"data\");\n      this._selectionMode = mode;\n      this._isSelectionWithCheckboxes = false;\n      this._selection = this._createSelection();\n      this._updateSelectColumn();\n      this.createAction(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this._dataController && this._dataController.pushed.add(this._handleDataPushed.bind(this));\n    },\n    _handleDataPushed(changes) {\n      let removedKeys = changes.filter(change => \"remove\" === change.type).map(change => change.key);\n      if (this.option(\"selection.deferred\")) {\n        const selectedKeys = this._dataController.items().filter(item => item.isSelected).map(item => item.key);\n        removedKeys = removedKeys.filter(key => selectedKeys.find(selectedKey => equalByValue(selectedKey, key)));\n      }\n      removedKeys.length && this.deselectRows(removedKeys);\n    },\n    _getSelectionConfig() {\n      const dataController = this._dataController;\n      const columnsController = this.getController(\"columns\");\n      const selectionOptions = this.option(\"selection\") || {};\n      const {\n        deferred: deferred\n      } = selectionOptions;\n      const scrollingMode = this.option(\"scrolling.mode\");\n      const virtualPaging = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n      const allowSelectAll = this.option(\"selection.allowSelectAll\");\n      const legacyScrollingMode = this.option(\"scrolling.legacyMode\");\n      return {\n        selectedKeys: this.option(\"selectedRowKeys\"),\n        mode: this._selectionMode,\n        deferred: deferred,\n        maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\n        selectionFilter: this.option(\"selectionFilter\"),\n        ignoreDisabledItems: true,\n        allowLoadByRange() {\n          const hasGroupColumns = columnsController.getGroupColumns().length > 0;\n          return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred;\n        },\n        key: () => null === dataController || void 0 === dataController ? void 0 : dataController.key(),\n        keyOf: item => null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item),\n        dataFields() {\n          var _a;\n          return null === (_a = dataController.dataSource()) || void 0 === _a ? void 0 : _a.select();\n        },\n        load(options) {\n          var _a;\n          return (null === (_a = dataController.dataSource()) || void 0 === _a ? void 0 : _a.load(options)) || new Deferred().resolve([]);\n        },\n        plainItems: () => dataController.items(true),\n        isItemSelected: item => item.selected,\n        isSelectableItem: item => \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow,\n        getItemData: item => isDefined(null === item || void 0 === item ? void 0 : item.rowType) ? (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) : item,\n        filter: () => dataController.getCombinedFilter(deferred),\n        totalCount: () => dataController.totalCount(),\n        getLoadOptions(loadItemIndex, focusedItemIndex, shiftItemIndex) {\n          var _a, _b;\n          const {\n            sort: sort,\n            filter: filter\n          } = null !== (_b = null === (_a = dataController.dataSource()) || void 0 === _a ? void 0 : _a.lastLoadOptions()) && void 0 !== _b ? _b : {};\n          let minIndex = Math.min(loadItemIndex, focusedItemIndex);\n          let maxIndex = Math.max(loadItemIndex, focusedItemIndex);\n          if (isDefined(shiftItemIndex)) {\n            minIndex = Math.min(shiftItemIndex, minIndex);\n            maxIndex = Math.max(shiftItemIndex, maxIndex);\n          }\n          const take = maxIndex - minIndex + 1;\n          return {\n            skip: minIndex,\n            take: take,\n            filter: filter,\n            sort: sort\n          };\n        },\n        onSelectionChanged: this._updateSelectedItems.bind(this)\n      };\n    },\n    _updateSelectColumn() {\n      const columnsController = this.getController(\"columns\");\n      const isSelectColumnVisible = this.isSelectColumnVisible();\n      columnsController.addCommandColumn({\n        type: \"selection\",\n        command: \"select\",\n        visible: isSelectColumnVisible,\n        visibleIndex: -1,\n        dataType: \"boolean\",\n        alignment: \"center\",\n        cssClass: \"dx-command-select\",\n        width: \"auto\",\n        cellTemplate: selectionCellTemplate,\n        headerCellTemplate: selectionHeaderTemplate\n      });\n      columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible);\n    },\n    _createSelection() {\n      const options = this._getSelectionConfig();\n      return new Selection(options);\n    },\n    _fireSelectionChanged(options) {\n      const argument = this.option(\"selection.deferred\") ? {\n        selectionFilter: this.option(\"selectionFilter\")\n      } : {\n        selectedRowKeys: this.option(\"selectedRowKeys\")\n      };\n      this.selectionChanged.fire(argument);\n      if (options) {\n        this.executeAction(\"onSelectionChanged\", options);\n      }\n    },\n    _updateCheckboxesState(options) {\n      const {\n        isDeferredMode: isDeferredMode\n      } = options;\n      const {\n        selectionFilter: selectionFilter\n      } = options;\n      const {\n        selectedItemKeys: selectedItemKeys\n      } = options;\n      const {\n        removedItemKeys: removedItemKeys\n      } = options;\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        if (isDeferredMode ? selectionFilter && function (that, selectionFilter) {\n          let keyIndex = 0;\n          const store = that._dataController.store();\n          const key = store && store.key();\n          const isComplexKey = Array.isArray(key);\n          if (!selectionFilter.length) {\n            return false;\n          }\n          if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\n            for (let i = 0; i < selectionFilter.length; i++) {\n              if (Array.isArray(selectionFilter[i])) {\n                if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\n                  return true;\n                }\n                keyIndex++;\n              }\n            }\n            return false;\n          }\n          return key !== selectionFilter[0];\n        }(this, selectionFilter) : selectedItemKeys.length > 1) {\n          this.startSelectionWithCheckboxes();\n        } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\n          this.stopSelectionWithCheckboxes();\n        }\n      }\n    },\n    _updateSelectedItems(args) {\n      const that = this;\n      let selectionChangedOptions;\n      const isDeferredMode = that.option(\"selection.deferred\");\n      const selectionFilter = that._selection.selectionFilter();\n      const dataController = that._dataController;\n      const items = dataController.items(true);\n      const visibleItems = dataController.items();\n      if (!items) {\n        return;\n      }\n      const isSelectionWithCheckboxes = that.isSelectionWithCheckboxes();\n      const changedItemIndexes = that.getChangedItemIndexes(items);\n      const visibleChangedItemIndexes = that.getChangedItemIndexes(visibleItems);\n      that._updateCheckboxesState({\n        selectedItemKeys: args.selectedItemKeys,\n        removedItemKeys: args.removedItemKeys,\n        selectionFilter: selectionFilter,\n        isDeferredMode: isDeferredMode\n      });\n      if (changedItemIndexes.length || isSelectionWithCheckboxes !== that.isSelectionWithCheckboxes()) {\n        dataController.updateItems({\n          changeType: \"updateSelection\",\n          itemIndexes: visibleChangedItemIndexes\n        });\n      }\n      if (isDeferredMode) {\n        that.option(\"selectionFilter\", selectionFilter);\n        selectionChangedOptions = {};\n      } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\n        that._selectedItemsInternalChange = true;\n        that.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\n        that._selectedItemsInternalChange = false;\n        selectionChangedOptions = {\n          selectedRowsData: args.selectedItems.slice(0),\n          selectedRowKeys: args.selectedItemKeys.slice(0),\n          currentSelectedRowKeys: args.addedItemKeys.slice(0),\n          currentDeselectedRowKeys: args.removedItemKeys.slice(0)\n        };\n      }\n      that._fireSelectionChanged(selectionChangedOptions);\n    },\n    getChangedItemIndexes(items) {\n      const that = this;\n      const itemIndexes = [];\n      const isDeferredSelection = this.option(\"selection.deferred\");\n      for (let i = 0, {\n          length: length\n        } = items; i < length; i++) {\n        const row = items[i];\n        const isItemSelected = that.isRowSelected(isDeferredSelection ? row.data : row.key);\n        if (that._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\n          itemIndexes.push(i);\n        }\n      }\n      return itemIndexes;\n    },\n    callbackNames: () => [\"selectionChanged\"],\n    optionChanged(args) {\n      this.callBase(args);\n      switch (args.name) {\n        case \"selection\":\n          {\n            const oldSelectionMode = this._selectionMode;\n            this.init();\n            if (\"selection.showCheckBoxesMode\" !== args.fullName) {\n              const selectionMode = this._selectionMode;\n              let selectedRowKeys = this.option(\"selectedRowKeys\");\n              if (oldSelectionMode !== selectionMode) {\n                if (\"single\" === selectionMode) {\n                  if (selectedRowKeys.length > 1) {\n                    selectedRowKeys = [selectedRowKeys[0]];\n                  }\n                } else if (\"multiple\" !== selectionMode) {\n                  selectedRowKeys = [];\n                }\n              }\n              this.selectRows(selectedRowKeys).always(() => {\n                this._fireSelectionChanged();\n              });\n            }\n            this.getController(\"columns\").updateColumns();\n            args.handled = true;\n            break;\n          }\n        case \"selectionFilter\":\n          this._selection.selectionFilter(args.value);\n          args.handled = true;\n          break;\n        case \"selectedRowKeys\":\n          {\n            const value = args.value || [];\n            if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\n              this.selectRows(value);\n            }\n            args.handled = true;\n            break;\n          }\n      }\n    },\n    publicMethods: () => [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"],\n    isRowSelected(arg) {\n      return this._selection.isItemSelected(arg);\n    },\n    isSelectColumnVisible() {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    _isOnePageSelectAll() {\n      return \"page\" === this.option(\"selection.selectAllMode\");\n    },\n    isSelectAll() {\n      return this._selection.getSelectAllState(this._isOnePageSelectAll());\n    },\n    selectAll() {\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        this.startSelectionWithCheckboxes();\n      }\n      return this._selection.selectAll(this._isOnePageSelectAll());\n    },\n    deselectAll() {\n      return this._selection.deselectAll(this._isOnePageSelectAll());\n    },\n    clearSelection() {\n      return this.selectedItemKeys([]);\n    },\n    refresh() {\n      const selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n      if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\n        return this.selectedItemKeys(selectedRowKeys);\n      }\n      return new Deferred().resolve().promise();\n    },\n    selectedItemKeys(value, preserve, isDeselect, isSelectAll) {\n      return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll);\n    },\n    getSelectedRowKeys() {\n      return this._selection.getSelectedItemKeys();\n    },\n    selectRows(keys, preserve) {\n      return this.selectedItemKeys(keys, preserve);\n    },\n    deselectRows(keys) {\n      return this.selectedItemKeys(keys, true, true);\n    },\n    selectRowsByIndexes(indexes) {\n      const items = this._dataController.items();\n      const keys = [];\n      if (!Array.isArray(indexes)) {\n        indexes = Array.prototype.slice.call(arguments, 0);\n      }\n      each(indexes, function () {\n        const item = items[this];\n        if (item && \"data\" === item.rowType) {\n          keys.push(item.key);\n        }\n      });\n      return this.selectRows(keys);\n    },\n    getSelectedRowsData() {\n      return this._selection.getSelectedItems();\n    },\n    changeItemSelection(visibleItemIndex, keys, setFocusOnly) {\n      keys = keys || {};\n      if (this.isSelectionWithCheckboxes()) {\n        keys.control = true;\n      }\n      const loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);\n      return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly);\n    },\n    focusedItemIndex(itemIndex) {\n      const that = this;\n      if (isDefined(itemIndex)) {\n        that._selection._focusedItemIndex = itemIndex;\n      } else {\n        return that._selection._focusedItemIndex;\n      }\n    },\n    isSelectionWithCheckboxes() {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    startSelectionWithCheckboxes() {\n      const that = this;\n      if (\"multiple\" === that.option(SELECTION_MODE) && !that.isSelectionWithCheckboxes()) {\n        that._isSelectionWithCheckboxes = true;\n        that._updateSelectColumn();\n        return true;\n      }\n      return false;\n    },\n    stopSelectionWithCheckboxes() {\n      const that = this;\n      if (that._isSelectionWithCheckboxes) {\n        that._isSelectionWithCheckboxes = false;\n        that._updateSelectColumn();\n        return true;\n      }\n      return false;\n    }\n  };\n}());\nexport const selectionModule = {\n  defaultOptions: () => ({\n    selection: {\n      mode: \"none\",\n      showCheckBoxesMode: \"onClick\",\n      allowSelectAll: true,\n      selectAllMode: \"allPages\",\n      maxFilterLengthInRequest: 1500,\n      deferred: false\n    },\n    selectionFilter: [],\n    selectedRowKeys: []\n  }),\n  controllers: {\n    selection: SelectionController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init() {\n          const selectionController = this.getController(\"selection\");\n          const isDeferredMode = this.option(\"selection.deferred\");\n          this.callBase.apply(this, arguments);\n          if (isDeferredMode) {\n            selectionController._updateCheckboxesState({\n              isDeferredMode: true,\n              selectionFilter: this.option(\"selectionFilter\")\n            });\n          }\n        },\n        _loadDataSource() {\n          const that = this;\n          return that.callBase().always(() => {\n            that.getController(\"selection\").refresh();\n          });\n        },\n        _processDataItem(item, options) {\n          const selectionController = this.getController(\"selection\");\n          const hasSelectColumn = selectionController.isSelectColumnVisible();\n          const isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\n          const dataItem = this.callBase.apply(this, arguments);\n          dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\n          if (hasSelectColumn && dataItem.values) {\n            for (let i = 0; i < options.visibleColumns.length; i++) {\n              if (\"select\" === options.visibleColumns[i].command) {\n                dataItem.values[i] = dataItem.isSelected;\n                break;\n              }\n            }\n          }\n          return dataItem;\n        },\n        refresh(options) {\n          const that = this;\n          const d = new Deferred();\n          this.callBase.apply(this, arguments).done(() => {\n            if (!options || options.selection) {\n              that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject);\n            } else {\n              d.resolve();\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        _handleDataChanged(e) {\n          this.callBase.apply(this, arguments);\n          if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\n            this.getController(\"selection\").focusedItemIndex(-1);\n          }\n        },\n        _applyChange(change) {\n          if (change && \"updateSelection\" === change.changeType) {\n            change.items.forEach((item, index) => {\n              const currentItem = this._items[index];\n              if (currentItem) {\n                currentItem.isSelected = item.isSelected;\n                currentItem.values = item.values;\n              }\n            });\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _endUpdateCore() {\n          const changes = this._changes;\n          const isUpdateSelection = changes.length > 1 && changes.every(change => \"updateSelection\" === change.changeType);\n          if (isUpdateSelection) {\n            const itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));\n            this._changes = [{\n              changeType: \"updateSelection\",\n              itemIndexes: itemIndexes\n            }];\n          }\n          this.callBase.apply(this, arguments);\n        }\n      },\n      contextMenu: {\n        _contextMenuPrepared(options) {\n          const dxEvent = options.event;\n          if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\n            return;\n          }\n          processLongTap(this, dxEvent);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: {\n        init() {\n          this.callBase();\n          this.getController(\"selection\").selectionChanged.add(this._updateSelectAllValue.bind(this));\n        },\n        _updateSelectAllValue() {\n          const that = this;\n          const $element = that.element();\n          const $editor = $element && $element.find(\".dx-select-checkbox\");\n          if ($element && $editor.length && \"multiple\" === that.option(\"selection.mode\")) {\n            const selectAllValue = that.getController(\"selection\").isSelectAll();\n            const hasSelection = false !== selectAllValue;\n            const isVisible = that.option(\"selection.allowSelectAll\") ? !that.getController(\"data\").isEmpty() : hasSelection;\n            $editor.dxCheckBox(\"instance\").option({\n              visible: isVisible,\n              value: selectAllValue\n            });\n          }\n        },\n        _handleDataChanged(e) {\n          this.callBase(e);\n          if (!e || \"refresh\" === e.changeType || e.repaintChangesOnly && \"update\" === e.changeType) {\n            this.waitAsyncTemplates().done(() => {\n              this._updateSelectAllValue();\n            });\n          }\n        },\n        _renderSelectAllCheckBox($container, column) {\n          const that = this;\n          const selectionController = that.getController(\"selection\");\n          const isEmptyData = that.getController(\"data\").isEmpty();\n          const groupElement = $(\"<div>\").appendTo($container).addClass(\"dx-select-checkbox\");\n          that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), groupElement);\n          that.getController(\"editorFactory\").createEditor(groupElement, extend({}, column, {\n            parentType: \"headerRow\",\n            dataType: \"boolean\",\n            value: selectionController.isSelectAll(),\n            editorOptions: {\n              visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll())\n            },\n            tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\n            setValue(value, e) {\n              const allowSelectAll = that.option(\"selection.allowSelectAll\");\n              e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\n              if (!e.event || selectionController.isSelectAll() === value) {\n                return;\n              }\n              if (e.value && !allowSelectAll) {\n                e.component.option(\"value\", false);\n              } else {\n                e.value ? selectionController.selectAll() : selectionController.deselectAll();\n              }\n              e.event.preventDefault();\n            }\n          }));\n          return groupElement;\n        },\n        _attachSelectAllCheckBoxClickEvent($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(e => {\n            const {\n              event: event\n            } = e;\n            if (!$(event.target).closest(\".dx-select-checkbox\").length) {\n              eventsEngine.trigger($(event.currentTarget).children(\".dx-select-checkbox\"), clickEventName);\n            }\n            event.preventDefault();\n          }));\n        }\n      },\n      rowsView: {\n        renderSelectCheckBoxContainer($container, options) {\n          if (\"data\" === options.rowType && !options.row.isNewRow) {\n            $container.addClass(\"dx-editor-cell\");\n            this._attachCheckBoxClickEvent($container);\n            this._renderSelectCheckBox($container, options);\n          } else {\n            gridCoreUtils.setEmptyText($container);\n          }\n        },\n        _renderSelectCheckBox(container, options) {\n          const groupElement = $(\"<div>\").addClass(\"dx-select-checkbox\").appendTo(container);\n          this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), groupElement);\n          this.getController(\"editorFactory\").createEditor(groupElement, extend({}, options.column, {\n            parentType: \"dataRow\",\n            dataType: \"boolean\",\n            lookup: null,\n            value: options.value,\n            setValue(value, e) {\n              var _a;\n              if (\"keydown\" === (null === (_a = null === e || void 0 === e ? void 0 : e.event) || void 0 === _a ? void 0 : _a.type)) {\n                eventsEngine.trigger(e.element, clickEventName, e);\n              }\n            },\n            row: options.row\n          }));\n          return groupElement;\n        },\n        _attachCheckBoxClickEvent($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n            const selectionController = this.getController(\"selection\");\n            const {\n              event: event\n            } = e;\n            const rowIndex = this.getRowIndex($(event.currentTarget).closest(\".dx-row\"));\n            if (rowIndex >= 0) {\n              selectionController.startSelectionWithCheckboxes();\n              selectionController.changeItemSelection(rowIndex, {\n                shift: event.shiftKey\n              });\n              if ($(event.target).closest(\".dx-select-checkbox\").length) {\n                this.getController(\"data\").updateItems({\n                  changeType: \"updateSelection\",\n                  itemIndexes: [rowIndex]\n                });\n              }\n            }\n          }));\n        },\n        _update(change) {\n          const that = this;\n          const tableElements = that.getTableElements();\n          if (\"updateSelection\" === change.changeType) {\n            if (tableElements.length > 0) {\n              each(tableElements, (_, tableElement) => {\n                each(change.itemIndexes || [], (_, index) => {\n                  let $row;\n                  if (change.items[index]) {\n                    $row = that._getRowElements($(tableElement)).eq(index);\n                    if ($row.length) {\n                      const {\n                        isSelected: isSelected\n                      } = change.items[index];\n                      $row.toggleClass(\"dx-selection\", void 0 === isSelected ? false : isSelected).find(\".dx-select-checkbox\").dxCheckBox(\"option\", \"value\", isSelected);\n                      that.setAria(\"selected\", isSelected, $row);\n                    }\n                  }\n                });\n              });\n              that._updateCheckboxesClass();\n            }\n          } else {\n            that.callBase(change);\n          }\n        },\n        _createTable() {\n          const that = this;\n          const selectionMode = that.option(\"selection.mode\");\n          const $table = that.callBase.apply(that, arguments);\n          if (\"none\" !== selectionMode) {\n            if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {\n              eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".dx-data-row\", that.createAction(e => {\n                processLongTap(that.component, e.event);\n                e.event.stopPropagation();\n              }));\n            }\n            eventsEngine.on($table, \"mousedown selectstart\", that.createAction(e => {\n              const {\n                event: event\n              } = e;\n              if (event.shiftKey) {\n                event.preventDefault();\n              }\n            }));\n          }\n          return $table;\n        },\n        _createRow(row) {\n          const $row = this.callBase.apply(this, arguments);\n          if (row) {\n            const {\n              isSelected: isSelected\n            } = row;\n            if (isSelected) {\n              $row.addClass(\"dx-selection\");\n            }\n            const selectionMode = this.option(SELECTION_MODE);\n            if (\"none\" !== selectionMode) {\n              this.setAria(\"selected\", isSelected, $row);\n            }\n          }\n          return $row;\n        },\n        _rowClick(e) {\n          const that = this;\n          const dxEvent = e.event;\n          const isSelectionDisabled = $(dxEvent.target).closest(\".dx-selection-disabled\").length;\n          if (!that.isClickableElement($(dxEvent.target))) {\n            if (!isSelectionDisabled && (\"multiple\" !== that.option(SELECTION_MODE) || \"always\" !== that.option(SHOW_CHECKBOXES_MODE))) {\n              if (that.getController(\"selection\").changeItemSelection(e.rowIndex, {\n                control: isCommandKeyPressed(dxEvent),\n                shift: dxEvent.shiftKey\n              })) {\n                dxEvent.preventDefault();\n                e.handled = true;\n              }\n            }\n            that.callBase(e);\n          }\n        },\n        isClickableElement($target) {\n          const isCommandSelect = $target.closest(\".dx-command-select\").length;\n          return !!isCommandSelect;\n        },\n        _renderCore(change) {\n          const deferred = this.callBase(change);\n          this._updateCheckboxesClass();\n          return deferred;\n        },\n        _updateCheckboxesClass() {\n          const tableElements = this.getTableElements();\n          const selectionController = this.getController(\"selection\");\n          const isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\n          each(tableElements, (_, tableElement) => {\n            $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden);\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["$","eventsEngine","isDefined","each","extend","touch","name","clickEventName","messageLocalization","addNamespace","isCommandKeyPressed","holdEvent","Selection","Deferred","errors","equalByValue","gridCoreUtils","modules","EDITOR_CELL_CLASS","ROW_CLASS","ROW_SELECTION_CLASS","SELECT_CHECKBOX_CLASS","CHECKBOXES_HIDDEN_CLASS","COMMAND_SELECT_CLASS","SELECTION_DISABLED_CLASS","DATA_ROW_CLASS","SHOW_CHECKBOXES_MODE","SELECTION_MODE","processLongTap","that","dxEvent","selectionController","getController","rowsView","getView","$row","target","closest","rowIndex","getRowIndex","option","isSelectionWithCheckboxes","stopSelectionWithCheckboxes","startSelectionWithCheckboxes","changeItemSelection","control","SelectionController","Controller","inherit","selectionCellTemplate","container","options","component","value","isRowSelected","row","key","renderSelectCheckBoxContainer","selectionHeaderTemplate","column","$cellElement","columnHeadersView","addClass","_renderSelectAllCheckBox","_attachSelectAllCheckBoxClickEvent","init","deferred","selectAllMode","mode","log","_dataController","_selectionMode","_isSelectionWithCheckboxes","_selection","_createSelection","_updateSelectColumn","createAction","excludeValidators","pushed","add","_handleDataPushed","bind","changes","removedKeys","filter","change","type","map","selectedKeys","items","item","isSelected","find","selectedKey","length","deselectRows","_getSelectionConfig","dataController","columnsController","selectionOptions","scrollingMode","virtualPaging","allowSelectAll","legacyScrollingMode","maxFilterLengthInRequest","selectionFilter","ignoreDisabledItems","allowLoadByRange","hasGroupColumns","getGroupColumns","keyOf","dataFields","_a","dataSource","select","load","resolve","plainItems","isItemSelected","selected","isSelectableItem","rowType","isNewRow","getItemData","oldData","data","getCombinedFilter","totalCount","getLoadOptions","loadItemIndex","focusedItemIndex","shiftItemIndex","_b","sort","lastLoadOptions","minIndex","Math","min","maxIndex","max","take","skip","onSelectionChanged","_updateSelectedItems","isSelectColumnVisible","addCommandColumn","command","visible","visibleIndex","dataType","alignment","cssClass","width","cellTemplate","headerCellTemplate","columnOption","_fireSelectionChanged","argument","selectedRowKeys","selectionChanged","fire","executeAction","_updateCheckboxesState","isDeferredMode","selectedItemKeys","removedItemKeys","keyIndex","store","isComplexKey","Array","isArray","i","args","selectionChangedOptions","visibleItems","changedItemIndexes","getChangedItemIndexes","visibleChangedItemIndexes","updateItems","changeType","itemIndexes","addedItemKeys","_selectedItemsInternalChange","slice","selectedRowsData","selectedItems","currentSelectedRowKeys","currentDeselectedRowKeys","isDeferredSelection","isDataItem","push","callbackNames","optionChanged","callBase","oldSelectionMode","fullName","selectionMode","selectRows","always","updateColumns","handled","getDataSource","publicMethods","arg","_isOnePageSelectAll","isSelectAll","getSelectAllState","selectAll","deselectAll","clearSelection","refresh","promise","preserve","isDeselect","getSelectedRowKeys","getSelectedItemKeys","keys","selectRowsByIndexes","indexes","prototype","call","arguments","getSelectedRowsData","getSelectedItems","visibleItemIndex","setFocusOnly","loadedItemIndex","getRowIndexOffset","itemIndex","_focusedItemIndex","selectionModule","defaultOptions","selection","showCheckBoxesMode","controllers","extenders","apply","_loadDataSource","_processDataItem","hasSelectColumn","dataItem","values","visibleColumns","d","done","fail","reject","_handleDataChanged","e","_repaintChangesOnly","_applyChange","forEach","index","currentItem","_items","_endUpdateCore","_changes","isUpdateSelection","every","reduce","a","b","concat","contextMenu","_contextMenuPrepared","event","originalEvent","views","_updateSelectAllValue","$element","element","$editor","selectAllValue","hasSelection","isVisible","isEmpty","dxCheckBox","repaintChangesOnly","waitAsyncTemplates","$container","isEmptyData","groupElement","appendTo","setAria","format","createEditor","parentType","editorOptions","tabIndex","setValue","preventDefault","on","trigger","currentTarget","children","_attachCheckBoxClickEvent","_renderSelectCheckBox","setEmptyText","lookup","shift","shiftKey","_update","tableElements","getTableElements","_","tableElement","_getRowElements","eq","toggleClass","_updateCheckboxesClass","_createTable","$table","stopPropagation","_createRow","_rowClick","isSelectionDisabled","isClickableElement","$target","isCommandSelect","_renderCore","isCheckBoxesHidden"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/__internal/grids/grid_core/selection/module.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/selection/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../../core/renderer\";\r\nimport eventsEngine from \"../../../../events/core/events_engine\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    touch\r\n} from \"../../../../core/utils/support\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../events/click\";\r\nimport messageLocalization from \"../../../../localization/message\";\r\nimport {\r\n    addNamespace,\r\n    isCommandKeyPressed\r\n} from \"../../../../events/utils/index\";\r\nimport holdEvent from \"../../../../events/hold\";\r\nimport Selection from \"../../../../ui/selection/selection\";\r\nimport {\r\n    Deferred\r\n} from \"../../../../core/utils/deferred\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport {\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport gridCoreUtils from \"../module_utils\";\r\nimport modules from \"../modules\";\r\nconst EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nconst ROW_CLASS = \"dx-row\";\r\nconst ROW_SELECTION_CLASS = \"dx-selection\";\r\nconst SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nconst CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\r\nconst COMMAND_SELECT_CLASS = \"dx-command-select\";\r\nconst SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\r\nconst DATA_ROW_CLASS = \"dx-data-row\";\r\nconst SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\r\nconst SELECTION_MODE = \"selection.mode\";\r\nconst processLongTap = function(that, dxEvent) {\r\n    const selectionController = that.getController(\"selection\");\r\n    const rowsView = that.getView(\"rowsView\");\r\n    const $row = $(dxEvent.target).closest(\".dx-data-row\");\r\n    const rowIndex = rowsView.getRowIndex($row);\r\n    if (rowIndex < 0) {\r\n        return\r\n    }\r\n    if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n        if (selectionController.isSelectionWithCheckboxes()) {\r\n            selectionController.stopSelectionWithCheckboxes()\r\n        } else {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n    } else {\r\n        if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n        if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.changeItemSelection(rowIndex, {\r\n                control: true\r\n            })\r\n        }\r\n    }\r\n};\r\nconst SelectionController = modules.Controller.inherit(function() {\r\n    const selectionCellTemplate = (container, options) => {\r\n        const {\r\n            component: component\r\n        } = options;\r\n        const rowsView = component.getView(\"rowsView\");\r\n        if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\r\n            options.value = component.isRowSelected(options.row.key)\r\n        }\r\n        rowsView.renderSelectCheckBoxContainer($(container), options)\r\n    };\r\n    const selectionHeaderTemplate = (container, options) => {\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const $cellElement = $(container);\r\n        const columnHeadersView = options.component.getView(\"columnHeadersView\");\r\n        $cellElement.addClass(\"dx-editor-cell\");\r\n        columnHeadersView._renderSelectAllCheckBox($cellElement, column);\r\n        columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement)\r\n    };\r\n    return {\r\n        init() {\r\n            const {\r\n                deferred: deferred,\r\n                selectAllMode: selectAllMode,\r\n                mode: mode\r\n            } = this.option(\"selection\") || {};\r\n            if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\r\n                errors.log(\"W1018\")\r\n            }\r\n            this._dataController = this.getController(\"data\");\r\n            this._selectionMode = mode;\r\n            this._isSelectionWithCheckboxes = false;\r\n            this._selection = this._createSelection();\r\n            this._updateSelectColumn();\r\n            this.createAction(\"onSelectionChanged\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this._dataController && this._dataController.pushed.add(this._handleDataPushed.bind(this))\r\n        },\r\n        _handleDataPushed(changes) {\r\n            let removedKeys = changes.filter(change => \"remove\" === change.type).map(change => change.key);\r\n            if (this.option(\"selection.deferred\")) {\r\n                const selectedKeys = this._dataController.items().filter(item => item.isSelected).map(item => item.key);\r\n                removedKeys = removedKeys.filter(key => selectedKeys.find(selectedKey => equalByValue(selectedKey, key)))\r\n            }\r\n            removedKeys.length && this.deselectRows(removedKeys)\r\n        },\r\n        _getSelectionConfig() {\r\n            const dataController = this._dataController;\r\n            const columnsController = this.getController(\"columns\");\r\n            const selectionOptions = this.option(\"selection\") || {};\r\n            const {\r\n                deferred: deferred\r\n            } = selectionOptions;\r\n            const scrollingMode = this.option(\"scrolling.mode\");\r\n            const virtualPaging = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\r\n            const allowSelectAll = this.option(\"selection.allowSelectAll\");\r\n            const legacyScrollingMode = this.option(\"scrolling.legacyMode\");\r\n            return {\r\n                selectedKeys: this.option(\"selectedRowKeys\"),\r\n                mode: this._selectionMode,\r\n                deferred: deferred,\r\n                maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\r\n                selectionFilter: this.option(\"selectionFilter\"),\r\n                ignoreDisabledItems: true,\r\n                allowLoadByRange() {\r\n                    const hasGroupColumns = columnsController.getGroupColumns().length > 0;\r\n                    return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred\r\n                },\r\n                key: () => null === dataController || void 0 === dataController ? void 0 : dataController.key(),\r\n                keyOf: item => null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item),\r\n                dataFields() {\r\n                    var _a;\r\n                    return null === (_a = dataController.dataSource()) || void 0 === _a ? void 0 : _a.select()\r\n                },\r\n                load(options) {\r\n                    var _a;\r\n                    return (null === (_a = dataController.dataSource()) || void 0 === _a ? void 0 : _a.load(options)) || (new Deferred).resolve([])\r\n                },\r\n                plainItems: () => dataController.items(true),\r\n                isItemSelected: item => item.selected,\r\n                isSelectableItem: item => \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow,\r\n                getItemData: item => isDefined(null === item || void 0 === item ? void 0 : item.rowType) ? (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) : item,\r\n                filter: () => dataController.getCombinedFilter(deferred),\r\n                totalCount: () => dataController.totalCount(),\r\n                getLoadOptions(loadItemIndex, focusedItemIndex, shiftItemIndex) {\r\n                    var _a, _b;\r\n                    const {\r\n                        sort: sort,\r\n                        filter: filter\r\n                    } = null !== (_b = null === (_a = dataController.dataSource()) || void 0 === _a ? void 0 : _a.lastLoadOptions()) && void 0 !== _b ? _b : {};\r\n                    let minIndex = Math.min(loadItemIndex, focusedItemIndex);\r\n                    let maxIndex = Math.max(loadItemIndex, focusedItemIndex);\r\n                    if (isDefined(shiftItemIndex)) {\r\n                        minIndex = Math.min(shiftItemIndex, minIndex);\r\n                        maxIndex = Math.max(shiftItemIndex, maxIndex)\r\n                    }\r\n                    const take = maxIndex - minIndex + 1;\r\n                    return {\r\n                        skip: minIndex,\r\n                        take: take,\r\n                        filter: filter,\r\n                        sort: sort\r\n                    }\r\n                },\r\n                onSelectionChanged: this._updateSelectedItems.bind(this)\r\n            }\r\n        },\r\n        _updateSelectColumn() {\r\n            const columnsController = this.getController(\"columns\");\r\n            const isSelectColumnVisible = this.isSelectColumnVisible();\r\n            columnsController.addCommandColumn({\r\n                type: \"selection\",\r\n                command: \"select\",\r\n                visible: isSelectColumnVisible,\r\n                visibleIndex: -1,\r\n                dataType: \"boolean\",\r\n                alignment: \"center\",\r\n                cssClass: \"dx-command-select\",\r\n                width: \"auto\",\r\n                cellTemplate: selectionCellTemplate,\r\n                headerCellTemplate: selectionHeaderTemplate\r\n            });\r\n            columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible)\r\n        },\r\n        _createSelection() {\r\n            const options = this._getSelectionConfig();\r\n            return new Selection(options)\r\n        },\r\n        _fireSelectionChanged(options) {\r\n            const argument = this.option(\"selection.deferred\") ? {\r\n                selectionFilter: this.option(\"selectionFilter\")\r\n            } : {\r\n                selectedRowKeys: this.option(\"selectedRowKeys\")\r\n            };\r\n            this.selectionChanged.fire(argument);\r\n            if (options) {\r\n                this.executeAction(\"onSelectionChanged\", options)\r\n            }\r\n        },\r\n        _updateCheckboxesState(options) {\r\n            const {\r\n                isDeferredMode: isDeferredMode\r\n            } = options;\r\n            const {\r\n                selectionFilter: selectionFilter\r\n            } = options;\r\n            const {\r\n                selectedItemKeys: selectedItemKeys\r\n            } = options;\r\n            const {\r\n                removedItemKeys: removedItemKeys\r\n            } = options;\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                if (isDeferredMode ? selectionFilter && function(that, selectionFilter) {\r\n                        let keyIndex = 0;\r\n                        const store = that._dataController.store();\r\n                        const key = store && store.key();\r\n                        const isComplexKey = Array.isArray(key);\r\n                        if (!selectionFilter.length) {\r\n                            return false\r\n                        }\r\n                        if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\r\n                            for (let i = 0; i < selectionFilter.length; i++) {\r\n                                if (Array.isArray(selectionFilter[i])) {\r\n                                    if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\r\n                                        return true\r\n                                    }\r\n                                    keyIndex++\r\n                                }\r\n                            }\r\n                            return false\r\n                        }\r\n                        return key !== selectionFilter[0]\r\n                    }(this, selectionFilter) : selectedItemKeys.length > 1) {\r\n                    this.startSelectionWithCheckboxes()\r\n                } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\r\n                    this.stopSelectionWithCheckboxes()\r\n                }\r\n            }\r\n        },\r\n        _updateSelectedItems(args) {\r\n            const that = this;\r\n            let selectionChangedOptions;\r\n            const isDeferredMode = that.option(\"selection.deferred\");\r\n            const selectionFilter = that._selection.selectionFilter();\r\n            const dataController = that._dataController;\r\n            const items = dataController.items(true);\r\n            const visibleItems = dataController.items();\r\n            if (!items) {\r\n                return\r\n            }\r\n            const isSelectionWithCheckboxes = that.isSelectionWithCheckboxes();\r\n            const changedItemIndexes = that.getChangedItemIndexes(items);\r\n            const visibleChangedItemIndexes = that.getChangedItemIndexes(visibleItems);\r\n            that._updateCheckboxesState({\r\n                selectedItemKeys: args.selectedItemKeys,\r\n                removedItemKeys: args.removedItemKeys,\r\n                selectionFilter: selectionFilter,\r\n                isDeferredMode: isDeferredMode\r\n            });\r\n            if (changedItemIndexes.length || isSelectionWithCheckboxes !== that.isSelectionWithCheckboxes()) {\r\n                dataController.updateItems({\r\n                    changeType: \"updateSelection\",\r\n                    itemIndexes: visibleChangedItemIndexes\r\n                })\r\n            }\r\n            if (isDeferredMode) {\r\n                that.option(\"selectionFilter\", selectionFilter);\r\n                selectionChangedOptions = {}\r\n            } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\r\n                that._selectedItemsInternalChange = true;\r\n                that.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\r\n                that._selectedItemsInternalChange = false;\r\n                selectionChangedOptions = {\r\n                    selectedRowsData: args.selectedItems.slice(0),\r\n                    selectedRowKeys: args.selectedItemKeys.slice(0),\r\n                    currentSelectedRowKeys: args.addedItemKeys.slice(0),\r\n                    currentDeselectedRowKeys: args.removedItemKeys.slice(0)\r\n                }\r\n            }\r\n            that._fireSelectionChanged(selectionChangedOptions)\r\n        },\r\n        getChangedItemIndexes(items) {\r\n            const that = this;\r\n            const itemIndexes = [];\r\n            const isDeferredSelection = this.option(\"selection.deferred\");\r\n            for (let i = 0, {\r\n                    length: length\r\n                } = items; i < length; i++) {\r\n                const row = items[i];\r\n                const isItemSelected = that.isRowSelected(isDeferredSelection ? row.data : row.key);\r\n                if (that._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\r\n                    itemIndexes.push(i)\r\n                }\r\n            }\r\n            return itemIndexes\r\n        },\r\n        callbackNames: () => [\"selectionChanged\"],\r\n        optionChanged(args) {\r\n            this.callBase(args);\r\n            switch (args.name) {\r\n                case \"selection\": {\r\n                    const oldSelectionMode = this._selectionMode;\r\n                    this.init();\r\n                    if (\"selection.showCheckBoxesMode\" !== args.fullName) {\r\n                        const selectionMode = this._selectionMode;\r\n                        let selectedRowKeys = this.option(\"selectedRowKeys\");\r\n                        if (oldSelectionMode !== selectionMode) {\r\n                            if (\"single\" === selectionMode) {\r\n                                if (selectedRowKeys.length > 1) {\r\n                                    selectedRowKeys = [selectedRowKeys[0]]\r\n                                }\r\n                            } else if (\"multiple\" !== selectionMode) {\r\n                                selectedRowKeys = []\r\n                            }\r\n                        }\r\n                        this.selectRows(selectedRowKeys).always(() => {\r\n                            this._fireSelectionChanged()\r\n                        })\r\n                    }\r\n                    this.getController(\"columns\").updateColumns();\r\n                    args.handled = true;\r\n                    break\r\n                }\r\n                case \"selectionFilter\":\r\n                    this._selection.selectionFilter(args.value);\r\n                    args.handled = true;\r\n                    break;\r\n                case \"selectedRowKeys\": {\r\n                    const value = args.value || [];\r\n                    if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\r\n                        this.selectRows(value)\r\n                    }\r\n                    args.handled = true;\r\n                    break\r\n                }\r\n            }\r\n        },\r\n        publicMethods: () => [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"],\r\n        isRowSelected(arg) {\r\n            return this._selection.isItemSelected(arg)\r\n        },\r\n        isSelectColumnVisible() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        _isOnePageSelectAll() {\r\n            return \"page\" === this.option(\"selection.selectAllMode\")\r\n        },\r\n        isSelectAll() {\r\n            return this._selection.getSelectAllState(this._isOnePageSelectAll())\r\n        },\r\n        selectAll() {\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                this.startSelectionWithCheckboxes()\r\n            }\r\n            return this._selection.selectAll(this._isOnePageSelectAll())\r\n        },\r\n        deselectAll() {\r\n            return this._selection.deselectAll(this._isOnePageSelectAll())\r\n        },\r\n        clearSelection() {\r\n            return this.selectedItemKeys([])\r\n        },\r\n        refresh() {\r\n            const selectedRowKeys = this.option(\"selectedRowKeys\") || [];\r\n            if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\r\n                return this.selectedItemKeys(selectedRowKeys)\r\n            }\r\n            return (new Deferred).resolve().promise()\r\n        },\r\n        selectedItemKeys(value, preserve, isDeselect, isSelectAll) {\r\n            return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll)\r\n        },\r\n        getSelectedRowKeys() {\r\n            return this._selection.getSelectedItemKeys()\r\n        },\r\n        selectRows(keys, preserve) {\r\n            return this.selectedItemKeys(keys, preserve)\r\n        },\r\n        deselectRows(keys) {\r\n            return this.selectedItemKeys(keys, true, true)\r\n        },\r\n        selectRowsByIndexes(indexes) {\r\n            const items = this._dataController.items();\r\n            const keys = [];\r\n            if (!Array.isArray(indexes)) {\r\n                indexes = Array.prototype.slice.call(arguments, 0)\r\n            }\r\n            each(indexes, (function() {\r\n                const item = items[this];\r\n                if (item && \"data\" === item.rowType) {\r\n                    keys.push(item.key)\r\n                }\r\n            }));\r\n            return this.selectRows(keys)\r\n        },\r\n        getSelectedRowsData() {\r\n            return this._selection.getSelectedItems()\r\n        },\r\n        changeItemSelection(visibleItemIndex, keys, setFocusOnly) {\r\n            keys = keys || {};\r\n            if (this.isSelectionWithCheckboxes()) {\r\n                keys.control = true\r\n            }\r\n            const loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);\r\n            return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly)\r\n        },\r\n        focusedItemIndex(itemIndex) {\r\n            const that = this;\r\n            if (isDefined(itemIndex)) {\r\n                that._selection._focusedItemIndex = itemIndex\r\n            } else {\r\n                return that._selection._focusedItemIndex\r\n            }\r\n        },\r\n        isSelectionWithCheckboxes() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        startSelectionWithCheckboxes() {\r\n            const that = this;\r\n            if (\"multiple\" === that.option(SELECTION_MODE) && !that.isSelectionWithCheckboxes()) {\r\n                that._isSelectionWithCheckboxes = true;\r\n                that._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        },\r\n        stopSelectionWithCheckboxes() {\r\n            const that = this;\r\n            if (that._isSelectionWithCheckboxes) {\r\n                that._isSelectionWithCheckboxes = false;\r\n                that._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}());\r\nexport const selectionModule = {\r\n    defaultOptions: () => ({\r\n        selection: {\r\n            mode: \"none\",\r\n            showCheckBoxesMode: \"onClick\",\r\n            allowSelectAll: true,\r\n            selectAllMode: \"allPages\",\r\n            maxFilterLengthInRequest: 1500,\r\n            deferred: false\r\n        },\r\n        selectionFilter: [],\r\n        selectedRowKeys: []\r\n    }),\r\n    controllers: {\r\n        selection: SelectionController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init() {\r\n                    const selectionController = this.getController(\"selection\");\r\n                    const isDeferredMode = this.option(\"selection.deferred\");\r\n                    this.callBase.apply(this, arguments);\r\n                    if (isDeferredMode) {\r\n                        selectionController._updateCheckboxesState({\r\n                            isDeferredMode: true,\r\n                            selectionFilter: this.option(\"selectionFilter\")\r\n                        })\r\n                    }\r\n                },\r\n                _loadDataSource() {\r\n                    const that = this;\r\n                    return that.callBase().always(() => {\r\n                        that.getController(\"selection\").refresh()\r\n                    })\r\n                },\r\n                _processDataItem(item, options) {\r\n                    const selectionController = this.getController(\"selection\");\r\n                    const hasSelectColumn = selectionController.isSelectColumnVisible();\r\n                    const isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\r\n                    const dataItem = this.callBase.apply(this, arguments);\r\n                    dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\r\n                    if (hasSelectColumn && dataItem.values) {\r\n                        for (let i = 0; i < options.visibleColumns.length; i++) {\r\n                            if (\"select\" === options.visibleColumns[i].command) {\r\n                                dataItem.values[i] = dataItem.isSelected;\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataItem\r\n                },\r\n                refresh(options) {\r\n                    const that = this;\r\n                    const d = new Deferred;\r\n                    this.callBase.apply(this, arguments).done(() => {\r\n                        if (!options || options.selection) {\r\n                            that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            d.resolve()\r\n                        }\r\n                    }).fail(d.reject);\r\n                    return d.promise()\r\n                },\r\n                _handleDataChanged(e) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\r\n                        this.getController(\"selection\").focusedItemIndex(-1)\r\n                    }\r\n                },\r\n                _applyChange(change) {\r\n                    if (change && \"updateSelection\" === change.changeType) {\r\n                        change.items.forEach((item, index) => {\r\n                            const currentItem = this._items[index];\r\n                            if (currentItem) {\r\n                                currentItem.isSelected = item.isSelected;\r\n                                currentItem.values = item.values\r\n                            }\r\n                        });\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _endUpdateCore() {\r\n                    const changes = this._changes;\r\n                    const isUpdateSelection = changes.length > 1 && changes.every(change => \"updateSelection\" === change.changeType);\r\n                    if (isUpdateSelection) {\r\n                        const itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));\r\n                        this._changes = [{\r\n                            changeType: \"updateSelection\",\r\n                            itemIndexes: itemIndexes\r\n                        }]\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                }\r\n            },\r\n            contextMenu: {\r\n                _contextMenuPrepared(options) {\r\n                    const dxEvent = options.event;\r\n                    if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\r\n                        return\r\n                    }\r\n                    processLongTap(this, dxEvent)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            columnHeadersView: {\r\n                init() {\r\n                    this.callBase();\r\n                    this.getController(\"selection\").selectionChanged.add(this._updateSelectAllValue.bind(this))\r\n                },\r\n                _updateSelectAllValue() {\r\n                    const that = this;\r\n                    const $element = that.element();\r\n                    const $editor = $element && $element.find(\".dx-select-checkbox\");\r\n                    if ($element && $editor.length && \"multiple\" === that.option(\"selection.mode\")) {\r\n                        const selectAllValue = that.getController(\"selection\").isSelectAll();\r\n                        const hasSelection = false !== selectAllValue;\r\n                        const isVisible = that.option(\"selection.allowSelectAll\") ? !that.getController(\"data\").isEmpty() : hasSelection;\r\n                        $editor.dxCheckBox(\"instance\").option({\r\n                            visible: isVisible,\r\n                            value: selectAllValue\r\n                        })\r\n                    }\r\n                },\r\n                _handleDataChanged(e) {\r\n                    this.callBase(e);\r\n                    if (!e || \"refresh\" === e.changeType || e.repaintChangesOnly && \"update\" === e.changeType) {\r\n                        this.waitAsyncTemplates().done(() => {\r\n                            this._updateSelectAllValue()\r\n                        })\r\n                    }\r\n                },\r\n                _renderSelectAllCheckBox($container, column) {\r\n                    const that = this;\r\n                    const selectionController = that.getController(\"selection\");\r\n                    const isEmptyData = that.getController(\"data\").isEmpty();\r\n                    const groupElement = $(\"<div>\").appendTo($container).addClass(\"dx-select-checkbox\");\r\n                    that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), groupElement);\r\n                    that.getController(\"editorFactory\").createEditor(groupElement, extend({}, column, {\r\n                        parentType: \"headerRow\",\r\n                        dataType: \"boolean\",\r\n                        value: selectionController.isSelectAll(),\r\n                        editorOptions: {\r\n                            visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll())\r\n                        },\r\n                        tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\r\n                        setValue(value, e) {\r\n                            const allowSelectAll = that.option(\"selection.allowSelectAll\");\r\n                            e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\r\n                            if (!e.event || selectionController.isSelectAll() === value) {\r\n                                return\r\n                            }\r\n                            if (e.value && !allowSelectAll) {\r\n                                e.component.option(\"value\", false)\r\n                            } else {\r\n                                e.value ? selectionController.selectAll() : selectionController.deselectAll()\r\n                            }\r\n                            e.event.preventDefault()\r\n                        }\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachSelectAllCheckBoxClickEvent($element) {\r\n                    eventsEngine.on($element, clickEventName, this.createAction(e => {\r\n                        const {\r\n                            event: event\r\n                        } = e;\r\n                        if (!$(event.target).closest(\".dx-select-checkbox\").length) {\r\n                            eventsEngine.trigger($(event.currentTarget).children(\".dx-select-checkbox\"), clickEventName)\r\n                        }\r\n                        event.preventDefault()\r\n                    }))\r\n                }\r\n            },\r\n            rowsView: {\r\n                renderSelectCheckBoxContainer($container, options) {\r\n                    if (\"data\" === options.rowType && !options.row.isNewRow) {\r\n                        $container.addClass(\"dx-editor-cell\");\r\n                        this._attachCheckBoxClickEvent($container);\r\n                        this._renderSelectCheckBox($container, options)\r\n                    } else {\r\n                        gridCoreUtils.setEmptyText($container)\r\n                    }\r\n                },\r\n                _renderSelectCheckBox(container, options) {\r\n                    const groupElement = $(\"<div>\").addClass(\"dx-select-checkbox\").appendTo(container);\r\n                    this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), groupElement);\r\n                    this.getController(\"editorFactory\").createEditor(groupElement, extend({}, options.column, {\r\n                        parentType: \"dataRow\",\r\n                        dataType: \"boolean\",\r\n                        lookup: null,\r\n                        value: options.value,\r\n                        setValue(value, e) {\r\n                            var _a;\r\n                            if (\"keydown\" === (null === (_a = null === e || void 0 === e ? void 0 : e.event) || void 0 === _a ? void 0 : _a.type)) {\r\n                                eventsEngine.trigger(e.element, clickEventName, e)\r\n                            }\r\n                        },\r\n                        row: options.row\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachCheckBoxClickEvent($element) {\r\n                    eventsEngine.on($element, clickEventName, this.createAction((function(e) {\r\n                        const selectionController = this.getController(\"selection\");\r\n                        const {\r\n                            event: event\r\n                        } = e;\r\n                        const rowIndex = this.getRowIndex($(event.currentTarget).closest(\".dx-row\"));\r\n                        if (rowIndex >= 0) {\r\n                            selectionController.startSelectionWithCheckboxes();\r\n                            selectionController.changeItemSelection(rowIndex, {\r\n                                shift: event.shiftKey\r\n                            });\r\n                            if ($(event.target).closest(\".dx-select-checkbox\").length) {\r\n                                this.getController(\"data\").updateItems({\r\n                                    changeType: \"updateSelection\",\r\n                                    itemIndexes: [rowIndex]\r\n                                })\r\n                            }\r\n                        }\r\n                    })))\r\n                },\r\n                _update(change) {\r\n                    const that = this;\r\n                    const tableElements = that.getTableElements();\r\n                    if (\"updateSelection\" === change.changeType) {\r\n                        if (tableElements.length > 0) {\r\n                            each(tableElements, (_, tableElement) => {\r\n                                each(change.itemIndexes || [], (_, index) => {\r\n                                    let $row;\r\n                                    if (change.items[index]) {\r\n                                        $row = that._getRowElements($(tableElement)).eq(index);\r\n                                        if ($row.length) {\r\n                                            const {\r\n                                                isSelected: isSelected\r\n                                            } = change.items[index];\r\n                                            $row.toggleClass(\"dx-selection\", void 0 === isSelected ? false : isSelected).find(\".dx-select-checkbox\").dxCheckBox(\"option\", \"value\", isSelected);\r\n                                            that.setAria(\"selected\", isSelected, $row)\r\n                                        }\r\n                                    }\r\n                                })\r\n                            });\r\n                            that._updateCheckboxesClass()\r\n                        }\r\n                    } else {\r\n                        that.callBase(change)\r\n                    }\r\n                },\r\n                _createTable() {\r\n                    const that = this;\r\n                    const selectionMode = that.option(\"selection.mode\");\r\n                    const $table = that.callBase.apply(that, arguments);\r\n                    if (\"none\" !== selectionMode) {\r\n                        if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {\r\n                            eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".dx-data-row\", that.createAction(e => {\r\n                                processLongTap(that.component, e.event);\r\n                                e.event.stopPropagation()\r\n                            }))\r\n                        }\r\n                        eventsEngine.on($table, \"mousedown selectstart\", that.createAction(e => {\r\n                            const {\r\n                                event: event\r\n                            } = e;\r\n                            if (event.shiftKey) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow(row) {\r\n                    const $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        const {\r\n                            isSelected: isSelected\r\n                        } = row;\r\n                        if (isSelected) {\r\n                            $row.addClass(\"dx-selection\")\r\n                        }\r\n                        const selectionMode = this.option(SELECTION_MODE);\r\n                        if (\"none\" !== selectionMode) {\r\n                            this.setAria(\"selected\", isSelected, $row)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _rowClick(e) {\r\n                    const that = this;\r\n                    const dxEvent = e.event;\r\n                    const isSelectionDisabled = $(dxEvent.target).closest(\".dx-selection-disabled\").length;\r\n                    if (!that.isClickableElement($(dxEvent.target))) {\r\n                        if (!isSelectionDisabled && (\"multiple\" !== that.option(SELECTION_MODE) || \"always\" !== that.option(SHOW_CHECKBOXES_MODE))) {\r\n                            if (that.getController(\"selection\").changeItemSelection(e.rowIndex, {\r\n                                    control: isCommandKeyPressed(dxEvent),\r\n                                    shift: dxEvent.shiftKey\r\n                                })) {\r\n                                dxEvent.preventDefault();\r\n                                e.handled = true\r\n                            }\r\n                        }\r\n                        that.callBase(e)\r\n                    }\r\n                },\r\n                isClickableElement($target) {\r\n                    const isCommandSelect = $target.closest(\".dx-command-select\").length;\r\n                    return !!isCommandSelect\r\n                },\r\n                _renderCore(change) {\r\n                    const deferred = this.callBase(change);\r\n                    this._updateCheckboxesClass();\r\n                    return deferred\r\n                },\r\n                _updateCheckboxesClass() {\r\n                    const tableElements = this.getTableElements();\r\n                    const selectionController = this.getController(\"selection\");\r\n                    const isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\r\n                    each(tableElements, (_, tableElement) => {\r\n                        $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden)\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}