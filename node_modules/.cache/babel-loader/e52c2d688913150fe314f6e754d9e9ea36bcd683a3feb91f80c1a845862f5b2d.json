{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/module_utils.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport { isDefined, isFunction, isString } from \"../../../core/utils/type\";\nimport { when, Deferred } from \"../../../core/utils/deferred\";\nimport { format } from \"../../../core/utils/string\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { toComparable } from \"../../../core/utils/data\";\nimport { equalByValue } from \"../../../core/utils/common\";\nimport { normalizeSortingInfo as normalizeSortingInfoUtility } from \"../../../data/utils\";\nimport formatHelper from \"../../../format_helper\";\nimport { getWindow } from \"../../../core/utils/window\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { DataSource } from \"../../../data/data_source/data_source\";\nimport { normalizeDataSourceOptions } from \"../../../data/data_source/utils\";\nimport variableWrapper from \"../../../core/utils/variable_wrapper\";\nimport LoadPanel from \"../../../ui/load_panel\";\nimport sharedFiltering from \"../../../ui/shared/filtering\";\nconst DATAGRID_SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nconst DATAGRID_GROUP_OPENED_CLASS = \"dx-datagrid-group-opened\";\nconst DATAGRID_GROUP_CLOSED_CLASS = \"dx-datagrid-group-closed\";\nconst DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\nconst NO_DATA_CLASS = \"nodata\";\nconst SCROLLING_MODE_INFINITE = \"infinite\";\nconst SCROLLING_MODE_VIRTUAL = \"virtual\";\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\nconst SCROLLING_MODE_OPTION = \"scrolling.mode\";\nconst ROW_RENDERING_MODE_OPTION = \"scrolling.rowRenderingMode\";\nconst DATE_INTERVAL_SELECTORS = {\n  year: value => value && value.getFullYear(),\n  month: value => value && value.getMonth() + 1,\n  day: value => value && value.getDate(),\n  quarter: value => value && Math.floor(value.getMonth() / 3) + 1,\n  hour: value => value && value.getHours(),\n  minute: value => value && value.getMinutes(),\n  second: value => value && value.getSeconds()\n};\nconst getIntervalSelector = function () {\n  const data = arguments[1];\n  const value = this.calculateCellValue(data);\n  if (!isDefined(value)) {\n    return null;\n  }\n  if (isDateType(this.dataType)) {\n    const nameIntervalSelector = arguments[0];\n    return DATE_INTERVAL_SELECTORS[nameIntervalSelector](value);\n  }\n  if (\"number\" === this.dataType) {\n    const groupInterval = arguments[0];\n    return Math.floor(Number(value) / groupInterval) * groupInterval;\n  }\n};\nconst equalSelectors = function (selector1, selector2) {\n  if (isFunction(selector1) && isFunction(selector2)) {\n    if (selector1.originalCallback && selector2.originalCallback) {\n      return selector1.originalCallback === selector2.originalCallback && selector1.columnIndex === selector2.columnIndex;\n    }\n  }\n  return selector1 === selector2;\n};\nfunction isDateType(dataType) {\n  return \"date\" === dataType || \"datetime\" === dataType;\n}\nconst setEmptyText = function ($container) {\n  $container.get(0).textContent = \"\\xa0\";\n};\nconst normalizeSortingInfo = function (sort) {\n  sort = sort || [];\n  const result = normalizeSortingInfoUtility(sort);\n  for (let i = 0; i < sort.length; i++) {\n    if (sort && sort[i] && void 0 !== sort[i].isExpanded) {\n      result[i].isExpanded = sort[i].isExpanded;\n    }\n    if (sort && sort[i] && void 0 !== sort[i].groupInterval) {\n      result[i].groupInterval = sort[i].groupInterval;\n    }\n  }\n  return result;\n};\nconst formatValue = function (value, options) {\n  const valueText = formatHelper.format(value, options.format) || value && value.toString() || \"\";\n  const formatObject = {\n    value: value,\n    valueText: options.getDisplayFormat ? options.getDisplayFormat(valueText) : valueText,\n    target: options.target || \"row\",\n    groupInterval: options.groupInterval\n  };\n  return options.customizeText ? options.customizeText.call(options, formatObject) : formatObject.valueText;\n};\nconst getSummaryText = function (summaryItem, summaryTexts) {\n  const displayFormat = summaryItem.displayFormat || summaryItem.columnCaption && summaryTexts[summaryItem.summaryType + \"OtherColumn\"] || summaryTexts[summaryItem.summaryType];\n  return formatValue(summaryItem.value, {\n    format: summaryItem.valueFormat,\n    getDisplayFormat: valueText => displayFormat ? format(displayFormat, valueText, summaryItem.columnCaption) : valueText,\n    customizeText: summaryItem.customizeText\n  });\n};\nconst getWidgetInstance = function ($element) {\n  const editorData = $element.data && $element.data();\n  const dxComponents = editorData && editorData.dxComponents;\n  const widgetName = dxComponents && dxComponents[0];\n  return widgetName && editorData[widgetName];\n};\nconst equalFilterParameters = function (filter1, filter2) {\n  if (Array.isArray(filter1) && Array.isArray(filter2)) {\n    if (filter1.length !== filter2.length) {\n      return false;\n    }\n    for (let i = 0; i < filter1.length; i++) {\n      if (!equalFilterParameters(filter1[i], filter2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (isFunction(filter1) && filter1.columnIndex >= 0 && isFunction(filter2) && filter2.columnIndex >= 0) {\n    return filter1.columnIndex === filter2.columnIndex && toComparable(filter1.filterValue) === toComparable(filter2.filterValue) && toComparable(filter1.selectedFilterOperation) === toComparable(filter2.selectedFilterOperation);\n  }\n  return toComparable(filter1) == toComparable(filter2);\n};\nfunction normalizeGroupingLoadOptions(group) {\n  if (!Array.isArray(group)) {\n    group = [group];\n  }\n  return group.map((item, i) => {\n    if (isString(item)) {\n      return {\n        selector: item,\n        isExpanded: i < group.length - 1\n      };\n    }\n    return item;\n  });\n}\nexport default {\n  renderNoDataText($element) {\n    const that = this;\n    $element = $element || this.element();\n    if (!$element) {\n      return;\n    }\n    const noDataClass = that.addWidgetPrefix(\"nodata\");\n    let noDataElement = $element.find(\".\" + noDataClass).last();\n    const isVisible = this._dataController.isEmpty();\n    const isLoading = this._dataController.isLoading();\n    if (!noDataElement.length) {\n      noDataElement = $(\"<span>\").addClass(noDataClass).appendTo($element);\n    }\n    if (isVisible && !isLoading) {\n      noDataElement.removeClass(\"dx-hidden\").text(that._getNoDataText());\n    } else {\n      noDataElement.addClass(\"dx-hidden\");\n    }\n  },\n  renderLoadPanel($element, $container, isLocalStore) {\n    const that = this;\n    let loadPanelOptions;\n    that._loadPanel && that._loadPanel.$element().remove();\n    loadPanelOptions = that.option(\"loadPanel\");\n    if (loadPanelOptions && (\"auto\" === loadPanelOptions.enabled ? !isLocalStore : loadPanelOptions.enabled)) {\n      loadPanelOptions = extend({\n        shading: false,\n        message: loadPanelOptions.text,\n        container: $container\n      }, loadPanelOptions);\n      that._loadPanel = that._createComponent($(\"<div>\").appendTo($container), LoadPanel, loadPanelOptions);\n    } else {\n      that._loadPanel = null;\n    }\n  },\n  calculateLoadPanelPosition($element) {\n    const $window = $(getWindow());\n    if (getHeight($element) > getHeight($window)) {\n      return {\n        of: $window,\n        boundary: $element,\n        collision: \"fit\"\n      };\n    }\n    return {\n      of: $element\n    };\n  },\n  getIndexByKey(key, items, keyName) {\n    let index = -1;\n    if (void 0 !== key && Array.isArray(items)) {\n      keyName = arguments.length <= 2 ? \"key\" : keyName;\n      for (let i = 0; i < items.length; i++) {\n        const item = isDefined(keyName) ? items[i][keyName] : items[i];\n        if (equalByValue(key, item)) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  },\n  combineFilters(filters, operation) {\n    var _a;\n    let resultFilter = [];\n    operation = operation || \"and\";\n    for (let i = 0; i < filters.length; i++) {\n      if (!filters[i]) {\n        continue;\n      }\n      if (1 === (null === (_a = filters[i]) || void 0 === _a ? void 0 : _a.length) && \"!\" === filters[i][0]) {\n        if (\"and\" === operation) {\n          return [\"!\"];\n        }\n        if (\"or\" === operation) {\n          continue;\n        }\n      }\n      if (resultFilter.length) {\n        resultFilter.push(operation);\n      }\n      resultFilter.push(filters[i]);\n    }\n    if (1 === resultFilter.length) {\n      resultFilter = resultFilter[0];\n    }\n    if (resultFilter.length) {\n      return resultFilter;\n    }\n    return;\n  },\n  checkChanges(changes, changeNames) {\n    let changesWithChangeNamesCount = 0;\n    for (let i = 0; i < changeNames.length; i++) {\n      if (changes[changeNames[i]]) {\n        changesWithChangeNamesCount++;\n      }\n    }\n    return changes.length && changes.length === changesWithChangeNamesCount;\n  },\n  equalFilterParameters: equalFilterParameters,\n  proxyMethod(instance, methodName, defaultResult) {\n    if (!instance[methodName]) {\n      instance[methodName] = function () {\n        const dataSource = this._dataSource;\n        return dataSource ? dataSource[methodName].apply(dataSource, arguments) : defaultResult;\n      };\n    }\n  },\n  formatValue: formatValue,\n  getFormatOptionsByColumn: (column, target) => ({\n    format: column.format,\n    getDisplayFormat: column.getDisplayFormat,\n    customizeText: column.customizeText,\n    target: target,\n    trueText: column.trueText,\n    falseText: column.falseText\n  }),\n  getDisplayValue(column, value, data, rowType) {\n    if (column.displayValueMap && void 0 !== column.displayValueMap[value]) {\n      return column.displayValueMap[value];\n    }\n    if (column.calculateDisplayValue && data && \"group\" !== rowType) {\n      return column.calculateDisplayValue(data);\n    }\n    if (column.lookup && !(\"group\" === rowType && (column.calculateGroupValue || column.calculateDisplayValue))) {\n      return column.lookup.calculateCellValue(value);\n    }\n    return value;\n  },\n  getGroupRowSummaryText(summaryItems, summaryTexts) {\n    let result = \"(\";\n    for (let i = 0; i < summaryItems.length; i++) {\n      const summaryItem = summaryItems[i];\n      result += (i > 0 ? \", \" : \"\") + getSummaryText(summaryItem, summaryTexts);\n    }\n    return result + \")\";\n  },\n  getSummaryText: getSummaryText,\n  normalizeSortingInfo: normalizeSortingInfo,\n  getFormatByDataType(dataType) {\n    switch (dataType) {\n      case \"date\":\n        return \"shortDate\";\n      case \"datetime\":\n        return \"shortDateShortTime\";\n      default:\n        return;\n    }\n  },\n  getHeaderFilterGroupParameters(column, remoteGrouping) {\n    let result = [];\n    const dataField = column.dataField || column.name;\n    const groupInterval = sharedFiltering.getGroupInterval(column);\n    if (groupInterval) {\n      each(groupInterval, (index, interval) => {\n        result.push(remoteGrouping ? {\n          selector: dataField,\n          groupInterval: interval,\n          isExpanded: index < groupInterval.length - 1\n        } : getIntervalSelector.bind(column, interval));\n      });\n      return result;\n    }\n    if (remoteGrouping) {\n      result = [{\n        selector: dataField,\n        isExpanded: false\n      }];\n    } else {\n      result = function (data) {\n        let result = column.calculateCellValue(data);\n        if (void 0 === result || \"\" === result) {\n          result = null;\n        }\n        return result;\n      };\n      if (column.sortingMethod) {\n        result = [{\n          selector: result,\n          compare: column.sortingMethod.bind(column)\n        }];\n      }\n    }\n    return result;\n  },\n  equalSortParameters(sortParameters1, sortParameters2, ignoreIsExpanded) {\n    sortParameters1 = normalizeSortingInfo(sortParameters1);\n    sortParameters2 = normalizeSortingInfo(sortParameters2);\n    if (Array.isArray(sortParameters1) && Array.isArray(sortParameters2)) {\n      if (sortParameters1.length !== sortParameters2.length) {\n        return false;\n      }\n      for (let i = 0; i < sortParameters1.length; i++) {\n        if (!equalSelectors(sortParameters1[i].selector, sortParameters2[i].selector) || sortParameters1[i].desc !== sortParameters2[i].desc || sortParameters1[i].groupInterval !== sortParameters2[i].groupInterval || !ignoreIsExpanded && Boolean(sortParameters1[i].isExpanded) !== Boolean(sortParameters2[i].isExpanded)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return (!sortParameters1 || !sortParameters1.length) === (!sortParameters2 || !sortParameters2.length);\n  },\n  getPointsByColumns(items, pointCreated, isVertical, startColumnIndex) {\n    const cellsLength = items.length;\n    let notCreatePoint = false;\n    let item;\n    let offset;\n    let columnIndex = startColumnIndex || 0;\n    const result = [];\n    let rtlEnabled;\n    for (let i = 0; i <= cellsLength; i++) {\n      if (i < cellsLength) {\n        item = items.eq(i);\n        offset = item.offset();\n        rtlEnabled = \"rtl\" === item.css(\"direction\");\n      }\n      const point = {\n        index: columnIndex,\n        x: offset ? offset.left + (!isVertical && rtlEnabled ^ i === cellsLength ? getBoundingRect(item[0]).width : 0) : 0,\n        y: offset ? offset.top + (isVertical && i === cellsLength ? getBoundingRect(item[0]).height : 0) : 0,\n        columnIndex: columnIndex\n      };\n      if (!isVertical && i > 0) {\n        const prevItemOffset = items.eq(i - 1).offset();\n        if (prevItemOffset.top < point.y) {\n          point.y = prevItemOffset.top;\n        }\n      }\n      if (pointCreated) {\n        notCreatePoint = pointCreated(point);\n      }\n      if (!notCreatePoint) {\n        result.push(point);\n      }\n      columnIndex++;\n    }\n    return result;\n  },\n  getExpandCellTemplate: () => ({\n    allowRenderToDetachedContainer: true,\n    render(container, options) {\n      const $container = $(container);\n      if (isDefined(options.value) && !(options.data && options.data.isContinuation) && !options.row.isNewRow) {\n        const rowsView = options.component.getView(\"rowsView\");\n        $container.addClass(\"dx-datagrid-expand\").addClass(\"dx-selection-disabled\");\n        $(\"<div>\").addClass(options.value ? \"dx-datagrid-group-opened\" : \"dx-datagrid-group-closed\").appendTo($container);\n        rowsView.setAria(\"label\", options.value ? rowsView.localize(\"dxDataGrid-ariaCollapse\") : rowsView.localize(\"dxDataGrid-ariaExpand\"), $container);\n      } else {\n        setEmptyText($container);\n      }\n    }\n  }),\n  setEmptyText: setEmptyText,\n  isDateType: isDateType,\n  getSelectionRange(focusedElement) {\n    try {\n      if (focusedElement) {\n        return {\n          selectionStart: focusedElement.selectionStart,\n          selectionEnd: focusedElement.selectionEnd\n        };\n      }\n    } catch (e) {}\n    return {};\n  },\n  setSelectionRange(focusedElement, selectionRange) {\n    try {\n      if (focusedElement && focusedElement.setSelectionRange) {\n        focusedElement.setSelectionRange(selectionRange.selectionStart, selectionRange.selectionEnd);\n      }\n    } catch (e) {}\n  },\n  focusAndSelectElement(component, $element) {\n    const isFocused = $element.is(\":focus\");\n    eventsEngine.trigger($element, \"focus\");\n    const isSelectTextOnEditingStart = component.option(\"editing.selectTextOnEditStart\");\n    const element = $element.get(0);\n    if (!isFocused && isSelectTextOnEditingStart && $element.is(\".dx-texteditor-input\") && !$element.is(\"[readonly]\")) {\n      const editor = getWidgetInstance($element.closest(\".dx-texteditor\"));\n      when(editor && editor._loadItemDeferred).done(() => {\n        element.select();\n      });\n    }\n  },\n  getWidgetInstance: getWidgetInstance,\n  getLastResizableColumnIndex(columns, resultWidths) {\n    const hasResizableColumns = columns.some(column => column && !column.command && !column.fixed && false !== column.allowResizing);\n    let lastColumnIndex;\n    for (lastColumnIndex = columns.length - 1; columns[lastColumnIndex]; lastColumnIndex--) {\n      const column = columns[lastColumnIndex];\n      const width = resultWidths && resultWidths[lastColumnIndex];\n      const allowResizing = !hasResizableColumns || false !== column.allowResizing;\n      if (!column.command && !column.fixed && \"adaptiveHidden\" !== width && allowResizing) {\n        break;\n      }\n    }\n    return lastColumnIndex;\n  },\n  isElementInCurrentGrid(controller, $element) {\n    if ($element && $element.length) {\n      const $grid = $element.closest(\".\" + controller.getWidgetContainerClass()).parent();\n      return $grid.is(controller.component.$element());\n    }\n    return false;\n  },\n  isVirtualRowRendering(that) {\n    const rowRenderingMode = that.option(ROW_RENDERING_MODE_OPTION);\n    const isVirtualMode = \"virtual\" === that.option(\"scrolling.mode\");\n    const isAppendMode = \"infinite\" === that.option(\"scrolling.mode\");\n    if (false === that.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n      return true;\n    }\n    return \"virtual\" === rowRenderingMode;\n  },\n  getPixelRatio: window => window.devicePixelRatio || 1,\n  _setPixelRatioFn(value) {\n    this.getPixelRatio = value;\n  },\n  getContentHeightLimit(browser) {\n    if (browser.mozilla) {\n      return 8e6;\n    }\n    return 15e6 / this.getPixelRatio(getWindow());\n  },\n  normalizeLookupDataSource(lookup) {\n    let lookupDataSourceOptions;\n    if (lookup.items) {\n      lookupDataSourceOptions = lookup.items;\n    } else {\n      lookupDataSourceOptions = lookup.dataSource;\n      if (isFunction(lookupDataSourceOptions) && !variableWrapper.isWrapped(lookupDataSourceOptions)) {\n        lookupDataSourceOptions = lookupDataSourceOptions({});\n      }\n    }\n    return normalizeDataSourceOptions(lookupDataSourceOptions);\n  },\n  getWrappedLookupDataSource(column, dataSource, filter) {\n    if (!dataSource) {\n      return [];\n    }\n    const lookupDataSourceOptions = this.normalizeLookupDataSource(column.lookup);\n    if (column.calculateCellValue !== column.defaultCalculateCellValue) {\n      return lookupDataSourceOptions;\n    }\n    const hasGroupPaging = dataSource.remoteOperations().groupPaging;\n    const hasLookupOptimization = column.displayField && isString(column.displayField);\n    let cachedUniqueRelevantItems;\n    let previousTake;\n    let previousSkip;\n    const sliceItems = (items, loadOptions) => {\n      var _a;\n      const start = null !== (_a = loadOptions.skip) && void 0 !== _a ? _a : 0;\n      const end = loadOptions.take ? start + loadOptions.take : items.length;\n      return items.slice(start, end);\n    };\n    const lookupDataSource = Object.assign(Object.assign({}, lookupDataSourceOptions), {\n      __dataGridSourceFilter: filter,\n      load: loadOptions => {\n        const d = new Deferred();\n        (loadOptions => {\n          const group = normalizeGroupingLoadOptions(hasLookupOptimization ? [column.dataField, column.displayField] : column.dataField);\n          const d = new Deferred();\n          const canUseCache = cachedUniqueRelevantItems && (!hasGroupPaging || loadOptions.skip === previousSkip && loadOptions.take === previousTake);\n          if (canUseCache) {\n            d.resolve(sliceItems(cachedUniqueRelevantItems, loadOptions));\n          } else {\n            previousSkip = loadOptions.skip;\n            previousTake = loadOptions.take;\n            dataSource.load({\n              filter: filter,\n              group: group,\n              take: hasGroupPaging ? loadOptions.take : void 0,\n              skip: hasGroupPaging ? loadOptions.skip : void 0\n            }).done(items => {\n              cachedUniqueRelevantItems = items;\n              d.resolve(hasGroupPaging ? items : sliceItems(items, loadOptions));\n            }).fail(d.fail);\n          }\n          return d;\n        })(loadOptions).done(items => {\n          if (0 === items.length) {\n            d.resolve([]);\n            return;\n          }\n          const filter = this.combineFilters(items.flatMap(data => data.key).map(key => [column.lookup.valueExpr, key]), \"or\");\n          const newDataSource = new DataSource(Object.assign(Object.assign(Object.assign({}, lookupDataSourceOptions), loadOptions), {\n            filter: this.combineFilters([filter, loadOptions.filter], \"and\"),\n            paginate: false\n          }));\n          newDataSource.load().done(d.resolve).fail(d.fail);\n        }).fail(d.fail);\n        return d;\n      },\n      key: column.lookup.valueExpr,\n      byKey(key) {\n        const d = Deferred();\n        this.load({\n          filter: [column.lookup.valueExpr, \"=\", key]\n        }).done(arr => {\n          d.resolve(arr[0]);\n        });\n        return d.promise();\n      }\n    });\n    return lookupDataSource;\n  }\n};","map":{"version":3,"names":["getHeight","$","isDefined","isFunction","isString","when","Deferred","format","each","extend","getBoundingRect","toComparable","equalByValue","normalizeSortingInfo","normalizeSortingInfoUtility","formatHelper","getWindow","eventsEngine","DataSource","normalizeDataSourceOptions","variableWrapper","LoadPanel","sharedFiltering","DATAGRID_SELECTION_DISABLED_CLASS","DATAGRID_GROUP_OPENED_CLASS","DATAGRID_GROUP_CLOSED_CLASS","DATAGRID_EXPAND_CLASS","NO_DATA_CLASS","SCROLLING_MODE_INFINITE","SCROLLING_MODE_VIRTUAL","LEGACY_SCROLLING_MODE","SCROLLING_MODE_OPTION","ROW_RENDERING_MODE_OPTION","DATE_INTERVAL_SELECTORS","year","value","getFullYear","month","getMonth","day","getDate","quarter","Math","floor","hour","getHours","minute","getMinutes","second","getSeconds","getIntervalSelector","data","arguments","calculateCellValue","isDateType","dataType","nameIntervalSelector","groupInterval","Number","equalSelectors","selector1","selector2","originalCallback","columnIndex","setEmptyText","$container","get","textContent","sort","result","i","length","isExpanded","formatValue","options","valueText","toString","formatObject","getDisplayFormat","target","customizeText","call","getSummaryText","summaryItem","summaryTexts","displayFormat","columnCaption","summaryType","valueFormat","getWidgetInstance","$element","editorData","dxComponents","widgetName","equalFilterParameters","filter1","filter2","Array","isArray","filterValue","selectedFilterOperation","normalizeGroupingLoadOptions","group","map","item","selector","renderNoDataText","that","element","noDataClass","addWidgetPrefix","noDataElement","find","last","isVisible","_dataController","isEmpty","isLoading","addClass","appendTo","removeClass","text","_getNoDataText","renderLoadPanel","isLocalStore","loadPanelOptions","_loadPanel","remove","option","enabled","shading","message","container","_createComponent","calculateLoadPanelPosition","$window","of","boundary","collision","getIndexByKey","key","items","keyName","index","combineFilters","filters","operation","_a","resultFilter","push","checkChanges","changes","changeNames","changesWithChangeNamesCount","proxyMethod","instance","methodName","defaultResult","dataSource","_dataSource","apply","getFormatOptionsByColumn","column","trueText","falseText","getDisplayValue","rowType","displayValueMap","calculateDisplayValue","lookup","calculateGroupValue","getGroupRowSummaryText","summaryItems","getFormatByDataType","getHeaderFilterGroupParameters","remoteGrouping","dataField","name","getGroupInterval","interval","bind","sortingMethod","compare","equalSortParameters","sortParameters1","sortParameters2","ignoreIsExpanded","desc","Boolean","getPointsByColumns","pointCreated","isVertical","startColumnIndex","cellsLength","notCreatePoint","offset","rtlEnabled","eq","css","point","x","left","width","y","top","height","prevItemOffset","getExpandCellTemplate","allowRenderToDetachedContainer","render","isContinuation","row","isNewRow","rowsView","component","getView","setAria","localize","getSelectionRange","focusedElement","selectionStart","selectionEnd","e","setSelectionRange","selectionRange","focusAndSelectElement","isFocused","is","trigger","isSelectTextOnEditingStart","editor","closest","_loadItemDeferred","done","select","getLastResizableColumnIndex","columns","resultWidths","hasResizableColumns","some","command","fixed","allowResizing","lastColumnIndex","isElementInCurrentGrid","controller","$grid","getWidgetContainerClass","parent","isVirtualRowRendering","rowRenderingMode","isVirtualMode","isAppendMode","getPixelRatio","window","devicePixelRatio","_setPixelRatioFn","getContentHeightLimit","browser","mozilla","normalizeLookupDataSource","lookupDataSourceOptions","isWrapped","getWrappedLookupDataSource","filter","defaultCalculateCellValue","hasGroupPaging","remoteOperations","groupPaging","hasLookupOptimization","displayField","cachedUniqueRelevantItems","previousTake","previousSkip","sliceItems","loadOptions","start","skip","end","take","slice","lookupDataSource","Object","assign","__dataGridSourceFilter","load","d","canUseCache","resolve","fail","flatMap","valueExpr","newDataSource","paginate","byKey","arr","promise"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/__internal/grids/grid_core/module_utils.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/module_utils.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getHeight\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    isDefined,\r\n    isFunction,\r\n    isString\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    format\r\n} from \"../../../core/utils/string\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport {\r\n    toComparable\r\n} from \"../../../core/utils/data\";\r\nimport {\r\n    equalByValue\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    normalizeSortingInfo as normalizeSortingInfoUtility\r\n} from \"../../../data/utils\";\r\nimport formatHelper from \"../../../format_helper\";\r\nimport {\r\n    getWindow\r\n} from \"../../../core/utils/window\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    DataSource\r\n} from \"../../../data/data_source/data_source\";\r\nimport {\r\n    normalizeDataSourceOptions\r\n} from \"../../../data/data_source/utils\";\r\nimport variableWrapper from \"../../../core/utils/variable_wrapper\";\r\nimport LoadPanel from \"../../../ui/load_panel\";\r\nimport sharedFiltering from \"../../../ui/shared/filtering\";\r\nconst DATAGRID_SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\r\nconst DATAGRID_GROUP_OPENED_CLASS = \"dx-datagrid-group-opened\";\r\nconst DATAGRID_GROUP_CLOSED_CLASS = \"dx-datagrid-group-closed\";\r\nconst DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\r\nconst NO_DATA_CLASS = \"nodata\";\r\nconst SCROLLING_MODE_INFINITE = \"infinite\";\r\nconst SCROLLING_MODE_VIRTUAL = \"virtual\";\r\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\nconst SCROLLING_MODE_OPTION = \"scrolling.mode\";\r\nconst ROW_RENDERING_MODE_OPTION = \"scrolling.rowRenderingMode\";\r\nconst DATE_INTERVAL_SELECTORS = {\r\n    year: value => value && value.getFullYear(),\r\n    month: value => value && value.getMonth() + 1,\r\n    day: value => value && value.getDate(),\r\n    quarter: value => value && Math.floor(value.getMonth() / 3) + 1,\r\n    hour: value => value && value.getHours(),\r\n    minute: value => value && value.getMinutes(),\r\n    second: value => value && value.getSeconds()\r\n};\r\nconst getIntervalSelector = function() {\r\n    const data = arguments[1];\r\n    const value = this.calculateCellValue(data);\r\n    if (!isDefined(value)) {\r\n        return null\r\n    }\r\n    if (isDateType(this.dataType)) {\r\n        const nameIntervalSelector = arguments[0];\r\n        return DATE_INTERVAL_SELECTORS[nameIntervalSelector](value)\r\n    }\r\n    if (\"number\" === this.dataType) {\r\n        const groupInterval = arguments[0];\r\n        return Math.floor(Number(value) / groupInterval) * groupInterval\r\n    }\r\n};\r\nconst equalSelectors = function(selector1, selector2) {\r\n    if (isFunction(selector1) && isFunction(selector2)) {\r\n        if (selector1.originalCallback && selector2.originalCallback) {\r\n            return selector1.originalCallback === selector2.originalCallback && selector1.columnIndex === selector2.columnIndex\r\n        }\r\n    }\r\n    return selector1 === selector2\r\n};\r\n\r\nfunction isDateType(dataType) {\r\n    return \"date\" === dataType || \"datetime\" === dataType\r\n}\r\nconst setEmptyText = function($container) {\r\n    $container.get(0).textContent = \"\\xa0\"\r\n};\r\nconst normalizeSortingInfo = function(sort) {\r\n    sort = sort || [];\r\n    const result = normalizeSortingInfoUtility(sort);\r\n    for (let i = 0; i < sort.length; i++) {\r\n        if (sort && sort[i] && void 0 !== sort[i].isExpanded) {\r\n            result[i].isExpanded = sort[i].isExpanded\r\n        }\r\n        if (sort && sort[i] && void 0 !== sort[i].groupInterval) {\r\n            result[i].groupInterval = sort[i].groupInterval\r\n        }\r\n    }\r\n    return result\r\n};\r\nconst formatValue = function(value, options) {\r\n    const valueText = formatHelper.format(value, options.format) || value && value.toString() || \"\";\r\n    const formatObject = {\r\n        value: value,\r\n        valueText: options.getDisplayFormat ? options.getDisplayFormat(valueText) : valueText,\r\n        target: options.target || \"row\",\r\n        groupInterval: options.groupInterval\r\n    };\r\n    return options.customizeText ? options.customizeText.call(options, formatObject) : formatObject.valueText\r\n};\r\nconst getSummaryText = function(summaryItem, summaryTexts) {\r\n    const displayFormat = summaryItem.displayFormat || summaryItem.columnCaption && summaryTexts[summaryItem.summaryType + \"OtherColumn\"] || summaryTexts[summaryItem.summaryType];\r\n    return formatValue(summaryItem.value, {\r\n        format: summaryItem.valueFormat,\r\n        getDisplayFormat: valueText => displayFormat ? format(displayFormat, valueText, summaryItem.columnCaption) : valueText,\r\n        customizeText: summaryItem.customizeText\r\n    })\r\n};\r\nconst getWidgetInstance = function($element) {\r\n    const editorData = $element.data && $element.data();\r\n    const dxComponents = editorData && editorData.dxComponents;\r\n    const widgetName = dxComponents && dxComponents[0];\r\n    return widgetName && editorData[widgetName]\r\n};\r\nconst equalFilterParameters = function(filter1, filter2) {\r\n    if (Array.isArray(filter1) && Array.isArray(filter2)) {\r\n        if (filter1.length !== filter2.length) {\r\n            return false\r\n        }\r\n        for (let i = 0; i < filter1.length; i++) {\r\n            if (!equalFilterParameters(filter1[i], filter2[i])) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    if (isFunction(filter1) && filter1.columnIndex >= 0 && isFunction(filter2) && filter2.columnIndex >= 0) {\r\n        return filter1.columnIndex === filter2.columnIndex && toComparable(filter1.filterValue) === toComparable(filter2.filterValue) && toComparable(filter1.selectedFilterOperation) === toComparable(filter2.selectedFilterOperation)\r\n    }\r\n    return toComparable(filter1) == toComparable(filter2)\r\n};\r\n\r\nfunction normalizeGroupingLoadOptions(group) {\r\n    if (!Array.isArray(group)) {\r\n        group = [group]\r\n    }\r\n    return group.map((item, i) => {\r\n        if (isString(item)) {\r\n            return {\r\n                selector: item,\r\n                isExpanded: i < group.length - 1\r\n            }\r\n        }\r\n        return item\r\n    })\r\n}\r\nexport default {\r\n    renderNoDataText($element) {\r\n        const that = this;\r\n        $element = $element || this.element();\r\n        if (!$element) {\r\n            return\r\n        }\r\n        const noDataClass = that.addWidgetPrefix(\"nodata\");\r\n        let noDataElement = $element.find(\".\" + noDataClass).last();\r\n        const isVisible = this._dataController.isEmpty();\r\n        const isLoading = this._dataController.isLoading();\r\n        if (!noDataElement.length) {\r\n            noDataElement = $(\"<span>\").addClass(noDataClass).appendTo($element)\r\n        }\r\n        if (isVisible && !isLoading) {\r\n            noDataElement.removeClass(\"dx-hidden\").text(that._getNoDataText())\r\n        } else {\r\n            noDataElement.addClass(\"dx-hidden\")\r\n        }\r\n    },\r\n    renderLoadPanel($element, $container, isLocalStore) {\r\n        const that = this;\r\n        let loadPanelOptions;\r\n        that._loadPanel && that._loadPanel.$element().remove();\r\n        loadPanelOptions = that.option(\"loadPanel\");\r\n        if (loadPanelOptions && (\"auto\" === loadPanelOptions.enabled ? !isLocalStore : loadPanelOptions.enabled)) {\r\n            loadPanelOptions = extend({\r\n                shading: false,\r\n                message: loadPanelOptions.text,\r\n                container: $container\r\n            }, loadPanelOptions);\r\n            that._loadPanel = that._createComponent($(\"<div>\").appendTo($container), LoadPanel, loadPanelOptions)\r\n        } else {\r\n            that._loadPanel = null\r\n        }\r\n    },\r\n    calculateLoadPanelPosition($element) {\r\n        const $window = $(getWindow());\r\n        if (getHeight($element) > getHeight($window)) {\r\n            return {\r\n                of: $window,\r\n                boundary: $element,\r\n                collision: \"fit\"\r\n            }\r\n        }\r\n        return {\r\n            of: $element\r\n        }\r\n    },\r\n    getIndexByKey(key, items, keyName) {\r\n        let index = -1;\r\n        if (void 0 !== key && Array.isArray(items)) {\r\n            keyName = arguments.length <= 2 ? \"key\" : keyName;\r\n            for (let i = 0; i < items.length; i++) {\r\n                const item = isDefined(keyName) ? items[i][keyName] : items[i];\r\n                if (equalByValue(key, item)) {\r\n                    index = i;\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return index\r\n    },\r\n    combineFilters(filters, operation) {\r\n        var _a;\r\n        let resultFilter = [];\r\n        operation = operation || \"and\";\r\n        for (let i = 0; i < filters.length; i++) {\r\n            if (!filters[i]) {\r\n                continue\r\n            }\r\n            if (1 === (null === (_a = filters[i]) || void 0 === _a ? void 0 : _a.length) && \"!\" === filters[i][0]) {\r\n                if (\"and\" === operation) {\r\n                    return [\"!\"]\r\n                }\r\n                if (\"or\" === operation) {\r\n                    continue\r\n                }\r\n            }\r\n            if (resultFilter.length) {\r\n                resultFilter.push(operation)\r\n            }\r\n            resultFilter.push(filters[i])\r\n        }\r\n        if (1 === resultFilter.length) {\r\n            resultFilter = resultFilter[0]\r\n        }\r\n        if (resultFilter.length) {\r\n            return resultFilter\r\n        }\r\n        return\r\n    },\r\n    checkChanges(changes, changeNames) {\r\n        let changesWithChangeNamesCount = 0;\r\n        for (let i = 0; i < changeNames.length; i++) {\r\n            if (changes[changeNames[i]]) {\r\n                changesWithChangeNamesCount++\r\n            }\r\n        }\r\n        return changes.length && changes.length === changesWithChangeNamesCount\r\n    },\r\n    equalFilterParameters: equalFilterParameters,\r\n    proxyMethod(instance, methodName, defaultResult) {\r\n        if (!instance[methodName]) {\r\n            instance[methodName] = function() {\r\n                const dataSource = this._dataSource;\r\n                return dataSource ? dataSource[methodName].apply(dataSource, arguments) : defaultResult\r\n            }\r\n        }\r\n    },\r\n    formatValue: formatValue,\r\n    getFormatOptionsByColumn: (column, target) => ({\r\n        format: column.format,\r\n        getDisplayFormat: column.getDisplayFormat,\r\n        customizeText: column.customizeText,\r\n        target: target,\r\n        trueText: column.trueText,\r\n        falseText: column.falseText\r\n    }),\r\n    getDisplayValue(column, value, data, rowType) {\r\n        if (column.displayValueMap && void 0 !== column.displayValueMap[value]) {\r\n            return column.displayValueMap[value]\r\n        }\r\n        if (column.calculateDisplayValue && data && \"group\" !== rowType) {\r\n            return column.calculateDisplayValue(data)\r\n        }\r\n        if (column.lookup && !(\"group\" === rowType && (column.calculateGroupValue || column.calculateDisplayValue))) {\r\n            return column.lookup.calculateCellValue(value)\r\n        }\r\n        return value\r\n    },\r\n    getGroupRowSummaryText(summaryItems, summaryTexts) {\r\n        let result = \"(\";\r\n        for (let i = 0; i < summaryItems.length; i++) {\r\n            const summaryItem = summaryItems[i];\r\n            result += (i > 0 ? \", \" : \"\") + getSummaryText(summaryItem, summaryTexts)\r\n        }\r\n        return result + \")\"\r\n    },\r\n    getSummaryText: getSummaryText,\r\n    normalizeSortingInfo: normalizeSortingInfo,\r\n    getFormatByDataType(dataType) {\r\n        switch (dataType) {\r\n            case \"date\":\r\n                return \"shortDate\";\r\n            case \"datetime\":\r\n                return \"shortDateShortTime\";\r\n            default:\r\n                return\r\n        }\r\n    },\r\n    getHeaderFilterGroupParameters(column, remoteGrouping) {\r\n        let result = [];\r\n        const dataField = column.dataField || column.name;\r\n        const groupInterval = sharedFiltering.getGroupInterval(column);\r\n        if (groupInterval) {\r\n            each(groupInterval, (index, interval) => {\r\n                result.push(remoteGrouping ? {\r\n                    selector: dataField,\r\n                    groupInterval: interval,\r\n                    isExpanded: index < groupInterval.length - 1\r\n                } : getIntervalSelector.bind(column, interval))\r\n            });\r\n            return result\r\n        }\r\n        if (remoteGrouping) {\r\n            result = [{\r\n                selector: dataField,\r\n                isExpanded: false\r\n            }]\r\n        } else {\r\n            result = function(data) {\r\n                let result = column.calculateCellValue(data);\r\n                if (void 0 === result || \"\" === result) {\r\n                    result = null\r\n                }\r\n                return result\r\n            };\r\n            if (column.sortingMethod) {\r\n                result = [{\r\n                    selector: result,\r\n                    compare: column.sortingMethod.bind(column)\r\n                }]\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    equalSortParameters(sortParameters1, sortParameters2, ignoreIsExpanded) {\r\n        sortParameters1 = normalizeSortingInfo(sortParameters1);\r\n        sortParameters2 = normalizeSortingInfo(sortParameters2);\r\n        if (Array.isArray(sortParameters1) && Array.isArray(sortParameters2)) {\r\n            if (sortParameters1.length !== sortParameters2.length) {\r\n                return false\r\n            }\r\n            for (let i = 0; i < sortParameters1.length; i++) {\r\n                if (!equalSelectors(sortParameters1[i].selector, sortParameters2[i].selector) || sortParameters1[i].desc !== sortParameters2[i].desc || sortParameters1[i].groupInterval !== sortParameters2[i].groupInterval || !ignoreIsExpanded && Boolean(sortParameters1[i].isExpanded) !== Boolean(sortParameters2[i].isExpanded)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n        return (!sortParameters1 || !sortParameters1.length) === (!sortParameters2 || !sortParameters2.length)\r\n    },\r\n    getPointsByColumns(items, pointCreated, isVertical, startColumnIndex) {\r\n        const cellsLength = items.length;\r\n        let notCreatePoint = false;\r\n        let item;\r\n        let offset;\r\n        let columnIndex = startColumnIndex || 0;\r\n        const result = [];\r\n        let rtlEnabled;\r\n        for (let i = 0; i <= cellsLength; i++) {\r\n            if (i < cellsLength) {\r\n                item = items.eq(i);\r\n                offset = item.offset();\r\n                rtlEnabled = \"rtl\" === item.css(\"direction\")\r\n            }\r\n            const point = {\r\n                index: columnIndex,\r\n                x: offset ? offset.left + (!isVertical && rtlEnabled ^ i === cellsLength ? getBoundingRect(item[0]).width : 0) : 0,\r\n                y: offset ? offset.top + (isVertical && i === cellsLength ? getBoundingRect(item[0]).height : 0) : 0,\r\n                columnIndex: columnIndex\r\n            };\r\n            if (!isVertical && i > 0) {\r\n                const prevItemOffset = items.eq(i - 1).offset();\r\n                if (prevItemOffset.top < point.y) {\r\n                    point.y = prevItemOffset.top\r\n                }\r\n            }\r\n            if (pointCreated) {\r\n                notCreatePoint = pointCreated(point)\r\n            }\r\n            if (!notCreatePoint) {\r\n                result.push(point)\r\n            }\r\n            columnIndex++\r\n        }\r\n        return result\r\n    },\r\n    getExpandCellTemplate: () => ({\r\n        allowRenderToDetachedContainer: true,\r\n        render(container, options) {\r\n            const $container = $(container);\r\n            if (isDefined(options.value) && !(options.data && options.data.isContinuation) && !options.row.isNewRow) {\r\n                const rowsView = options.component.getView(\"rowsView\");\r\n                $container.addClass(\"dx-datagrid-expand\").addClass(\"dx-selection-disabled\");\r\n                $(\"<div>\").addClass(options.value ? \"dx-datagrid-group-opened\" : \"dx-datagrid-group-closed\").appendTo($container);\r\n                rowsView.setAria(\"label\", options.value ? rowsView.localize(\"dxDataGrid-ariaCollapse\") : rowsView.localize(\"dxDataGrid-ariaExpand\"), $container)\r\n            } else {\r\n                setEmptyText($container)\r\n            }\r\n        }\r\n    }),\r\n    setEmptyText: setEmptyText,\r\n    isDateType: isDateType,\r\n    getSelectionRange(focusedElement) {\r\n        try {\r\n            if (focusedElement) {\r\n                return {\r\n                    selectionStart: focusedElement.selectionStart,\r\n                    selectionEnd: focusedElement.selectionEnd\r\n                }\r\n            }\r\n        } catch (e) {}\r\n        return {}\r\n    },\r\n    setSelectionRange(focusedElement, selectionRange) {\r\n        try {\r\n            if (focusedElement && focusedElement.setSelectionRange) {\r\n                focusedElement.setSelectionRange(selectionRange.selectionStart, selectionRange.selectionEnd)\r\n            }\r\n        } catch (e) {}\r\n    },\r\n    focusAndSelectElement(component, $element) {\r\n        const isFocused = $element.is(\":focus\");\r\n        eventsEngine.trigger($element, \"focus\");\r\n        const isSelectTextOnEditingStart = component.option(\"editing.selectTextOnEditStart\");\r\n        const element = $element.get(0);\r\n        if (!isFocused && isSelectTextOnEditingStart && $element.is(\".dx-texteditor-input\") && !$element.is(\"[readonly]\")) {\r\n            const editor = getWidgetInstance($element.closest(\".dx-texteditor\"));\r\n            when(editor && editor._loadItemDeferred).done(() => {\r\n                element.select()\r\n            })\r\n        }\r\n    },\r\n    getWidgetInstance: getWidgetInstance,\r\n    getLastResizableColumnIndex(columns, resultWidths) {\r\n        const hasResizableColumns = columns.some(column => column && !column.command && !column.fixed && false !== column.allowResizing);\r\n        let lastColumnIndex;\r\n        for (lastColumnIndex = columns.length - 1; columns[lastColumnIndex]; lastColumnIndex--) {\r\n            const column = columns[lastColumnIndex];\r\n            const width = resultWidths && resultWidths[lastColumnIndex];\r\n            const allowResizing = !hasResizableColumns || false !== column.allowResizing;\r\n            if (!column.command && !column.fixed && \"adaptiveHidden\" !== width && allowResizing) {\r\n                break\r\n            }\r\n        }\r\n        return lastColumnIndex\r\n    },\r\n    isElementInCurrentGrid(controller, $element) {\r\n        if ($element && $element.length) {\r\n            const $grid = $element.closest(\".\" + controller.getWidgetContainerClass()).parent();\r\n            return $grid.is(controller.component.$element())\r\n        }\r\n        return false\r\n    },\r\n    isVirtualRowRendering(that) {\r\n        const rowRenderingMode = that.option(ROW_RENDERING_MODE_OPTION);\r\n        const isVirtualMode = \"virtual\" === that.option(\"scrolling.mode\");\r\n        const isAppendMode = \"infinite\" === that.option(\"scrolling.mode\");\r\n        if (false === that.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\r\n            return true\r\n        }\r\n        return \"virtual\" === rowRenderingMode\r\n    },\r\n    getPixelRatio: window => window.devicePixelRatio || 1,\r\n    _setPixelRatioFn(value) {\r\n        this.getPixelRatio = value\r\n    },\r\n    getContentHeightLimit(browser) {\r\n        if (browser.mozilla) {\r\n            return 8e6\r\n        }\r\n        return 15e6 / this.getPixelRatio(getWindow())\r\n    },\r\n    normalizeLookupDataSource(lookup) {\r\n        let lookupDataSourceOptions;\r\n        if (lookup.items) {\r\n            lookupDataSourceOptions = lookup.items\r\n        } else {\r\n            lookupDataSourceOptions = lookup.dataSource;\r\n            if (isFunction(lookupDataSourceOptions) && !variableWrapper.isWrapped(lookupDataSourceOptions)) {\r\n                lookupDataSourceOptions = lookupDataSourceOptions({})\r\n            }\r\n        }\r\n        return normalizeDataSourceOptions(lookupDataSourceOptions)\r\n    },\r\n    getWrappedLookupDataSource(column, dataSource, filter) {\r\n        if (!dataSource) {\r\n            return []\r\n        }\r\n        const lookupDataSourceOptions = this.normalizeLookupDataSource(column.lookup);\r\n        if (column.calculateCellValue !== column.defaultCalculateCellValue) {\r\n            return lookupDataSourceOptions\r\n        }\r\n        const hasGroupPaging = dataSource.remoteOperations().groupPaging;\r\n        const hasLookupOptimization = column.displayField && isString(column.displayField);\r\n        let cachedUniqueRelevantItems;\r\n        let previousTake;\r\n        let previousSkip;\r\n        const sliceItems = (items, loadOptions) => {\r\n            var _a;\r\n            const start = null !== (_a = loadOptions.skip) && void 0 !== _a ? _a : 0;\r\n            const end = loadOptions.take ? start + loadOptions.take : items.length;\r\n            return items.slice(start, end)\r\n        };\r\n        const lookupDataSource = Object.assign(Object.assign({}, lookupDataSourceOptions), {\r\n            __dataGridSourceFilter: filter,\r\n            load: loadOptions => {\r\n                const d = new Deferred;\r\n                (loadOptions => {\r\n                    const group = normalizeGroupingLoadOptions(hasLookupOptimization ? [column.dataField, column.displayField] : column.dataField);\r\n                    const d = new Deferred;\r\n                    const canUseCache = cachedUniqueRelevantItems && (!hasGroupPaging || loadOptions.skip === previousSkip && loadOptions.take === previousTake);\r\n                    if (canUseCache) {\r\n                        d.resolve(sliceItems(cachedUniqueRelevantItems, loadOptions))\r\n                    } else {\r\n                        previousSkip = loadOptions.skip;\r\n                        previousTake = loadOptions.take;\r\n                        dataSource.load({\r\n                            filter: filter,\r\n                            group: group,\r\n                            take: hasGroupPaging ? loadOptions.take : void 0,\r\n                            skip: hasGroupPaging ? loadOptions.skip : void 0\r\n                        }).done(items => {\r\n                            cachedUniqueRelevantItems = items;\r\n                            d.resolve(hasGroupPaging ? items : sliceItems(items, loadOptions))\r\n                        }).fail(d.fail)\r\n                    }\r\n                    return d\r\n                })(loadOptions).done(items => {\r\n                    if (0 === items.length) {\r\n                        d.resolve([]);\r\n                        return\r\n                    }\r\n                    const filter = this.combineFilters(items.flatMap(data => data.key).map(key => [column.lookup.valueExpr, key]), \"or\");\r\n                    const newDataSource = new DataSource(Object.assign(Object.assign(Object.assign({}, lookupDataSourceOptions), loadOptions), {\r\n                        filter: this.combineFilters([filter, loadOptions.filter], \"and\"),\r\n                        paginate: false\r\n                    }));\r\n                    newDataSource.load().done(d.resolve).fail(d.fail)\r\n                }).fail(d.fail);\r\n                return d\r\n            },\r\n            key: column.lookup.valueExpr,\r\n            byKey(key) {\r\n                const d = Deferred();\r\n                this.load({\r\n                    filter: [column.lookup.valueExpr, \"=\", key]\r\n                }).done(arr => {\r\n                    d.resolve(arr[0])\r\n                });\r\n                return d.promise()\r\n            }\r\n        });\r\n        return lookupDataSource\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}