{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_cell_based.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { isElementInDom } from \"../../core/utils/dom\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointerEvents from \"../../events/pointer\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport holdEvent from \"../../events/hold\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { deferRender } from \"../../core/utils/common\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { EDIT_MODE_BATCH, EDIT_MODE_CELL, TARGET_COMPONENT_NAME } from \"./ui.grid_core.editing_constants\";\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_CLASS = \"dx-row\";\nvar CELL_MODIFIED_CLASS = \"dx-cell-modified\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar ROW_REMOVED = \"dx-row-removed\";\nvar EDITING_EDITROWKEY_OPTION_NAME = \"editing.editRowKey\";\nvar EDITING_EDITCOLUMNNAME_OPTION_NAME = \"editing.editColumnName\";\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\nexport default {\n  extenders: {\n    controllers: {\n      editing: {\n        init: function () {\n          var needCreateHandlers = !this._saveEditorHandler;\n          this.callBase.apply(this, arguments);\n          if (needCreateHandlers) {\n            var $pointerDownTarget;\n            var isResizing;\n            this._pointerUpEditorHandler = () => {\n              var _this$getController;\n              isResizing = null === (_this$getController = this.getController(\"columnsResizer\")) || void 0 === _this$getController ? void 0 : _this$getController.isResizing();\n            };\n            this._pointerDownEditorHandler = e => $pointerDownTarget = $(e.target);\n            this._saveEditorHandler = this.createAction(function (e) {\n              var event = e.event;\n              var $target = $(event.target);\n              var targetComponent = event[TARGET_COMPONENT_NAME];\n              var component = this.component;\n              if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\n                return;\n              }\n              function checkEditorPopup($element) {\n                if (!$element) {\n                  return false;\n                }\n                var $dropDownEditorOverlay = $element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS));\n                var $componentElement = component.$element();\n                return $dropDownEditorOverlay.length > 0 && 0 === $componentElement.closest($dropDownEditorOverlay).length;\n              }\n              if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {\n                var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\n                var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;\n                var isAddRowButton = !!$target.closest(\".\".concat(this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\n                var isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n                var isCellEditMode = this.isCellEditMode();\n                if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isElementInDom($target) || isAnotherComponent)) {\n                  this._closeEditItem.bind(this)($target);\n                }\n              }\n            });\n            eventsEngine.on(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n            eventsEngine.on(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n            eventsEngine.on(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n          }\n        },\n        isCellEditMode: function () {\n          return this.option(\"editing.mode\") === EDIT_MODE_CELL;\n        },\n        isBatchEditMode: function () {\n          return this.option(\"editing.mode\") === EDIT_MODE_BATCH;\n        },\n        isCellOrBatchEditMode: function () {\n          return this.isCellEditMode() || this.isBatchEditMode();\n        },\n        _needToCloseEditableCell: function ($targetElement) {\n          var $element = this.component.$element();\n          var result = this.isEditing();\n          var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\n          if (isCurrentComponentElement) {\n            var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\n            if (isDataRow) {\n              var rowsView = this.getView(\"rowsView\");\n              var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\n              var rowIndex = rowsView.getRowIndex($targetCell.parent());\n              var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\n              var visibleColumns = this._columnsController.getVisibleColumns();\n              var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\n              result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex);\n            }\n          }\n          return result || this.callBase.apply(this, arguments);\n        },\n        _closeEditItem: function ($targetElement) {\n          if (this._needToCloseEditableCell($targetElement)) {\n            this.closeEditCell();\n          }\n        },\n        _focusEditorIfNeed: function () {\n          if (this._needFocusEditor && this.isCellOrBatchEditMode()) {\n            var _this$_rowsView;\n            var editColumnIndex = this._getVisibleEditColumnIndex();\n            var $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n            if ($cell && !$cell.find(\":focus\").length) {\n              this._focusEditingCell(() => {\n                this._editCellInProgress = false;\n              }, $cell, true);\n            } else {\n              this._editCellInProgress = false;\n            }\n            this._needFocusEditor = false;\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        isEditing: function () {\n          if (this.isCellOrBatchEditMode()) {\n            var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n            var isEditColumnNameDefined = isDefined(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\n            return isEditRowKeyDefined && isEditColumnNameDefined;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _handleEditColumnNameChange: function (args) {\n          var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\n          if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && isDefined(args.value) && args.value !== args.previousValue) {\n            var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\n            var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\n            this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex);\n          }\n        },\n        _addRow: function (parentKey, deferred) {\n          if (this.isCellEditMode() && this.hasChanges()) {\n            var _deferred = new Deferred();\n            this.saveEditData().done(() => {\n              if (!this.hasChanges()) {\n                this.addRow(parentKey).done(_deferred.resolve).fail(_deferred.reject);\n              } else {\n                _deferred.reject(\"cancel\");\n              }\n            });\n            return _deferred.promise();\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        editCell: function (rowIndex, columnIndex) {\n          return this._editCell({\n            rowIndex: rowIndex,\n            columnIndex: columnIndex\n          });\n        },\n        _editCell: function (options) {\n          var d = new Deferred();\n          var coreResult;\n          this.executeOperation(d, () => {\n            coreResult = this._editCellCore(options);\n            when(coreResult).done(d.resolve).fail(d.reject);\n          });\n          return void 0 !== coreResult ? coreResult : d.promise();\n        },\n        _editCellCore: function (options) {\n          var dataController = this._dataController;\n          var isEditByOptionChanged = isDefined(options.oldColumnIndex) || isDefined(options.oldRowIndex);\n          var {\n            columnIndex: columnIndex,\n            rowIndex: rowIndex,\n            column: column,\n            item: item\n          } = this._getNormalizedEditCellOptions(options);\n          var params = {\n            data: null === item || void 0 === item ? void 0 : item.data,\n            cancel: false,\n            column: column\n          };\n          if (void 0 === item.key) {\n            this._dataController.fireError(\"E1043\");\n            return;\n          }\n          if (column && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {\n            if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\n              return true;\n            }\n            var editRowIndex = rowIndex + dataController.getRowIndexOffset();\n            return when(this._beforeEditCell(rowIndex, columnIndex, item)).done(cancel => {\n              if (cancel) {\n                return;\n              }\n              if (!this._prepareEditCell(params, item, columnIndex, editRowIndex)) {\n                this._processCanceledEditingCell();\n              }\n            });\n          }\n          return false;\n        },\n        _beforeEditCell: function (rowIndex, columnIndex, item) {\n          if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {\n            var d = new Deferred();\n            this.saveEditData().always(() => {\n              d.resolve(this.hasChanges());\n            });\n            return d;\n          }\n        },\n        publicMethods: function () {\n          var publicMethods = this.callBase.apply(this, arguments);\n          return publicMethods.concat([\"editCell\", \"closeEditCell\"]);\n        },\n        _getNormalizedEditCellOptions: function (_ref) {\n          var {\n            oldColumnIndex: oldColumnIndex,\n            oldRowIndex: oldRowIndex,\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          } = _ref;\n          var columnsController = this._columnsController;\n          var visibleColumns = columnsController.getVisibleColumns();\n          var items = this._dataController.items();\n          var item = items[rowIndex];\n          var oldColumn;\n          if (isDefined(oldColumnIndex)) {\n            oldColumn = visibleColumns[oldColumnIndex];\n          } else {\n            oldColumn = this._getEditColumn();\n          }\n          if (!isDefined(oldRowIndex)) {\n            oldRowIndex = this._getVisibleEditRowIndex();\n          }\n          if (isString(columnIndex)) {\n            columnIndex = columnsController.columnOption(columnIndex, \"index\");\n            columnIndex = columnsController.getVisibleIndex(columnIndex);\n          }\n          var column = visibleColumns[columnIndex];\n          return {\n            oldColumn: oldColumn,\n            columnIndex: columnIndex,\n            oldRowIndex: oldRowIndex,\n            rowIndex: rowIndex,\n            column: column,\n            item: item\n          };\n        },\n        _prepareEditCell: function (params, item, editColumnIndex, editRowIndex) {\n          if (!item.isNewRow) {\n            params.key = item.key;\n          }\n          if (this._isEditingStart(params)) {\n            return false;\n          }\n          this._pageIndex = this._dataController.pageIndex();\n          this._setEditRowKey(item.key);\n          this._setEditColumnNameByIndex(editColumnIndex);\n          if (!params.column.showEditorAlways) {\n            var _item$oldData;\n            this._addInternalData({\n              key: item.key,\n              oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\n            });\n          }\n          return true;\n        },\n        closeEditCell: function (isError, withoutSaveEditData) {\n          var result = when();\n          var oldEditRowIndex = this._getVisibleEditRowIndex();\n          if (this.isCellOrBatchEditMode()) {\n            var deferred = new Deferred();\n            result = new Deferred();\n            this.executeOperation(deferred, () => {\n              this._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve);\n            });\n          }\n          return result.promise();\n        },\n        _closeEditCellCore: function (isError, oldEditRowIndex, withoutSaveEditData) {\n          var dataController = this._dataController;\n          var deferred = new Deferred();\n          var promise = deferred.promise();\n          if (this.isCellEditMode() && this.hasChanges()) {\n            if (!withoutSaveEditData) {\n              this.saveEditData().done(error => {\n                if (!this.hasChanges()) {\n                  this.closeEditCell(!!error).always(deferred.resolve);\n                  return;\n                }\n                deferred.resolve();\n              });\n              return promise;\n            }\n          } else {\n            this._resetEditRowKey();\n            this._resetEditColumnName();\n            if (oldEditRowIndex >= 0) {\n              var rowIndices = [oldEditRowIndex];\n              this._beforeCloseEditCellInBatchMode(rowIndices);\n              if (!isError) {\n                dataController.updateItems({\n                  changeType: \"update\",\n                  rowIndices: rowIndices\n                });\n              }\n            }\n          }\n          deferred.resolve();\n          return promise;\n        },\n        _resetModifiedClassCells: function (changes) {\n          if (this.isBatchEditMode()) {\n            var columnsCount = this._columnsController.getVisibleColumns().length;\n            changes.forEach(_ref2 => {\n              var {\n                key: key\n              } = _ref2;\n              var rowIndex = this._dataController.getRowIndexByKey(key);\n              if (-1 !== rowIndex) {\n                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                  this._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED_CLASS);\n                }\n              }\n            });\n          }\n        },\n        _prepareChange: function (options, value, text) {\n          var $cellElement = $(options.cellElement);\n          if (this.isBatchEditMode() && void 0 !== options.key) {\n            this._applyModified($cellElement, options);\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _cancelSaving: function () {\n          var dataController = this._dataController;\n          if (this.isCellOrBatchEditMode()) {\n            if (this.isBatchEditMode()) {\n              this._resetEditIndices();\n            }\n            dataController.updateItems();\n          }\n          this.callBase.apply(this, arguments);\n        },\n        optionChanged: function (args) {\n          var fullName = args.fullName;\n          if (\"editing\" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\n            this._handleEditColumnNameChange(args);\n            args.handled = true;\n          } else {\n            this.callBase(args);\n          }\n        },\n        _editCellFromOptionChanged: function (columnIndex, oldColumnIndex, oldRowIndex) {\n          var columns = this._columnsController.getVisibleColumns();\n          if (columnIndex > -1) {\n            deferRender(() => {\n              this._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex);\n            });\n          }\n        },\n        _handleEditRowKeyChange: function (args) {\n          if (this.isCellOrBatchEditMode()) {\n            var columnIndex = this._getVisibleEditColumnIndex();\n            var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n            if (isDefined(args.value) && args.value !== args.previousValue) {\n              var _this$_editCellFromOp;\n              null === (_this$_editCellFromOp = this._editCellFromOptionChanged) || void 0 === _this$_editCellFromOp ? void 0 : _this$_editCellFromOp.call(this, columnIndex, columnIndex, oldRowIndex);\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        deleteRow: function (rowIndex) {\n          if (this.isCellEditMode() && this.isEditing()) {\n            var isNewRow = this._dataController.items()[rowIndex].isNewRow;\n            var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n            this.closeEditCell(null, isNewRow).always(() => {\n              rowIndex = this._dataController.getRowIndexByKey(rowKey);\n              this._checkAndDeleteRow(rowIndex);\n            });\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _checkAndDeleteRow: function (rowIndex) {\n          if (this.isBatchEditMode()) {\n            this._deleteRowCore(rowIndex);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _refreshCore: function (params) {\n          var {\n            isPageChanged: isPageChanged\n          } = null !== params && void 0 !== params ? params : {};\n          var needResetIndexes = this.isBatchEditMode() || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\n          if (this.isCellOrBatchEditMode()) {\n            if (needResetIndexes) {\n              this._resetEditColumnName();\n              this._resetEditRowKey();\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _allowRowAdding: function (params) {\n          if (this.isBatchEditMode()) {\n            return true;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _afterDeleteRow: function (rowIndex, oldEditRowIndex) {\n          var dataController = this._dataController;\n          if (this.isBatchEditMode()) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [oldEditRowIndex, rowIndex]\n            });\n            return new Deferred().resolve();\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function (row, forceUpdateRow, isCustomSetCellValue) {\n          if (this.isCellOrBatchEditMode()) {\n            this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _isDefaultButtonVisible: function (button, options) {\n          if (this.isCellOrBatchEditMode()) {\n            var isBatchMode = this.isBatchEditMode();\n            switch (button.name) {\n              case \"save\":\n              case \"cancel\":\n              case \"edit\":\n                return false;\n              case \"delete\":\n                return this.callBase.apply(this, arguments) && (!isBatchMode || !options.row.removed);\n              case \"undelete\":\n                return isBatchMode && this.allowDeleting(options) && options.row.removed;\n              default:\n                return this.callBase.apply(this, arguments);\n            }\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _isRowDeleteAllowed: function () {\n          var callBase = this.callBase.apply(this, arguments);\n          return callBase || this.isBatchEditMode();\n        },\n        _beforeEndSaving: function (changes) {\n          if (this.isCellEditMode()) {\n            var _changes$;\n            if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\n              this.callBase.apply(this, arguments);\n            }\n          } else {\n            if (this.isBatchEditMode()) {\n              this._resetModifiedClassCells(changes);\n            }\n            this.callBase.apply(this, arguments);\n          }\n        },\n        prepareEditButtons: function (headerPanel) {\n          var editingOptions = this.option(\"editing\") || {};\n          var buttonItems = this.callBase.apply(this, arguments);\n          if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && this.isBatchEditMode()) {\n            buttonItems.push(this.prepareButtonItem(headerPanel, \"save\", \"saveEditData\", 21));\n            buttonItems.push(this.prepareButtonItem(headerPanel, \"revert\", \"cancelEditData\", 22));\n          }\n          return buttonItems;\n        },\n        _saveEditDataInner: function () {\n          var _deferred2;\n          var editRow = this._dataController.getVisibleRows()[this.getEditRowIndex()];\n          var editColumn = this._getEditColumn();\n          var showEditorAlways = null === editColumn || void 0 === editColumn ? void 0 : editColumn.showEditorAlways;\n          var isUpdateInCellMode = this.isCellEditMode() && !(null !== editRow && void 0 !== editRow && editRow.isNewRow);\n          var deferred;\n          if (isUpdateInCellMode && showEditorAlways) {\n            deferred = new Deferred();\n            this.addDeferred(deferred);\n          }\n          return this.callBase.apply(this, arguments).always(null === (_deferred2 = deferred) || void 0 === _deferred2 ? void 0 : _deferred2.resolve);\n        },\n        _applyChange: function (options, params, forceUpdateRow) {\n          var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\n          var showEditorAlways = options.column.showEditorAlways;\n          var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n          var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex);\n          if (focusPreviousEditingCell) {\n            this._focusEditingCell();\n            this._updateEditRow(options.row, true, isCustomSetCellValue);\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _applyChangeCore: function (options, forceUpdateRow) {\n          var showEditorAlways = options.column.showEditorAlways;\n          var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\n          if (showEditorAlways && !forceUpdateRow) {\n            if (isUpdateInCellMode) {\n              this._setEditRowKey(options.row.key, true);\n              this._setEditColumnNameByIndex(options.columnIndex, true);\n              return this.saveEditData();\n            } else if (this.isBatchEditMode()) {\n              forceUpdateRow = this._needUpdateRow(options.column);\n              return this.callBase(options, forceUpdateRow);\n            }\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _processDataItemCore: function (item, _ref3) {\n          var {\n            data: data,\n            type: type\n          } = _ref3;\n          if (this.isBatchEditMode() && type === DATA_EDIT_DATA_REMOVE_TYPE) {\n            item.data = createObjectWithChanges(item.data, data);\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _processRemoveCore: function (changes, editIndex, processIfBatch) {\n          if (this.isBatchEditMode() && !processIfBatch) {\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _processRemoveIfError: function () {\n          if (this.isBatchEditMode()) {\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _beforeFocusElementInRow: function (rowIndex) {\n          this.callBase.apply(this, arguments);\n          var editRowIndex = rowIndex >= 0 ? rowIndex : 0;\n          var columnIndex = this.getFirstEditableColumnIndex();\n          columnIndex >= 0 && this.editCell(editRowIndex, columnIndex);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n          var editingController = this._editingController;\n          if (editingController.isCellOrBatchEditMode() && this.option(\"editing.allowUpdating\")) {\n            eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", this.createAction(() => {\n              if (editingController.isEditing()) {\n                editingController.closeEditCell();\n              }\n            }));\n          }\n          return $table;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n          if (row) {\n            var editingController = this._editingController;\n            var isRowRemoved = !!row.removed;\n            if (editingController.isBatchEditMode()) {\n              isRowRemoved && $row.addClass(ROW_REMOVED);\n            }\n          }\n          return $row;\n        }\n      },\n      headerPanel: {\n        isVisible: function () {\n          var editingOptions = this.getController(\"editing\").option(\"editing\");\n          return this.callBase() || editingOptions && (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["$","domAdapter","eventsEngine","isDefined","isString","isElementInDom","name","clickEventName","pointerEvents","addNamespace","holdEvent","when","Deferred","deferRender","createObjectWithChanges","EDIT_MODE_BATCH","EDIT_MODE_CELL","TARGET_COMPONENT_NAME","FOCUS_OVERLAY_CLASS","ADD_ROW_BUTTON_CLASS","DROPDOWN_EDITOR_OVERLAY_CLASS","EDITOR_CELL_CLASS","ROW_CLASS","CELL_MODIFIED_CLASS","DATA_ROW_CLASS","ROW_REMOVED","EDITING_EDITROWKEY_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","DATA_EDIT_DATA_REMOVE_TYPE","extenders","controllers","editing","init","needCreateHandlers","_saveEditorHandler","callBase","apply","arguments","$pointerDownTarget","isResizing","_pointerUpEditorHandler","_this$getController","getController","_pointerDownEditorHandler","e","target","createAction","event","$target","targetComponent","component","is","checkEditorPopup","$element","$dropDownEditorOverlay","closest","concat","$componentElement","length","isCellOrBatchEditMode","_editCellInProgress","isEditorPopup","isAnotherComponent","_disposed","isAddRowButton","addWidgetPrefix","isFocusOverlay","hasClass","isCellEditMode","isEditing","_closeEditItem","bind","on","getDocument","up","down","option","isBatchEditMode","_needToCloseEditableCell","$targetElement","result","isCurrentComponentElement","isDataRow","rowsView","getView","$targetCell","rowIndex","getRowIndex","parent","columnIndex","getCellElements","index","visibleColumns","_columnsController","getVisibleColumns","allowEditing","isEditCell","closeEditCell","_focusEditorIfNeed","_needFocusEditor","_this$_rowsView","editColumnIndex","_getVisibleEditColumnIndex","$cell","_rowsView","_getCellElement","_getVisibleEditRowIndex","find","_focusEditingCell","isEditRowKeyDefined","isEditColumnNameDefined","_handleEditColumnNameChange","args","oldRowIndex","previousValue","value","getVisibleColumnIndex","oldColumnIndex","_editCellFromOptionChanged","_addRow","parentKey","deferred","hasChanges","_deferred","saveEditData","done","addRow","resolve","fail","reject","promise","editCell","_editCell","options","d","coreResult","executeOperation","_editCellCore","dataController","_dataController","isEditByOptionChanged","column","item","_getNormalizedEditCellOptions","params","data","cancel","key","fireError","rowType","removed","editRowIndex","getRowIndexOffset","_beforeEditCell","_prepareEditCell","_processCanceledEditingCell","isNewRow","always","publicMethods","_ref","columnsController","items","oldColumn","_getEditColumn","columnOption","getVisibleIndex","_isEditingStart","_pageIndex","pageIndex","_setEditRowKey","_setEditColumnNameByIndex","showEditorAlways","_item$oldData","_addInternalData","oldData","isError","withoutSaveEditData","oldEditRowIndex","_closeEditCellCore","error","_resetEditRowKey","_resetEditColumnName","rowIndices","_beforeCloseEditCellInBatchMode","updateItems","changeType","_resetModifiedClassCells","changes","columnsCount","forEach","_ref2","getRowIndexByKey","removeClass","_prepareChange","text","$cellElement","cellElement","_applyModified","_cancelSaving","_resetEditIndices","optionChanged","fullName","handled","columns","_repaintEditCell","_handleEditRowKeyChange","oldRowIndexCorrection","_getEditRowIndexCorrection","_this$_editCellFromOp","call","deleteRow","rowKey","getKeyByRowIndex","_checkAndDeleteRow","_deleteRowCore","_refreshCore","isPageChanged","needResetIndexes","_allowRowAdding","_afterDeleteRow","_updateEditRow","row","forceUpdateRow","isCustomSetCellValue","_updateRowImmediately","_isDefaultButtonVisible","button","isBatchMode","allowDeleting","_isRowDeleteAllowed","_beforeEndSaving","_changes$","type","prepareEditButtons","headerPanel","editingOptions","buttonItems","allowUpdating","allowAdding","push","prepareButtonItem","_saveEditDataInner","_deferred2","editRow","getVisibleRows","getEditRowIndex","editColumn","isUpdateInCellMode","addDeferred","_applyChange","setCellValue","defaultSetCellValue","focusPreviousEditingCell","hasEditData","_applyChangeCore","_needUpdateRow","_processDataItemCore","_ref3","_processRemoveCore","editIndex","processIfBatch","_processRemoveIfError","_beforeFocusElementInRow","getFirstEditableColumnIndex","views","_createTable","$table","editingController","_editingController","_createRow","$row","isRowRemoved","addClass","isVisible","mode"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_cell_based.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_cell_based.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../core/utils/dom\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport holdEvent from \"../../events/hold\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    deferRender\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    EDIT_MODE_BATCH,\r\n    EDIT_MODE_CELL,\r\n    TARGET_COMPONENT_NAME\r\n} from \"./ui.grid_core.editing_constants\";\r\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\r\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\r\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar CELL_MODIFIED_CLASS = \"dx-cell-modified\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar ROW_REMOVED = \"dx-row-removed\";\r\nvar EDITING_EDITROWKEY_OPTION_NAME = \"editing.editRowKey\";\r\nvar EDITING_EDITCOLUMNNAME_OPTION_NAME = \"editing.editColumnName\";\r\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\r\nexport default {\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                init: function() {\r\n                    var needCreateHandlers = !this._saveEditorHandler;\r\n                    this.callBase.apply(this, arguments);\r\n                    if (needCreateHandlers) {\r\n                        var $pointerDownTarget;\r\n                        var isResizing;\r\n                        this._pointerUpEditorHandler = () => {\r\n                            var _this$getController;\r\n                            isResizing = null === (_this$getController = this.getController(\"columnsResizer\")) || void 0 === _this$getController ? void 0 : _this$getController.isResizing()\r\n                        };\r\n                        this._pointerDownEditorHandler = e => $pointerDownTarget = $(e.target);\r\n                        this._saveEditorHandler = this.createAction((function(e) {\r\n                            var event = e.event;\r\n                            var $target = $(event.target);\r\n                            var targetComponent = event[TARGET_COMPONENT_NAME];\r\n                            var component = this.component;\r\n                            if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\r\n                                return\r\n                            }\r\n\r\n                            function checkEditorPopup($element) {\r\n                                if (!$element) {\r\n                                    return false\r\n                                }\r\n                                var $dropDownEditorOverlay = $element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS));\r\n                                var $componentElement = component.$element();\r\n                                return $dropDownEditorOverlay.length > 0 && 0 === $componentElement.closest($dropDownEditorOverlay).length\r\n                            }\r\n                            if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {\r\n                                var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\r\n                                var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;\r\n                                var isAddRowButton = !!$target.closest(\".\".concat(this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\r\n                                var isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\r\n                                var isCellEditMode = this.isCellEditMode();\r\n                                if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isElementInDom($target) || isAnotherComponent)) {\r\n                                    this._closeEditItem.bind(this)($target)\r\n                                }\r\n                            }\r\n                        }));\r\n                        eventsEngine.on(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n                        eventsEngine.on(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n                        eventsEngine.on(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n                    }\r\n                },\r\n                isCellEditMode: function() {\r\n                    return this.option(\"editing.mode\") === EDIT_MODE_CELL\r\n                },\r\n                isBatchEditMode: function() {\r\n                    return this.option(\"editing.mode\") === EDIT_MODE_BATCH\r\n                },\r\n                isCellOrBatchEditMode: function() {\r\n                    return this.isCellEditMode() || this.isBatchEditMode()\r\n                },\r\n                _needToCloseEditableCell: function($targetElement) {\r\n                    var $element = this.component.$element();\r\n                    var result = this.isEditing();\r\n                    var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\r\n                    if (isCurrentComponentElement) {\r\n                        var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\r\n                        if (isDataRow) {\r\n                            var rowsView = this.getView(\"rowsView\");\r\n                            var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\r\n                            var rowIndex = rowsView.getRowIndex($targetCell.parent());\r\n                            var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\r\n                            var visibleColumns = this._columnsController.getVisibleColumns();\r\n                            var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\r\n                            result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex)\r\n                        }\r\n                    }\r\n                    return result || this.callBase.apply(this, arguments)\r\n                },\r\n                _closeEditItem: function($targetElement) {\r\n                    if (this._needToCloseEditableCell($targetElement)) {\r\n                        this.closeEditCell()\r\n                    }\r\n                },\r\n                _focusEditorIfNeed: function() {\r\n                    if (this._needFocusEditor && this.isCellOrBatchEditMode()) {\r\n                        var _this$_rowsView;\r\n                        var editColumnIndex = this._getVisibleEditColumnIndex();\r\n                        var $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n                        if ($cell && !$cell.find(\":focus\").length) {\r\n                            this._focusEditingCell(() => {\r\n                                this._editCellInProgress = false\r\n                            }, $cell, true)\r\n                        } else {\r\n                            this._editCellInProgress = false\r\n                        }\r\n                        this._needFocusEditor = false\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                isEditing: function() {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n                        var isEditColumnNameDefined = isDefined(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\r\n                        return isEditRowKeyDefined && isEditColumnNameDefined\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _handleEditColumnNameChange: function(args) {\r\n                    var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\r\n                    if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && isDefined(args.value) && args.value !== args.previousValue) {\r\n                        var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\r\n                        var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\r\n                        this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex)\r\n                    }\r\n                },\r\n                _addRow: function(parentKey, deferred) {\r\n                    if (this.isCellEditMode() && this.hasChanges()) {\r\n                        var _deferred = new Deferred;\r\n                        this.saveEditData().done(() => {\r\n                            if (!this.hasChanges()) {\r\n                                this.addRow(parentKey).done(_deferred.resolve).fail(_deferred.reject)\r\n                            } else {\r\n                                _deferred.reject(\"cancel\")\r\n                            }\r\n                        });\r\n                        return _deferred.promise()\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                editCell: function(rowIndex, columnIndex) {\r\n                    return this._editCell({\r\n                        rowIndex: rowIndex,\r\n                        columnIndex: columnIndex\r\n                    })\r\n                },\r\n                _editCell: function(options) {\r\n                    var d = new Deferred;\r\n                    var coreResult;\r\n                    this.executeOperation(d, () => {\r\n                        coreResult = this._editCellCore(options);\r\n                        when(coreResult).done(d.resolve).fail(d.reject)\r\n                    });\r\n                    return void 0 !== coreResult ? coreResult : d.promise()\r\n                },\r\n                _editCellCore: function(options) {\r\n                    var dataController = this._dataController;\r\n                    var isEditByOptionChanged = isDefined(options.oldColumnIndex) || isDefined(options.oldRowIndex);\r\n                    var {\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex,\r\n                        column: column,\r\n                        item: item\r\n                    } = this._getNormalizedEditCellOptions(options);\r\n                    var params = {\r\n                        data: null === item || void 0 === item ? void 0 : item.data,\r\n                        cancel: false,\r\n                        column: column\r\n                    };\r\n                    if (void 0 === item.key) {\r\n                        this._dataController.fireError(\"E1043\");\r\n                        return\r\n                    }\r\n                    if (column && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {\r\n                        if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\r\n                            return true\r\n                        }\r\n                        var editRowIndex = rowIndex + dataController.getRowIndexOffset();\r\n                        return when(this._beforeEditCell(rowIndex, columnIndex, item)).done(cancel => {\r\n                            if (cancel) {\r\n                                return\r\n                            }\r\n                            if (!this._prepareEditCell(params, item, columnIndex, editRowIndex)) {\r\n                                this._processCanceledEditingCell()\r\n                            }\r\n                        })\r\n                    }\r\n                    return false\r\n                },\r\n                _beforeEditCell: function(rowIndex, columnIndex, item) {\r\n                    if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {\r\n                        var d = new Deferred;\r\n                        this.saveEditData().always(() => {\r\n                            d.resolve(this.hasChanges())\r\n                        });\r\n                        return d\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    var publicMethods = this.callBase.apply(this, arguments);\r\n                    return publicMethods.concat([\"editCell\", \"closeEditCell\"])\r\n                },\r\n                _getNormalizedEditCellOptions: function(_ref) {\r\n                    var {\r\n                        oldColumnIndex: oldColumnIndex,\r\n                        oldRowIndex: oldRowIndex,\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    } = _ref;\r\n                    var columnsController = this._columnsController;\r\n                    var visibleColumns = columnsController.getVisibleColumns();\r\n                    var items = this._dataController.items();\r\n                    var item = items[rowIndex];\r\n                    var oldColumn;\r\n                    if (isDefined(oldColumnIndex)) {\r\n                        oldColumn = visibleColumns[oldColumnIndex]\r\n                    } else {\r\n                        oldColumn = this._getEditColumn()\r\n                    }\r\n                    if (!isDefined(oldRowIndex)) {\r\n                        oldRowIndex = this._getVisibleEditRowIndex()\r\n                    }\r\n                    if (isString(columnIndex)) {\r\n                        columnIndex = columnsController.columnOption(columnIndex, \"index\");\r\n                        columnIndex = columnsController.getVisibleIndex(columnIndex)\r\n                    }\r\n                    var column = visibleColumns[columnIndex];\r\n                    return {\r\n                        oldColumn: oldColumn,\r\n                        columnIndex: columnIndex,\r\n                        oldRowIndex: oldRowIndex,\r\n                        rowIndex: rowIndex,\r\n                        column: column,\r\n                        item: item\r\n                    }\r\n                },\r\n                _prepareEditCell: function(params, item, editColumnIndex, editRowIndex) {\r\n                    if (!item.isNewRow) {\r\n                        params.key = item.key\r\n                    }\r\n                    if (this._isEditingStart(params)) {\r\n                        return false\r\n                    }\r\n                    this._pageIndex = this._dataController.pageIndex();\r\n                    this._setEditRowKey(item.key);\r\n                    this._setEditColumnNameByIndex(editColumnIndex);\r\n                    if (!params.column.showEditorAlways) {\r\n                        var _item$oldData;\r\n                        this._addInternalData({\r\n                            key: item.key,\r\n                            oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\r\n                        })\r\n                    }\r\n                    return true\r\n                },\r\n                closeEditCell: function(isError, withoutSaveEditData) {\r\n                    var result = when();\r\n                    var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var deferred = new Deferred;\r\n                        result = new Deferred;\r\n                        this.executeOperation(deferred, () => {\r\n                            this._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve)\r\n                        })\r\n                    }\r\n                    return result.promise()\r\n                },\r\n                _closeEditCellCore: function(isError, oldEditRowIndex, withoutSaveEditData) {\r\n                    var dataController = this._dataController;\r\n                    var deferred = new Deferred;\r\n                    var promise = deferred.promise();\r\n                    if (this.isCellEditMode() && this.hasChanges()) {\r\n                        if (!withoutSaveEditData) {\r\n                            this.saveEditData().done(error => {\r\n                                if (!this.hasChanges()) {\r\n                                    this.closeEditCell(!!error).always(deferred.resolve);\r\n                                    return\r\n                                }\r\n                                deferred.resolve()\r\n                            });\r\n                            return promise\r\n                        }\r\n                    } else {\r\n                        this._resetEditRowKey();\r\n                        this._resetEditColumnName();\r\n                        if (oldEditRowIndex >= 0) {\r\n                            var rowIndices = [oldEditRowIndex];\r\n                            this._beforeCloseEditCellInBatchMode(rowIndices);\r\n                            if (!isError) {\r\n                                dataController.updateItems({\r\n                                    changeType: \"update\",\r\n                                    rowIndices: rowIndices\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    deferred.resolve();\r\n                    return promise\r\n                },\r\n                _resetModifiedClassCells: function(changes) {\r\n                    if (this.isBatchEditMode()) {\r\n                        var columnsCount = this._columnsController.getVisibleColumns().length;\r\n                        changes.forEach(_ref2 => {\r\n                            var {\r\n                                key: key\r\n                            } = _ref2;\r\n                            var rowIndex = this._dataController.getRowIndexByKey(key);\r\n                            if (-1 !== rowIndex) {\r\n                                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\r\n                                    this._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED_CLASS)\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n                _prepareChange: function(options, value, text) {\r\n                    var $cellElement = $(options.cellElement);\r\n                    if (this.isBatchEditMode() && void 0 !== options.key) {\r\n                        this._applyModified($cellElement, options)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _cancelSaving: function() {\r\n                    var dataController = this._dataController;\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        if (this.isBatchEditMode()) {\r\n                            this._resetEditIndices()\r\n                        }\r\n                        dataController.updateItems()\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    if (\"editing\" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\r\n                        this._handleEditColumnNameChange(args);\r\n                        args.handled = true\r\n                    } else {\r\n                        this.callBase(args)\r\n                    }\r\n                },\r\n                _editCellFromOptionChanged: function(columnIndex, oldColumnIndex, oldRowIndex) {\r\n                    var columns = this._columnsController.getVisibleColumns();\r\n                    if (columnIndex > -1) {\r\n                        deferRender(() => {\r\n                            this._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex)\r\n                        })\r\n                    }\r\n                },\r\n                _handleEditRowKeyChange: function(args) {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var columnIndex = this._getVisibleEditColumnIndex();\r\n                        var oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n                        var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n                        if (isDefined(args.value) && args.value !== args.previousValue) {\r\n                            var _this$_editCellFromOp;\r\n                            null === (_this$_editCellFromOp = this._editCellFromOptionChanged) || void 0 === _this$_editCellFromOp ? void 0 : _this$_editCellFromOp.call(this, columnIndex, columnIndex, oldRowIndex)\r\n                        }\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                deleteRow: function(rowIndex) {\r\n                    if (this.isCellEditMode() && this.isEditing()) {\r\n                        var isNewRow = this._dataController.items()[rowIndex].isNewRow;\r\n                        var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n                        this.closeEditCell(null, isNewRow).always(() => {\r\n                            rowIndex = this._dataController.getRowIndexByKey(rowKey);\r\n                            this._checkAndDeleteRow(rowIndex)\r\n                        })\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _checkAndDeleteRow: function(rowIndex) {\r\n                    if (this.isBatchEditMode()) {\r\n                        this._deleteRowCore(rowIndex)\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _refreshCore: function(params) {\r\n                    var {\r\n                        isPageChanged: isPageChanged\r\n                    } = null !== params && void 0 !== params ? params : {};\r\n                    var needResetIndexes = this.isBatchEditMode() || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        if (needResetIndexes) {\r\n                            this._resetEditColumnName();\r\n                            this._resetEditRowKey()\r\n                        }\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _allowRowAdding: function(params) {\r\n                    if (this.isBatchEditMode()) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _afterDeleteRow: function(rowIndex, oldEditRowIndex) {\r\n                    var dataController = this._dataController;\r\n                    if (this.isBatchEditMode()) {\r\n                        dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: [oldEditRowIndex, rowIndex]\r\n                        });\r\n                        return (new Deferred).resolve()\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _isDefaultButtonVisible: function(button, options) {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var isBatchMode = this.isBatchEditMode();\r\n                        switch (button.name) {\r\n                            case \"save\":\r\n                            case \"cancel\":\r\n                            case \"edit\":\r\n                                return false;\r\n                            case \"delete\":\r\n                                return this.callBase.apply(this, arguments) && (!isBatchMode || !options.row.removed);\r\n                            case \"undelete\":\r\n                                return isBatchMode && this.allowDeleting(options) && options.row.removed;\r\n                            default:\r\n                                return this.callBase.apply(this, arguments)\r\n                        }\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isRowDeleteAllowed: function() {\r\n                    var callBase = this.callBase.apply(this, arguments);\r\n                    return callBase || this.isBatchEditMode()\r\n                },\r\n                _beforeEndSaving: function(changes) {\r\n                    if (this.isCellEditMode()) {\r\n                        var _changes$;\r\n                        if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\r\n                            this.callBase.apply(this, arguments)\r\n                        }\r\n                    } else {\r\n                        if (this.isBatchEditMode()) {\r\n                            this._resetModifiedClassCells(changes)\r\n                        }\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                prepareEditButtons: function(headerPanel) {\r\n                    var editingOptions = this.option(\"editing\") || {};\r\n                    var buttonItems = this.callBase.apply(this, arguments);\r\n                    if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && this.isBatchEditMode()) {\r\n                        buttonItems.push(this.prepareButtonItem(headerPanel, \"save\", \"saveEditData\", 21));\r\n                        buttonItems.push(this.prepareButtonItem(headerPanel, \"revert\", \"cancelEditData\", 22))\r\n                    }\r\n                    return buttonItems\r\n                },\r\n                _saveEditDataInner: function() {\r\n                    var _deferred2;\r\n                    var editRow = this._dataController.getVisibleRows()[this.getEditRowIndex()];\r\n                    var editColumn = this._getEditColumn();\r\n                    var showEditorAlways = null === editColumn || void 0 === editColumn ? void 0 : editColumn.showEditorAlways;\r\n                    var isUpdateInCellMode = this.isCellEditMode() && !(null !== editRow && void 0 !== editRow && editRow.isNewRow);\r\n                    var deferred;\r\n                    if (isUpdateInCellMode && showEditorAlways) {\r\n                        deferred = new Deferred;\r\n                        this.addDeferred(deferred)\r\n                    }\r\n                    return this.callBase.apply(this, arguments).always(null === (_deferred2 = deferred) || void 0 === _deferred2 ? void 0 : _deferred2.resolve)\r\n                },\r\n                _applyChange: function(options, params, forceUpdateRow) {\r\n                    var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\r\n                    var showEditorAlways = options.column.showEditorAlways;\r\n                    var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n                    var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex);\r\n                    if (focusPreviousEditingCell) {\r\n                        this._focusEditingCell();\r\n                        this._updateEditRow(options.row, true, isCustomSetCellValue);\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _applyChangeCore: function(options, forceUpdateRow) {\r\n                    var showEditorAlways = options.column.showEditorAlways;\r\n                    var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\r\n                    if (showEditorAlways && !forceUpdateRow) {\r\n                        if (isUpdateInCellMode) {\r\n                            this._setEditRowKey(options.row.key, true);\r\n                            this._setEditColumnNameByIndex(options.columnIndex, true);\r\n                            return this.saveEditData()\r\n                        } else if (this.isBatchEditMode()) {\r\n                            forceUpdateRow = this._needUpdateRow(options.column);\r\n                            return this.callBase(options, forceUpdateRow)\r\n                        }\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _processDataItemCore: function(item, _ref3) {\r\n                    var {\r\n                        data: data,\r\n                        type: type\r\n                    } = _ref3;\r\n                    if (this.isBatchEditMode() && type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                        item.data = createObjectWithChanges(item.data, data)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _processRemoveCore: function(changes, editIndex, processIfBatch) {\r\n                    if (this.isBatchEditMode() && !processIfBatch) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _processRemoveIfError: function() {\r\n                    if (this.isBatchEditMode()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _beforeFocusElementInRow: function(rowIndex) {\r\n                    this.callBase.apply(this, arguments);\r\n                    var editRowIndex = rowIndex >= 0 ? rowIndex : 0;\r\n                    var columnIndex = this.getFirstEditableColumnIndex();\r\n                    columnIndex >= 0 && this.editCell(editRowIndex, columnIndex)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    var editingController = this._editingController;\r\n                    if (editingController.isCellOrBatchEditMode() && this.option(\"editing.allowUpdating\")) {\r\n                        eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", this.createAction(() => {\r\n                            if (editingController.isEditing()) {\r\n                                editingController.closeEditCell()\r\n                            }\r\n                        }))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var editingController = this._editingController;\r\n                        var isRowRemoved = !!row.removed;\r\n                        if (editingController.isBatchEditMode()) {\r\n                            isRowRemoved && $row.addClass(ROW_REMOVED)\r\n                        }\r\n                    }\r\n                    return $row\r\n                }\r\n            },\r\n            headerPanel: {\r\n                isVisible: function() {\r\n                    var editingOptions = this.getController(\"editing\").option(\"editing\");\r\n                    return this.callBase() || editingOptions && (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}