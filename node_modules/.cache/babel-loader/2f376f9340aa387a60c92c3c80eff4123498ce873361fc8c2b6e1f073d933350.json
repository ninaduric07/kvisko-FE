{"ast":null,"code":"import * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useGridLogger, useGridApiEventHandler, getDataGridUtilityClass, useGridSelector, gridSortModelSelector, gridRowMaximumTreeDepthSelector, useGridApiOptionHandler } from '@mui/x-data-grid';\nimport { gridEditRowsStateSelector } from '@mui/x-data-grid/internals';\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    rowDragging: ['row--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\n/**\n * Only available in DataGridPro\n * @requires useGridRows (method)\n */\nexport const useGridRowReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowReorder');\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const dragRowNode = React.useRef(null);\n  const originRowIndex = React.useRef(null);\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const [dragRowId, setDragRowId] = React.useState('');\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n\n  // TODO: remove sortModel check once row reorder is sorting compatible\n  // remove treeDepth once row reorder is tree compatible\n  const isRowReorderDisabled = React.useMemo(() => {\n    return !props.rowReordering || !!sortModel.length || treeDepth !== 1;\n  }, [props.rowReordering, sortModel, treeDepth]);\n  const handleDragStart = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    if (isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n    logger.debug(`Start dragging row ${params.id}`);\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    dragRowNode.current = event.currentTarget;\n    dragRowNode.current.classList.add(classes.rowDragging);\n    setDragRowId(params.id);\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragRowNode.current.classList.remove(classes.rowDragging);\n    });\n    originRowIndex.current = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n  }, [isRowReorderDisabled, classes.rowDragging, logger, apiRef]);\n  const handleDragOver = React.useCallback((params, event) => {\n    if (dragRowId === '') {\n      return;\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (!rowNode || rowNode.type === 'footer' || rowNode.type === 'pinnedRow') {\n      return;\n    }\n    logger.debug(`Dragging over row ${params.id}`);\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    if (params.id !== dragRowId) {\n      const targetRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n      apiRef.current.setRowIndex(dragRowId, targetRowIndex);\n    }\n  }, [apiRef, logger, dragRowId]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    if (dragRowId === '' || isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n    logger.debug('End dragging row');\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragRowNode.current = null;\n\n    // Check if the row was dropped outside the grid.\n    if (event.dataTransfer.dropEffect === 'none') {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setRowIndex(dragRowId, originRowIndex.current);\n      originRowIndex.current = null;\n    } else {\n      // Emit the rowOrderChange event only once when the reordering stops.\n      const rowOrderChangeParams = {\n        row: apiRef.current.getRow(dragRowId),\n        targetIndex: apiRef.current.getRowIndexRelativeToVisibleRows(params.id),\n        oldIndex: originRowIndex.current\n      };\n      apiRef.current.publishEvent('rowOrderChange', rowOrderChangeParams);\n    }\n    setDragRowId('');\n  }, [isRowReorderDisabled, logger, apiRef, dragRowId]);\n  useGridApiEventHandler(apiRef, 'rowDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'rowDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'rowDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'rowOrderChange', props.onRowOrderChange);\n};","map":{"version":3,"names":["React","unstable_composeClasses","composeClasses","useGridLogger","useGridApiEventHandler","getDataGridUtilityClass","useGridSelector","gridSortModelSelector","gridRowMaximumTreeDepthSelector","useGridApiOptionHandler","gridEditRowsStateSelector","useUtilityClasses","ownerState","classes","slots","rowDragging","useGridRowReorder","apiRef","props","logger","sortModel","treeDepth","dragRowNode","useRef","originRowIndex","removeDnDStylesTimeout","dragRowId","setDragRowId","useState","useEffect","clearTimeout","current","isRowReorderDisabled","useMemo","rowReordering","length","handleDragStart","useCallback","params","event","editRowsState","state","Object","keys","debug","id","stopPropagation","currentTarget","classList","add","setTimeout","remove","getRowIndexRelativeToVisibleRows","handleDragOver","rowNode","getRowNode","type","preventDefault","targetRowIndex","setRowIndex","handleDragEnd","dataTransfer","dropEffect","rowOrderChangeParams","row","getRow","targetIndex","oldIndex","publishEvent","onRowOrderChange"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/node_modules/@mui/x-data-grid-pro/hooks/features/rowReorder/useGridRowReorder.js"],"sourcesContent":["import * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useGridLogger, useGridApiEventHandler, getDataGridUtilityClass, useGridSelector, gridSortModelSelector, gridRowMaximumTreeDepthSelector, useGridApiOptionHandler } from '@mui/x-data-grid';\nimport { gridEditRowsStateSelector } from '@mui/x-data-grid/internals';\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    rowDragging: ['row--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\n/**\n * Only available in DataGridPro\n * @requires useGridRows (method)\n */\nexport const useGridRowReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowReorder');\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const dragRowNode = React.useRef(null);\n  const originRowIndex = React.useRef(null);\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const [dragRowId, setDragRowId] = React.useState('');\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n\n  // TODO: remove sortModel check once row reorder is sorting compatible\n  // remove treeDepth once row reorder is tree compatible\n  const isRowReorderDisabled = React.useMemo(() => {\n    return !props.rowReordering || !!sortModel.length || treeDepth !== 1;\n  }, [props.rowReordering, sortModel, treeDepth]);\n  const handleDragStart = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    if (isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n    logger.debug(`Start dragging row ${params.id}`);\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    dragRowNode.current = event.currentTarget;\n    dragRowNode.current.classList.add(classes.rowDragging);\n    setDragRowId(params.id);\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragRowNode.current.classList.remove(classes.rowDragging);\n    });\n    originRowIndex.current = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n  }, [isRowReorderDisabled, classes.rowDragging, logger, apiRef]);\n  const handleDragOver = React.useCallback((params, event) => {\n    if (dragRowId === '') {\n      return;\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (!rowNode || rowNode.type === 'footer' || rowNode.type === 'pinnedRow') {\n      return;\n    }\n    logger.debug(`Dragging over row ${params.id}`);\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    if (params.id !== dragRowId) {\n      const targetRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n      apiRef.current.setRowIndex(dragRowId, targetRowIndex);\n    }\n  }, [apiRef, logger, dragRowId]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    if (dragRowId === '' || isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n    logger.debug('End dragging row');\n    event.preventDefault();\n    // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragRowNode.current = null;\n\n    // Check if the row was dropped outside the grid.\n    if (event.dataTransfer.dropEffect === 'none') {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setRowIndex(dragRowId, originRowIndex.current);\n      originRowIndex.current = null;\n    } else {\n      // Emit the rowOrderChange event only once when the reordering stops.\n      const rowOrderChangeParams = {\n        row: apiRef.current.getRow(dragRowId),\n        targetIndex: apiRef.current.getRowIndexRelativeToVisibleRows(params.id),\n        oldIndex: originRowIndex.current\n      };\n      apiRef.current.publishEvent('rowOrderChange', rowOrderChangeParams);\n    }\n    setDragRowId('');\n  }, [isRowReorderDisabled, logger, apiRef, dragRowId]);\n  useGridApiEventHandler(apiRef, 'rowDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'rowDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'rowDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'rowOrderChange', props.onRowOrderChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}