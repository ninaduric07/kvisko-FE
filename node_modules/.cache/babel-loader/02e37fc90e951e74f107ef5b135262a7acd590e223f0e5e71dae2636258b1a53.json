{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninad\\\\OneDrive\\\\Radna povr\\u0161ina\\\\zavrsni\\\\client\\\\src\\\\pages\\\\ManageQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageQuestions = () => {\n  _s();\n  const gridRef = useRef();\n  const containerStyle = useMemo(() => ({\n    width: '100%',\n    height: '100%'\n  }), []);\n  const gridStyle = useMemo(() => ({\n    height: '100%',\n    width: '100%'\n  }), []);\n  const [rowData, setRowData] = useState();\n  const [columnDefs, setColumnDefs] = useState([\n  // group cell renderer needed for expand / collapse icons\n  {\n    field: 'name',\n    cellRenderer: 'agGroupCellRenderer'\n  }, {\n    field: 'account'\n  }, {\n    field: 'calls'\n  }, {\n    field: 'minutes',\n    valueFormatter: \"x.toLocaleString() + 'm'\"\n  }]);\n  const defaultColDef = useMemo(() => {\n    return {\n      flex: 1\n    };\n  }, []);\n  const detailCellRendererParams = useMemo(() => {\n    return {\n      detailGridOptions: {\n        columnDefs: [{\n          field: 'callId'\n        }, {\n          field: 'direction'\n        }, {\n          field: 'number',\n          minWidth: 150\n        }, {\n          field: 'duration',\n          valueFormatter: \"x.toLocaleString() + 's'\"\n        }, {\n          field: 'switchCode',\n          minWidth: 150\n        }],\n        defaultColDef: {\n          flex: 1\n        }\n      },\n      getDetailRowData: params => {\n        params.successCallback(params.data.callRecords);\n      }\n    };\n  }, []);\n  const onGridReady = useCallback(params => {\n    fetch('https://www.ag-grid.com/example-assets/master-detail-data.json').then(resp => resp.json()).then(data => {\n      setRowData(data);\n    });\n  }, []);\n  const onFirstDataRendered = useCallback(params => {\n    // arbitrarily expand a row for presentational purposes\n    setTimeout(function () {\n      gridRef.current.api.getDisplayedRowAtIndex(1).setExpanded(true);\n    }, 0);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: gridStyle,\n      className: \"ag-theme-alpine\",\n      children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n        ref: gridRef,\n        rowData: rowData,\n        columnDefs: columnDefs,\n        defaultColDef: defaultColDef,\n        masterDetail: true,\n        detailCellRendererParams: detailCellRendererParams,\n        onGridReady: onGridReady,\n        onFirstDataRendered: onFirstDataRendered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(ManageQuestions, \"bl9rwsY4o7npvmk40hmWBdh/FC4=\");\n_c = ManageQuestions;\nexport default ManageQuestions;\nvar _c;\n$RefreshReg$(_c, \"ManageQuestions\");","map":{"version":3,"names":["React","useCallback","useMemo","useRef","useState","createRoot","AgGridReact","jsxDEV","_jsxDEV","ManageQuestions","_s","gridRef","containerStyle","width","height","gridStyle","rowData","setRowData","columnDefs","setColumnDefs","field","cellRenderer","valueFormatter","defaultColDef","flex","detailCellRendererParams","detailGridOptions","minWidth","getDetailRowData","params","successCallback","data","callRecords","onGridReady","fetch","then","resp","json","onFirstDataRendered","setTimeout","current","api","getDisplayedRowAtIndex","setExpanded","style","children","className","ref","masterDetail","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/src/pages/ManageQuestions.js"],"sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-enterprise';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\n\r\nconst ManageQuestions = () => {\r\n    const gridRef = useRef();\r\n    const containerStyle = useMemo(() => ({ width: '100%', height: '100%' }), []);\r\n    const gridStyle = useMemo(() => ({ height: '100%', width: '100%' }), []);\r\n    const [rowData, setRowData] = useState();\r\n    const [columnDefs, setColumnDefs] = useState([\r\n        // group cell renderer needed for expand / collapse icons\r\n        { field: 'name', cellRenderer: 'agGroupCellRenderer' },\r\n        { field: 'account' },\r\n        { field: 'calls' },\r\n        { field: 'minutes', valueFormatter: \"x.toLocaleString() + 'm'\" },\r\n    ]);\r\n    const defaultColDef = useMemo(() => {\r\n        return {\r\n            flex: 1,\r\n        };\r\n    }, []);\r\n    const detailCellRendererParams = useMemo(() => {\r\n        return {\r\n            detailGridOptions: {\r\n                columnDefs: [\r\n                    { field: 'callId' },\r\n                    { field: 'direction' },\r\n                    { field: 'number', minWidth: 150 },\r\n                    { field: 'duration', valueFormatter: \"x.toLocaleString() + 's'\" },\r\n                    { field: 'switchCode', minWidth: 150 },\r\n                ],\r\n                defaultColDef: {\r\n                    flex: 1,\r\n                },\r\n            },\r\n            getDetailRowData: (params) => {\r\n                params.successCallback(params.data.callRecords);\r\n            },\r\n        };\r\n    }, []);\r\n\r\n    const onGridReady = useCallback((params) => {\r\n        fetch('https://www.ag-grid.com/example-assets/master-detail-data.json')\r\n            .then((resp) => resp.json())\r\n            .then((data) => {\r\n                setRowData(data);\r\n            });\r\n    }, []);\r\n\r\n    const onFirstDataRendered = useCallback((params) => {\r\n        // arbitrarily expand a row for presentational purposes\r\n        setTimeout(function () {\r\n            gridRef.current.api.getDisplayedRowAtIndex(1).setExpanded(true);\r\n        }, 0);\r\n    }, []);\r\n\r\n    return (\r\n        <div style={containerStyle}>\r\n            <div style={gridStyle} className=\"ag-theme-alpine\">\r\n                <AgGridReact\r\n                    ref={gridRef}\r\n                    rowData={rowData}\r\n                    columnDefs={columnDefs}\r\n                    defaultColDef={defaultColDef}\r\n                    masterDetail={true}\r\n                    detailCellRendererParams={detailCellRendererParams}\r\n                    onGridReady={onGridReady}\r\n                    onFirstDataRendered={onFirstDataRendered}\r\n                ></AgGridReact>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ManageQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}