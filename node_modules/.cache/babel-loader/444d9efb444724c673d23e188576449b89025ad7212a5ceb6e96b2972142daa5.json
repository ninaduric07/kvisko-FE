{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/keyboard_navigation/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight, getHeight, getWidth, getOuterWidth } from \"../../../../core/utils/size\";\nimport $ from \"../../../../core/../core/renderer\";\nimport domAdapter from \"../../../../core/../core/dom_adapter\";\nimport eventsEngine from \"../../../../core/../events/core/events_engine\";\nimport { isDefined, isEmptyObject } from \"../../../../core/../core/utils/type\";\nimport { focused } from \"../../../../ui/widget/selectors\";\nimport { addNamespace, createEvent, isCommandKeyPressed } from \"../../../../core/../events/utils/index\";\nimport pointerEvents from \"../../../../events/pointer\";\nimport { name as clickEventName } from \"../../../../core/../events/click\";\nimport { noop } from \"../../../../core/../core/utils/common\";\nimport * as accessibility from \"../../../../ui/shared/accessibility\";\nimport browser from \"../../../../core/utils/browser\";\nimport { keyboard } from \"../../../../events/short\";\nimport devices from \"../../../../core/devices\";\nimport gridCoreUtils from \"../module_utils\";\nimport core from \"../modules\";\nimport { GridCoreKeyboardNavigationDom } from \"./dom\";\nconst ROWS_VIEW_CLASS = \"rowsview\";\nconst EDIT_FORM_CLASS = \"edit-form\";\nconst GROUP_FOOTER_CLASS = \"group-footer\";\nconst ROW_CLASS = \"dx-row\";\nconst DATA_ROW_CLASS = \"dx-data-row\";\nconst GROUP_ROW_CLASS = \"dx-group-row\";\nconst HEADER_ROW_CLASS = \"dx-header-row\";\nconst EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nconst MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nconst FREESPACE_ROW_CLASS = \"dx-freespace-row\";\nconst VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nconst EDITOR_CELL_CLASS = \"dx-editor-cell\";\nconst DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nconst COMMAND_EXPAND_CLASS = \"dx-command-expand\";\nconst COMMAND_SELECT_CLASS = \"dx-command-select\";\nconst COMMAND_EDIT_CLASS = \"dx-command-edit\";\nconst COMMAND_CELL_SELECTOR = \"[class^=dx-command]\";\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nconst DATEBOX_WIDGET_NAME = \"dxDateBox\";\nconst FOCUS_STATE_CLASS = \"dx-state-focused\";\nconst WIDGET_CLASS = \"dx-widget\";\nconst REVERT_BUTTON_CLASS = \"dx-revert-button\";\nconst FAST_EDITING_DELETE_KEY = \"delete\";\nconst INTERACTIVE_ELEMENTS_SELECTOR = \"input:not([type='hidden']), textarea, a, select, button, [tabindex], .dx-checkbox\";\nconst NON_FOCUSABLE_ELEMENTS_SELECTOR = INTERACTIVE_ELEMENTS_SELECTOR + \", .dx-dropdowneditor-icon\";\nconst EDIT_MODE_ROW = \"row\";\nconst EDIT_MODE_FORM = \"form\";\nconst EDIT_MODE_BATCH = \"batch\";\nconst EDIT_MODE_CELL = \"cell\";\nconst FOCUS_TYPE_ROW = \"row\";\nconst FOCUS_TYPE_CELL = \"cell\";\nconst COLUMN_HEADERS_VIEW = \"columnHeadersView\";\nconst FUNCTIONAL_KEYS = [\"shift\", \"control\", \"alt\"];\nfunction isGroupRow($row) {\n  return $row && $row.hasClass(\"dx-group-row\");\n}\nfunction isDetailRow($row) {\n  return $row && $row.hasClass(\"dx-master-detail-row\");\n}\nfunction isDataRow($row) {\n  return $row && !isGroupRow($row) && !isDetailRow($row);\n}\nfunction isNotFocusedRow($row) {\n  return !$row || $row.hasClass(\"dx-freespace-row\") || $row.hasClass(\"dx-virtual-row\");\n}\nfunction isEditorCell(that, $cell) {\n  return !that._isRowEditMode() && $cell && !$cell.hasClass(\"dx-command-select\") && $cell.hasClass(\"dx-editor-cell\");\n}\nfunction isElementDefined($element) {\n  return isDefined($element) && $element.length > 0;\n}\nfunction isMobile() {\n  return \"desktop\" !== devices.current().deviceType;\n}\nfunction isCellInHeaderRow($cell) {\n  return !!$cell.parent(\".dx-header-row\").length;\n}\nfunction isFixedColumnIndexOffsetRequired(that, column) {\n  const rtlEnabled = that.option(\"rtlEnabled\");\n  let result = false;\n  if (rtlEnabled) {\n    result = !(\"right\" === column.fixedPosition || isDefined(column.command) && !isDefined(column.fixedPosition));\n  } else {\n    result = !(!isDefined(column.fixedPosition) || \"left\" === column.fixedPosition);\n  }\n  return result;\n}\nfunction shouldPreventScroll(that) {\n  const keyboardController = that.getController(\"keyboardNavigation\");\n  return keyboardController._isVirtualScrolling() ? that.option(\"focusedRowIndex\") === keyboardController.getRowIndex() : false;\n}\nconst keyboardNavigationMembers = {\n  init() {\n    this._dataController = this.getController(\"data\");\n    this._selectionController = this.getController(\"selection\");\n    this._editingController = this.getController(\"editing\");\n    this._headerPanel = this.getView(\"headerPanel\");\n    this._columnsController = this.getController(\"columns\");\n    this._editorFactory = this.getController(\"editorFactory\");\n    if (this.isKeyboardEnabled()) {\n      accessibility.subscribeVisibilityChange();\n      this._updateFocusTimeout = null;\n      this._fastEditingStarted = false;\n      this._focusedCellPosition = {};\n      this._canceledCellPosition = null;\n      const elementFocused = $element => {\n        this.setupFocusedView();\n        if (this._isNeedScroll) {\n          if ($element.is(\":visible\") && this._focusedView && this._focusedView.getScrollable) {\n            this._focusedView._scrollToElement($element);\n            this._isNeedScroll = false;\n          }\n        }\n      };\n      this._editorFactory.focused.add(elementFocused);\n      this._initViewHandlers();\n      this._initDocumentHandlers();\n      this.createAction(\"onKeyDown\");\n    }\n  },\n  _initViewHandlers() {\n    const rowsView = this.getView(\"rowsView\");\n    const rowsViewFocusHandler = event => {\n      const $element = $(event.target);\n      const isRelatedTargetInRowsView = $(event.relatedTarget).closest(rowsView.element()).length;\n      const isLink = $element.is(\"a\");\n      if (event.relatedTarget && isLink && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {\n        let $focusedCell = this._getFocusedCell();\n        $focusedCell = !isElementDefined($focusedCell) ? rowsView.getCellElements(0).filter(\"[tabindex]\").eq(0) : $focusedCell;\n        if (!$element.closest($focusedCell).length) {\n          event.preventDefault();\n          eventsEngine.trigger($focusedCell, \"focus\");\n        }\n      }\n    };\n    rowsView.renderCompleted.add(e => {\n      const $rowsView = rowsView.element();\n      const isFullUpdate = !e || \"refresh\" === e.changeType;\n      const isFocusedViewCorrect = this._focusedView && this._focusedView.name === rowsView.name;\n      let needUpdateFocus = false;\n      const isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\n      const root = $(domAdapter.getRootNode($rowsView.get && $rowsView.get(0)));\n      const $focusedElement = root.find(\":focus\");\n      const isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length;\n      eventsEngine.off($rowsView, \"focusin\", rowsViewFocusHandler);\n      eventsEngine.on($rowsView, \"focusin\", rowsViewFocusHandler);\n      this._initPointerEventHandler();\n      this._initKeyDownHandler();\n      this._setRowsViewAttributes();\n      if (isFocusedViewCorrect && isFocusedElementCorrect) {\n        needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate && !(null === e || void 0 === e ? void 0 : e.virtualColumnsScrolling);\n        needUpdateFocus && this._updateFocus(true);\n      }\n    });\n  },\n  _initDocumentHandlers() {\n    const document = domAdapter.getDocument();\n    this._documentClickHandler = this.createAction(e => {\n      const $target = $(e.event.target);\n      const isCurrentRowsViewClick = this._isEventInCurrentGrid(e.event) && $target.closest(\".\" + this.addWidgetPrefix(\"rowsview\")).length;\n      const isEditorOverlay = $target.closest(\".dx-dropdowneditor-overlay\").length;\n      const columnsResizerController = this.getController(\"columnsResizer\");\n      const isColumnResizing = !!columnsResizerController && columnsResizerController.isResizing();\n      if (!isCurrentRowsViewClick && !isEditorOverlay && !isColumnResizing) {\n        const targetInsideFocusedView = this._focusedView ? $target.parents().filter(this._focusedView.element()).length > 0 : false;\n        !targetInsideFocusedView && this._resetFocusedCell(true);\n        this._resetFocusedView();\n      }\n    });\n    eventsEngine.on(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n  },\n  _setRowsViewAttributes() {\n    const $rowsView = this._getRowsViewElement();\n    const isGridEmpty = !this._dataController.getVisibleRows().length;\n    if (isGridEmpty) {\n      this._applyTabIndexToElement($rowsView);\n    }\n  },\n  _initPointerEventHandler() {\n    const pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\n    const $rowsView = this._getRowsViewElement();\n    if (!isDefined(this._pointerEventAction)) {\n      this._pointerEventAction = this.createAction(this._pointerEventHandler);\n    }\n    eventsEngine.off($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), this._pointerEventAction);\n    eventsEngine.on($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), \".dx-row > td, .dx-row\", this._pointerEventAction);\n  },\n  _initKeyDownHandler() {\n    const $rowsView = this._getRowsViewElement();\n    keyboard.off(this._keyDownListener);\n    this._keyDownListener = keyboard.on($rowsView, null, e => this._keyDownHandler(e));\n  },\n  dispose() {\n    this.callBase();\n    this._resetFocusedView();\n    keyboard.off(this._keyDownListener);\n    eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n    clearTimeout(this._updateFocusTimeout);\n    accessibility.unsubscribeVisibilityChange();\n  },\n  optionChanged(args) {\n    const that = this;\n    switch (args.name) {\n      case \"keyboardNavigation\":\n      case \"useLegacyKeyboardNavigation\":\n        args.handled = true;\n        break;\n      default:\n        that.callBase(args);\n    }\n  },\n  isRowFocusType() {\n    return \"row\" === this.focusType;\n  },\n  isCellFocusType() {\n    return \"cell\" === this.focusType;\n  },\n  setRowFocusType() {\n    if (this.option(\"focusedRowEnabled\")) {\n      this.focusType = \"row\";\n    }\n  },\n  setCellFocusType() {\n    this.focusType = \"cell\";\n  },\n  _keyDownHandler(e) {\n    var _a;\n    let needStopPropagation = true;\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n    let isHandled = this._processOnKeyDown(e);\n    const isEditing = null === (_a = this._editingController) || void 0 === _a ? void 0 : _a.isEditing();\n    const {\n      originalEvent: originalEvent\n    } = e;\n    if (originalEvent.isDefaultPrevented()) {\n      this._isNeedFocus = false;\n      this._isNeedScroll = false;\n      return;\n    }\n    !FUNCTIONAL_KEYS.includes(e.keyName) && this._updateFocusedCellPositionByTarget(originalEvent.target);\n    if (!isHandled) {\n      switch (e.keyName) {\n        case \"leftArrow\":\n        case \"rightArrow\":\n          this._leftRightKeysHandler(e, isEditing);\n          isHandled = true;\n          break;\n        case \"upArrow\":\n        case \"downArrow\":\n          if (e.ctrl) {\n            accessibility.selectView(\"rowsView\", this, originalEvent);\n          } else {\n            this._upDownKeysHandler(e, isEditing);\n          }\n          isHandled = true;\n          break;\n        case \"pageUp\":\n        case \"pageDown\":\n          this._pageUpDownKeyHandler(e);\n          isHandled = true;\n          break;\n        case \"space\":\n          isHandled = this._spaceKeyHandler(e, isEditing);\n          break;\n        case \"A\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlAKeyHandler(e, isEditing);\n            isHandled = true;\n          } else {\n            isHandled = this._beginFastEditing(e.originalEvent);\n          }\n          break;\n        case \"tab\":\n          this._tabKeyHandler(e, isEditing);\n          isHandled = true;\n          break;\n        case \"enter\":\n          this._enterKeyHandler(e, isEditing);\n          isHandled = true;\n          break;\n        case \"escape\":\n          this._escapeKeyHandler(e, isEditing);\n          isHandled = true;\n          break;\n        case \"F\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlFKeyHandler(e);\n            isHandled = true;\n          } else {\n            isHandled = this._beginFastEditing(e.originalEvent);\n          }\n          break;\n        case \"F2\":\n          this._f2KeyHandler();\n          isHandled = true;\n          break;\n        case \"del\":\n        case \"backspace\":\n          if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\n            isHandled = this._beginFastEditing(originalEvent, true);\n          }\n      }\n      if (!isHandled && !this._beginFastEditing(originalEvent)) {\n        this._isNeedFocus = false;\n        this._isNeedScroll = false;\n        needStopPropagation = false;\n      }\n      if (needStopPropagation) {\n        originalEvent.stopPropagation();\n      }\n    }\n  },\n  _processOnKeyDown(eventArgs) {\n    const {\n      originalEvent: originalEvent\n    } = eventArgs;\n    const args = {\n      handled: false,\n      event: originalEvent\n    };\n    this.executeAction(\"onKeyDown\", args);\n    eventArgs.ctrl = originalEvent.ctrlKey;\n    eventArgs.alt = originalEvent.altKey;\n    eventArgs.shift = originalEvent.shiftKey;\n    return !!args.handled;\n  },\n  _closeEditCell() {\n    setTimeout(() => {\n      this._editingController.closeEditCell();\n    });\n  },\n  _leftRightKeysHandler(eventArgs, isEditing) {\n    const rowIndex = this.getVisibleRowIndex();\n    const $event = eventArgs.originalEvent;\n    const $row = this._focusedView && this._focusedView.getRow(rowIndex);\n    const directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\n    const isEditingNavigationMode = this._isFastEditingStarted();\n    const allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\n    if (allowNavigate) {\n      this.setCellFocusType();\n      isEditingNavigationMode && this._closeEditCell();\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(directionCode);\n      }\n      const $cell = this._getNextCell(directionCode);\n      if (isElementDefined($cell)) {\n        this._arrowKeysHandlerFocusCell($event, $cell, directionCode);\n      }\n      $event && $event.preventDefault();\n    }\n  },\n  _upDownKeysHandler(eventArgs, isEditing) {\n    var _a, _b;\n    const visibleRowIndex = this.getVisibleRowIndex();\n    const $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);\n    const $event = eventArgs.originalEvent;\n    const isUpArrow = \"upArrow\" === eventArgs.keyName;\n    const dataSource = this._dataController.dataSource();\n    const isRowEditingInCurrentRow = null === (_b = null === (_a = this._editingController) || void 0 === _a ? void 0 : _a.isEditRowByIndex) || void 0 === _b ? void 0 : _b.call(_a, visibleRowIndex);\n    const isEditingNavigationMode = this._isFastEditingStarted();\n    const allowNavigate = (!isRowEditingInCurrentRow || !isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);\n    if (allowNavigate) {\n      isEditingNavigationMode && this._closeEditCell();\n      if (!this._navigateNextCell($event, eventArgs.keyName)) {\n        if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {\n          const rowHeight = getOuterHeight($row);\n          const rowIndex = this._focusedCellPosition.rowIndex - 1;\n          this._scrollBy(0, -rowHeight, rowIndex, $event);\n        }\n      }\n      $event && $event.preventDefault();\n    }\n  },\n  _pageUpDownKeyHandler(eventArgs) {\n    const pageIndex = this._dataController.pageIndex();\n    const pageCount = this._dataController.pageCount();\n    const pagingEnabled = this.option(\"paging.enabled\");\n    const isPageUp = \"pageUp\" === eventArgs.keyName;\n    const pageStep = isPageUp ? -1 : 1;\n    const scrollable = this.getView(\"rowsView\").getScrollable();\n    if (pagingEnabled && !this._isVirtualScrolling()) {\n      if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\n        this._dataController.pageIndex(pageIndex + pageStep);\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else if (scrollable && getHeight(scrollable.container()) < getHeight(scrollable.$content())) {\n      this._scrollBy(0, getHeight(scrollable.container()) * pageStep);\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _spaceKeyHandler(eventArgs, isEditing) {\n    const rowIndex = this.getVisibleRowIndex();\n    const $target = $(eventArgs.originalEvent && eventArgs.originalEvent.target);\n    if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\n      const isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\n      const isFocusedSelectionCell = $target.hasClass(\"dx-command-select\");\n      if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\n        this._selectionController.startSelectionWithCheckboxes();\n      }\n      if (isFocusedRowElement || $target.parent().hasClass(\"dx-data-row\") || $target.hasClass(this.addWidgetPrefix(\"rowsview\"))) {\n        this._selectionController.changeItemSelection(rowIndex, {\n          shift: eventArgs.shift,\n          control: eventArgs.ctrl\n        });\n        eventArgs.originalEvent.preventDefault();\n        return true;\n      }\n      return false;\n    }\n    return this._beginFastEditing(eventArgs.originalEvent);\n  },\n  _ctrlAKeyHandler(eventArgs, isEditing) {\n    if (!isEditing && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\n      this._selectionController.selectAll();\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _tabKeyHandler(eventArgs, isEditing) {\n    const editingOptions = this.option(\"editing\");\n    const direction = eventArgs.shift ? \"previous\" : \"next\";\n    const isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);\n    let isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\n    const eventTarget = eventArgs.originalEvent.target;\n    const focusedViewElement = this._focusedView && this._focusedView.element();\n    if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\n      return;\n    }\n    $(focusedViewElement).addClass(FOCUS_STATE_CLASS);\n    if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\n      if ($(eventTarget).hasClass(this.addWidgetPrefix(\"rowsview\"))) {\n        this._resetFocusedCell();\n      }\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(direction);\n      }\n      if (isEditing) {\n        if (!this._editingCellTabHandler(eventArgs, direction)) {\n          return;\n        }\n      } else if (this._targetCellTabHandler(eventArgs, direction)) {\n        isOriginalHandlerRequired = true;\n      }\n    }\n    if (isOriginalHandlerRequired) {\n      this._editorFactory.loseFocus();\n      if (this._editingController.isEditing() && !this._isRowEditMode()) {\n        this._resetFocusedCell(true);\n        this._resetFocusedView();\n        this._closeEditCell();\n      }\n    } else {\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _getMaxHorizontalOffset() {\n    const scrollable = this.component.getScrollable();\n    const rowsView = this.getView(\"rowsView\");\n    const offset = scrollable ? scrollable.scrollWidth() - getWidth(rowsView.element()) : 0;\n    return offset;\n  },\n  _isColumnRendered(columnIndex) {\n    const allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n    const renderedVisibleColumns = this._columnsController.getVisibleColumns();\n    const column = allVisibleColumns[columnIndex];\n    let result = false;\n    if (column) {\n      result = renderedVisibleColumns.indexOf(column) >= 0;\n    }\n    return result;\n  },\n  _isFixedColumn(columnIndex) {\n    const allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n    const column = allVisibleColumns[columnIndex];\n    return !!column && !!column.fixed;\n  },\n  _isColumnVirtual(columnIndex) {\n    const localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    const column = visibleColumns[localColumnIndex];\n    return !!column && \"virtual\" === column.command;\n  },\n  _processVirtualHorizontalPosition(direction) {\n    const scrollable = this.component.getScrollable();\n    const columnIndex = this.getColumnIndex();\n    let nextColumnIndex;\n    let horizontalScrollPosition = 0;\n    let needToScroll = false;\n    switch (direction) {\n      case \"next\":\n      case \"nextInRow\":\n        {\n          const columnsCount = this._getVisibleColumnCount();\n          nextColumnIndex = columnIndex + 1;\n          horizontalScrollPosition = this.option(\"rtlEnabled\") ? this._getMaxHorizontalOffset() : 0;\n          if (\"next\" === direction) {\n            needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n          } else {\n            needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n          }\n          break;\n        }\n      case \"previous\":\n      case \"previousInRow\":\n        nextColumnIndex = columnIndex - 1;\n        horizontalScrollPosition = this.option(\"rtlEnabled\") ? 0 : this._getMaxHorizontalOffset();\n        if (\"previous\" === direction) {\n          const columnIndexOffset = this._columnsController.getColumnIndexOffset();\n          const leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;\n          needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        } else {\n          needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        }\n    }\n    if (needToScroll) {\n      scrollable.scrollTo({\n        left: horizontalScrollPosition\n      });\n    } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {\n      horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);\n      0 !== horizontalScrollPosition && scrollable.scrollBy({\n        left: horizontalScrollPosition,\n        top: 0\n      });\n    }\n  },\n  _getHorizontalScrollPositionOffset(direction) {\n    let positionOffset = 0;\n    const $currentCell = this._getCell(this._focusedCellPosition);\n    const currentCellWidth = $currentCell && getOuterWidth($currentCell);\n    if (currentCellWidth > 0) {\n      const rtlMultiplier = this.option(\"rtlEnabled\") ? -1 : 1;\n      positionOffset = \"nextInRow\" === direction || \"next\" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1;\n    }\n    return positionOffset;\n  },\n  _editingCellTabHandler(eventArgs, direction) {\n    const eventTarget = eventArgs.originalEvent.target;\n    let $cell = this._getCellElementFromTarget(eventTarget);\n    let isEditingAllowed;\n    const $event = eventArgs.originalEvent;\n    const elementType = this._getElementType(eventTarget);\n    if ($cell.is(\"[class^=dx-command]\")) {\n      return !this._targetCellTabHandler(eventArgs, direction);\n    }\n    this._updateFocusedCellPosition($cell);\n    const nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n    $cell = nextCellInfo.$cell;\n    if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\n      return false;\n    }\n    const columnsController = this._columnsController;\n    const cellIndex = this.getView(\"rowsView\").getCellIndex($cell);\n    const columnIndex = cellIndex + columnsController.getColumnIndexOffset();\n    const column = columnsController.getVisibleColumns(null, true)[columnIndex];\n    const $row = $cell.parent();\n    const rowIndex = this._getRowIndex($row);\n    const row = this._dataController.items()[rowIndex];\n    const editingController = this._editingController;\n    if (column && column.allowEditing) {\n      const isDataRow = !row || \"data\" === row.rowType;\n      isEditingAllowed = editingController.allowUpdating({\n        row: row\n      }) ? isDataRow : row && row.isNewRow;\n    }\n    if (!isEditingAllowed) {\n      this._closeEditCell();\n    }\n    if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\n      if (!this._isRowEditMode() && isEditingAllowed) {\n        this._editFocusedCell();\n      } else {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n    return true;\n  },\n  _targetCellTabHandler(eventArgs, direction) {\n    const $event = eventArgs.originalEvent;\n    let eventTarget = $event.target;\n    let $cell = this._getCellElementFromTarget(eventTarget);\n    const $lastInteractiveElement = this._getInteractiveElement($cell, !eventArgs.shift);\n    let isOriginalHandlerRequired = false;\n    let elementType;\n    if (!isEditorCell(this, $cell) && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\n      isOriginalHandlerRequired = true;\n    } else {\n      if (void 0 === this._focusedCellPosition.rowIndex && $(eventTarget).hasClass(\"dx-row\")) {\n        this._updateFocusedCellPosition($cell);\n      }\n      elementType = this._getElementType(eventTarget);\n      if (this.isRowFocusType()) {\n        this.setCellFocusType();\n        if (\"row\" === elementType && isDataRow($(eventTarget))) {\n          eventTarget = this.getFirstValidCellInRow($(eventTarget));\n          elementType = this._getElementType(eventTarget);\n        }\n      }\n      const nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n      $cell = nextCellInfo.$cell;\n      if (!$cell) {\n        return false;\n      }\n      $cell = this._checkNewLineTransition($event, $cell);\n      if (!$cell) {\n        return false;\n      }\n      this._focusCell($cell, !nextCellInfo.isHighlighted);\n      if (!isEditorCell(this, $cell)) {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n    return isOriginalHandlerRequired;\n  },\n  _getNextCellByTabKey($event, direction, elementType) {\n    let $cell = this._getNextCell(direction, elementType);\n    const args = $cell && this._fireFocusedCellChanging($event, $cell, true);\n    if (!args || args.cancel) {\n      return {};\n    }\n    if (args.$newCellElement) {\n      $cell = args.$newCellElement;\n    }\n    return {\n      $cell: $cell,\n      isHighlighted: args.isHighlighted\n    };\n  },\n  _checkNewLineTransition($event, $cell) {\n    const rowIndex = this.getVisibleRowIndex();\n    const $row = $cell.parent();\n    if (rowIndex !== this._getRowIndex($row)) {\n      const cellPosition = this._getCellPosition($cell);\n      const args = this._fireFocusedRowChanging($event, $row);\n      if (args.cancel) {\n        return;\n      }\n      if (args.rowIndexChanged) {\n        this.setFocusedColumnIndex(cellPosition.columnIndex);\n        $cell = this._getFocusedCell();\n      }\n    }\n    return $cell;\n  },\n  _enterKeyHandler(eventArgs, isEditing) {\n    const $cell = this._getFocusedCell();\n    const rowIndex = this.getVisibleRowIndex();\n    const $row = this._focusedView && this._focusedView.getRow(rowIndex);\n    if (this.option(\"grouping.allowCollapsing\") && isGroupRow($row) || this.option(\"masterDetail.enabled\") && $cell && $cell.hasClass(\"dx-command-expand\")) {\n      const key = this._dataController.getKeyByRowIndex(rowIndex);\n      const item = this._dataController.items()[rowIndex];\n      if (void 0 !== key && item && item.data && !item.data.isContinuation) {\n        this._dataController.changeRowExpand(key);\n      }\n    } else {\n      this._processEnterKeyForDataCell(eventArgs, isEditing);\n    }\n  },\n  _processEnterKeyForDataCell(eventArgs, isEditing) {\n    const direction = this._getEnterKeyDirection(eventArgs);\n    const allowEditingOnEnterKey = this._allowEditingOnEnterKey();\n    if (isEditing || !allowEditingOnEnterKey && direction) {\n      this._handleEnterKeyEditingCell(eventArgs.originalEvent);\n      if (\"next\" === direction || \"previous\" === direction) {\n        this._targetCellTabHandler(eventArgs, direction);\n      } else if (\"upArrow\" === direction || \"downArrow\" === direction) {\n        this._navigateNextCell(eventArgs.originalEvent, direction);\n      }\n    } else if (allowEditingOnEnterKey) {\n      this._startEditing(eventArgs);\n    }\n  },\n  _getEnterKeyDirection(eventArgs) {\n    const enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\n    const isShift = eventArgs.shift;\n    if (\"column\" === enterKeyDirection) {\n      return isShift ? \"upArrow\" : \"downArrow\";\n    }\n    if (\"row\" === enterKeyDirection) {\n      return isShift ? \"previous\" : \"next\";\n    }\n    return;\n  },\n  _handleEnterKeyEditingCell(event) {\n    const {\n      target: target\n    } = event;\n    const $cell = this._getCellElementFromTarget(target);\n    const isRowEditMode = this._isRowEditMode();\n    this._updateFocusedCellPosition($cell);\n    if (isRowEditMode) {\n      this._focusEditFormCell($cell);\n      setTimeout(this._editingController.saveEditData.bind(this._editingController));\n    } else {\n      eventsEngine.trigger($(target), \"change\");\n      this._closeEditCell();\n      event.preventDefault();\n    }\n  },\n  _escapeKeyHandler(eventArgs, isEditing) {\n    const $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\n    if (isEditing) {\n      this._updateFocusedCellPosition($cell);\n      if (!this._isRowEditMode()) {\n        if (\"cell\" === this._editingController.getEditMode()) {\n          this._editingController.cancelEditData();\n        } else {\n          this._closeEditCell();\n        }\n      } else {\n        this._focusEditFormCell($cell);\n        this._editingController.cancelEditData();\n        if (0 === this._dataController.items().length) {\n          this._resetFocusedCell();\n          this._editorFactory.loseFocus();\n        }\n      }\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _ctrlFKeyHandler(eventArgs) {\n    if (this.option(\"searchPanel.visible\")) {\n      const searchTextEditor = this._headerPanel.getSearchTextEditor();\n      if (searchTextEditor) {\n        searchTextEditor.focus();\n        eventArgs.originalEvent.preventDefault();\n      }\n    }\n  },\n  _f2KeyHandler() {\n    const isEditing = this._editingController.isEditing();\n    const rowIndex = this.getVisibleRowIndex();\n    const $row = this._focusedView && this._focusedView.getRow(rowIndex);\n    if (!isEditing && isDataRow($row)) {\n      this._startEditing();\n    }\n  },\n  _navigateNextCell($event, keyCode) {\n    const $cell = this._getNextCell(keyCode);\n    const directionCode = this._getDirectionCodeByKey(keyCode);\n    const isCellValid = $cell && this._isCellValid($cell);\n    const result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;\n    return result;\n  },\n  _arrowKeysHandlerFocusCell($event, $nextCell, direction) {\n    const isVerticalDirection = \"prevRow\" === direction || \"nextRow\" === direction;\n    const args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);\n    $nextCell = args.$newCellElement;\n    if (!args.cancel && this._isCellValid($nextCell)) {\n      this._focus($nextCell, !args.isHighlighted);\n      return true;\n    }\n    return false;\n  },\n  _beginFastEditing(originalEvent, isDeleting) {\n    if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\n      return false;\n    }\n    if (isDeleting) {\n      this._startEditing(originalEvent, \"delete\");\n    } else {\n      const {\n        key: key\n      } = originalEvent;\n      const keyCode = originalEvent.keyCode || originalEvent.which;\n      const fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\n      if (fastEditingKey && (1 === fastEditingKey.length || \"delete\" === fastEditingKey)) {\n        this._startEditing(originalEvent, fastEditingKey);\n      }\n    }\n    return true;\n  },\n  _pointerEventHandler(e) {\n    const event = e.event || e;\n    let $target = $(event.currentTarget);\n    const rowsView = this.getView(\"rowsView\");\n    const focusedViewElement = rowsView && rowsView.element();\n    const $parent = $target.parent();\n    const isInteractiveElement = $(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\n    const isRevertButton = !!$(event.target).closest(\".dx-revert-button\").length;\n    const isExpandCommandCell = $target.hasClass(\"dx-command-expand\");\n    if (!this._isEventInCurrentGrid(event)) {\n      return;\n    }\n    if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {\n      $target = this._isInsideEditForm($target) ? $(event.target) : $target;\n      this._focusView();\n      $(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\n      if ($parent.hasClass(\"dx-freespace-row\")) {\n        this._updateFocusedCellPosition($target);\n        this._applyTabIndexToElement(this._focusedView.element());\n        this._focusedView.focus(true);\n      } else if (!this._isMasterDetailCell($target)) {\n        this._clickTargetCellHandler(event, $target);\n      } else {\n        this._updateFocusedCellPosition($target);\n      }\n    } else if ($target.is(\"td\")) {\n      this._resetFocusedCell();\n    }\n  },\n  _clickTargetCellHandler(event, $cell) {\n    const columnIndex = this.getView(\"rowsView\").getCellIndex($cell);\n    const column = this._columnsController.getVisibleColumns()[columnIndex];\n    const isCellEditMode = this._isCellEditMode();\n    this.setCellFocusType();\n    const args = this._fireFocusChangingEvents(event, $cell, true);\n    $cell = args.$newCellElement;\n    if (!args.cancel) {\n      if (args.resetFocusedRow) {\n        this.getController(\"focus\")._resetFocusedRow();\n        return;\n      }\n      if (args.rowIndexChanged) {\n        $cell = this._getFocusedCell();\n      }\n      if (!args.isHighlighted && !isCellEditMode) {\n        this.setRowFocusType();\n      }\n      this._updateFocusedCellPosition($cell);\n      if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\n        this._isNeedFocus = false;\n        this._isHiddenFocus = false;\n      } else {\n        $cell = this._getFocusedCell();\n        const $target = event && $(event.target).closest(NON_FOCUSABLE_ELEMENTS_SELECTOR + \", td\");\n        const skipFocusEvent = $target && $target.not($cell).is(NON_FOCUSABLE_ELEMENTS_SELECTOR);\n        const isEditor = !!column && !column.command && $cell.hasClass(\"dx-editor-cell\");\n        const isDisabled = !isEditor && (!args.isHighlighted || skipFocusEvent);\n        this._focus($cell, isDisabled, skipFocusEvent);\n      }\n    } else {\n      this.setRowFocusType();\n      this.setFocusedRowIndex(args.prevRowIndex);\n      if (this._editingController.isEditing() && isCellEditMode) {\n        this._closeEditCell();\n      }\n    }\n  },\n  _allowRowUpdating() {\n    const rowIndex = this.getVisibleRowIndex();\n    const row = this._dataController.items()[rowIndex];\n    return this._editingController.allowUpdating({\n      row: row\n    }, \"click\");\n  },\n  focus(element) {\n    let activeElementSelector;\n    const focusedRowEnabled = this.option(\"focusedRowEnabled\");\n    const isHighlighted = this._isCellElement($(element));\n    if (!element) {\n      activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\n      if (!focusedRowEnabled) {\n        activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\";\n      }\n      element = this.component.$element().find(activeElementSelector).first();\n    }\n    element && this._focusElement($(element), isHighlighted);\n  },\n  getFocusedView() {\n    return this._focusedView;\n  },\n  setupFocusedView() {\n    if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {\n      this._focusView();\n    }\n  },\n  _focusElement($element, isHighlighted) {\n    const rowsViewElement = $(this._getRowsViewElement());\n    const $focusedView = $element.closest(rowsViewElement);\n    const isRowFocusType = this.isRowFocusType();\n    let args = {};\n    if (!$focusedView.length || this._isCellElement($element) && !this._isCellValid($element)) {\n      return;\n    }\n    this._focusView();\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n    if (this._isCellElement($element) || isGroupRow($element)) {\n      this.setCellFocusType();\n      args = this._fireFocusChangingEvents(null, $element, false, isHighlighted);\n      $element = args.$newCellElement;\n      if (isRowFocusType && !args.isHighlighted) {\n        this.setRowFocusType();\n      }\n    }\n    if (!args.cancel) {\n      this._focus($element, !args.isHighlighted);\n      this._focusInteractiveElement($element);\n    }\n  },\n  _getFocusedViewByElement($element) {\n    const view = this.getFocusedView();\n    const $view = view && $(view.element());\n    return $element && 0 !== $element.closest($view).length;\n  },\n  _focusView() {\n    this._focusedView = this.getView(\"rowsView\");\n  },\n  _resetFocusedView() {\n    this.setRowFocusType();\n    this._focusedView = null;\n  },\n  _focusInteractiveElement($cell, isLast) {\n    if (!$cell) {\n      return;\n    }\n    const $focusedElement = this._getInteractiveElement($cell, isLast);\n    this._testInteractiveElement = $focusedElement;\n    gridCoreUtils.focusAndSelectElement(this, $focusedElement);\n  },\n  _focus($cell, disableFocus, skipFocusEvent) {\n    const $row = $cell && !$cell.hasClass(\"dx-row\") ? $cell.closest(\".dx-row\") : $cell;\n    if ($row && isNotFocusedRow($row)) {\n      return;\n    }\n    const focusedView = this._focusedView;\n    const $focusViewElement = focusedView && focusedView.element();\n    let $focusElement;\n    this._isHiddenFocus = disableFocus;\n    const isRowFocus = isGroupRow($row) || this.isRowFocusType();\n    if (isRowFocus) {\n      $focusElement = $row;\n      if (focusedView) {\n        this.setFocusedRowIndex(this._getRowIndex($row));\n      }\n    } else if (this._isCellElement($cell)) {\n      $focusElement = $cell;\n      this._updateFocusedCellPosition($cell);\n    }\n    if ($focusElement) {\n      if ($focusViewElement) {\n        $focusViewElement.find(\".dx-row[tabindex], .dx-row > td[tabindex]\").not($focusElement).removeClass(\"dx-cell-focus-disabled\").removeAttr(\"tabindex\");\n      }\n      eventsEngine.one($focusElement, \"blur\", e => {\n        if (e.relatedTarget) {\n          $focusElement.removeClass(\"dx-cell-focus-disabled\");\n        }\n      });\n      if (!skipFocusEvent) {\n        this._applyTabIndexToElement($focusElement);\n        eventsEngine.trigger($focusElement, \"focus\");\n      }\n      if (disableFocus) {\n        $focusElement.addClass(\"dx-cell-focus-disabled\");\n        if (isRowFocus) {\n          $cell.addClass(\"dx-cell-focus-disabled\");\n        }\n      } else {\n        this._editorFactory.focus($focusElement);\n      }\n    }\n  },\n  _updateFocus(isRenderView) {\n    this._updateFocusTimeout = setTimeout(() => {\n      const editingController = this._editingController;\n      const isCellEditMode = \"cell\" === editingController.getEditMode();\n      const isBatchEditMode = \"batch\" === editingController.getEditMode();\n      if (isCellEditMode && editingController.hasChanges() || isBatchEditMode && editingController.isNewRowInEditMode()) {\n        editingController._focusEditingCell();\n        return;\n      }\n      let $cell = this._getFocusedCell();\n      const isEditing = editingController.isEditing();\n      if ($cell && !(this._isMasterDetailCell($cell) && !this._isRowEditMode())) {\n        if (this._hasSkipRow($cell.parent())) {\n          const direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\n          $cell = this._getNextCell(direction);\n        }\n        if (isElementDefined($cell)) {\n          if ($cell.is(\"td\") || $cell.hasClass(this.addWidgetPrefix(\"edit-form-item\"))) {\n            const isCommandCell = $cell.is(\"[class^=dx-command]\");\n            const $focusedElementInsideCell = $cell.find(\":focus\");\n            const isFocusedElementDefined = isElementDefined($focusedElementInsideCell);\n            if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {\n              if (isCommandCell && isFocusedElementDefined) {\n                gridCoreUtils.focusAndSelectElement(this, $focusedElementInsideCell);\n                return;\n              }\n              !isFocusedElementDefined && this._focus($cell);\n            } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {\n              this._focus($cell, this._isHiddenFocus);\n            }\n            if (isEditing) {\n              this._focusInteractiveElement.bind(this)($cell);\n            }\n          } else {\n            eventsEngine.trigger($cell, \"focus\");\n          }\n        }\n      }\n    });\n  },\n  _getFocusedCell() {\n    return $(this._getCell(this._focusedCellPosition));\n  },\n  _updateFocusedCellPositionByTarget(target) {\n    var _a;\n    const elementType = this._getElementType(target);\n    if (\"row\" === elementType && isDefined(null === (_a = this._focusedCellPosition) || void 0 === _a ? void 0 : _a.columnIndex)) {\n      const $row = $(target);\n      this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row));\n    } else {\n      this._updateFocusedCellPosition(this._getCellElementFromTarget(target));\n    }\n  },\n  _updateFocusedCellPosition($cell, direction) {\n    const position = this._getCellPosition($cell, direction);\n    if (position) {\n      if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\n        this.setFocusedCellPosition(position.rowIndex, position.columnIndex);\n      }\n    }\n    return position;\n  },\n  _getFocusedColumnIndexOffset(columnIndex) {\n    let offset = 0;\n    const column = this._columnsController.getVisibleColumns()[columnIndex];\n    if (column && column.fixed) {\n      offset = this._getFixedColumnIndexOffset(column);\n    } else if (columnIndex >= 0) {\n      offset = this._columnsController.getColumnIndexOffset();\n    }\n    return offset;\n  },\n  _getFixedColumnIndexOffset(column) {\n    const offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;\n    return offset;\n  },\n  _getCellPosition($cell, direction) {\n    let columnIndex;\n    const $row = isElementDefined($cell) && $cell.closest(\"tr\");\n    const rowsView = this.getView(\"rowsView\");\n    if (isElementDefined($row)) {\n      const rowIndex = this._getRowIndex($row);\n      columnIndex = rowsView.getCellIndex($cell, rowIndex);\n      columnIndex += this._getFocusedColumnIndexOffset(columnIndex);\n      if (direction) {\n        columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\n        columnIndex = this._applyColumnIndexBoundaries(columnIndex);\n      }\n      return {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n    return;\n  },\n  _focusCell($cell, isDisabled) {\n    if (this._isCellValid($cell)) {\n      this._focus($cell, isDisabled);\n      return true;\n    }\n    return;\n  },\n  _focusEditFormCell($cell) {\n    if ($cell.hasClass(\"dx-master-detail-cell\")) {\n      this._editorFactory.focus($cell, true);\n    }\n  },\n  _resetFocusedCell(preventScroll) {\n    var _a;\n    const $cell = this._getFocusedCell();\n    isElementDefined($cell) && $cell.removeAttr(\"tabindex\");\n    this._isNeedFocus = false;\n    this._isNeedScroll = false;\n    this._focusedCellPosition = {};\n    clearTimeout(this._updateFocusTimeout);\n    null === (_a = this._focusedView) || void 0 === _a ? void 0 : _a.renderFocusState({\n      preventScroll: preventScroll\n    });\n  },\n  restoreFocusableElement(rowIndex, $event) {\n    const that = this;\n    let args;\n    let $rowElement;\n    const isUpArrow = isDefined(rowIndex);\n    const rowsView = that.getView(\"rowsView\");\n    const $rowsViewElement = rowsView.element();\n    const {\n      columnIndex: columnIndex\n    } = that._focusedCellPosition;\n    const rowIndexOffset = that._dataController.getRowIndexOffset();\n    rowIndex = isUpArrow ? rowIndex : rowsView.getTopVisibleItemIndex() + rowIndexOffset;\n    if (!isUpArrow) {\n      that._editorFactory.loseFocus();\n      that._applyTabIndexToElement($rowsViewElement);\n      eventsEngine.trigger($rowsViewElement, \"focus\");\n    } else {\n      $rowElement = rowsView.getRow(rowIndex - rowIndexOffset);\n      args = that._fireFocusedRowChanging($event, $rowElement);\n      if (!args.cancel && args.rowIndexChanged) {\n        rowIndex = args.newRowIndex;\n      }\n    }\n    if (!isUpArrow || !args.cancel) {\n      that.setFocusedCellPosition(rowIndex, columnIndex);\n    }\n    isUpArrow && that._updateFocus();\n  },\n  _getNewPositionByCode(cellPosition, elementType, code) {\n    let {\n      columnIndex: columnIndex\n    } = cellPosition;\n    let {\n      rowIndex: rowIndex\n    } = cellPosition;\n    let visibleColumnsCount;\n    if (void 0 === cellPosition.rowIndex && \"next\" === code) {\n      return {\n        columnIndex: 0,\n        rowIndex: 0\n      };\n    }\n    switch (code) {\n      case \"nextInRow\":\n      case \"next\":\n        visibleColumnsCount = this._getVisibleColumnCount();\n        if (columnIndex < visibleColumnsCount - 1 && \"row\" !== elementType && this._hasValidCellAfterPosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex++;\n        } else if (!this._isLastRow(rowIndex) && \"next\" === code) {\n          columnIndex = 0;\n          rowIndex++;\n        }\n        break;\n      case \"previousInRow\":\n      case \"previous\":\n        if (columnIndex > 0 && \"row\" !== elementType && this._hasValidCellBeforePosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex--;\n        } else if (rowIndex > 0 && \"previous\" === code) {\n          rowIndex--;\n          visibleColumnsCount = this._getVisibleColumnCount();\n          columnIndex = visibleColumnsCount - 1;\n        }\n        break;\n      case \"upArrow\":\n        rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\n        break;\n      case \"downArrow\":\n        rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex;\n    }\n    return {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    };\n  },\n  setFocusedCellPosition(rowIndex, columnIndex) {\n    this.setFocusedRowIndex(rowIndex);\n    this.setFocusedColumnIndex(columnIndex);\n  },\n  setFocusedRowIndex(rowIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n    this._focusedCellPosition.rowIndex = rowIndex;\n  },\n  setFocusedColumnIndex(columnIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n    this._focusedCellPosition.columnIndex = columnIndex;\n  },\n  getRowIndex() {\n    return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1;\n  },\n  getColumnIndex() {\n    return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1;\n  },\n  getVisibleRowIndex() {\n    const rowIndex = this._focusedCellPosition && this._focusedCellPosition.rowIndex;\n    if (!isDefined(rowIndex) || rowIndex < 0) {\n      return -1;\n    }\n    return rowIndex - this._dataController.getRowIndexOffset();\n  },\n  getVisibleColumnIndex() {\n    const columnIndex = this._focusedCellPosition && this._focusedCellPosition.columnIndex;\n    if (!isDefined(columnIndex)) {\n      return -1;\n    }\n    return columnIndex - this._columnsController.getColumnIndexOffset();\n  },\n  _applyColumnIndexBoundaries(columnIndex) {\n    const visibleColumnsCount = this._getVisibleColumnCount();\n    if (columnIndex < 0) {\n      columnIndex = 0;\n    } else if (columnIndex >= visibleColumnsCount) {\n      columnIndex = visibleColumnsCount - 1;\n    }\n    return columnIndex;\n  },\n  _isCellByPositionValid(cellPosition) {\n    const $cell = $(this._getCell(cellPosition));\n    return this._isCellValid($cell);\n  },\n  _isLastRow(rowIndex) {\n    const dataController = this._dataController;\n    const visibleItems = dataController.items().filter(item => false !== item.visible);\n    if (this._isVirtualRowRender()) {\n      return rowIndex >= dataController.getMaxRowIndex();\n    }\n    return rowIndex === visibleItems.length - 1;\n  },\n  _isFirstValidCell(cellPosition) {\n    let isFirstValidCell = false;\n    if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\n      isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition);\n    }\n    return isFirstValidCell;\n  },\n  _hasValidCellBeforePosition(cellPosition) {\n    let {\n      columnIndex: columnIndex\n    } = cellPosition;\n    let hasValidCells = false;\n    while (columnIndex > 0 && !hasValidCells) {\n      const checkingPosition = {\n        columnIndex: --columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n    return hasValidCells;\n  },\n  _hasValidCellAfterPosition(cellPosition) {\n    let {\n      columnIndex: columnIndex\n    } = cellPosition;\n    let hasValidCells = false;\n    const visibleColumnCount = this._getVisibleColumnCount();\n    while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {\n      const checkingPosition = {\n        columnIndex: ++columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n    return hasValidCells;\n  },\n  _isLastValidCell(cellPosition) {\n    const nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\n    const {\n      rowIndex: rowIndex\n    } = cellPosition;\n    const checkingPosition = {\n      columnIndex: nextColumnIndex,\n      rowIndex: rowIndex\n    };\n    const visibleRows = this._dataController.getVisibleRows();\n    const row = visibleRows && visibleRows[rowIndex];\n    const isLastRow = this._isLastRow(rowIndex);\n    if (!isLastRow) {\n      return false;\n    }\n    if (row && \"group\" === row.rowType && cellPosition.columnIndex > 0) {\n      return true;\n    }\n    if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\n      return true;\n    }\n    if (this._isCellByPositionValid(checkingPosition)) {\n      return false;\n    }\n    return this._isLastValidCell(checkingPosition);\n  },\n  _isCellValid($cell, isClick) {\n    if (isElementDefined($cell)) {\n      const rowsView = this.getView(\"rowsView\");\n      const $row = $cell.parent();\n      const columnsController = this._columnsController;\n      const columnIndex = rowsView.getCellIndex($cell) + columnsController.getColumnIndexOffset();\n      const column = columnsController.getVisibleColumns(null, true)[columnIndex];\n      const visibleColumnCount = this._getVisibleColumnCount();\n      const editingController = this._editingController;\n      const isMasterDetailRow = isDetailRow($row);\n      const isShowWhenGrouped = column && column.showWhenGrouped;\n      const isDataCell = column && !$cell.hasClass(\"dx-command-expand\") && isDataRow($row);\n      const isValidGroupSpaceColumn = function () {\n        return !isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\")) > 1;\n      };\n      const isDragCell = GridCoreKeyboardNavigationDom.isDragCell($cell);\n      if (isDragCell) {\n        return false;\n      }\n      if (this._isMasterDetailCell($cell)) {\n        return true;\n      }\n      if (visibleColumnCount > columnIndex && isValidGroupSpaceColumn()) {\n        const rowItems = this._dataController.items();\n        const visibleRowIndex = rowsView.getRowIndex($row);\n        const row = rowItems[visibleRowIndex];\n        const isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\n        const isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\n        const isEditing = isRowEditingInCurrentRow || isCellEditing;\n        if (column.command) {\n          if (this._isLegacyNavigation()) {\n            return !isEditing && \"expand\" === column.command;\n          }\n          if (isCellEditing) {\n            return false;\n          }\n          if (isRowEditingInCurrentRow) {\n            return \"select\" !== column.command;\n          }\n          return !isEditing;\n        }\n        if (isCellEditing && row && \"data\" !== row.rowType) {\n          return false;\n        }\n        return !isEditing || column.allowEditing || isClick;\n      }\n    }\n  },\n  getFirstValidCellInRow($row, columnIndex) {\n    const that = this;\n    const $cells = $row.find(\"> td\");\n    let $cell;\n    let $result;\n    columnIndex = columnIndex || 0;\n    for (let i = columnIndex; i < $cells.length; ++i) {\n      $cell = $cells.eq(i);\n      if (that._isCellValid($cell)) {\n        $result = $cell;\n        break;\n      }\n    }\n    return $result;\n  },\n  _getNextCell(keyCode, elementType, cellPosition) {\n    const focusedCellPosition = cellPosition || this._focusedCellPosition;\n    const isRowFocusType = this.isRowFocusType();\n    const includeCommandCells = isRowFocusType || [\"next\", \"previous\"].includes(keyCode);\n    let $cell;\n    let $row;\n    if (this._focusedView && focusedCellPosition) {\n      const newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\n      $cell = $(this._getCell(newFocusedCellPosition));\n      const isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);\n      if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\n        if (isRowFocusType) {\n          $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex);\n        } else {\n          $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition);\n        }\n      }\n      $row = isElementDefined($cell) && $cell.parent();\n      if (this._hasSkipRow($row)) {\n        const rowIndex = this._getRowIndex($row);\n        if (!this._isLastRow(rowIndex)) {\n          $cell = this._getNextCell(keyCode, \"row\", {\n            columnIndex: focusedCellPosition.columnIndex,\n            rowIndex: rowIndex\n          });\n        } else {\n          return null;\n        }\n      }\n      return isElementDefined($cell) ? $cell : null;\n    }\n    return null;\n  },\n  _startEditing(eventArgs, fastEditingKey) {\n    const focusedCellPosition = this._focusedCellPosition;\n    const visibleRowIndex = this.getVisibleRowIndex();\n    const visibleColumnIndex = this.getVisibleColumnIndex();\n    const row = this._dataController.items()[visibleRowIndex];\n    const column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n    if (this._isAllowEditing(row, column)) {\n      if (this._isRowEditMode()) {\n        this._editingController.editRow(visibleRowIndex);\n      } else if (focusedCellPosition) {\n        this._startEditCell(eventArgs, fastEditingKey);\n      }\n    }\n  },\n  _isAllowEditing(row, column) {\n    return this._editingController.allowUpdating({\n      row: row\n    }) && column && column.allowEditing;\n  },\n  _editFocusedCell() {\n    const rowIndex = this.getVisibleRowIndex();\n    const colIndex = this.getVisibleColumnIndex();\n    return this._editingController.editCell(rowIndex, colIndex);\n  },\n  _startEditCell(eventArgs, fastEditingKey) {\n    this._fastEditingStarted = isDefined(fastEditingKey);\n    const editResult = this._editFocusedCell();\n    if (this._isFastEditingStarted()) {\n      if (true === editResult) {\n        this._editingCellHandler(eventArgs, fastEditingKey);\n      } else if (editResult && editResult.done) {\n        const editorValue = \"delete\" !== fastEditingKey ? fastEditingKey : \"\";\n        editResult.done(() => this._editingCellHandler(eventArgs, editorValue));\n      }\n    }\n  },\n  _editingCellHandler(eventArgs, editorValue) {\n    var _a, _b;\n    const $input = this._getFocusedCell().find(INTERACTIVE_ELEMENTS_SELECTOR).eq(0);\n    const keyDownEvent = createEvent(eventArgs, {\n      type: \"keydown\",\n      target: $input.get(0)\n    });\n    const keyPressEvent = createEvent(eventArgs, {\n      type: \"keypress\",\n      target: $input.get(0)\n    });\n    const inputEvent = createEvent(eventArgs, {\n      type: \"input\",\n      target: $input.get(0)\n    });\n    if (inputEvent.originalEvent) {\n      inputEvent.originalEvent = createEvent(inputEvent.originalEvent, {\n        data: editorValue\n      });\n    }\n    null === (_b = (_a = $input.get(0)).select) || void 0 === _b ? void 0 : _b.call(_a);\n    eventsEngine.trigger($input, keyDownEvent);\n    if (!keyDownEvent.isDefaultPrevented()) {\n      eventsEngine.trigger($input, keyPressEvent);\n      if (!keyPressEvent.isDefaultPrevented()) {\n        const timeout = browser.mozilla ? 25 : 0;\n        setTimeout(() => {\n          $input.val(editorValue);\n          const $widgetContainer = $input.closest(\".dx-widget\");\n          eventsEngine.off($widgetContainer, \"focusout\");\n          eventsEngine.one($widgetContainer, \"focusout\", () => {\n            eventsEngine.trigger($input, \"change\");\n          });\n          eventsEngine.trigger($input, inputEvent);\n        }, timeout);\n      }\n    }\n  },\n  _fireFocusChangingEvents($event, $cell, fireRowEvent, isHighlighted) {\n    let args = {};\n    const cellPosition = this._getCellPosition($cell) || {};\n    if (this.isCellFocusType()) {\n      args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\n      if (!args.cancel) {\n        cellPosition.columnIndex = args.newColumnIndex;\n        cellPosition.rowIndex = args.newRowIndex;\n        isHighlighted = args.isHighlighted;\n        $cell = $(this._getCell(cellPosition));\n      }\n    }\n    if (!args.cancel && fireRowEvent && $cell) {\n      args = this._fireFocusedRowChanging($event, $cell.parent());\n      if (!args.cancel) {\n        cellPosition.rowIndex = args.newRowIndex;\n        args.isHighlighted = isHighlighted;\n      }\n    }\n    args.$newCellElement = $(this._getCell(cellPosition));\n    if (!args.$newCellElement.length) {\n      args.$newCellElement = $cell;\n    }\n    return args;\n  },\n  _fireFocusedCellChanging($event, $cellElement, isHighlighted) {\n    const prevCellIndex = this.option(\"focusedColumnIndex\");\n    const prevRowIndex = this.option(\"focusedRowIndex\");\n    const cellPosition = this._getCellPosition($cellElement);\n    const columnIndex = cellPosition ? cellPosition.columnIndex : -1;\n    const rowIndex = cellPosition ? cellPosition.rowIndex : -1;\n    const args = {\n      cellElement: $cellElement,\n      prevColumnIndex: prevCellIndex,\n      prevRowIndex: prevRowIndex,\n      newColumnIndex: columnIndex,\n      newRowIndex: rowIndex,\n      rows: this._dataController.getVisibleRows(),\n      columns: this._columnsController.getVisibleColumns(),\n      event: $event,\n      isHighlighted: isHighlighted || false,\n      cancel: false\n    };\n    this._canceledCellPosition = null;\n    this.executeAction(\"onFocusedCellChanging\", args);\n    if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\n      args.$newCellElement = $(this._getCell({\n        columnIndex: args.newColumnIndex,\n        rowIndex: args.newRowIndex\n      }));\n    }\n    if (args.cancel) {\n      this._canceledCellPosition = {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n    return args;\n  },\n  _fireFocusedCellChanged($cellElement, prevCellIndex, prevRowIndex) {\n    const that = this;\n    const dataController = that._dataController;\n    const columnIndex = that.getView(\"rowsView\").getCellIndex($cellElement);\n    const rowIndex = this._getRowIndex($cellElement && $cellElement.parent());\n    const localRowIndex = Math.min(rowIndex - dataController.getRowIndexOffset(), dataController.items().length - 1);\n    const isEditingCell = that._editingController.isEditCell(localRowIndex, columnIndex);\n    const row = dataController.items()[localRowIndex];\n    if (!isEditingCell && (prevCellIndex !== columnIndex || prevRowIndex !== rowIndex)) {\n      that.executeAction(\"onFocusedCellChanged\", {\n        cellElement: $cellElement,\n        columnIndex: columnIndex,\n        rowIndex: rowIndex,\n        row: row,\n        column: that._columnsController.getVisibleColumns()[columnIndex]\n      });\n    }\n  },\n  _fireFocusedRowChanging(eventArgs, $newFocusedRow) {\n    const newRowIndex = this._getRowIndex($newFocusedRow);\n    const dataController = this._dataController;\n    const prevFocusedRowIndex = this.option(\"focusedRowIndex\");\n    const loadingOperationTypes = dataController.loadingOperationTypes();\n    const args = {\n      rowElement: $newFocusedRow,\n      prevRowIndex: prevFocusedRowIndex,\n      newRowIndex: newRowIndex,\n      event: eventArgs,\n      rows: dataController.getVisibleRows(),\n      cancel: false\n    };\n    if (!dataController || dataController.isLoading() && (loadingOperationTypes.reload || loadingOperationTypes.paging)) {\n      args.cancel = true;\n      return args;\n    }\n    if (this.option(\"focusedRowEnabled\")) {\n      this.executeAction(\"onFocusedRowChanging\", args);\n      if (!args.cancel && args.newRowIndex !== newRowIndex) {\n        args.resetFocusedRow = args.newRowIndex < 0;\n        if (!args.resetFocusedRow) {\n          this.setFocusedRowIndex(args.newRowIndex);\n        }\n        args.rowIndexChanged = true;\n      }\n    }\n    return args;\n  },\n  _fireFocusedRowChanged($rowElement) {\n    let row;\n    const focusedRowKey = this.option(\"focusedRowKey\");\n    const focusController = this.getController(\"focus\");\n    const focusedRowIndex = null === focusController || void 0 === focusController ? void 0 : focusController.getFocusedRowIndexByKey(focusedRowKey);\n    if (this.option(\"focusedRowEnabled\")) {\n      if (focusedRowIndex >= 0) {\n        const dataController = this._dataController;\n        row = focusedRowIndex >= 0 && dataController.getVisibleRows()[focusedRowIndex - dataController.getRowIndexOffset()];\n      }\n      this.executeAction(\"onFocusedRowChanged\", {\n        rowElement: $rowElement,\n        rowIndex: focusedRowIndex,\n        row: row\n      });\n    }\n  },\n  _isEventInCurrentGrid(event) {\n    return gridCoreUtils.isElementInCurrentGrid(this, $(event.target));\n  },\n  _isRowEditMode() {\n    const editMode = this._editingController.getEditMode();\n    return \"row\" === editMode || \"form\" === editMode;\n  },\n  _isCellEditMode() {\n    const editMode = this._editingController.getEditMode();\n    return \"cell\" === editMode || \"batch\" === editMode;\n  },\n  _isFastEditingAllowed() {\n    return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\");\n  },\n  _getInteractiveElement($cell, isLast) {\n    const $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\n    return isLast ? $focusedElement.last() : $focusedElement.first();\n  },\n  _applyTabIndexToElement($element) {\n    const tabIndex = this.option(\"tabIndex\") || 0;\n    $element.attr(\"tabindex\", isDefined(tabIndex) ? tabIndex : 0);\n  },\n  _getCell(cellPosition) {\n    if (this._focusedView && cellPosition) {\n      const rowIndexOffset = this._dataController.getRowIndexOffset();\n      const column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];\n      const columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();\n      const rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;\n      const columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;\n      return this._focusedView.getCell({\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n    }\n  },\n  _getRowIndex($row) {\n    const rowsView = this.getView(\"rowsView\");\n    let rowIndex = rowsView.getRowIndex($row);\n    if (rowIndex >= 0) {\n      rowIndex += this._dataController.getRowIndexOffset();\n    }\n    return rowIndex;\n  },\n  _hasSkipRow($row) {\n    const row = $row && $row.get(0);\n    return row && (\"none\" === row.style.display || $row.hasClass(this.addWidgetPrefix(\"group-footer\")) || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(\"edit-form\")));\n  },\n  _allowEditingOnEnterKey() {\n    return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\");\n  },\n  _isLegacyNavigation() {\n    return this.option(\"useLegacyKeyboardNavigation\");\n  },\n  _getDirectionCodeByKey(key) {\n    let directionCode;\n    switch (key) {\n      case \"upArrow\":\n        directionCode = \"prevRow\";\n        break;\n      case \"downArrow\":\n        directionCode = \"nextRow\";\n        break;\n      case \"leftArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"nextInRow\" : \"previousInRow\";\n        break;\n      case \"rightArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"previousInRow\" : \"nextInRow\";\n    }\n    return directionCode;\n  },\n  _isVirtualScrolling() {\n    const scrollingMode = this.option(\"scrolling.mode\");\n    return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n  },\n  _isVirtualRowRender() {\n    return this._isVirtualScrolling() || gridCoreUtils.isVirtualRowRendering(this);\n  },\n  _isVirtualColumnRender() {\n    return \"virtual\" === this.option(\"scrolling.columnRenderingMode\");\n  },\n  _scrollBy(left, top, rowIndex, $event) {\n    const that = this;\n    const scrollable = this.getView(\"rowsView\").getScrollable();\n    if (that._focusedCellPosition) {\n      const scrollHandler = function () {\n        scrollable.off(\"scroll\", scrollHandler);\n        setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event));\n      };\n      scrollable.on(\"scroll\", scrollHandler);\n    }\n    return scrollable.scrollBy({\n      left: left,\n      top: top\n    });\n  },\n  _isInsideEditForm(element) {\n    const $editForm = $(element).closest(\".\" + this.addWidgetPrefix(\"edit-form\"));\n    return $editForm.length && this.elementIsInsideGrid($editForm);\n  },\n  _isMasterDetailCell(element) {\n    const $masterDetailCell = $(element).closest(\".dx-master-detail-cell\");\n    return $masterDetailCell.length && this.elementIsInsideGrid($masterDetailCell);\n  },\n  _processNextCellInMasterDetail($nextCell) {\n    if (!this._isInsideEditForm($nextCell) && $nextCell) {\n      this._applyTabIndexToElement($nextCell);\n    }\n  },\n  _handleTabKeyOnMasterDetailCell(target, direction) {\n    if (this._isMasterDetailCell(target)) {\n      this._updateFocusedCellPosition($(target), direction);\n      const $nextCell = this._getNextCell(direction, \"row\");\n      this._processNextCellInMasterDetail($nextCell, $(target));\n      return true;\n    }\n    return false;\n  },\n  _getElementType: target => $(target).is(\"tr\") ? \"row\" : \"cell\",\n  _isFastEditingStarted() {\n    return this._isFastEditingAllowed() && this._fastEditingStarted;\n  },\n  _getVisibleColumnCount() {\n    return this._columnsController.getVisibleColumns(null, true).length;\n  },\n  _isCellInRow(cellPosition, includeCommandCells) {\n    const {\n      columnIndex: columnIndex\n    } = cellPosition;\n    const visibleColumnsCount = this._getVisibleColumnCount();\n    return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1;\n  },\n  _isCellElement: $element => $element.length && \"TD\" === $element[0].tagName,\n  _getCellElementFromTarget(target) {\n    const elementType = this._getElementType(target);\n    const $targetElement = $(target);\n    let $cell;\n    if (\"cell\" === elementType) {\n      $cell = $targetElement.closest(\".dx-row > td\");\n    } else {\n      $cell = $targetElement.children().not(\".dx-command-expand\").first();\n    }\n    return $cell;\n  },\n  _getRowsViewElement() {\n    const rowsView = this.getView(\"rowsView\");\n    return rowsView && rowsView.element();\n  },\n  isKeyboardEnabled() {\n    return this.option(\"keyboardNavigation.enabled\");\n  },\n  _processCanceledEditCellPosition(rowIndex, columnIndex) {\n    if (this._canceledCellPosition) {\n      const isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\n      this._canceledCellPosition = null;\n      return isCanceled;\n    }\n    return;\n  },\n  updateFocusedRowIndex() {\n    const dataController = this._dataController;\n    const visibleRowIndex = this.getVisibleRowIndex();\n    const visibleItems = dataController.items();\n    const lastVisibleIndex = visibleItems.length ? visibleItems.length - 1 : -1;\n    const rowIndexOffset = dataController.getRowIndexOffset();\n    lastVisibleIndex >= 0 && visibleRowIndex > lastVisibleIndex && this.setFocusedRowIndex(lastVisibleIndex + rowIndexOffset);\n  }\n};\nconst KeyboardNavigationController = core.ViewController.inherit(keyboardNavigationMembers);\nexport const keyboardNavigationModule = {\n  defaultOptions: () => ({\n    useLegacyKeyboardNavigation: false,\n    keyboardNavigation: {\n      enabled: true,\n      enterKeyAction: \"startEdit\",\n      enterKeyDirection: \"none\",\n      editOnKeyPress: false\n    }\n  }),\n  controllers: {\n    keyboardNavigation: KeyboardNavigationController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _rowClick(e) {\n          const editRowIndex = this.getController(\"editing\").getEditRowIndex();\n          const keyboardController = this.getController(\"keyboardNavigation\");\n          const isKeyboardEnabled = keyboardController.isKeyboardEnabled();\n          if (editRowIndex === e.rowIndex) {\n            keyboardController.setCellFocusType();\n          }\n          const needTriggerPointerEventHandler = (isMobile() || !isKeyboardEnabled) && this.option(\"focusedRowEnabled\");\n          if (needTriggerPointerEventHandler) {\n            this._triggerPointerDownEventHandler(e, !isKeyboardEnabled);\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _triggerPointerDownEventHandler(e, force) {\n          const {\n            originalEvent: originalEvent\n          } = e.event;\n          if (originalEvent) {\n            const keyboardController = this.getController(\"keyboardNavigation\");\n            const $cell = $(originalEvent.target);\n            const columnIndex = this.getCellIndex($cell);\n            const column = this.getController(\"columns\").getVisibleColumns()[columnIndex];\n            const row = this.getController(\"data\").items()[e.rowIndex];\n            if (keyboardController._isAllowEditing(row, column) || force) {\n              const eventArgs = createEvent(originalEvent, {\n                currentTarget: originalEvent.target\n              });\n              keyboardController._pointerEventHandler(eventArgs);\n            }\n          }\n        },\n        renderFocusState(params) {\n          const {\n            preventScroll: preventScroll,\n            pageSizeChanged: pageSizeChanged\n          } = null !== params && void 0 !== params ? params : {};\n          const keyboardController = this.getController(\"keyboardNavigation\");\n          const $rowsViewElement = this.element();\n          if ($rowsViewElement && !focused($rowsViewElement)) {\n            $rowsViewElement.attr(\"tabindex\", null);\n          }\n          pageSizeChanged && keyboardController.updateFocusedRowIndex();\n          let rowIndex = keyboardController.getVisibleRowIndex();\n          if (!isDefined(rowIndex) || rowIndex < 0) {\n            rowIndex = 0;\n          }\n          const cellElements = this.getCellElements(rowIndex);\n          if (keyboardController.isKeyboardEnabled() && cellElements.length) {\n            this.updateFocusElementTabIndex(cellElements, preventScroll);\n          }\n        },\n        updateFocusElementTabIndex(cellElements) {\n          const keyboardController = this.getController(\"keyboardNavigation\");\n          const $row = cellElements.eq(0).parent();\n          if (isGroupRow($row)) {\n            keyboardController._applyTabIndexToElement($row);\n          } else {\n            let columnIndex = keyboardController.getColumnIndex();\n            if (!isDefined(columnIndex) || columnIndex < 0) {\n              columnIndex = 0;\n            }\n            this._updateFocusedCellTabIndex(cellElements, columnIndex);\n          }\n        },\n        _updateFocusedCellTabIndex(cellElements, columnIndex) {\n          const keyboardController = this.getController(\"keyboardNavigation\");\n          const cellElementsLength = cellElements ? cellElements.length : -1;\n          const updateCellTabIndex = function ($cell) {\n            const isMasterDetailCell = keyboardController._isMasterDetailCell($cell);\n            const isValidCell = keyboardController._isCellValid($cell);\n            if (!isMasterDetailCell && isValidCell && keyboardController._isCellElement($cell)) {\n              keyboardController._applyTabIndexToElement($cell);\n              keyboardController.setCellFocusType();\n              return true;\n            }\n            return;\n          };\n          const $cell = GridCoreKeyboardNavigationDom.getCellToFocus(cellElements, columnIndex);\n          if ($cell.length) {\n            updateCellTabIndex($cell);\n          } else {\n            if (cellElementsLength <= columnIndex) {\n              columnIndex = cellElementsLength - 1;\n            }\n            for (let i = columnIndex; i < cellElementsLength; ++i) {\n              if (updateCellTabIndex($(cellElements[i]))) {\n                break;\n              }\n            }\n          }\n        },\n        renderDelayedTemplates(change) {\n          this.callBase.apply(this, arguments);\n          this._renderFocusByChange(change);\n        },\n        _renderFocusByChange(change) {\n          const {\n            operationTypes: operationTypes,\n            repaintChangesOnly: repaintChangesOnly\n          } = null !== change && void 0 !== change ? change : {};\n          const {\n            fullReload: fullReload,\n            pageSize: pageSize\n          } = null !== operationTypes && void 0 !== operationTypes ? operationTypes : {};\n          if (!change || !repaintChangesOnly || fullReload || pageSize) {\n            const preventScroll = shouldPreventScroll(this);\n            this.renderFocusState({\n              preventScroll: preventScroll,\n              pageSizeChanged: pageSize\n            });\n          }\n        },\n        _renderCore(change) {\n          const deferred = this.callBase.apply(this, arguments);\n          this._renderFocusByChange(change);\n          return deferred;\n        },\n        _editCellPrepared($cell) {\n          const editorInstance = this._getEditorInstance($cell);\n          const keyboardController = this.getController(\"keyboardNavigation\");\n          const isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();\n          if (editorInstance && isEditingNavigationMode) {\n            this._handleEditingNavigationMode(editorInstance);\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _handleEditingNavigationMode(editorInstance) {\n          [\"downArrow\", \"upArrow\"].forEach(keyName => {\n            const originalKeyHandler = editorInstance._supportedKeys()[keyName];\n            editorInstance.registerKeyHandler(keyName, e => {\n              const isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\n              if (isDropDownOpened) {\n                return originalKeyHandler && originalKeyHandler.call(editorInstance, e);\n              }\n            });\n          });\n          editorInstance.registerKeyHandler(\"leftArrow\", noop);\n          editorInstance.registerKeyHandler(\"rightArrow\", noop);\n          const isDateBoxWithMask = \"dxDateBox\" === editorInstance.NAME && editorInstance.option(\"useMaskBehavior\");\n          if (isDateBoxWithMask) {\n            editorInstance.registerKeyHandler(\"enter\", noop);\n          }\n        },\n        _getEditorInstance($cell) {\n          const $editor = $cell.find(\".dx-texteditor\").eq(0);\n          return gridCoreUtils.getWidgetInstance($editor);\n        }\n      }\n    },\n    controllers: {\n      editing: {\n        editCell(rowIndex, columnIndex) {\n          const keyboardController = this.getController(\"keyboardNavigation\");\n          if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\n            return false;\n          }\n          const isCellEditing = this.callBase(rowIndex, columnIndex);\n          if (isCellEditing) {\n            keyboardController.setupFocusedView();\n          }\n          return isCellEditing;\n        },\n        editRow(rowIndex) {\n          const keyboardController = this.getController(\"keyboardNavigation\");\n          const visibleColumnIndex = keyboardController.getVisibleColumnIndex();\n          const column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n          if (column && column.type || \"form\" === this.option(\"editing.mode\")) {\n            keyboardController._resetFocusedCell();\n          }\n          this.callBase(rowIndex);\n        },\n        addRow(parentKey) {\n          const keyboardController = this.getController(\"keyboardNavigation\");\n          keyboardController.setupFocusedView();\n          keyboardController.setCellFocusType();\n          return this.callBase.apply(this, arguments);\n        },\n        getFocusedCellInRow(rowIndex) {\n          const keyboardNavigationController = this.getController(\"keyboardNavigation\");\n          let $cell = this.callBase(rowIndex);\n          if (keyboardNavigationController.isKeyboardEnabled() && keyboardNavigationController._focusedCellPosition.rowIndex === rowIndex) {\n            const $focusedCell = keyboardNavigationController._getFocusedCell();\n            if (isElementDefined($focusedCell) && !$focusedCell.hasClass(\"dx-command-edit\")) {\n              $cell = $focusedCell;\n            }\n          }\n          return $cell;\n        },\n        _processCanceledEditingCell() {\n          this.closeEditCell().done(() => {\n            const keyboardNavigation = this.getController(\"keyboardNavigation\");\n            keyboardNavigation._updateFocus();\n          });\n        },\n        init() {\n          this.callBase();\n          this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n        },\n        closeEditCell() {\n          const keyboardNavigation = this._keyboardNavigationController;\n          keyboardNavigation._fastEditingStarted = false;\n          const result = this.callBase.apply(this, arguments);\n          keyboardNavigation._updateFocus();\n          return result;\n        },\n        _delayedInputFocus() {\n          this._keyboardNavigationController._isNeedScroll = true;\n          this.callBase.apply(this, arguments);\n        },\n        _isEditingStart() {\n          const keyboardNavigation = this.getController(\"keyboardNavigation\");\n          const cancel = this.callBase.apply(this, arguments);\n          if (cancel && !keyboardNavigation._isNeedFocus) {\n            const $cell = keyboardNavigation._getFocusedCell();\n            keyboardNavigation._focus($cell, true);\n          }\n          return cancel;\n        }\n      },\n      data: {\n        _correctRowIndices(getRowIndexCorrection) {\n          const keyboardNavigationController = this.getController(\"keyboardNavigation\");\n          const editorFactory = this.getController(\"editorFactory\");\n          const focusedCellPosition = keyboardNavigationController._focusedCellPosition;\n          this.callBase.apply(this, arguments);\n          if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\n            const focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\n            if (focusedRowIndexCorrection) {\n              focusedCellPosition.rowIndex += focusedRowIndexCorrection;\n              editorFactory.refocus();\n            }\n          }\n        },\n        getMaxRowIndex() {\n          let result = this.items().length - 1;\n          const virtualItemsCount = this.virtualItemsCount();\n          if (virtualItemsCount) {\n            const rowIndexOffset = this.getRowIndexOffset();\n            result += rowIndexOffset + virtualItemsCount.end;\n          }\n          return result;\n        }\n      },\n      adaptiveColumns: {\n        _showHiddenCellsInView(_ref) {\n          let {\n            viewName: viewName,\n            $cells: $cells,\n            isCommandColumn: isCommandColumn\n          } = _ref;\n          this.callBase.apply(this, arguments);\n          \"columnHeadersView\" === viewName && !isCommandColumn && $cells.each((_, cellElement) => {\n            const $cell = $(cellElement);\n            isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0);\n          });\n        },\n        _hideVisibleCellInView(_ref2) {\n          let {\n            viewName: viewName,\n            $cell: $cell,\n            isCommandColumn: isCommandColumn\n          } = _ref2;\n          this.callBase.apply(this, arguments);\n          if (\"columnHeadersView\" === viewName && !isCommandColumn && isCellInHeaderRow($cell)) {\n            $cell.removeAttr(\"tabindex\");\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["getOuterHeight","getHeight","getWidth","getOuterWidth","$","domAdapter","eventsEngine","isDefined","isEmptyObject","focused","addNamespace","createEvent","isCommandKeyPressed","pointerEvents","name","clickEventName","noop","accessibility","browser","keyboard","devices","gridCoreUtils","core","GridCoreKeyboardNavigationDom","ROWS_VIEW_CLASS","EDIT_FORM_CLASS","GROUP_FOOTER_CLASS","ROW_CLASS","DATA_ROW_CLASS","GROUP_ROW_CLASS","HEADER_ROW_CLASS","EDIT_FORM_ITEM_CLASS","MASTER_DETAIL_ROW_CLASS","FREESPACE_ROW_CLASS","VIRTUAL_ROW_CLASS","MASTER_DETAIL_CELL_CLASS","EDITOR_CELL_CLASS","DROPDOWN_EDITOR_OVERLAY_CLASS","COMMAND_EXPAND_CLASS","COMMAND_SELECT_CLASS","COMMAND_EDIT_CLASS","COMMAND_CELL_SELECTOR","CELL_FOCUS_DISABLED_CLASS","DATEBOX_WIDGET_NAME","FOCUS_STATE_CLASS","WIDGET_CLASS","REVERT_BUTTON_CLASS","FAST_EDITING_DELETE_KEY","INTERACTIVE_ELEMENTS_SELECTOR","NON_FOCUSABLE_ELEMENTS_SELECTOR","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_BATCH","EDIT_MODE_CELL","FOCUS_TYPE_ROW","FOCUS_TYPE_CELL","COLUMN_HEADERS_VIEW","FUNCTIONAL_KEYS","isGroupRow","$row","hasClass","isDetailRow","isDataRow","isNotFocusedRow","isEditorCell","that","$cell","_isRowEditMode","isElementDefined","$element","length","isMobile","current","deviceType","isCellInHeaderRow","parent","isFixedColumnIndexOffsetRequired","column","rtlEnabled","option","result","fixedPosition","command","shouldPreventScroll","keyboardController","getController","_isVirtualScrolling","getRowIndex","keyboardNavigationMembers","init","_dataController","_selectionController","_editingController","_headerPanel","getView","_columnsController","_editorFactory","isKeyboardEnabled","subscribeVisibilityChange","_updateFocusTimeout","_fastEditingStarted","_focusedCellPosition","_canceledCellPosition","elementFocused","setupFocusedView","_isNeedScroll","is","_focusedView","getScrollable","_scrollToElement","add","_initViewHandlers","_initDocumentHandlers","createAction","rowsView","rowsViewFocusHandler","event","target","isRelatedTargetInRowsView","relatedTarget","closest","element","isLink","_isEventInCurrentGrid","$focusedCell","_getFocusedCell","getCellElements","filter","eq","preventDefault","trigger","renderCompleted","e","$rowsView","isFullUpdate","changeType","isFocusedViewCorrect","needUpdateFocus","isAppend","root","getRootNode","get","$focusedElement","find","isFocusedElementCorrect","off","on","_initPointerEventHandler","_initKeyDownHandler","_setRowsViewAttributes","_isNeedFocus","_isHiddenFocus","virtualColumnsScrolling","_updateFocus","document","getDocument","_documentClickHandler","$target","isCurrentRowsViewClick","addWidgetPrefix","isEditorOverlay","columnsResizerController","isColumnResizing","isResizing","targetInsideFocusedView","parents","_resetFocusedCell","_resetFocusedView","down","_getRowsViewElement","isGridEmpty","getVisibleRows","_applyTabIndexToElement","pointerEventName","_pointerEventAction","_pointerEventHandler","_keyDownListener","_keyDownHandler","dispose","callBase","clearTimeout","unsubscribeVisibilityChange","optionChanged","args","handled","isRowFocusType","focusType","isCellFocusType","setRowFocusType","setCellFocusType","_a","needStopPropagation","isHandled","_processOnKeyDown","isEditing","originalEvent","isDefaultPrevented","includes","keyName","_updateFocusedCellPositionByTarget","_leftRightKeysHandler","ctrl","selectView","_upDownKeysHandler","_pageUpDownKeyHandler","_spaceKeyHandler","_ctrlAKeyHandler","_beginFastEditing","_tabKeyHandler","_enterKeyHandler","_escapeKeyHandler","_ctrlFKeyHandler","_f2KeyHandler","_isFastEditingAllowed","_isFastEditingStarted","stopPropagation","eventArgs","executeAction","ctrlKey","alt","altKey","shift","shiftKey","_closeEditCell","setTimeout","closeEditCell","rowIndex","getVisibleRowIndex","$event","getRow","directionCode","_getDirectionCodeByKey","isEditingNavigationMode","allowNavigate","_isVirtualColumnRender","_processVirtualHorizontalPosition","_getNextCell","_arrowKeysHandlerFocusCell","_b","visibleRowIndex","isUpArrow","dataSource","isRowEditingInCurrentRow","isEditRowByIndex","call","_navigateNextCell","_isVirtualRowRender","isLoading","rowHeight","_scrollBy","pageIndex","pageCount","pagingEnabled","isPageUp","pageStep","scrollable","container","$content","mode","isFocusedRowElement","_getElementType","isFocusedSelectionCell","startSelectionWithCheckboxes","changeItemSelection","control","selectAll","editingOptions","direction","isCellPositionDefined","isOriginalHandlerRequired","_isLastValidCell","_isFirstValidCell","eventTarget","focusedViewElement","_handleTabKeyOnMasterDetailCell","addClass","_editingCellTabHandler","_targetCellTabHandler","loseFocus","_getMaxHorizontalOffset","component","offset","scrollWidth","_isColumnRendered","columnIndex","allVisibleColumns","getVisibleColumns","renderedVisibleColumns","indexOf","_isFixedColumn","fixed","_isColumnVirtual","localColumnIndex","getColumnIndexOffset","visibleColumns","getColumnIndex","nextColumnIndex","horizontalScrollPosition","needToScroll","columnsCount","_getVisibleColumnCount","columnIndexOffset","leftEdgePosition","scrollTo","left","_getHorizontalScrollPositionOffset","scrollBy","top","positionOffset","$currentCell","_getCell","currentCellWidth","rtlMultiplier","_getCellElementFromTarget","isEditingAllowed","elementType","_updateFocusedCellPosition","nextCellInfo","_getNextCellByTabKey","columnsController","cellIndex","getCellIndex","_getRowIndex","row","items","editingController","allowEditing","rowType","allowUpdating","isNewRow","_focusCell","isHighlighted","_editFocusedCell","_focusInteractiveElement","$lastInteractiveElement","_getInteractiveElement","getFirstValidCellInRow","_checkNewLineTransition","_fireFocusedCellChanging","cancel","$newCellElement","cellPosition","_getCellPosition","_fireFocusedRowChanging","rowIndexChanged","setFocusedColumnIndex","key","getKeyByRowIndex","item","data","isContinuation","changeRowExpand","_processEnterKeyForDataCell","_getEnterKeyDirection","allowEditingOnEnterKey","_allowEditingOnEnterKey","_handleEnterKeyEditingCell","_startEditing","enterKeyDirection","isShift","isRowEditMode","_focusEditFormCell","saveEditData","bind","getEditMode","cancelEditData","searchTextEditor","getSearchTextEditor","focus","keyCode","isCellValid","_isCellValid","$nextCell","isVerticalDirection","_fireFocusChangingEvents","_focus","isDeleting","which","fastEditingKey","String","fromCharCode","currentTarget","$parent","isInteractiveElement","isRevertButton","isExpandCommandCell","_isInsideEditForm","_focusView","removeClass","_isMasterDetailCell","_clickTargetCellHandler","isCellEditMode","_isCellEditMode","resetFocusedRow","_resetFocusedRow","_allowRowUpdating","skipFocusEvent","not","isEditor","isDisabled","setFocusedRowIndex","prevRowIndex","activeElementSelector","focusedRowEnabled","_isCellElement","first","_focusElement","getFocusedView","rowsViewElement","$focusedView","_getFocusedViewByElement","view","$view","isLast","_testInteractiveElement","focusAndSelectElement","disableFocus","focusedView","$focusViewElement","$focusElement","isRowFocus","removeAttr","one","isRenderView","isBatchEditMode","hasChanges","isNewRowInEditMode","_focusEditingCell","_hasSkipRow","isCommandCell","$focusedElementInsideCell","isFocusedElementDefined","position","setFocusedCellPosition","_getFocusedColumnIndexOffset","_getFixedColumnIndexOffset","_applyColumnIndexBoundaries","preventScroll","renderFocusState","restoreFocusableElement","$rowElement","$rowsViewElement","rowIndexOffset","getRowIndexOffset","getTopVisibleItemIndex","newRowIndex","_getNewPositionByCode","code","visibleColumnsCount","_hasValidCellAfterPosition","_isLastRow","_hasValidCellBeforePosition","getVisibleColumnIndex","_isCellByPositionValid","dataController","visibleItems","visible","getMaxRowIndex","isFirstValidCell","hasValidCells","checkingPosition","visibleColumnCount","visibleRows","isLastRow","isClick","isMasterDetailRow","isShowWhenGrouped","showWhenGrouped","isDataCell","isValidGroupSpaceColumn","groupIndex","parseInt","attr","isDragCell","rowItems","isCellEditing","isEditRow","_isLegacyNavigation","$cells","$result","i","focusedCellPosition","includeCommandCells","newFocusedCellPosition","isLastCellOnDirection","_isCellInRow","visibleColumnIndex","_isAllowEditing","editRow","_startEditCell","colIndex","editCell","editResult","_editingCellHandler","done","editorValue","$input","keyDownEvent","type","keyPressEvent","inputEvent","select","timeout","mozilla","val","$widgetContainer","fireRowEvent","newColumnIndex","$cellElement","prevCellIndex","cellElement","prevColumnIndex","rows","columns","_fireFocusedCellChanged","localRowIndex","Math","min","isEditingCell","isEditCell","$newFocusedRow","prevFocusedRowIndex","loadingOperationTypes","rowElement","reload","paging","_fireFocusedRowChanged","focusedRowKey","focusController","focusedRowIndex","getFocusedRowIndexByKey","isElementInCurrentGrid","editMode","last","tabIndex","getCell","style","display","scrollingMode","isVirtualRowRendering","scrollHandler","$editForm","elementIsInsideGrid","$masterDetailCell","_processNextCellInMasterDetail","tagName","$targetElement","children","_processCanceledEditCellPosition","isCanceled","updateFocusedRowIndex","lastVisibleIndex","KeyboardNavigationController","ViewController","inherit","keyboardNavigationModule","defaultOptions","useLegacyKeyboardNavigation","keyboardNavigation","enabled","enterKeyAction","editOnKeyPress","controllers","extenders","views","_rowClick","editRowIndex","getEditRowIndex","needTriggerPointerEventHandler","_triggerPointerDownEventHandler","apply","arguments","force","params","pageSizeChanged","cellElements","updateFocusElementTabIndex","_updateFocusedCellTabIndex","cellElementsLength","updateCellTabIndex","isMasterDetailCell","isValidCell","getCellToFocus","renderDelayedTemplates","change","_renderFocusByChange","operationTypes","repaintChangesOnly","fullReload","pageSize","_renderCore","deferred","_editCellPrepared","editorInstance","_getEditorInstance","_handleEditingNavigationMode","forEach","originalKeyHandler","_supportedKeys","registerKeyHandler","isDropDownOpened","_input","isDateBoxWithMask","NAME","$editor","getWidgetInstance","editing","addRow","parentKey","getFocusedCellInRow","keyboardNavigationController","_processCanceledEditingCell","_keyboardNavigationController","_delayedInputFocus","_isEditingStart","_correctRowIndices","getRowIndexCorrection","editorFactory","focusedRowIndexCorrection","refocus","virtualItemsCount","end","adaptiveColumns","_showHiddenCellsInView","_ref","viewName","isCommandColumn","each","_","_hideVisibleCellInView","_ref2"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/__internal/grids/grid_core/keyboard_navigation/module.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/keyboard_navigation/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterHeight,\r\n    getHeight,\r\n    getWidth,\r\n    getOuterWidth\r\n} from \"../../../../core/utils/size\";\r\nimport $ from \"../../../../core/../core/renderer\";\r\nimport domAdapter from \"../../../../core/../core/dom_adapter\";\r\nimport eventsEngine from \"../../../../core/../events/core/events_engine\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject\r\n} from \"../../../../core/../core/utils/type\";\r\nimport {\r\n    focused\r\n} from \"../../../../ui/widget/selectors\";\r\nimport {\r\n    addNamespace,\r\n    createEvent,\r\n    isCommandKeyPressed\r\n} from \"../../../../core/../events/utils/index\";\r\nimport pointerEvents from \"../../../../events/pointer\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../core/../events/click\";\r\nimport {\r\n    noop\r\n} from \"../../../../core/../core/utils/common\";\r\nimport * as accessibility from \"../../../../ui/shared/accessibility\";\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport {\r\n    keyboard\r\n} from \"../../../../events/short\";\r\nimport devices from \"../../../../core/devices\";\r\nimport gridCoreUtils from \"../module_utils\";\r\nimport core from \"../modules\";\r\nimport {\r\n    GridCoreKeyboardNavigationDom\r\n} from \"./dom\";\r\nconst ROWS_VIEW_CLASS = \"rowsview\";\r\nconst EDIT_FORM_CLASS = \"edit-form\";\r\nconst GROUP_FOOTER_CLASS = \"group-footer\";\r\nconst ROW_CLASS = \"dx-row\";\r\nconst DATA_ROW_CLASS = \"dx-data-row\";\r\nconst GROUP_ROW_CLASS = \"dx-group-row\";\r\nconst HEADER_ROW_CLASS = \"dx-header-row\";\r\nconst EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\r\nconst MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\r\nconst FREESPACE_ROW_CLASS = \"dx-freespace-row\";\r\nconst VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\r\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nconst EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nconst DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nconst COMMAND_EXPAND_CLASS = \"dx-command-expand\";\r\nconst COMMAND_SELECT_CLASS = \"dx-command-select\";\r\nconst COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nconst COMMAND_CELL_SELECTOR = \"[class^=dx-command]\";\r\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nconst DATEBOX_WIDGET_NAME = \"dxDateBox\";\r\nconst FOCUS_STATE_CLASS = \"dx-state-focused\";\r\nconst WIDGET_CLASS = \"dx-widget\";\r\nconst REVERT_BUTTON_CLASS = \"dx-revert-button\";\r\nconst FAST_EDITING_DELETE_KEY = \"delete\";\r\nconst INTERACTIVE_ELEMENTS_SELECTOR = \"input:not([type='hidden']), textarea, a, select, button, [tabindex], .dx-checkbox\";\r\nconst NON_FOCUSABLE_ELEMENTS_SELECTOR = INTERACTIVE_ELEMENTS_SELECTOR + \", .dx-dropdowneditor-icon\";\r\nconst EDIT_MODE_ROW = \"row\";\r\nconst EDIT_MODE_FORM = \"form\";\r\nconst EDIT_MODE_BATCH = \"batch\";\r\nconst EDIT_MODE_CELL = \"cell\";\r\nconst FOCUS_TYPE_ROW = \"row\";\r\nconst FOCUS_TYPE_CELL = \"cell\";\r\nconst COLUMN_HEADERS_VIEW = \"columnHeadersView\";\r\nconst FUNCTIONAL_KEYS = [\"shift\", \"control\", \"alt\"];\r\n\r\nfunction isGroupRow($row) {\r\n    return $row && $row.hasClass(\"dx-group-row\")\r\n}\r\n\r\nfunction isDetailRow($row) {\r\n    return $row && $row.hasClass(\"dx-master-detail-row\")\r\n}\r\n\r\nfunction isDataRow($row) {\r\n    return $row && !isGroupRow($row) && !isDetailRow($row)\r\n}\r\n\r\nfunction isNotFocusedRow($row) {\r\n    return !$row || $row.hasClass(\"dx-freespace-row\") || $row.hasClass(\"dx-virtual-row\")\r\n}\r\n\r\nfunction isEditorCell(that, $cell) {\r\n    return !that._isRowEditMode() && $cell && !$cell.hasClass(\"dx-command-select\") && $cell.hasClass(\"dx-editor-cell\")\r\n}\r\n\r\nfunction isElementDefined($element) {\r\n    return isDefined($element) && $element.length > 0\r\n}\r\n\r\nfunction isMobile() {\r\n    return \"desktop\" !== devices.current().deviceType\r\n}\r\n\r\nfunction isCellInHeaderRow($cell) {\r\n    return !!$cell.parent(\".dx-header-row\").length\r\n}\r\n\r\nfunction isFixedColumnIndexOffsetRequired(that, column) {\r\n    const rtlEnabled = that.option(\"rtlEnabled\");\r\n    let result = false;\r\n    if (rtlEnabled) {\r\n        result = !(\"right\" === column.fixedPosition || isDefined(column.command) && !isDefined(column.fixedPosition))\r\n    } else {\r\n        result = !(!isDefined(column.fixedPosition) || \"left\" === column.fixedPosition)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction shouldPreventScroll(that) {\r\n    const keyboardController = that.getController(\"keyboardNavigation\");\r\n    return keyboardController._isVirtualScrolling() ? that.option(\"focusedRowIndex\") === keyboardController.getRowIndex() : false\r\n}\r\nconst keyboardNavigationMembers = {\r\n    init() {\r\n        this._dataController = this.getController(\"data\");\r\n        this._selectionController = this.getController(\"selection\");\r\n        this._editingController = this.getController(\"editing\");\r\n        this._headerPanel = this.getView(\"headerPanel\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._editorFactory = this.getController(\"editorFactory\");\r\n        if (this.isKeyboardEnabled()) {\r\n            accessibility.subscribeVisibilityChange();\r\n            this._updateFocusTimeout = null;\r\n            this._fastEditingStarted = false;\r\n            this._focusedCellPosition = {};\r\n            this._canceledCellPosition = null;\r\n            const elementFocused = $element => {\r\n                this.setupFocusedView();\r\n                if (this._isNeedScroll) {\r\n                    if ($element.is(\":visible\") && this._focusedView && this._focusedView.getScrollable) {\r\n                        this._focusedView._scrollToElement($element);\r\n                        this._isNeedScroll = false\r\n                    }\r\n                }\r\n            };\r\n            this._editorFactory.focused.add(elementFocused);\r\n            this._initViewHandlers();\r\n            this._initDocumentHandlers();\r\n            this.createAction(\"onKeyDown\")\r\n        }\r\n    },\r\n    _initViewHandlers() {\r\n        const rowsView = this.getView(\"rowsView\");\r\n        const rowsViewFocusHandler = event => {\r\n            const $element = $(event.target);\r\n            const isRelatedTargetInRowsView = $(event.relatedTarget).closest(rowsView.element()).length;\r\n            const isLink = $element.is(\"a\");\r\n            if (event.relatedTarget && isLink && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {\r\n                let $focusedCell = this._getFocusedCell();\r\n                $focusedCell = !isElementDefined($focusedCell) ? rowsView.getCellElements(0).filter(\"[tabindex]\").eq(0) : $focusedCell;\r\n                if (!$element.closest($focusedCell).length) {\r\n                    event.preventDefault();\r\n                    eventsEngine.trigger($focusedCell, \"focus\")\r\n                }\r\n            }\r\n        };\r\n        rowsView.renderCompleted.add(e => {\r\n            const $rowsView = rowsView.element();\r\n            const isFullUpdate = !e || \"refresh\" === e.changeType;\r\n            const isFocusedViewCorrect = this._focusedView && this._focusedView.name === rowsView.name;\r\n            let needUpdateFocus = false;\r\n            const isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\r\n            const root = $(domAdapter.getRootNode($rowsView.get && $rowsView.get(0)));\r\n            const $focusedElement = root.find(\":focus\");\r\n            const isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length;\r\n            eventsEngine.off($rowsView, \"focusin\", rowsViewFocusHandler);\r\n            eventsEngine.on($rowsView, \"focusin\", rowsViewFocusHandler);\r\n            this._initPointerEventHandler();\r\n            this._initKeyDownHandler();\r\n            this._setRowsViewAttributes();\r\n            if (isFocusedViewCorrect && isFocusedElementCorrect) {\r\n                needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate && !(null === e || void 0 === e ? void 0 : e.virtualColumnsScrolling);\r\n                needUpdateFocus && this._updateFocus(true)\r\n            }\r\n        })\r\n    },\r\n    _initDocumentHandlers() {\r\n        const document = domAdapter.getDocument();\r\n        this._documentClickHandler = this.createAction(e => {\r\n            const $target = $(e.event.target);\r\n            const isCurrentRowsViewClick = this._isEventInCurrentGrid(e.event) && $target.closest(\".\" + this.addWidgetPrefix(\"rowsview\")).length;\r\n            const isEditorOverlay = $target.closest(\".dx-dropdowneditor-overlay\").length;\r\n            const columnsResizerController = this.getController(\"columnsResizer\");\r\n            const isColumnResizing = !!columnsResizerController && columnsResizerController.isResizing();\r\n            if (!isCurrentRowsViewClick && !isEditorOverlay && !isColumnResizing) {\r\n                const targetInsideFocusedView = this._focusedView ? $target.parents().filter(this._focusedView.element()).length > 0 : false;\r\n                !targetInsideFocusedView && this._resetFocusedCell(true);\r\n                this._resetFocusedView()\r\n            }\r\n        });\r\n        eventsEngine.on(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler)\r\n    },\r\n    _setRowsViewAttributes() {\r\n        const $rowsView = this._getRowsViewElement();\r\n        const isGridEmpty = !this._dataController.getVisibleRows().length;\r\n        if (isGridEmpty) {\r\n            this._applyTabIndexToElement($rowsView)\r\n        }\r\n    },\r\n    _initPointerEventHandler() {\r\n        const pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\r\n        const $rowsView = this._getRowsViewElement();\r\n        if (!isDefined(this._pointerEventAction)) {\r\n            this._pointerEventAction = this.createAction(this._pointerEventHandler)\r\n        }\r\n        eventsEngine.off($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), this._pointerEventAction);\r\n        eventsEngine.on($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), \".dx-row > td, .dx-row\", this._pointerEventAction)\r\n    },\r\n    _initKeyDownHandler() {\r\n        const $rowsView = this._getRowsViewElement();\r\n        keyboard.off(this._keyDownListener);\r\n        this._keyDownListener = keyboard.on($rowsView, null, e => this._keyDownHandler(e))\r\n    },\r\n    dispose() {\r\n        this.callBase();\r\n        this._resetFocusedView();\r\n        keyboard.off(this._keyDownListener);\r\n        eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\r\n        clearTimeout(this._updateFocusTimeout);\r\n        accessibility.unsubscribeVisibilityChange()\r\n    },\r\n    optionChanged(args) {\r\n        const that = this;\r\n        switch (args.name) {\r\n            case \"keyboardNavigation\":\r\n            case \"useLegacyKeyboardNavigation\":\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                that.callBase(args)\r\n        }\r\n    },\r\n    isRowFocusType() {\r\n        return \"row\" === this.focusType\r\n    },\r\n    isCellFocusType() {\r\n        return \"cell\" === this.focusType\r\n    },\r\n    setRowFocusType() {\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            this.focusType = \"row\"\r\n        }\r\n    },\r\n    setCellFocusType() {\r\n        this.focusType = \"cell\"\r\n    },\r\n    _keyDownHandler(e) {\r\n        var _a;\r\n        let needStopPropagation = true;\r\n        this._isNeedFocus = true;\r\n        this._isNeedScroll = true;\r\n        let isHandled = this._processOnKeyDown(e);\r\n        const isEditing = null === (_a = this._editingController) || void 0 === _a ? void 0 : _a.isEditing();\r\n        const {\r\n            originalEvent: originalEvent\r\n        } = e;\r\n        if (originalEvent.isDefaultPrevented()) {\r\n            this._isNeedFocus = false;\r\n            this._isNeedScroll = false;\r\n            return\r\n        }!FUNCTIONAL_KEYS.includes(e.keyName) && this._updateFocusedCellPositionByTarget(originalEvent.target);\r\n        if (!isHandled) {\r\n            switch (e.keyName) {\r\n                case \"leftArrow\":\r\n                case \"rightArrow\":\r\n                    this._leftRightKeysHandler(e, isEditing);\r\n                    isHandled = true;\r\n                    break;\r\n                case \"upArrow\":\r\n                case \"downArrow\":\r\n                    if (e.ctrl) {\r\n                        accessibility.selectView(\"rowsView\", this, originalEvent)\r\n                    } else {\r\n                        this._upDownKeysHandler(e, isEditing)\r\n                    }\r\n                    isHandled = true;\r\n                    break;\r\n                case \"pageUp\":\r\n                case \"pageDown\":\r\n                    this._pageUpDownKeyHandler(e);\r\n                    isHandled = true;\r\n                    break;\r\n                case \"space\":\r\n                    isHandled = this._spaceKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"A\":\r\n                    if (isCommandKeyPressed(e.originalEvent)) {\r\n                        this._ctrlAKeyHandler(e, isEditing);\r\n                        isHandled = true\r\n                    } else {\r\n                        isHandled = this._beginFastEditing(e.originalEvent)\r\n                    }\r\n                    break;\r\n                case \"tab\":\r\n                    this._tabKeyHandler(e, isEditing);\r\n                    isHandled = true;\r\n                    break;\r\n                case \"enter\":\r\n                    this._enterKeyHandler(e, isEditing);\r\n                    isHandled = true;\r\n                    break;\r\n                case \"escape\":\r\n                    this._escapeKeyHandler(e, isEditing);\r\n                    isHandled = true;\r\n                    break;\r\n                case \"F\":\r\n                    if (isCommandKeyPressed(e.originalEvent)) {\r\n                        this._ctrlFKeyHandler(e);\r\n                        isHandled = true\r\n                    } else {\r\n                        isHandled = this._beginFastEditing(e.originalEvent)\r\n                    }\r\n                    break;\r\n                case \"F2\":\r\n                    this._f2KeyHandler();\r\n                    isHandled = true;\r\n                    break;\r\n                case \"del\":\r\n                case \"backspace\":\r\n                    if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\r\n                        isHandled = this._beginFastEditing(originalEvent, true)\r\n                    }\r\n            }\r\n            if (!isHandled && !this._beginFastEditing(originalEvent)) {\r\n                this._isNeedFocus = false;\r\n                this._isNeedScroll = false;\r\n                needStopPropagation = false\r\n            }\r\n            if (needStopPropagation) {\r\n                originalEvent.stopPropagation()\r\n            }\r\n        }\r\n    },\r\n    _processOnKeyDown(eventArgs) {\r\n        const {\r\n            originalEvent: originalEvent\r\n        } = eventArgs;\r\n        const args = {\r\n            handled: false,\r\n            event: originalEvent\r\n        };\r\n        this.executeAction(\"onKeyDown\", args);\r\n        eventArgs.ctrl = originalEvent.ctrlKey;\r\n        eventArgs.alt = originalEvent.altKey;\r\n        eventArgs.shift = originalEvent.shiftKey;\r\n        return !!args.handled\r\n    },\r\n    _closeEditCell() {\r\n        setTimeout(() => {\r\n            this._editingController.closeEditCell()\r\n        })\r\n    },\r\n    _leftRightKeysHandler(eventArgs, isEditing) {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const $event = eventArgs.originalEvent;\r\n        const $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        const directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\r\n        const isEditingNavigationMode = this._isFastEditingStarted();\r\n        const allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\r\n        if (allowNavigate) {\r\n            this.setCellFocusType();\r\n            isEditingNavigationMode && this._closeEditCell();\r\n            if (this._isVirtualColumnRender()) {\r\n                this._processVirtualHorizontalPosition(directionCode)\r\n            }\r\n            const $cell = this._getNextCell(directionCode);\r\n            if (isElementDefined($cell)) {\r\n                this._arrowKeysHandlerFocusCell($event, $cell, directionCode)\r\n            }\r\n            $event && $event.preventDefault()\r\n        }\r\n    },\r\n    _upDownKeysHandler(eventArgs, isEditing) {\r\n        var _a, _b;\r\n        const visibleRowIndex = this.getVisibleRowIndex();\r\n        const $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);\r\n        const $event = eventArgs.originalEvent;\r\n        const isUpArrow = \"upArrow\" === eventArgs.keyName;\r\n        const dataSource = this._dataController.dataSource();\r\n        const isRowEditingInCurrentRow = null === (_b = null === (_a = this._editingController) || void 0 === _a ? void 0 : _a.isEditRowByIndex) || void 0 === _b ? void 0 : _b.call(_a, visibleRowIndex);\r\n        const isEditingNavigationMode = this._isFastEditingStarted();\r\n        const allowNavigate = (!isRowEditingInCurrentRow || !isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);\r\n        if (allowNavigate) {\r\n            isEditingNavigationMode && this._closeEditCell();\r\n            if (!this._navigateNextCell($event, eventArgs.keyName)) {\r\n                if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {\r\n                    const rowHeight = getOuterHeight($row);\r\n                    const rowIndex = this._focusedCellPosition.rowIndex - 1;\r\n                    this._scrollBy(0, -rowHeight, rowIndex, $event)\r\n                }\r\n            }\r\n            $event && $event.preventDefault()\r\n        }\r\n    },\r\n    _pageUpDownKeyHandler(eventArgs) {\r\n        const pageIndex = this._dataController.pageIndex();\r\n        const pageCount = this._dataController.pageCount();\r\n        const pagingEnabled = this.option(\"paging.enabled\");\r\n        const isPageUp = \"pageUp\" === eventArgs.keyName;\r\n        const pageStep = isPageUp ? -1 : 1;\r\n        const scrollable = this.getView(\"rowsView\").getScrollable();\r\n        if (pagingEnabled && !this._isVirtualScrolling()) {\r\n            if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\r\n                this._dataController.pageIndex(pageIndex + pageStep);\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        } else if (scrollable && getHeight(scrollable.container()) < getHeight(scrollable.$content())) {\r\n            this._scrollBy(0, getHeight(scrollable.container()) * pageStep);\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _spaceKeyHandler(eventArgs, isEditing) {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const $target = $(eventArgs.originalEvent && eventArgs.originalEvent.target);\r\n        if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\r\n            const isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\r\n            const isFocusedSelectionCell = $target.hasClass(\"dx-command-select\");\r\n            if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\r\n                this._selectionController.startSelectionWithCheckboxes()\r\n            }\r\n            if (isFocusedRowElement || $target.parent().hasClass(\"dx-data-row\") || $target.hasClass(this.addWidgetPrefix(\"rowsview\"))) {\r\n                this._selectionController.changeItemSelection(rowIndex, {\r\n                    shift: eventArgs.shift,\r\n                    control: eventArgs.ctrl\r\n                });\r\n                eventArgs.originalEvent.preventDefault();\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n        return this._beginFastEditing(eventArgs.originalEvent)\r\n    },\r\n    _ctrlAKeyHandler(eventArgs, isEditing) {\r\n        if (!isEditing && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\r\n            this._selectionController.selectAll();\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _tabKeyHandler(eventArgs, isEditing) {\r\n        const editingOptions = this.option(\"editing\");\r\n        const direction = eventArgs.shift ? \"previous\" : \"next\";\r\n        const isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);\r\n        let isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\r\n        const eventTarget = eventArgs.originalEvent.target;\r\n        const focusedViewElement = this._focusedView && this._focusedView.element();\r\n        if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\r\n            return\r\n        }\r\n        $(focusedViewElement).addClass(FOCUS_STATE_CLASS);\r\n        if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\r\n            if ($(eventTarget).hasClass(this.addWidgetPrefix(\"rowsview\"))) {\r\n                this._resetFocusedCell()\r\n            }\r\n            if (this._isVirtualColumnRender()) {\r\n                this._processVirtualHorizontalPosition(direction)\r\n            }\r\n            if (isEditing) {\r\n                if (!this._editingCellTabHandler(eventArgs, direction)) {\r\n                    return\r\n                }\r\n            } else if (this._targetCellTabHandler(eventArgs, direction)) {\r\n                isOriginalHandlerRequired = true\r\n            }\r\n        }\r\n        if (isOriginalHandlerRequired) {\r\n            this._editorFactory.loseFocus();\r\n            if (this._editingController.isEditing() && !this._isRowEditMode()) {\r\n                this._resetFocusedCell(true);\r\n                this._resetFocusedView();\r\n                this._closeEditCell()\r\n            }\r\n        } else {\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _getMaxHorizontalOffset() {\r\n        const scrollable = this.component.getScrollable();\r\n        const rowsView = this.getView(\"rowsView\");\r\n        const offset = scrollable ? scrollable.scrollWidth() - getWidth(rowsView.element()) : 0;\r\n        return offset\r\n    },\r\n    _isColumnRendered(columnIndex) {\r\n        const allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\r\n        const renderedVisibleColumns = this._columnsController.getVisibleColumns();\r\n        const column = allVisibleColumns[columnIndex];\r\n        let result = false;\r\n        if (column) {\r\n            result = renderedVisibleColumns.indexOf(column) >= 0\r\n        }\r\n        return result\r\n    },\r\n    _isFixedColumn(columnIndex) {\r\n        const allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\r\n        const column = allVisibleColumns[columnIndex];\r\n        return !!column && !!column.fixed\r\n    },\r\n    _isColumnVirtual(columnIndex) {\r\n        const localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        const column = visibleColumns[localColumnIndex];\r\n        return !!column && \"virtual\" === column.command\r\n    },\r\n    _processVirtualHorizontalPosition(direction) {\r\n        const scrollable = this.component.getScrollable();\r\n        const columnIndex = this.getColumnIndex();\r\n        let nextColumnIndex;\r\n        let horizontalScrollPosition = 0;\r\n        let needToScroll = false;\r\n        switch (direction) {\r\n            case \"next\":\r\n            case \"nextInRow\": {\r\n                const columnsCount = this._getVisibleColumnCount();\r\n                nextColumnIndex = columnIndex + 1;\r\n                horizontalScrollPosition = this.option(\"rtlEnabled\") ? this._getMaxHorizontalOffset() : 0;\r\n                if (\"next\" === direction) {\r\n                    needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                } else {\r\n                    needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                }\r\n                break\r\n            }\r\n            case \"previous\":\r\n            case \"previousInRow\":\r\n                nextColumnIndex = columnIndex - 1;\r\n                horizontalScrollPosition = this.option(\"rtlEnabled\") ? 0 : this._getMaxHorizontalOffset();\r\n                if (\"previous\" === direction) {\r\n                    const columnIndexOffset = this._columnsController.getColumnIndexOffset();\r\n                    const leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;\r\n                    needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                } else {\r\n                    needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                }\r\n        }\r\n        if (needToScroll) {\r\n            scrollable.scrollTo({\r\n                left: horizontalScrollPosition\r\n            })\r\n        } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {\r\n            horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);\r\n            0 !== horizontalScrollPosition && scrollable.scrollBy({\r\n                left: horizontalScrollPosition,\r\n                top: 0\r\n            })\r\n        }\r\n    },\r\n    _getHorizontalScrollPositionOffset(direction) {\r\n        let positionOffset = 0;\r\n        const $currentCell = this._getCell(this._focusedCellPosition);\r\n        const currentCellWidth = $currentCell && getOuterWidth($currentCell);\r\n        if (currentCellWidth > 0) {\r\n            const rtlMultiplier = this.option(\"rtlEnabled\") ? -1 : 1;\r\n            positionOffset = \"nextInRow\" === direction || \"next\" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1\r\n        }\r\n        return positionOffset\r\n    },\r\n    _editingCellTabHandler(eventArgs, direction) {\r\n        const eventTarget = eventArgs.originalEvent.target;\r\n        let $cell = this._getCellElementFromTarget(eventTarget);\r\n        let isEditingAllowed;\r\n        const $event = eventArgs.originalEvent;\r\n        const elementType = this._getElementType(eventTarget);\r\n        if ($cell.is(\"[class^=dx-command]\")) {\r\n            return !this._targetCellTabHandler(eventArgs, direction)\r\n        }\r\n        this._updateFocusedCellPosition($cell);\r\n        const nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\r\n        $cell = nextCellInfo.$cell;\r\n        if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\r\n            return false\r\n        }\r\n        const columnsController = this._columnsController;\r\n        const cellIndex = this.getView(\"rowsView\").getCellIndex($cell);\r\n        const columnIndex = cellIndex + columnsController.getColumnIndexOffset();\r\n        const column = columnsController.getVisibleColumns(null, true)[columnIndex];\r\n        const $row = $cell.parent();\r\n        const rowIndex = this._getRowIndex($row);\r\n        const row = this._dataController.items()[rowIndex];\r\n        const editingController = this._editingController;\r\n        if (column && column.allowEditing) {\r\n            const isDataRow = !row || \"data\" === row.rowType;\r\n            isEditingAllowed = editingController.allowUpdating({\r\n                row: row\r\n            }) ? isDataRow : row && row.isNewRow\r\n        }\r\n        if (!isEditingAllowed) {\r\n            this._closeEditCell()\r\n        }\r\n        if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\r\n            if (!this._isRowEditMode() && isEditingAllowed) {\r\n                this._editFocusedCell()\r\n            } else {\r\n                this._focusInteractiveElement($cell, eventArgs.shift)\r\n            }\r\n        }\r\n        return true\r\n    },\r\n    _targetCellTabHandler(eventArgs, direction) {\r\n        const $event = eventArgs.originalEvent;\r\n        let eventTarget = $event.target;\r\n        let $cell = this._getCellElementFromTarget(eventTarget);\r\n        const $lastInteractiveElement = this._getInteractiveElement($cell, !eventArgs.shift);\r\n        let isOriginalHandlerRequired = false;\r\n        let elementType;\r\n        if (!isEditorCell(this, $cell) && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\r\n            isOriginalHandlerRequired = true\r\n        } else {\r\n            if (void 0 === this._focusedCellPosition.rowIndex && $(eventTarget).hasClass(\"dx-row\")) {\r\n                this._updateFocusedCellPosition($cell)\r\n            }\r\n            elementType = this._getElementType(eventTarget);\r\n            if (this.isRowFocusType()) {\r\n                this.setCellFocusType();\r\n                if (\"row\" === elementType && isDataRow($(eventTarget))) {\r\n                    eventTarget = this.getFirstValidCellInRow($(eventTarget));\r\n                    elementType = this._getElementType(eventTarget)\r\n                }\r\n            }\r\n            const nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\r\n            $cell = nextCellInfo.$cell;\r\n            if (!$cell) {\r\n                return false\r\n            }\r\n            $cell = this._checkNewLineTransition($event, $cell);\r\n            if (!$cell) {\r\n                return false\r\n            }\r\n            this._focusCell($cell, !nextCellInfo.isHighlighted);\r\n            if (!isEditorCell(this, $cell)) {\r\n                this._focusInteractiveElement($cell, eventArgs.shift)\r\n            }\r\n        }\r\n        return isOriginalHandlerRequired\r\n    },\r\n    _getNextCellByTabKey($event, direction, elementType) {\r\n        let $cell = this._getNextCell(direction, elementType);\r\n        const args = $cell && this._fireFocusedCellChanging($event, $cell, true);\r\n        if (!args || args.cancel) {\r\n            return {}\r\n        }\r\n        if (args.$newCellElement) {\r\n            $cell = args.$newCellElement\r\n        }\r\n        return {\r\n            $cell: $cell,\r\n            isHighlighted: args.isHighlighted\r\n        }\r\n    },\r\n    _checkNewLineTransition($event, $cell) {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const $row = $cell.parent();\r\n        if (rowIndex !== this._getRowIndex($row)) {\r\n            const cellPosition = this._getCellPosition($cell);\r\n            const args = this._fireFocusedRowChanging($event, $row);\r\n            if (args.cancel) {\r\n                return\r\n            }\r\n            if (args.rowIndexChanged) {\r\n                this.setFocusedColumnIndex(cellPosition.columnIndex);\r\n                $cell = this._getFocusedCell()\r\n            }\r\n        }\r\n        return $cell\r\n    },\r\n    _enterKeyHandler(eventArgs, isEditing) {\r\n        const $cell = this._getFocusedCell();\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        if (this.option(\"grouping.allowCollapsing\") && isGroupRow($row) || this.option(\"masterDetail.enabled\") && $cell && $cell.hasClass(\"dx-command-expand\")) {\r\n            const key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            const item = this._dataController.items()[rowIndex];\r\n            if (void 0 !== key && item && item.data && !item.data.isContinuation) {\r\n                this._dataController.changeRowExpand(key)\r\n            }\r\n        } else {\r\n            this._processEnterKeyForDataCell(eventArgs, isEditing)\r\n        }\r\n    },\r\n    _processEnterKeyForDataCell(eventArgs, isEditing) {\r\n        const direction = this._getEnterKeyDirection(eventArgs);\r\n        const allowEditingOnEnterKey = this._allowEditingOnEnterKey();\r\n        if (isEditing || !allowEditingOnEnterKey && direction) {\r\n            this._handleEnterKeyEditingCell(eventArgs.originalEvent);\r\n            if (\"next\" === direction || \"previous\" === direction) {\r\n                this._targetCellTabHandler(eventArgs, direction)\r\n            } else if (\"upArrow\" === direction || \"downArrow\" === direction) {\r\n                this._navigateNextCell(eventArgs.originalEvent, direction)\r\n            }\r\n        } else if (allowEditingOnEnterKey) {\r\n            this._startEditing(eventArgs)\r\n        }\r\n    },\r\n    _getEnterKeyDirection(eventArgs) {\r\n        const enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\r\n        const isShift = eventArgs.shift;\r\n        if (\"column\" === enterKeyDirection) {\r\n            return isShift ? \"upArrow\" : \"downArrow\"\r\n        }\r\n        if (\"row\" === enterKeyDirection) {\r\n            return isShift ? \"previous\" : \"next\"\r\n        }\r\n        return\r\n    },\r\n    _handleEnterKeyEditingCell(event) {\r\n        const {\r\n            target: target\r\n        } = event;\r\n        const $cell = this._getCellElementFromTarget(target);\r\n        const isRowEditMode = this._isRowEditMode();\r\n        this._updateFocusedCellPosition($cell);\r\n        if (isRowEditMode) {\r\n            this._focusEditFormCell($cell);\r\n            setTimeout(this._editingController.saveEditData.bind(this._editingController))\r\n        } else {\r\n            eventsEngine.trigger($(target), \"change\");\r\n            this._closeEditCell();\r\n            event.preventDefault()\r\n        }\r\n    },\r\n    _escapeKeyHandler(eventArgs, isEditing) {\r\n        const $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\r\n        if (isEditing) {\r\n            this._updateFocusedCellPosition($cell);\r\n            if (!this._isRowEditMode()) {\r\n                if (\"cell\" === this._editingController.getEditMode()) {\r\n                    this._editingController.cancelEditData()\r\n                } else {\r\n                    this._closeEditCell()\r\n                }\r\n            } else {\r\n                this._focusEditFormCell($cell);\r\n                this._editingController.cancelEditData();\r\n                if (0 === this._dataController.items().length) {\r\n                    this._resetFocusedCell();\r\n                    this._editorFactory.loseFocus()\r\n                }\r\n            }\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    },\r\n    _ctrlFKeyHandler(eventArgs) {\r\n        if (this.option(\"searchPanel.visible\")) {\r\n            const searchTextEditor = this._headerPanel.getSearchTextEditor();\r\n            if (searchTextEditor) {\r\n                searchTextEditor.focus();\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        }\r\n    },\r\n    _f2KeyHandler() {\r\n        const isEditing = this._editingController.isEditing();\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        if (!isEditing && isDataRow($row)) {\r\n            this._startEditing()\r\n        }\r\n    },\r\n    _navigateNextCell($event, keyCode) {\r\n        const $cell = this._getNextCell(keyCode);\r\n        const directionCode = this._getDirectionCodeByKey(keyCode);\r\n        const isCellValid = $cell && this._isCellValid($cell);\r\n        const result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;\r\n        return result\r\n    },\r\n    _arrowKeysHandlerFocusCell($event, $nextCell, direction) {\r\n        const isVerticalDirection = \"prevRow\" === direction || \"nextRow\" === direction;\r\n        const args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);\r\n        $nextCell = args.$newCellElement;\r\n        if (!args.cancel && this._isCellValid($nextCell)) {\r\n            this._focus($nextCell, !args.isHighlighted);\r\n            return true\r\n        }\r\n        return false\r\n    },\r\n    _beginFastEditing(originalEvent, isDeleting) {\r\n        if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\r\n            return false\r\n        }\r\n        if (isDeleting) {\r\n            this._startEditing(originalEvent, \"delete\")\r\n        } else {\r\n            const {\r\n                key: key\r\n            } = originalEvent;\r\n            const keyCode = originalEvent.keyCode || originalEvent.which;\r\n            const fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\r\n            if (fastEditingKey && (1 === fastEditingKey.length || \"delete\" === fastEditingKey)) {\r\n                this._startEditing(originalEvent, fastEditingKey)\r\n            }\r\n        }\r\n        return true\r\n    },\r\n    _pointerEventHandler(e) {\r\n        const event = e.event || e;\r\n        let $target = $(event.currentTarget);\r\n        const rowsView = this.getView(\"rowsView\");\r\n        const focusedViewElement = rowsView && rowsView.element();\r\n        const $parent = $target.parent();\r\n        const isInteractiveElement = $(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\r\n        const isRevertButton = !!$(event.target).closest(\".dx-revert-button\").length;\r\n        const isExpandCommandCell = $target.hasClass(\"dx-command-expand\");\r\n        if (!this._isEventInCurrentGrid(event)) {\r\n            return\r\n        }\r\n        if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {\r\n            $target = this._isInsideEditForm($target) ? $(event.target) : $target;\r\n            this._focusView();\r\n            $(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\r\n            if ($parent.hasClass(\"dx-freespace-row\")) {\r\n                this._updateFocusedCellPosition($target);\r\n                this._applyTabIndexToElement(this._focusedView.element());\r\n                this._focusedView.focus(true)\r\n            } else if (!this._isMasterDetailCell($target)) {\r\n                this._clickTargetCellHandler(event, $target)\r\n            } else {\r\n                this._updateFocusedCellPosition($target)\r\n            }\r\n        } else if ($target.is(\"td\")) {\r\n            this._resetFocusedCell()\r\n        }\r\n    },\r\n    _clickTargetCellHandler(event, $cell) {\r\n        const columnIndex = this.getView(\"rowsView\").getCellIndex($cell);\r\n        const column = this._columnsController.getVisibleColumns()[columnIndex];\r\n        const isCellEditMode = this._isCellEditMode();\r\n        this.setCellFocusType();\r\n        const args = this._fireFocusChangingEvents(event, $cell, true);\r\n        $cell = args.$newCellElement;\r\n        if (!args.cancel) {\r\n            if (args.resetFocusedRow) {\r\n                this.getController(\"focus\")._resetFocusedRow();\r\n                return\r\n            }\r\n            if (args.rowIndexChanged) {\r\n                $cell = this._getFocusedCell()\r\n            }\r\n            if (!args.isHighlighted && !isCellEditMode) {\r\n                this.setRowFocusType()\r\n            }\r\n            this._updateFocusedCellPosition($cell);\r\n            if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\r\n                this._isNeedFocus = false;\r\n                this._isHiddenFocus = false\r\n            } else {\r\n                $cell = this._getFocusedCell();\r\n                const $target = event && $(event.target).closest(NON_FOCUSABLE_ELEMENTS_SELECTOR + \", td\");\r\n                const skipFocusEvent = $target && $target.not($cell).is(NON_FOCUSABLE_ELEMENTS_SELECTOR);\r\n                const isEditor = !!column && !column.command && $cell.hasClass(\"dx-editor-cell\");\r\n                const isDisabled = !isEditor && (!args.isHighlighted || skipFocusEvent);\r\n                this._focus($cell, isDisabled, skipFocusEvent)\r\n            }\r\n        } else {\r\n            this.setRowFocusType();\r\n            this.setFocusedRowIndex(args.prevRowIndex);\r\n            if (this._editingController.isEditing() && isCellEditMode) {\r\n                this._closeEditCell()\r\n            }\r\n        }\r\n    },\r\n    _allowRowUpdating() {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const row = this._dataController.items()[rowIndex];\r\n        return this._editingController.allowUpdating({\r\n            row: row\r\n        }, \"click\")\r\n    },\r\n    focus(element) {\r\n        let activeElementSelector;\r\n        const focusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n        const isHighlighted = this._isCellElement($(element));\r\n        if (!element) {\r\n            activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\r\n            if (!focusedRowEnabled) {\r\n                activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\"\r\n            }\r\n            element = this.component.$element().find(activeElementSelector).first()\r\n        }\r\n        element && this._focusElement($(element), isHighlighted)\r\n    },\r\n    getFocusedView() {\r\n        return this._focusedView\r\n    },\r\n    setupFocusedView() {\r\n        if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {\r\n            this._focusView()\r\n        }\r\n    },\r\n    _focusElement($element, isHighlighted) {\r\n        const rowsViewElement = $(this._getRowsViewElement());\r\n        const $focusedView = $element.closest(rowsViewElement);\r\n        const isRowFocusType = this.isRowFocusType();\r\n        let args = {};\r\n        if (!$focusedView.length || this._isCellElement($element) && !this._isCellValid($element)) {\r\n            return\r\n        }\r\n        this._focusView();\r\n        this._isNeedFocus = true;\r\n        this._isNeedScroll = true;\r\n        if (this._isCellElement($element) || isGroupRow($element)) {\r\n            this.setCellFocusType();\r\n            args = this._fireFocusChangingEvents(null, $element, false, isHighlighted);\r\n            $element = args.$newCellElement;\r\n            if (isRowFocusType && !args.isHighlighted) {\r\n                this.setRowFocusType()\r\n            }\r\n        }\r\n        if (!args.cancel) {\r\n            this._focus($element, !args.isHighlighted);\r\n            this._focusInteractiveElement($element)\r\n        }\r\n    },\r\n    _getFocusedViewByElement($element) {\r\n        const view = this.getFocusedView();\r\n        const $view = view && $(view.element());\r\n        return $element && 0 !== $element.closest($view).length\r\n    },\r\n    _focusView() {\r\n        this._focusedView = this.getView(\"rowsView\")\r\n    },\r\n    _resetFocusedView() {\r\n        this.setRowFocusType();\r\n        this._focusedView = null\r\n    },\r\n    _focusInteractiveElement($cell, isLast) {\r\n        if (!$cell) {\r\n            return\r\n        }\r\n        const $focusedElement = this._getInteractiveElement($cell, isLast);\r\n        this._testInteractiveElement = $focusedElement;\r\n        gridCoreUtils.focusAndSelectElement(this, $focusedElement)\r\n    },\r\n    _focus($cell, disableFocus, skipFocusEvent) {\r\n        const $row = $cell && !$cell.hasClass(\"dx-row\") ? $cell.closest(\".dx-row\") : $cell;\r\n        if ($row && isNotFocusedRow($row)) {\r\n            return\r\n        }\r\n        const focusedView = this._focusedView;\r\n        const $focusViewElement = focusedView && focusedView.element();\r\n        let $focusElement;\r\n        this._isHiddenFocus = disableFocus;\r\n        const isRowFocus = isGroupRow($row) || this.isRowFocusType();\r\n        if (isRowFocus) {\r\n            $focusElement = $row;\r\n            if (focusedView) {\r\n                this.setFocusedRowIndex(this._getRowIndex($row))\r\n            }\r\n        } else if (this._isCellElement($cell)) {\r\n            $focusElement = $cell;\r\n            this._updateFocusedCellPosition($cell)\r\n        }\r\n        if ($focusElement) {\r\n            if ($focusViewElement) {\r\n                $focusViewElement.find(\".dx-row[tabindex], .dx-row > td[tabindex]\").not($focusElement).removeClass(\"dx-cell-focus-disabled\").removeAttr(\"tabindex\")\r\n            }\r\n            eventsEngine.one($focusElement, \"blur\", e => {\r\n                if (e.relatedTarget) {\r\n                    $focusElement.removeClass(\"dx-cell-focus-disabled\")\r\n                }\r\n            });\r\n            if (!skipFocusEvent) {\r\n                this._applyTabIndexToElement($focusElement);\r\n                eventsEngine.trigger($focusElement, \"focus\")\r\n            }\r\n            if (disableFocus) {\r\n                $focusElement.addClass(\"dx-cell-focus-disabled\");\r\n                if (isRowFocus) {\r\n                    $cell.addClass(\"dx-cell-focus-disabled\")\r\n                }\r\n            } else {\r\n                this._editorFactory.focus($focusElement)\r\n            }\r\n        }\r\n    },\r\n    _updateFocus(isRenderView) {\r\n        this._updateFocusTimeout = setTimeout(() => {\r\n            const editingController = this._editingController;\r\n            const isCellEditMode = \"cell\" === editingController.getEditMode();\r\n            const isBatchEditMode = \"batch\" === editingController.getEditMode();\r\n            if (isCellEditMode && editingController.hasChanges() || isBatchEditMode && editingController.isNewRowInEditMode()) {\r\n                editingController._focusEditingCell();\r\n                return\r\n            }\r\n            let $cell = this._getFocusedCell();\r\n            const isEditing = editingController.isEditing();\r\n            if ($cell && !(this._isMasterDetailCell($cell) && !this._isRowEditMode())) {\r\n                if (this._hasSkipRow($cell.parent())) {\r\n                    const direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\r\n                    $cell = this._getNextCell(direction)\r\n                }\r\n                if (isElementDefined($cell)) {\r\n                    if ($cell.is(\"td\") || $cell.hasClass(this.addWidgetPrefix(\"edit-form-item\"))) {\r\n                        const isCommandCell = $cell.is(\"[class^=dx-command]\");\r\n                        const $focusedElementInsideCell = $cell.find(\":focus\");\r\n                        const isFocusedElementDefined = isElementDefined($focusedElementInsideCell);\r\n                        if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {\r\n                            if (isCommandCell && isFocusedElementDefined) {\r\n                                gridCoreUtils.focusAndSelectElement(this, $focusedElementInsideCell);\r\n                                return\r\n                            }!isFocusedElementDefined && this._focus($cell)\r\n                        } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {\r\n                            this._focus($cell, this._isHiddenFocus)\r\n                        }\r\n                        if (isEditing) {\r\n                            this._focusInteractiveElement.bind(this)($cell)\r\n                        }\r\n                    } else {\r\n                        eventsEngine.trigger($cell, \"focus\")\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    },\r\n    _getFocusedCell() {\r\n        return $(this._getCell(this._focusedCellPosition))\r\n    },\r\n    _updateFocusedCellPositionByTarget(target) {\r\n        var _a;\r\n        const elementType = this._getElementType(target);\r\n        if (\"row\" === elementType && isDefined(null === (_a = this._focusedCellPosition) || void 0 === _a ? void 0 : _a.columnIndex)) {\r\n            const $row = $(target);\r\n            this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row))\r\n        } else {\r\n            this._updateFocusedCellPosition(this._getCellElementFromTarget(target))\r\n        }\r\n    },\r\n    _updateFocusedCellPosition($cell, direction) {\r\n        const position = this._getCellPosition($cell, direction);\r\n        if (position) {\r\n            if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\r\n                this.setFocusedCellPosition(position.rowIndex, position.columnIndex)\r\n            }\r\n        }\r\n        return position\r\n    },\r\n    _getFocusedColumnIndexOffset(columnIndex) {\r\n        let offset = 0;\r\n        const column = this._columnsController.getVisibleColumns()[columnIndex];\r\n        if (column && column.fixed) {\r\n            offset = this._getFixedColumnIndexOffset(column)\r\n        } else if (columnIndex >= 0) {\r\n            offset = this._columnsController.getColumnIndexOffset()\r\n        }\r\n        return offset\r\n    },\r\n    _getFixedColumnIndexOffset(column) {\r\n        const offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;\r\n        return offset\r\n    },\r\n    _getCellPosition($cell, direction) {\r\n        let columnIndex;\r\n        const $row = isElementDefined($cell) && $cell.closest(\"tr\");\r\n        const rowsView = this.getView(\"rowsView\");\r\n        if (isElementDefined($row)) {\r\n            const rowIndex = this._getRowIndex($row);\r\n            columnIndex = rowsView.getCellIndex($cell, rowIndex);\r\n            columnIndex += this._getFocusedColumnIndexOffset(columnIndex);\r\n            if (direction) {\r\n                columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\r\n                columnIndex = this._applyColumnIndexBoundaries(columnIndex)\r\n            }\r\n            return {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            }\r\n        }\r\n        return\r\n    },\r\n    _focusCell($cell, isDisabled) {\r\n        if (this._isCellValid($cell)) {\r\n            this._focus($cell, isDisabled);\r\n            return true\r\n        }\r\n        return\r\n    },\r\n    _focusEditFormCell($cell) {\r\n        if ($cell.hasClass(\"dx-master-detail-cell\")) {\r\n            this._editorFactory.focus($cell, true)\r\n        }\r\n    },\r\n    _resetFocusedCell(preventScroll) {\r\n        var _a;\r\n        const $cell = this._getFocusedCell();\r\n        isElementDefined($cell) && $cell.removeAttr(\"tabindex\");\r\n        this._isNeedFocus = false;\r\n        this._isNeedScroll = false;\r\n        this._focusedCellPosition = {};\r\n        clearTimeout(this._updateFocusTimeout);\r\n        null === (_a = this._focusedView) || void 0 === _a ? void 0 : _a.renderFocusState({\r\n            preventScroll: preventScroll\r\n        })\r\n    },\r\n    restoreFocusableElement(rowIndex, $event) {\r\n        const that = this;\r\n        let args;\r\n        let $rowElement;\r\n        const isUpArrow = isDefined(rowIndex);\r\n        const rowsView = that.getView(\"rowsView\");\r\n        const $rowsViewElement = rowsView.element();\r\n        const {\r\n            columnIndex: columnIndex\r\n        } = that._focusedCellPosition;\r\n        const rowIndexOffset = that._dataController.getRowIndexOffset();\r\n        rowIndex = isUpArrow ? rowIndex : rowsView.getTopVisibleItemIndex() + rowIndexOffset;\r\n        if (!isUpArrow) {\r\n            that._editorFactory.loseFocus();\r\n            that._applyTabIndexToElement($rowsViewElement);\r\n            eventsEngine.trigger($rowsViewElement, \"focus\")\r\n        } else {\r\n            $rowElement = rowsView.getRow(rowIndex - rowIndexOffset);\r\n            args = that._fireFocusedRowChanging($event, $rowElement);\r\n            if (!args.cancel && args.rowIndexChanged) {\r\n                rowIndex = args.newRowIndex\r\n            }\r\n        }\r\n        if (!isUpArrow || !args.cancel) {\r\n            that.setFocusedCellPosition(rowIndex, columnIndex)\r\n        }\r\n        isUpArrow && that._updateFocus()\r\n    },\r\n    _getNewPositionByCode(cellPosition, elementType, code) {\r\n        let {\r\n            columnIndex: columnIndex\r\n        } = cellPosition;\r\n        let {\r\n            rowIndex: rowIndex\r\n        } = cellPosition;\r\n        let visibleColumnsCount;\r\n        if (void 0 === cellPosition.rowIndex && \"next\" === code) {\r\n            return {\r\n                columnIndex: 0,\r\n                rowIndex: 0\r\n            }\r\n        }\r\n        switch (code) {\r\n            case \"nextInRow\":\r\n            case \"next\":\r\n                visibleColumnsCount = this._getVisibleColumnCount();\r\n                if (columnIndex < visibleColumnsCount - 1 && \"row\" !== elementType && this._hasValidCellAfterPosition({\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })) {\r\n                    columnIndex++\r\n                } else if (!this._isLastRow(rowIndex) && \"next\" === code) {\r\n                    columnIndex = 0;\r\n                    rowIndex++\r\n                }\r\n                break;\r\n            case \"previousInRow\":\r\n            case \"previous\":\r\n                if (columnIndex > 0 && \"row\" !== elementType && this._hasValidCellBeforePosition({\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })) {\r\n                    columnIndex--\r\n                } else if (rowIndex > 0 && \"previous\" === code) {\r\n                    rowIndex--;\r\n                    visibleColumnsCount = this._getVisibleColumnCount();\r\n                    columnIndex = visibleColumnsCount - 1\r\n                }\r\n                break;\r\n            case \"upArrow\":\r\n                rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\r\n                break;\r\n            case \"downArrow\":\r\n                rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex\r\n        }\r\n        return {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        }\r\n    },\r\n    setFocusedCellPosition(rowIndex, columnIndex) {\r\n        this.setFocusedRowIndex(rowIndex);\r\n        this.setFocusedColumnIndex(columnIndex)\r\n    },\r\n    setFocusedRowIndex(rowIndex) {\r\n        if (!this._focusedCellPosition) {\r\n            this._focusedCellPosition = {}\r\n        }\r\n        this._focusedCellPosition.rowIndex = rowIndex\r\n    },\r\n    setFocusedColumnIndex(columnIndex) {\r\n        if (!this._focusedCellPosition) {\r\n            this._focusedCellPosition = {}\r\n        }\r\n        this._focusedCellPosition.columnIndex = columnIndex\r\n    },\r\n    getRowIndex() {\r\n        return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1\r\n    },\r\n    getColumnIndex() {\r\n        return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1\r\n    },\r\n    getVisibleRowIndex() {\r\n        const rowIndex = this._focusedCellPosition && this._focusedCellPosition.rowIndex;\r\n        if (!isDefined(rowIndex) || rowIndex < 0) {\r\n            return -1\r\n        }\r\n        return rowIndex - this._dataController.getRowIndexOffset()\r\n    },\r\n    getVisibleColumnIndex() {\r\n        const columnIndex = this._focusedCellPosition && this._focusedCellPosition.columnIndex;\r\n        if (!isDefined(columnIndex)) {\r\n            return -1\r\n        }\r\n        return columnIndex - this._columnsController.getColumnIndexOffset()\r\n    },\r\n    _applyColumnIndexBoundaries(columnIndex) {\r\n        const visibleColumnsCount = this._getVisibleColumnCount();\r\n        if (columnIndex < 0) {\r\n            columnIndex = 0\r\n        } else if (columnIndex >= visibleColumnsCount) {\r\n            columnIndex = visibleColumnsCount - 1\r\n        }\r\n        return columnIndex\r\n    },\r\n    _isCellByPositionValid(cellPosition) {\r\n        const $cell = $(this._getCell(cellPosition));\r\n        return this._isCellValid($cell)\r\n    },\r\n    _isLastRow(rowIndex) {\r\n        const dataController = this._dataController;\r\n        const visibleItems = dataController.items().filter(item => false !== item.visible);\r\n        if (this._isVirtualRowRender()) {\r\n            return rowIndex >= dataController.getMaxRowIndex()\r\n        }\r\n        return rowIndex === visibleItems.length - 1\r\n    },\r\n    _isFirstValidCell(cellPosition) {\r\n        let isFirstValidCell = false;\r\n        if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\r\n            isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition)\r\n        }\r\n        return isFirstValidCell\r\n    },\r\n    _hasValidCellBeforePosition(cellPosition) {\r\n        let {\r\n            columnIndex: columnIndex\r\n        } = cellPosition;\r\n        let hasValidCells = false;\r\n        while (columnIndex > 0 && !hasValidCells) {\r\n            const checkingPosition = {\r\n                columnIndex: --columnIndex,\r\n                rowIndex: cellPosition.rowIndex\r\n            };\r\n            hasValidCells = this._isCellByPositionValid(checkingPosition)\r\n        }\r\n        return hasValidCells\r\n    },\r\n    _hasValidCellAfterPosition(cellPosition) {\r\n        let {\r\n            columnIndex: columnIndex\r\n        } = cellPosition;\r\n        let hasValidCells = false;\r\n        const visibleColumnCount = this._getVisibleColumnCount();\r\n        while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {\r\n            const checkingPosition = {\r\n                columnIndex: ++columnIndex,\r\n                rowIndex: cellPosition.rowIndex\r\n            };\r\n            hasValidCells = this._isCellByPositionValid(checkingPosition)\r\n        }\r\n        return hasValidCells\r\n    },\r\n    _isLastValidCell(cellPosition) {\r\n        const nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\r\n        const {\r\n            rowIndex: rowIndex\r\n        } = cellPosition;\r\n        const checkingPosition = {\r\n            columnIndex: nextColumnIndex,\r\n            rowIndex: rowIndex\r\n        };\r\n        const visibleRows = this._dataController.getVisibleRows();\r\n        const row = visibleRows && visibleRows[rowIndex];\r\n        const isLastRow = this._isLastRow(rowIndex);\r\n        if (!isLastRow) {\r\n            return false\r\n        }\r\n        if (row && \"group\" === row.rowType && cellPosition.columnIndex > 0) {\r\n            return true\r\n        }\r\n        if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\r\n            return true\r\n        }\r\n        if (this._isCellByPositionValid(checkingPosition)) {\r\n            return false\r\n        }\r\n        return this._isLastValidCell(checkingPosition)\r\n    },\r\n    _isCellValid($cell, isClick) {\r\n        if (isElementDefined($cell)) {\r\n            const rowsView = this.getView(\"rowsView\");\r\n            const $row = $cell.parent();\r\n            const columnsController = this._columnsController;\r\n            const columnIndex = rowsView.getCellIndex($cell) + columnsController.getColumnIndexOffset();\r\n            const column = columnsController.getVisibleColumns(null, true)[columnIndex];\r\n            const visibleColumnCount = this._getVisibleColumnCount();\r\n            const editingController = this._editingController;\r\n            const isMasterDetailRow = isDetailRow($row);\r\n            const isShowWhenGrouped = column && column.showWhenGrouped;\r\n            const isDataCell = column && !$cell.hasClass(\"dx-command-expand\") && isDataRow($row);\r\n            const isValidGroupSpaceColumn = function() {\r\n                return !isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\")) > 1\r\n            };\r\n            const isDragCell = GridCoreKeyboardNavigationDom.isDragCell($cell);\r\n            if (isDragCell) {\r\n                return false\r\n            }\r\n            if (this._isMasterDetailCell($cell)) {\r\n                return true\r\n            }\r\n            if (visibleColumnCount > columnIndex && isValidGroupSpaceColumn()) {\r\n                const rowItems = this._dataController.items();\r\n                const visibleRowIndex = rowsView.getRowIndex($row);\r\n                const row = rowItems[visibleRowIndex];\r\n                const isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\r\n                const isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\r\n                const isEditing = isRowEditingInCurrentRow || isCellEditing;\r\n                if (column.command) {\r\n                    if (this._isLegacyNavigation()) {\r\n                        return !isEditing && \"expand\" === column.command\r\n                    }\r\n                    if (isCellEditing) {\r\n                        return false\r\n                    }\r\n                    if (isRowEditingInCurrentRow) {\r\n                        return \"select\" !== column.command\r\n                    }\r\n                    return !isEditing\r\n                }\r\n                if (isCellEditing && row && \"data\" !== row.rowType) {\r\n                    return false\r\n                }\r\n                return !isEditing || column.allowEditing || isClick\r\n            }\r\n        }\r\n    },\r\n    getFirstValidCellInRow($row, columnIndex) {\r\n        const that = this;\r\n        const $cells = $row.find(\"> td\");\r\n        let $cell;\r\n        let $result;\r\n        columnIndex = columnIndex || 0;\r\n        for (let i = columnIndex; i < $cells.length; ++i) {\r\n            $cell = $cells.eq(i);\r\n            if (that._isCellValid($cell)) {\r\n                $result = $cell;\r\n                break\r\n            }\r\n        }\r\n        return $result\r\n    },\r\n    _getNextCell(keyCode, elementType, cellPosition) {\r\n        const focusedCellPosition = cellPosition || this._focusedCellPosition;\r\n        const isRowFocusType = this.isRowFocusType();\r\n        const includeCommandCells = isRowFocusType || [\"next\", \"previous\"].includes(keyCode);\r\n        let $cell;\r\n        let $row;\r\n        if (this._focusedView && focusedCellPosition) {\r\n            const newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\r\n            $cell = $(this._getCell(newFocusedCellPosition));\r\n            const isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);\r\n            if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\r\n                if (isRowFocusType) {\r\n                    $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex)\r\n                } else {\r\n                    $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition)\r\n                }\r\n            }\r\n            $row = isElementDefined($cell) && $cell.parent();\r\n            if (this._hasSkipRow($row)) {\r\n                const rowIndex = this._getRowIndex($row);\r\n                if (!this._isLastRow(rowIndex)) {\r\n                    $cell = this._getNextCell(keyCode, \"row\", {\r\n                        columnIndex: focusedCellPosition.columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n            return isElementDefined($cell) ? $cell : null\r\n        }\r\n        return null\r\n    },\r\n    _startEditing(eventArgs, fastEditingKey) {\r\n        const focusedCellPosition = this._focusedCellPosition;\r\n        const visibleRowIndex = this.getVisibleRowIndex();\r\n        const visibleColumnIndex = this.getVisibleColumnIndex();\r\n        const row = this._dataController.items()[visibleRowIndex];\r\n        const column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\r\n        if (this._isAllowEditing(row, column)) {\r\n            if (this._isRowEditMode()) {\r\n                this._editingController.editRow(visibleRowIndex)\r\n            } else if (focusedCellPosition) {\r\n                this._startEditCell(eventArgs, fastEditingKey)\r\n            }\r\n        }\r\n    },\r\n    _isAllowEditing(row, column) {\r\n        return this._editingController.allowUpdating({\r\n            row: row\r\n        }) && column && column.allowEditing\r\n    },\r\n    _editFocusedCell() {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const colIndex = this.getVisibleColumnIndex();\r\n        return this._editingController.editCell(rowIndex, colIndex)\r\n    },\r\n    _startEditCell(eventArgs, fastEditingKey) {\r\n        this._fastEditingStarted = isDefined(fastEditingKey);\r\n        const editResult = this._editFocusedCell();\r\n        if (this._isFastEditingStarted()) {\r\n            if (true === editResult) {\r\n                this._editingCellHandler(eventArgs, fastEditingKey)\r\n            } else if (editResult && editResult.done) {\r\n                const editorValue = \"delete\" !== fastEditingKey ? fastEditingKey : \"\";\r\n                editResult.done(() => this._editingCellHandler(eventArgs, editorValue))\r\n            }\r\n        }\r\n    },\r\n    _editingCellHandler(eventArgs, editorValue) {\r\n        var _a, _b;\r\n        const $input = this._getFocusedCell().find(INTERACTIVE_ELEMENTS_SELECTOR).eq(0);\r\n        const keyDownEvent = createEvent(eventArgs, {\r\n            type: \"keydown\",\r\n            target: $input.get(0)\r\n        });\r\n        const keyPressEvent = createEvent(eventArgs, {\r\n            type: \"keypress\",\r\n            target: $input.get(0)\r\n        });\r\n        const inputEvent = createEvent(eventArgs, {\r\n            type: \"input\",\r\n            target: $input.get(0)\r\n        });\r\n        if (inputEvent.originalEvent) {\r\n            inputEvent.originalEvent = createEvent(inputEvent.originalEvent, {\r\n                data: editorValue\r\n            })\r\n        }\r\n        null === (_b = (_a = $input.get(0)).select) || void 0 === _b ? void 0 : _b.call(_a);\r\n        eventsEngine.trigger($input, keyDownEvent);\r\n        if (!keyDownEvent.isDefaultPrevented()) {\r\n            eventsEngine.trigger($input, keyPressEvent);\r\n            if (!keyPressEvent.isDefaultPrevented()) {\r\n                const timeout = browser.mozilla ? 25 : 0;\r\n                setTimeout(() => {\r\n                    $input.val(editorValue);\r\n                    const $widgetContainer = $input.closest(\".dx-widget\");\r\n                    eventsEngine.off($widgetContainer, \"focusout\");\r\n                    eventsEngine.one($widgetContainer, \"focusout\", () => {\r\n                        eventsEngine.trigger($input, \"change\")\r\n                    });\r\n                    eventsEngine.trigger($input, inputEvent)\r\n                }, timeout)\r\n            }\r\n        }\r\n    },\r\n    _fireFocusChangingEvents($event, $cell, fireRowEvent, isHighlighted) {\r\n        let args = {};\r\n        const cellPosition = this._getCellPosition($cell) || {};\r\n        if (this.isCellFocusType()) {\r\n            args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\r\n            if (!args.cancel) {\r\n                cellPosition.columnIndex = args.newColumnIndex;\r\n                cellPosition.rowIndex = args.newRowIndex;\r\n                isHighlighted = args.isHighlighted;\r\n                $cell = $(this._getCell(cellPosition))\r\n            }\r\n        }\r\n        if (!args.cancel && fireRowEvent && $cell) {\r\n            args = this._fireFocusedRowChanging($event, $cell.parent());\r\n            if (!args.cancel) {\r\n                cellPosition.rowIndex = args.newRowIndex;\r\n                args.isHighlighted = isHighlighted\r\n            }\r\n        }\r\n        args.$newCellElement = $(this._getCell(cellPosition));\r\n        if (!args.$newCellElement.length) {\r\n            args.$newCellElement = $cell\r\n        }\r\n        return args\r\n    },\r\n    _fireFocusedCellChanging($event, $cellElement, isHighlighted) {\r\n        const prevCellIndex = this.option(\"focusedColumnIndex\");\r\n        const prevRowIndex = this.option(\"focusedRowIndex\");\r\n        const cellPosition = this._getCellPosition($cellElement);\r\n        const columnIndex = cellPosition ? cellPosition.columnIndex : -1;\r\n        const rowIndex = cellPosition ? cellPosition.rowIndex : -1;\r\n        const args = {\r\n            cellElement: $cellElement,\r\n            prevColumnIndex: prevCellIndex,\r\n            prevRowIndex: prevRowIndex,\r\n            newColumnIndex: columnIndex,\r\n            newRowIndex: rowIndex,\r\n            rows: this._dataController.getVisibleRows(),\r\n            columns: this._columnsController.getVisibleColumns(),\r\n            event: $event,\r\n            isHighlighted: isHighlighted || false,\r\n            cancel: false\r\n        };\r\n        this._canceledCellPosition = null;\r\n        this.executeAction(\"onFocusedCellChanging\", args);\r\n        if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\r\n            args.$newCellElement = $(this._getCell({\r\n                columnIndex: args.newColumnIndex,\r\n                rowIndex: args.newRowIndex\r\n            }))\r\n        }\r\n        if (args.cancel) {\r\n            this._canceledCellPosition = {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            }\r\n        }\r\n        return args\r\n    },\r\n    _fireFocusedCellChanged($cellElement, prevCellIndex, prevRowIndex) {\r\n        const that = this;\r\n        const dataController = that._dataController;\r\n        const columnIndex = that.getView(\"rowsView\").getCellIndex($cellElement);\r\n        const rowIndex = this._getRowIndex($cellElement && $cellElement.parent());\r\n        const localRowIndex = Math.min(rowIndex - dataController.getRowIndexOffset(), dataController.items().length - 1);\r\n        const isEditingCell = that._editingController.isEditCell(localRowIndex, columnIndex);\r\n        const row = dataController.items()[localRowIndex];\r\n        if (!isEditingCell && (prevCellIndex !== columnIndex || prevRowIndex !== rowIndex)) {\r\n            that.executeAction(\"onFocusedCellChanged\", {\r\n                cellElement: $cellElement,\r\n                columnIndex: columnIndex,\r\n                rowIndex: rowIndex,\r\n                row: row,\r\n                column: that._columnsController.getVisibleColumns()[columnIndex]\r\n            })\r\n        }\r\n    },\r\n    _fireFocusedRowChanging(eventArgs, $newFocusedRow) {\r\n        const newRowIndex = this._getRowIndex($newFocusedRow);\r\n        const dataController = this._dataController;\r\n        const prevFocusedRowIndex = this.option(\"focusedRowIndex\");\r\n        const loadingOperationTypes = dataController.loadingOperationTypes();\r\n        const args = {\r\n            rowElement: $newFocusedRow,\r\n            prevRowIndex: prevFocusedRowIndex,\r\n            newRowIndex: newRowIndex,\r\n            event: eventArgs,\r\n            rows: dataController.getVisibleRows(),\r\n            cancel: false\r\n        };\r\n        if (!dataController || dataController.isLoading() && (loadingOperationTypes.reload || loadingOperationTypes.paging)) {\r\n            args.cancel = true;\r\n            return args\r\n        }\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            this.executeAction(\"onFocusedRowChanging\", args);\r\n            if (!args.cancel && args.newRowIndex !== newRowIndex) {\r\n                args.resetFocusedRow = args.newRowIndex < 0;\r\n                if (!args.resetFocusedRow) {\r\n                    this.setFocusedRowIndex(args.newRowIndex)\r\n                }\r\n                args.rowIndexChanged = true\r\n            }\r\n        }\r\n        return args\r\n    },\r\n    _fireFocusedRowChanged($rowElement) {\r\n        let row;\r\n        const focusedRowKey = this.option(\"focusedRowKey\");\r\n        const focusController = this.getController(\"focus\");\r\n        const focusedRowIndex = null === focusController || void 0 === focusController ? void 0 : focusController.getFocusedRowIndexByKey(focusedRowKey);\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            if (focusedRowIndex >= 0) {\r\n                const dataController = this._dataController;\r\n                row = focusedRowIndex >= 0 && dataController.getVisibleRows()[focusedRowIndex - dataController.getRowIndexOffset()]\r\n            }\r\n            this.executeAction(\"onFocusedRowChanged\", {\r\n                rowElement: $rowElement,\r\n                rowIndex: focusedRowIndex,\r\n                row: row\r\n            })\r\n        }\r\n    },\r\n    _isEventInCurrentGrid(event) {\r\n        return gridCoreUtils.isElementInCurrentGrid(this, $(event.target))\r\n    },\r\n    _isRowEditMode() {\r\n        const editMode = this._editingController.getEditMode();\r\n        return \"row\" === editMode || \"form\" === editMode\r\n    },\r\n    _isCellEditMode() {\r\n        const editMode = this._editingController.getEditMode();\r\n        return \"cell\" === editMode || \"batch\" === editMode\r\n    },\r\n    _isFastEditingAllowed() {\r\n        return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\")\r\n    },\r\n    _getInteractiveElement($cell, isLast) {\r\n        const $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\r\n        return isLast ? $focusedElement.last() : $focusedElement.first()\r\n    },\r\n    _applyTabIndexToElement($element) {\r\n        const tabIndex = this.option(\"tabIndex\") || 0;\r\n        $element.attr(\"tabindex\", isDefined(tabIndex) ? tabIndex : 0)\r\n    },\r\n    _getCell(cellPosition) {\r\n        if (this._focusedView && cellPosition) {\r\n            const rowIndexOffset = this._dataController.getRowIndexOffset();\r\n            const column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];\r\n            const columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();\r\n            const rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;\r\n            const columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;\r\n            return this._focusedView.getCell({\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            })\r\n        }\r\n    },\r\n    _getRowIndex($row) {\r\n        const rowsView = this.getView(\"rowsView\");\r\n        let rowIndex = rowsView.getRowIndex($row);\r\n        if (rowIndex >= 0) {\r\n            rowIndex += this._dataController.getRowIndexOffset()\r\n        }\r\n        return rowIndex\r\n    },\r\n    _hasSkipRow($row) {\r\n        const row = $row && $row.get(0);\r\n        return row && (\"none\" === row.style.display || $row.hasClass(this.addWidgetPrefix(\"group-footer\")) || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(\"edit-form\")))\r\n    },\r\n    _allowEditingOnEnterKey() {\r\n        return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\")\r\n    },\r\n    _isLegacyNavigation() {\r\n        return this.option(\"useLegacyKeyboardNavigation\")\r\n    },\r\n    _getDirectionCodeByKey(key) {\r\n        let directionCode;\r\n        switch (key) {\r\n            case \"upArrow\":\r\n                directionCode = \"prevRow\";\r\n                break;\r\n            case \"downArrow\":\r\n                directionCode = \"nextRow\";\r\n                break;\r\n            case \"leftArrow\":\r\n                directionCode = this.option(\"rtlEnabled\") ? \"nextInRow\" : \"previousInRow\";\r\n                break;\r\n            case \"rightArrow\":\r\n                directionCode = this.option(\"rtlEnabled\") ? \"previousInRow\" : \"nextInRow\"\r\n        }\r\n        return directionCode\r\n    },\r\n    _isVirtualScrolling() {\r\n        const scrollingMode = this.option(\"scrolling.mode\");\r\n        return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode\r\n    },\r\n    _isVirtualRowRender() {\r\n        return this._isVirtualScrolling() || gridCoreUtils.isVirtualRowRendering(this)\r\n    },\r\n    _isVirtualColumnRender() {\r\n        return \"virtual\" === this.option(\"scrolling.columnRenderingMode\")\r\n    },\r\n    _scrollBy(left, top, rowIndex, $event) {\r\n        const that = this;\r\n        const scrollable = this.getView(\"rowsView\").getScrollable();\r\n        if (that._focusedCellPosition) {\r\n            const scrollHandler = function() {\r\n                scrollable.off(\"scroll\", scrollHandler);\r\n                setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event))\r\n            };\r\n            scrollable.on(\"scroll\", scrollHandler)\r\n        }\r\n        return scrollable.scrollBy({\r\n            left: left,\r\n            top: top\r\n        })\r\n    },\r\n    _isInsideEditForm(element) {\r\n        const $editForm = $(element).closest(\".\" + this.addWidgetPrefix(\"edit-form\"));\r\n        return $editForm.length && this.elementIsInsideGrid($editForm)\r\n    },\r\n    _isMasterDetailCell(element) {\r\n        const $masterDetailCell = $(element).closest(\".dx-master-detail-cell\");\r\n        return $masterDetailCell.length && this.elementIsInsideGrid($masterDetailCell)\r\n    },\r\n    _processNextCellInMasterDetail($nextCell) {\r\n        if (!this._isInsideEditForm($nextCell) && $nextCell) {\r\n            this._applyTabIndexToElement($nextCell)\r\n        }\r\n    },\r\n    _handleTabKeyOnMasterDetailCell(target, direction) {\r\n        if (this._isMasterDetailCell(target)) {\r\n            this._updateFocusedCellPosition($(target), direction);\r\n            const $nextCell = this._getNextCell(direction, \"row\");\r\n            this._processNextCellInMasterDetail($nextCell, $(target));\r\n            return true\r\n        }\r\n        return false\r\n    },\r\n    _getElementType: target => $(target).is(\"tr\") ? \"row\" : \"cell\",\r\n    _isFastEditingStarted() {\r\n        return this._isFastEditingAllowed() && this._fastEditingStarted\r\n    },\r\n    _getVisibleColumnCount() {\r\n        return this._columnsController.getVisibleColumns(null, true).length\r\n    },\r\n    _isCellInRow(cellPosition, includeCommandCells) {\r\n        const {\r\n            columnIndex: columnIndex\r\n        } = cellPosition;\r\n        const visibleColumnsCount = this._getVisibleColumnCount();\r\n        return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1\r\n    },\r\n    _isCellElement: $element => $element.length && \"TD\" === $element[0].tagName,\r\n    _getCellElementFromTarget(target) {\r\n        const elementType = this._getElementType(target);\r\n        const $targetElement = $(target);\r\n        let $cell;\r\n        if (\"cell\" === elementType) {\r\n            $cell = $targetElement.closest(\".dx-row > td\")\r\n        } else {\r\n            $cell = $targetElement.children().not(\".dx-command-expand\").first()\r\n        }\r\n        return $cell\r\n    },\r\n    _getRowsViewElement() {\r\n        const rowsView = this.getView(\"rowsView\");\r\n        return rowsView && rowsView.element()\r\n    },\r\n    isKeyboardEnabled() {\r\n        return this.option(\"keyboardNavigation.enabled\")\r\n    },\r\n    _processCanceledEditCellPosition(rowIndex, columnIndex) {\r\n        if (this._canceledCellPosition) {\r\n            const isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\r\n            this._canceledCellPosition = null;\r\n            return isCanceled\r\n        }\r\n        return\r\n    },\r\n    updateFocusedRowIndex() {\r\n        const dataController = this._dataController;\r\n        const visibleRowIndex = this.getVisibleRowIndex();\r\n        const visibleItems = dataController.items();\r\n        const lastVisibleIndex = visibleItems.length ? visibleItems.length - 1 : -1;\r\n        const rowIndexOffset = dataController.getRowIndexOffset();\r\n        lastVisibleIndex >= 0 && visibleRowIndex > lastVisibleIndex && this.setFocusedRowIndex(lastVisibleIndex + rowIndexOffset)\r\n    }\r\n};\r\nconst KeyboardNavigationController = core.ViewController.inherit(keyboardNavigationMembers);\r\nexport const keyboardNavigationModule = {\r\n    defaultOptions: () => ({\r\n        useLegacyKeyboardNavigation: false,\r\n        keyboardNavigation: {\r\n            enabled: true,\r\n            enterKeyAction: \"startEdit\",\r\n            enterKeyDirection: \"none\",\r\n            editOnKeyPress: false\r\n        }\r\n    }),\r\n    controllers: {\r\n        keyboardNavigation: KeyboardNavigationController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: {\r\n                _rowClick(e) {\r\n                    const editRowIndex = this.getController(\"editing\").getEditRowIndex();\r\n                    const keyboardController = this.getController(\"keyboardNavigation\");\r\n                    const isKeyboardEnabled = keyboardController.isKeyboardEnabled();\r\n                    if (editRowIndex === e.rowIndex) {\r\n                        keyboardController.setCellFocusType()\r\n                    }\r\n                    const needTriggerPointerEventHandler = (isMobile() || !isKeyboardEnabled) && this.option(\"focusedRowEnabled\");\r\n                    if (needTriggerPointerEventHandler) {\r\n                        this._triggerPointerDownEventHandler(e, !isKeyboardEnabled)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _triggerPointerDownEventHandler(e, force) {\r\n                    const {\r\n                        originalEvent: originalEvent\r\n                    } = e.event;\r\n                    if (originalEvent) {\r\n                        const keyboardController = this.getController(\"keyboardNavigation\");\r\n                        const $cell = $(originalEvent.target);\r\n                        const columnIndex = this.getCellIndex($cell);\r\n                        const column = this.getController(\"columns\").getVisibleColumns()[columnIndex];\r\n                        const row = this.getController(\"data\").items()[e.rowIndex];\r\n                        if (keyboardController._isAllowEditing(row, column) || force) {\r\n                            const eventArgs = createEvent(originalEvent, {\r\n                                currentTarget: originalEvent.target\r\n                            });\r\n                            keyboardController._pointerEventHandler(eventArgs)\r\n                        }\r\n                    }\r\n                },\r\n                renderFocusState(params) {\r\n                    const {\r\n                        preventScroll: preventScroll,\r\n                        pageSizeChanged: pageSizeChanged\r\n                    } = null !== params && void 0 !== params ? params : {};\r\n                    const keyboardController = this.getController(\"keyboardNavigation\");\r\n                    const $rowsViewElement = this.element();\r\n                    if ($rowsViewElement && !focused($rowsViewElement)) {\r\n                        $rowsViewElement.attr(\"tabindex\", null)\r\n                    }\r\n                    pageSizeChanged && keyboardController.updateFocusedRowIndex();\r\n                    let rowIndex = keyboardController.getVisibleRowIndex();\r\n                    if (!isDefined(rowIndex) || rowIndex < 0) {\r\n                        rowIndex = 0\r\n                    }\r\n                    const cellElements = this.getCellElements(rowIndex);\r\n                    if (keyboardController.isKeyboardEnabled() && cellElements.length) {\r\n                        this.updateFocusElementTabIndex(cellElements, preventScroll)\r\n                    }\r\n                },\r\n                updateFocusElementTabIndex(cellElements) {\r\n                    const keyboardController = this.getController(\"keyboardNavigation\");\r\n                    const $row = cellElements.eq(0).parent();\r\n                    if (isGroupRow($row)) {\r\n                        keyboardController._applyTabIndexToElement($row)\r\n                    } else {\r\n                        let columnIndex = keyboardController.getColumnIndex();\r\n                        if (!isDefined(columnIndex) || columnIndex < 0) {\r\n                            columnIndex = 0\r\n                        }\r\n                        this._updateFocusedCellTabIndex(cellElements, columnIndex)\r\n                    }\r\n                },\r\n                _updateFocusedCellTabIndex(cellElements, columnIndex) {\r\n                    const keyboardController = this.getController(\"keyboardNavigation\");\r\n                    const cellElementsLength = cellElements ? cellElements.length : -1;\r\n                    const updateCellTabIndex = function($cell) {\r\n                        const isMasterDetailCell = keyboardController._isMasterDetailCell($cell);\r\n                        const isValidCell = keyboardController._isCellValid($cell);\r\n                        if (!isMasterDetailCell && isValidCell && keyboardController._isCellElement($cell)) {\r\n                            keyboardController._applyTabIndexToElement($cell);\r\n                            keyboardController.setCellFocusType();\r\n                            return true\r\n                        }\r\n                        return\r\n                    };\r\n                    const $cell = GridCoreKeyboardNavigationDom.getCellToFocus(cellElements, columnIndex);\r\n                    if ($cell.length) {\r\n                        updateCellTabIndex($cell)\r\n                    } else {\r\n                        if (cellElementsLength <= columnIndex) {\r\n                            columnIndex = cellElementsLength - 1\r\n                        }\r\n                        for (let i = columnIndex; i < cellElementsLength; ++i) {\r\n                            if (updateCellTabIndex($(cellElements[i]))) {\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                renderDelayedTemplates(change) {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._renderFocusByChange(change)\r\n                },\r\n                _renderFocusByChange(change) {\r\n                    const {\r\n                        operationTypes: operationTypes,\r\n                        repaintChangesOnly: repaintChangesOnly\r\n                    } = null !== change && void 0 !== change ? change : {};\r\n                    const {\r\n                        fullReload: fullReload,\r\n                        pageSize: pageSize\r\n                    } = null !== operationTypes && void 0 !== operationTypes ? operationTypes : {};\r\n                    if (!change || !repaintChangesOnly || fullReload || pageSize) {\r\n                        const preventScroll = shouldPreventScroll(this);\r\n                        this.renderFocusState({\r\n                            preventScroll: preventScroll,\r\n                            pageSizeChanged: pageSize\r\n                        })\r\n                    }\r\n                },\r\n                _renderCore(change) {\r\n                    const deferred = this.callBase.apply(this, arguments);\r\n                    this._renderFocusByChange(change);\r\n                    return deferred\r\n                },\r\n                _editCellPrepared($cell) {\r\n                    const editorInstance = this._getEditorInstance($cell);\r\n                    const keyboardController = this.getController(\"keyboardNavigation\");\r\n                    const isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();\r\n                    if (editorInstance && isEditingNavigationMode) {\r\n                        this._handleEditingNavigationMode(editorInstance)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _handleEditingNavigationMode(editorInstance) {\r\n                    [\"downArrow\", \"upArrow\"].forEach(keyName => {\r\n                        const originalKeyHandler = editorInstance._supportedKeys()[keyName];\r\n                        editorInstance.registerKeyHandler(keyName, e => {\r\n                            const isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\r\n                            if (isDropDownOpened) {\r\n                                return originalKeyHandler && originalKeyHandler.call(editorInstance, e)\r\n                            }\r\n                        })\r\n                    });\r\n                    editorInstance.registerKeyHandler(\"leftArrow\", noop);\r\n                    editorInstance.registerKeyHandler(\"rightArrow\", noop);\r\n                    const isDateBoxWithMask = \"dxDateBox\" === editorInstance.NAME && editorInstance.option(\"useMaskBehavior\");\r\n                    if (isDateBoxWithMask) {\r\n                        editorInstance.registerKeyHandler(\"enter\", noop)\r\n                    }\r\n                },\r\n                _getEditorInstance($cell) {\r\n                    const $editor = $cell.find(\".dx-texteditor\").eq(0);\r\n                    return gridCoreUtils.getWidgetInstance($editor)\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            editing: {\r\n                editCell(rowIndex, columnIndex) {\r\n                    const keyboardController = this.getController(\"keyboardNavigation\");\r\n                    if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\r\n                        return false\r\n                    }\r\n                    const isCellEditing = this.callBase(rowIndex, columnIndex);\r\n                    if (isCellEditing) {\r\n                        keyboardController.setupFocusedView()\r\n                    }\r\n                    return isCellEditing\r\n                },\r\n                editRow(rowIndex) {\r\n                    const keyboardController = this.getController(\"keyboardNavigation\");\r\n                    const visibleColumnIndex = keyboardController.getVisibleColumnIndex();\r\n                    const column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\r\n                    if (column && column.type || \"form\" === this.option(\"editing.mode\")) {\r\n                        keyboardController._resetFocusedCell()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                addRow(parentKey) {\r\n                    const keyboardController = this.getController(\"keyboardNavigation\");\r\n                    keyboardController.setupFocusedView();\r\n                    keyboardController.setCellFocusType();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                getFocusedCellInRow(rowIndex) {\r\n                    const keyboardNavigationController = this.getController(\"keyboardNavigation\");\r\n                    let $cell = this.callBase(rowIndex);\r\n                    if (keyboardNavigationController.isKeyboardEnabled() && keyboardNavigationController._focusedCellPosition.rowIndex === rowIndex) {\r\n                        const $focusedCell = keyboardNavigationController._getFocusedCell();\r\n                        if (isElementDefined($focusedCell) && !$focusedCell.hasClass(\"dx-command-edit\")) {\r\n                            $cell = $focusedCell\r\n                        }\r\n                    }\r\n                    return $cell\r\n                },\r\n                _processCanceledEditingCell() {\r\n                    this.closeEditCell().done(() => {\r\n                        const keyboardNavigation = this.getController(\"keyboardNavigation\");\r\n                        keyboardNavigation._updateFocus()\r\n                    })\r\n                },\r\n                init() {\r\n                    this.callBase();\r\n                    this._keyboardNavigationController = this.getController(\"keyboardNavigation\")\r\n                },\r\n                closeEditCell() {\r\n                    const keyboardNavigation = this._keyboardNavigationController;\r\n                    keyboardNavigation._fastEditingStarted = false;\r\n                    const result = this.callBase.apply(this, arguments);\r\n                    keyboardNavigation._updateFocus();\r\n                    return result\r\n                },\r\n                _delayedInputFocus() {\r\n                    this._keyboardNavigationController._isNeedScroll = true;\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _isEditingStart() {\r\n                    const keyboardNavigation = this.getController(\"keyboardNavigation\");\r\n                    const cancel = this.callBase.apply(this, arguments);\r\n                    if (cancel && !keyboardNavigation._isNeedFocus) {\r\n                        const $cell = keyboardNavigation._getFocusedCell();\r\n                        keyboardNavigation._focus($cell, true)\r\n                    }\r\n                    return cancel\r\n                }\r\n            },\r\n            data: {\r\n                _correctRowIndices(getRowIndexCorrection) {\r\n                    const keyboardNavigationController = this.getController(\"keyboardNavigation\");\r\n                    const editorFactory = this.getController(\"editorFactory\");\r\n                    const focusedCellPosition = keyboardNavigationController._focusedCellPosition;\r\n                    this.callBase.apply(this, arguments);\r\n                    if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\r\n                        const focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\r\n                        if (focusedRowIndexCorrection) {\r\n                            focusedCellPosition.rowIndex += focusedRowIndexCorrection;\r\n                            editorFactory.refocus()\r\n                        }\r\n                    }\r\n                },\r\n                getMaxRowIndex() {\r\n                    let result = this.items().length - 1;\r\n                    const virtualItemsCount = this.virtualItemsCount();\r\n                    if (virtualItemsCount) {\r\n                        const rowIndexOffset = this.getRowIndexOffset();\r\n                        result += rowIndexOffset + virtualItemsCount.end\r\n                    }\r\n                    return result\r\n                }\r\n            },\r\n            adaptiveColumns: {\r\n                _showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $cells,\r\n                    isCommandColumn: isCommandColumn\r\n                }) {\r\n                    this.callBase.apply(this, arguments);\r\n                    \"columnHeadersView\" === viewName && !isCommandColumn && $cells.each((_, cellElement) => {\r\n                        const $cell = $(cellElement);\r\n                        isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0)\r\n                    })\r\n                },\r\n                _hideVisibleCellInView({\r\n                    viewName: viewName,\r\n                    $cell: $cell,\r\n                    isCommandColumn: isCommandColumn\r\n                }) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (\"columnHeadersView\" === viewName && !isCommandColumn && isCellInHeaderRow($cell)) {\r\n                        $cell.removeAttr(\"tabindex\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,cAAc,EACdC,SAAS,EACTC,QAAQ,EACRC,aAAa,QACV,6BAA6B;AACpC,OAAOC,CAAC,MAAM,mCAAmC;AACjD,OAAOC,UAAU,MAAM,sCAAsC;AAC7D,OAAOC,YAAY,MAAM,+CAA+C;AACxE,SACIC,SAAS,EACTC,aAAa,QACV,qCAAqC;AAC5C,SACIC,OAAO,QACJ,iCAAiC;AACxC,SACIC,YAAY,EACZC,WAAW,EACXC,mBAAmB,QAChB,wCAAwC;AAC/C,OAAOC,aAAa,MAAM,4BAA4B;AACtD,SACIC,IAAI,IAAIC,cAAc,QACnB,kCAAkC;AACzC,SACIC,IAAI,QACD,uCAAuC;AAC9C,OAAO,KAAKC,aAAa,MAAM,qCAAqC;AACpE,OAAOC,OAAO,MAAM,gCAAgC;AACpD,SACIC,QAAQ,QACL,0BAA0B;AACjC,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,IAAI,MAAM,YAAY;AAC7B,SACIC,6BAA6B,QAC1B,OAAO;AACd,MAAMC,eAAe,GAAG,UAAU;AAClC,MAAMC,eAAe,GAAG,WAAW;AACnC,MAAMC,kBAAkB,GAAG,cAAc;AACzC,MAAMC,SAAS,GAAG,QAAQ;AAC1B,MAAMC,cAAc,GAAG,aAAa;AACpC,MAAMC,eAAe,GAAG,cAAc;AACtC,MAAMC,gBAAgB,GAAG,eAAe;AACxC,MAAMC,oBAAoB,GAAG,gBAAgB;AAC7C,MAAMC,uBAAuB,GAAG,sBAAsB;AACtD,MAAMC,mBAAmB,GAAG,kBAAkB;AAC9C,MAAMC,iBAAiB,GAAG,gBAAgB;AAC1C,MAAMC,wBAAwB,GAAG,uBAAuB;AACxD,MAAMC,iBAAiB,GAAG,gBAAgB;AAC1C,MAAMC,6BAA6B,GAAG,2BAA2B;AACjE,MAAMC,oBAAoB,GAAG,mBAAmB;AAChD,MAAMC,oBAAoB,GAAG,mBAAmB;AAChD,MAAMC,kBAAkB,GAAG,iBAAiB;AAC5C,MAAMC,qBAAqB,GAAG,qBAAqB;AACnD,MAAMC,yBAAyB,GAAG,wBAAwB;AAC1D,MAAMC,mBAAmB,GAAG,WAAW;AACvC,MAAMC,iBAAiB,GAAG,kBAAkB;AAC5C,MAAMC,YAAY,GAAG,WAAW;AAChC,MAAMC,mBAAmB,GAAG,kBAAkB;AAC9C,MAAMC,uBAAuB,GAAG,QAAQ;AACxC,MAAMC,6BAA6B,GAAG,mFAAmF;AACzH,MAAMC,+BAA+B,GAAGD,6BAA6B,GAAG,2BAA2B;AACnG,MAAME,aAAa,GAAG,KAAK;AAC3B,MAAMC,cAAc,GAAG,MAAM;AAC7B,MAAMC,eAAe,GAAG,OAAO;AAC/B,MAAMC,cAAc,GAAG,MAAM;AAC7B,MAAMC,cAAc,GAAG,KAAK;AAC5B,MAAMC,eAAe,GAAG,MAAM;AAC9B,MAAMC,mBAAmB,GAAG,mBAAmB;AAC/C,MAAMC,eAAe,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC;AAEnD,SAASC,UAAUA,CAACC,IAAI,EAAE;EACtB,OAAOA,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,cAAc,CAAC;AAChD;AAEA,SAASC,WAAWA,CAACF,IAAI,EAAE;EACvB,OAAOA,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,sBAAsB,CAAC;AACxD;AAEA,SAASE,SAASA,CAACH,IAAI,EAAE;EACrB,OAAOA,IAAI,IAAI,CAACD,UAAU,CAACC,IAAI,CAAC,IAAI,CAACE,WAAW,CAACF,IAAI,CAAC;AAC1D;AAEA,SAASI,eAAeA,CAACJ,IAAI,EAAE;EAC3B,OAAO,CAACA,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,kBAAkB,CAAC,IAAID,IAAI,CAACC,QAAQ,CAAC,gBAAgB,CAAC;AACxF;AAEA,SAASI,YAAYA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC/B,OAAO,CAACD,IAAI,CAACE,cAAc,CAAC,CAAC,IAAID,KAAK,IAAI,CAACA,KAAK,CAACN,QAAQ,CAAC,mBAAmB,CAAC,IAAIM,KAAK,CAACN,QAAQ,CAAC,gBAAgB,CAAC;AACtH;AAEA,SAASQ,gBAAgBA,CAACC,QAAQ,EAAE;EAChC,OAAO9D,SAAS,CAAC8D,QAAQ,CAAC,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC;AACrD;AAEA,SAASC,QAAQA,CAAA,EAAG;EAChB,OAAO,SAAS,KAAKnD,OAAO,CAACoD,OAAO,CAAC,CAAC,CAACC,UAAU;AACrD;AAEA,SAASC,iBAAiBA,CAACR,KAAK,EAAE;EAC9B,OAAO,CAAC,CAACA,KAAK,CAACS,MAAM,CAAC,gBAAgB,CAAC,CAACL,MAAM;AAClD;AAEA,SAASM,gCAAgCA,CAACX,IAAI,EAAEY,MAAM,EAAE;EACpD,MAAMC,UAAU,GAAGb,IAAI,CAACc,MAAM,CAAC,YAAY,CAAC;EAC5C,IAAIC,MAAM,GAAG,KAAK;EAClB,IAAIF,UAAU,EAAE;IACZE,MAAM,GAAG,EAAE,OAAO,KAAKH,MAAM,CAACI,aAAa,IAAI1E,SAAS,CAACsE,MAAM,CAACK,OAAO,CAAC,IAAI,CAAC3E,SAAS,CAACsE,MAAM,CAACI,aAAa,CAAC,CAAC;EACjH,CAAC,MAAM;IACHD,MAAM,GAAG,EAAE,CAACzE,SAAS,CAACsE,MAAM,CAACI,aAAa,CAAC,IAAI,MAAM,KAAKJ,MAAM,CAACI,aAAa,CAAC;EACnF;EACA,OAAOD,MAAM;AACjB;AAEA,SAASG,mBAAmBA,CAAClB,IAAI,EAAE;EAC/B,MAAMmB,kBAAkB,GAAGnB,IAAI,CAACoB,aAAa,CAAC,oBAAoB,CAAC;EACnE,OAAOD,kBAAkB,CAACE,mBAAmB,CAAC,CAAC,GAAGrB,IAAI,CAACc,MAAM,CAAC,iBAAiB,CAAC,KAAKK,kBAAkB,CAACG,WAAW,CAAC,CAAC,GAAG,KAAK;AACjI;AACA,MAAMC,yBAAyB,GAAG;EAC9BC,IAAIA,CAAA,EAAG;IACH,IAAI,CAACC,eAAe,GAAG,IAAI,CAACL,aAAa,CAAC,MAAM,CAAC;IACjD,IAAI,CAACM,oBAAoB,GAAG,IAAI,CAACN,aAAa,CAAC,WAAW,CAAC;IAC3D,IAAI,CAACO,kBAAkB,GAAG,IAAI,CAACP,aAAa,CAAC,SAAS,CAAC;IACvD,IAAI,CAACQ,YAAY,GAAG,IAAI,CAACC,OAAO,CAAC,aAAa,CAAC;IAC/C,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACV,aAAa,CAAC,SAAS,CAAC;IACvD,IAAI,CAACW,cAAc,GAAG,IAAI,CAACX,aAAa,CAAC,eAAe,CAAC;IACzD,IAAI,IAAI,CAACY,iBAAiB,CAAC,CAAC,EAAE;MAC1BhF,aAAa,CAACiF,yBAAyB,CAAC,CAAC;MACzC,IAAI,CAACC,mBAAmB,GAAG,IAAI;MAC/B,IAAI,CAACC,mBAAmB,GAAG,KAAK;MAChC,IAAI,CAACC,oBAAoB,GAAG,CAAC,CAAC;MAC9B,IAAI,CAACC,qBAAqB,GAAG,IAAI;MACjC,MAAMC,cAAc,GAAGlC,QAAQ,IAAI;QAC/B,IAAI,CAACmC,gBAAgB,CAAC,CAAC;QACvB,IAAI,IAAI,CAACC,aAAa,EAAE;UACpB,IAAIpC,QAAQ,CAACqC,EAAE,CAAC,UAAU,CAAC,IAAI,IAAI,CAACC,YAAY,IAAI,IAAI,CAACA,YAAY,CAACC,aAAa,EAAE;YACjF,IAAI,CAACD,YAAY,CAACE,gBAAgB,CAACxC,QAAQ,CAAC;YAC5C,IAAI,CAACoC,aAAa,GAAG,KAAK;UAC9B;QACJ;MACJ,CAAC;MACD,IAAI,CAACT,cAAc,CAACvF,OAAO,CAACqG,GAAG,CAACP,cAAc,CAAC;MAC/C,IAAI,CAACQ,iBAAiB,CAAC,CAAC;MACxB,IAAI,CAACC,qBAAqB,CAAC,CAAC;MAC5B,IAAI,CAACC,YAAY,CAAC,WAAW,CAAC;IAClC;EACJ,CAAC;EACDF,iBAAiBA,CAAA,EAAG;IAChB,MAAMG,QAAQ,GAAG,IAAI,CAACpB,OAAO,CAAC,UAAU,CAAC;IACzC,MAAMqB,oBAAoB,GAAGC,KAAK,IAAI;MAClC,MAAM/C,QAAQ,GAAGjE,CAAC,CAACgH,KAAK,CAACC,MAAM,CAAC;MAChC,MAAMC,yBAAyB,GAAGlH,CAAC,CAACgH,KAAK,CAACG,aAAa,CAAC,CAACC,OAAO,CAACN,QAAQ,CAACO,OAAO,CAAC,CAAC,CAAC,CAACnD,MAAM;MAC3F,MAAMoD,MAAM,GAAGrD,QAAQ,CAACqC,EAAE,CAAC,GAAG,CAAC;MAC/B,IAAIU,KAAK,CAACG,aAAa,IAAIG,MAAM,IAAI,CAACJ,yBAAyB,IAAI,IAAI,CAACK,qBAAqB,CAACP,KAAK,CAAC,EAAE;QAClG,IAAIQ,YAAY,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;QACzCD,YAAY,GAAG,CAACxD,gBAAgB,CAACwD,YAAY,CAAC,GAAGV,QAAQ,CAACY,eAAe,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,YAAY,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC,GAAGJ,YAAY;QACtH,IAAI,CAACvD,QAAQ,CAACmD,OAAO,CAACI,YAAY,CAAC,CAACtD,MAAM,EAAE;UACxC8C,KAAK,CAACa,cAAc,CAAC,CAAC;UACtB3H,YAAY,CAAC4H,OAAO,CAACN,YAAY,EAAE,OAAO,CAAC;QAC/C;MACJ;IACJ,CAAC;IACDV,QAAQ,CAACiB,eAAe,CAACrB,GAAG,CAACsB,CAAC,IAAI;MAC9B,MAAMC,SAAS,GAAGnB,QAAQ,CAACO,OAAO,CAAC,CAAC;MACpC,MAAMa,YAAY,GAAG,CAACF,CAAC,IAAI,SAAS,KAAKA,CAAC,CAACG,UAAU;MACrD,MAAMC,oBAAoB,GAAG,IAAI,CAAC7B,YAAY,IAAI,IAAI,CAACA,YAAY,CAAC7F,IAAI,KAAKoG,QAAQ,CAACpG,IAAI;MAC1F,IAAI2H,eAAe,GAAG,KAAK;MAC3B,MAAMC,QAAQ,GAAGN,CAAC,KAAK,QAAQ,KAAKA,CAAC,CAACG,UAAU,IAAI,SAAS,KAAKH,CAAC,CAACG,UAAU,CAAC;MAC/E,MAAMI,IAAI,GAAGvI,CAAC,CAACC,UAAU,CAACuI,WAAW,CAACP,SAAS,CAACQ,GAAG,IAAIR,SAAS,CAACQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACzE,MAAMC,eAAe,GAAGH,IAAI,CAACI,IAAI,CAAC,QAAQ,CAAC;MAC3C,MAAMC,uBAAuB,GAAG,CAACF,eAAe,CAACxE,MAAM,IAAIwE,eAAe,CAACtB,OAAO,CAACa,SAAS,CAAC,CAAC/D,MAAM;MACpGhE,YAAY,CAAC2I,GAAG,CAACZ,SAAS,EAAE,SAAS,EAAElB,oBAAoB,CAAC;MAC5D7G,YAAY,CAAC4I,EAAE,CAACb,SAAS,EAAE,SAAS,EAAElB,oBAAoB,CAAC;MAC3D,IAAI,CAACgC,wBAAwB,CAAC,CAAC;MAC/B,IAAI,CAACC,mBAAmB,CAAC,CAAC;MAC1B,IAAI,CAACC,sBAAsB,CAAC,CAAC;MAC7B,IAAIb,oBAAoB,IAAIQ,uBAAuB,EAAE;QACjDP,eAAe,GAAG,IAAI,CAACa,YAAY,GAAG,CAACZ,QAAQ,GAAG,IAAI,CAACa,cAAc,IAAIjB,YAAY,IAAI,EAAE,IAAI,KAAKF,CAAC,IAAI,KAAK,CAAC,KAAKA,CAAC,GAAG,KAAK,CAAC,GAAGA,CAAC,CAACoB,uBAAuB,CAAC;QAC3Jf,eAAe,IAAI,IAAI,CAACgB,YAAY,CAAC,IAAI,CAAC;MAC9C;IACJ,CAAC,CAAC;EACN,CAAC;EACDzC,qBAAqBA,CAAA,EAAG;IACpB,MAAM0C,QAAQ,GAAGrJ,UAAU,CAACsJ,WAAW,CAAC,CAAC;IACzC,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAAC3C,YAAY,CAACmB,CAAC,IAAI;MAChD,MAAMyB,OAAO,GAAGzJ,CAAC,CAACgI,CAAC,CAAChB,KAAK,CAACC,MAAM,CAAC;MACjC,MAAMyC,sBAAsB,GAAG,IAAI,CAACnC,qBAAqB,CAACS,CAAC,CAAChB,KAAK,CAAC,IAAIyC,OAAO,CAACrC,OAAO,CAAC,GAAG,GAAG,IAAI,CAACuC,eAAe,CAAC,UAAU,CAAC,CAAC,CAACzF,MAAM;MACpI,MAAM0F,eAAe,GAAGH,OAAO,CAACrC,OAAO,CAAC,4BAA4B,CAAC,CAAClD,MAAM;MAC5E,MAAM2F,wBAAwB,GAAG,IAAI,CAAC5E,aAAa,CAAC,gBAAgB,CAAC;MACrE,MAAM6E,gBAAgB,GAAG,CAAC,CAACD,wBAAwB,IAAIA,wBAAwB,CAACE,UAAU,CAAC,CAAC;MAC5F,IAAI,CAACL,sBAAsB,IAAI,CAACE,eAAe,IAAI,CAACE,gBAAgB,EAAE;QAClE,MAAME,uBAAuB,GAAG,IAAI,CAACzD,YAAY,GAAGkD,OAAO,CAACQ,OAAO,CAAC,CAAC,CAACtC,MAAM,CAAC,IAAI,CAACpB,YAAY,CAACc,OAAO,CAAC,CAAC,CAAC,CAACnD,MAAM,GAAG,CAAC,GAAG,KAAK;QAC5H,CAAC8F,uBAAuB,IAAI,IAAI,CAACE,iBAAiB,CAAC,IAAI,CAAC;QACxD,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAC5B;IACJ,CAAC,CAAC;IACFjK,YAAY,CAAC4I,EAAE,CAACQ,QAAQ,EAAEhJ,YAAY,CAACG,aAAa,CAAC2J,IAAI,EAAE,8BAA8B,CAAC,EAAE,IAAI,CAACZ,qBAAqB,CAAC;EAC3H,CAAC;EACDP,sBAAsBA,CAAA,EAAG;IACrB,MAAMhB,SAAS,GAAG,IAAI,CAACoC,mBAAmB,CAAC,CAAC;IAC5C,MAAMC,WAAW,GAAG,CAAC,IAAI,CAAChF,eAAe,CAACiF,cAAc,CAAC,CAAC,CAACrG,MAAM;IACjE,IAAIoG,WAAW,EAAE;MACb,IAAI,CAACE,uBAAuB,CAACvC,SAAS,CAAC;IAC3C;EACJ,CAAC;EACDc,wBAAwBA,CAAA,EAAG;IACvB,MAAM0B,gBAAgB,GAAG,CAACtG,QAAQ,CAAC,CAAC,GAAG1D,aAAa,CAAC2J,IAAI,GAAGzJ,cAAc;IAC1E,MAAMsH,SAAS,GAAG,IAAI,CAACoC,mBAAmB,CAAC,CAAC;IAC5C,IAAI,CAAClK,SAAS,CAAC,IAAI,CAACuK,mBAAmB,CAAC,EAAE;MACtC,IAAI,CAACA,mBAAmB,GAAG,IAAI,CAAC7D,YAAY,CAAC,IAAI,CAAC8D,oBAAoB,CAAC;IAC3E;IACAzK,YAAY,CAAC2I,GAAG,CAACZ,SAAS,EAAE3H,YAAY,CAACmK,gBAAgB,EAAE,8BAA8B,CAAC,EAAE,IAAI,CAACC,mBAAmB,CAAC;IACrHxK,YAAY,CAAC4I,EAAE,CAACb,SAAS,EAAE3H,YAAY,CAACmK,gBAAgB,EAAE,8BAA8B,CAAC,EAAE,uBAAuB,EAAE,IAAI,CAACC,mBAAmB,CAAC;EACjJ,CAAC;EACD1B,mBAAmBA,CAAA,EAAG;IAClB,MAAMf,SAAS,GAAG,IAAI,CAACoC,mBAAmB,CAAC,CAAC;IAC5CtJ,QAAQ,CAAC8H,GAAG,CAAC,IAAI,CAAC+B,gBAAgB,CAAC;IACnC,IAAI,CAACA,gBAAgB,GAAG7J,QAAQ,CAAC+H,EAAE,CAACb,SAAS,EAAE,IAAI,EAAED,CAAC,IAAI,IAAI,CAAC6C,eAAe,CAAC7C,CAAC,CAAC,CAAC;EACtF,CAAC;EACD8C,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,QAAQ,CAAC,CAAC;IACf,IAAI,CAACZ,iBAAiB,CAAC,CAAC;IACxBpJ,QAAQ,CAAC8H,GAAG,CAAC,IAAI,CAAC+B,gBAAgB,CAAC;IACnC1K,YAAY,CAAC2I,GAAG,CAAC5I,UAAU,CAACsJ,WAAW,CAAC,CAAC,EAAEjJ,YAAY,CAACG,aAAa,CAAC2J,IAAI,EAAE,8BAA8B,CAAC,EAAE,IAAI,CAACZ,qBAAqB,CAAC;IACxIwB,YAAY,CAAC,IAAI,CAACjF,mBAAmB,CAAC;IACtClF,aAAa,CAACoK,2BAA2B,CAAC,CAAC;EAC/C,CAAC;EACDC,aAAaA,CAACC,IAAI,EAAE;IAChB,MAAMtH,IAAI,GAAG,IAAI;IACjB,QAAQsH,IAAI,CAACzK,IAAI;MACb,KAAK,oBAAoB;MACzB,KAAK,6BAA6B;QAC9ByK,IAAI,CAACC,OAAO,GAAG,IAAI;QACnB;MACJ;QACIvH,IAAI,CAACkH,QAAQ,CAACI,IAAI,CAAC;IAC3B;EACJ,CAAC;EACDE,cAAcA,CAAA,EAAG;IACb,OAAO,KAAK,KAAK,IAAI,CAACC,SAAS;EACnC,CAAC;EACDC,eAAeA,CAAA,EAAG;IACd,OAAO,MAAM,KAAK,IAAI,CAACD,SAAS;EACpC,CAAC;EACDE,eAAeA,CAAA,EAAG;IACd,IAAI,IAAI,CAAC7G,MAAM,CAAC,mBAAmB,CAAC,EAAE;MAClC,IAAI,CAAC2G,SAAS,GAAG,KAAK;IAC1B;EACJ,CAAC;EACDG,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACH,SAAS,GAAG,MAAM;EAC3B,CAAC;EACDT,eAAeA,CAAC7C,CAAC,EAAE;IACf,IAAI0D,EAAE;IACN,IAAIC,mBAAmB,GAAG,IAAI;IAC9B,IAAI,CAACzC,YAAY,GAAG,IAAI;IACxB,IAAI,CAAC7C,aAAa,GAAG,IAAI;IACzB,IAAIuF,SAAS,GAAG,IAAI,CAACC,iBAAiB,CAAC7D,CAAC,CAAC;IACzC,MAAM8D,SAAS,GAAG,IAAI,MAAMJ,EAAE,GAAG,IAAI,CAAClG,kBAAkB,CAAC,IAAI,KAAK,CAAC,KAAKkG,EAAE,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,SAAS,CAAC,CAAC;IACpG,MAAM;MACFC,aAAa,EAAEA;IACnB,CAAC,GAAG/D,CAAC;IACL,IAAI+D,aAAa,CAACC,kBAAkB,CAAC,CAAC,EAAE;MACpC,IAAI,CAAC9C,YAAY,GAAG,KAAK;MACzB,IAAI,CAAC7C,aAAa,GAAG,KAAK;MAC1B;IACJ;IAAC,CAAChD,eAAe,CAAC4I,QAAQ,CAACjE,CAAC,CAACkE,OAAO,CAAC,IAAI,IAAI,CAACC,kCAAkC,CAACJ,aAAa,CAAC9E,MAAM,CAAC;IACtG,IAAI,CAAC2E,SAAS,EAAE;MACZ,QAAQ5D,CAAC,CAACkE,OAAO;QACb,KAAK,WAAW;QAChB,KAAK,YAAY;UACb,IAAI,CAACE,qBAAqB,CAACpE,CAAC,EAAE8D,SAAS,CAAC;UACxCF,SAAS,GAAG,IAAI;UAChB;QACJ,KAAK,SAAS;QACd,KAAK,WAAW;UACZ,IAAI5D,CAAC,CAACqE,IAAI,EAAE;YACRxL,aAAa,CAACyL,UAAU,CAAC,UAAU,EAAE,IAAI,EAAEP,aAAa,CAAC;UAC7D,CAAC,MAAM;YACH,IAAI,CAACQ,kBAAkB,CAACvE,CAAC,EAAE8D,SAAS,CAAC;UACzC;UACAF,SAAS,GAAG,IAAI;UAChB;QACJ,KAAK,QAAQ;QACb,KAAK,UAAU;UACX,IAAI,CAACY,qBAAqB,CAACxE,CAAC,CAAC;UAC7B4D,SAAS,GAAG,IAAI;UAChB;QACJ,KAAK,OAAO;UACRA,SAAS,GAAG,IAAI,CAACa,gBAAgB,CAACzE,CAAC,EAAE8D,SAAS,CAAC;UAC/C;QACJ,KAAK,GAAG;UACJ,IAAItL,mBAAmB,CAACwH,CAAC,CAAC+D,aAAa,CAAC,EAAE;YACtC,IAAI,CAACW,gBAAgB,CAAC1E,CAAC,EAAE8D,SAAS,CAAC;YACnCF,SAAS,GAAG,IAAI;UACpB,CAAC,MAAM;YACHA,SAAS,GAAG,IAAI,CAACe,iBAAiB,CAAC3E,CAAC,CAAC+D,aAAa,CAAC;UACvD;UACA;QACJ,KAAK,KAAK;UACN,IAAI,CAACa,cAAc,CAAC5E,CAAC,EAAE8D,SAAS,CAAC;UACjCF,SAAS,GAAG,IAAI;UAChB;QACJ,KAAK,OAAO;UACR,IAAI,CAACiB,gBAAgB,CAAC7E,CAAC,EAAE8D,SAAS,CAAC;UACnCF,SAAS,GAAG,IAAI;UAChB;QACJ,KAAK,QAAQ;UACT,IAAI,CAACkB,iBAAiB,CAAC9E,CAAC,EAAE8D,SAAS,CAAC;UACpCF,SAAS,GAAG,IAAI;UAChB;QACJ,KAAK,GAAG;UACJ,IAAIpL,mBAAmB,CAACwH,CAAC,CAAC+D,aAAa,CAAC,EAAE;YACtC,IAAI,CAACgB,gBAAgB,CAAC/E,CAAC,CAAC;YACxB4D,SAAS,GAAG,IAAI;UACpB,CAAC,MAAM;YACHA,SAAS,GAAG,IAAI,CAACe,iBAAiB,CAAC3E,CAAC,CAAC+D,aAAa,CAAC;UACvD;UACA;QACJ,KAAK,IAAI;UACL,IAAI,CAACiB,aAAa,CAAC,CAAC;UACpBpB,SAAS,GAAG,IAAI;UAChB;QACJ,KAAK,KAAK;QACV,KAAK,WAAW;UACZ,IAAI,IAAI,CAACqB,qBAAqB,CAAC,CAAC,IAAI,CAAC,IAAI,CAACC,qBAAqB,CAAC,CAAC,EAAE;YAC/DtB,SAAS,GAAG,IAAI,CAACe,iBAAiB,CAACZ,aAAa,EAAE,IAAI,CAAC;UAC3D;MACR;MACA,IAAI,CAACH,SAAS,IAAI,CAAC,IAAI,CAACe,iBAAiB,CAACZ,aAAa,CAAC,EAAE;QACtD,IAAI,CAAC7C,YAAY,GAAG,KAAK;QACzB,IAAI,CAAC7C,aAAa,GAAG,KAAK;QAC1BsF,mBAAmB,GAAG,KAAK;MAC/B;MACA,IAAIA,mBAAmB,EAAE;QACrBI,aAAa,CAACoB,eAAe,CAAC,CAAC;MACnC;IACJ;EACJ,CAAC;EACDtB,iBAAiBA,CAACuB,SAAS,EAAE;IACzB,MAAM;MACFrB,aAAa,EAAEA;IACnB,CAAC,GAAGqB,SAAS;IACb,MAAMjC,IAAI,GAAG;MACTC,OAAO,EAAE,KAAK;MACdpE,KAAK,EAAE+E;IACX,CAAC;IACD,IAAI,CAACsB,aAAa,CAAC,WAAW,EAAElC,IAAI,CAAC;IACrCiC,SAAS,CAACf,IAAI,GAAGN,aAAa,CAACuB,OAAO;IACtCF,SAAS,CAACG,GAAG,GAAGxB,aAAa,CAACyB,MAAM;IACpCJ,SAAS,CAACK,KAAK,GAAG1B,aAAa,CAAC2B,QAAQ;IACxC,OAAO,CAAC,CAACvC,IAAI,CAACC,OAAO;EACzB,CAAC;EACDuC,cAAcA,CAAA,EAAG;IACbC,UAAU,CAAC,MAAM;MACb,IAAI,CAACpI,kBAAkB,CAACqI,aAAa,CAAC,CAAC;IAC3C,CAAC,CAAC;EACN,CAAC;EACDzB,qBAAqBA,CAACgB,SAAS,EAAEtB,SAAS,EAAE;IACxC,MAAMgC,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC1C,MAAMC,MAAM,GAAGZ,SAAS,CAACrB,aAAa;IACtC,MAAMxI,IAAI,GAAG,IAAI,CAACgD,YAAY,IAAI,IAAI,CAACA,YAAY,CAAC0H,MAAM,CAACH,QAAQ,CAAC;IACpE,MAAMI,aAAa,GAAG,IAAI,CAACC,sBAAsB,CAACf,SAAS,CAAClB,OAAO,CAAC;IACpE,MAAMkC,uBAAuB,GAAG,IAAI,CAAClB,qBAAqB,CAAC,CAAC;IAC5D,MAAMmB,aAAa,GAAG,CAAC,CAACvC,SAAS,IAAIsC,uBAAuB,KAAK1K,SAAS,CAACH,IAAI,CAAC;IAChF,IAAI8K,aAAa,EAAE;MACf,IAAI,CAAC5C,gBAAgB,CAAC,CAAC;MACvB2C,uBAAuB,IAAI,IAAI,CAACT,cAAc,CAAC,CAAC;MAChD,IAAI,IAAI,CAACW,sBAAsB,CAAC,CAAC,EAAE;QAC/B,IAAI,CAACC,iCAAiC,CAACL,aAAa,CAAC;MACzD;MACA,MAAMpK,KAAK,GAAG,IAAI,CAAC0K,YAAY,CAACN,aAAa,CAAC;MAC9C,IAAIlK,gBAAgB,CAACF,KAAK,CAAC,EAAE;QACzB,IAAI,CAAC2K,0BAA0B,CAACT,MAAM,EAAElK,KAAK,EAAEoK,aAAa,CAAC;MACjE;MACAF,MAAM,IAAIA,MAAM,CAACnG,cAAc,CAAC,CAAC;IACrC;EACJ,CAAC;EACD0E,kBAAkBA,CAACa,SAAS,EAAEtB,SAAS,EAAE;IACrC,IAAIJ,EAAE,EAAEgD,EAAE;IACV,MAAMC,eAAe,GAAG,IAAI,CAACZ,kBAAkB,CAAC,CAAC;IACjD,MAAMxK,IAAI,GAAG,IAAI,CAACgD,YAAY,IAAI,IAAI,CAACA,YAAY,CAAC0H,MAAM,CAACU,eAAe,CAAC;IAC3E,MAAMX,MAAM,GAAGZ,SAAS,CAACrB,aAAa;IACtC,MAAM6C,SAAS,GAAG,SAAS,KAAKxB,SAAS,CAAClB,OAAO;IACjD,MAAM2C,UAAU,GAAG,IAAI,CAACvJ,eAAe,CAACuJ,UAAU,CAAC,CAAC;IACpD,MAAMC,wBAAwB,GAAG,IAAI,MAAMJ,EAAE,GAAG,IAAI,MAAMhD,EAAE,GAAG,IAAI,CAAClG,kBAAkB,CAAC,IAAI,KAAK,CAAC,KAAKkG,EAAE,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACqD,gBAAgB,CAAC,IAAI,KAAK,CAAC,KAAKL,EAAE,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACM,IAAI,CAACtD,EAAE,EAAEiD,eAAe,CAAC;IACjM,MAAMP,uBAAuB,GAAG,IAAI,CAAClB,qBAAqB,CAAC,CAAC;IAC5D,MAAMmB,aAAa,GAAG,CAAC,CAACS,wBAAwB,IAAI,CAAChD,SAAS,IAAIsC,uBAAuB,KAAK7K,IAAI,IAAI,CAACE,WAAW,CAACF,IAAI,CAAC;IACxH,IAAI8K,aAAa,EAAE;MACfD,uBAAuB,IAAI,IAAI,CAACT,cAAc,CAAC,CAAC;MAChD,IAAI,CAAC,IAAI,CAACsB,iBAAiB,CAACjB,MAAM,EAAEZ,SAAS,CAAClB,OAAO,CAAC,EAAE;QACpD,IAAI,IAAI,CAACgD,mBAAmB,CAAC,CAAC,IAAIN,SAAS,IAAIC,UAAU,IAAI,CAACA,UAAU,CAACM,SAAS,CAAC,CAAC,EAAE;UAClF,MAAMC,SAAS,GAAGxP,cAAc,CAAC2D,IAAI,CAAC;UACtC,MAAMuK,QAAQ,GAAG,IAAI,CAAC7H,oBAAoB,CAAC6H,QAAQ,GAAG,CAAC;UACvD,IAAI,CAACuB,SAAS,CAAC,CAAC,EAAE,CAACD,SAAS,EAAEtB,QAAQ,EAAEE,MAAM,CAAC;QACnD;MACJ;MACAA,MAAM,IAAIA,MAAM,CAACnG,cAAc,CAAC,CAAC;IACrC;EACJ,CAAC;EACD2E,qBAAqBA,CAACY,SAAS,EAAE;IAC7B,MAAMkC,SAAS,GAAG,IAAI,CAAChK,eAAe,CAACgK,SAAS,CAAC,CAAC;IAClD,MAAMC,SAAS,GAAG,IAAI,CAACjK,eAAe,CAACiK,SAAS,CAAC,CAAC;IAClD,MAAMC,aAAa,GAAG,IAAI,CAAC7K,MAAM,CAAC,gBAAgB,CAAC;IACnD,MAAM8K,QAAQ,GAAG,QAAQ,KAAKrC,SAAS,CAAClB,OAAO;IAC/C,MAAMwD,QAAQ,GAAGD,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC;IAClC,MAAME,UAAU,GAAG,IAAI,CAACjK,OAAO,CAAC,UAAU,CAAC,CAACc,aAAa,CAAC,CAAC;IAC3D,IAAIgJ,aAAa,IAAI,CAAC,IAAI,CAACtK,mBAAmB,CAAC,CAAC,EAAE;MAC9C,IAAI,CAACuK,QAAQ,GAAGH,SAAS,GAAG,CAAC,GAAGA,SAAS,GAAGC,SAAS,GAAG,CAAC,KAAK,CAAC,IAAI,CAACrK,mBAAmB,CAAC,CAAC,EAAE;QACvF,IAAI,CAACI,eAAe,CAACgK,SAAS,CAACA,SAAS,GAAGI,QAAQ,CAAC;QACpDtC,SAAS,CAACrB,aAAa,CAAClE,cAAc,CAAC,CAAC;MAC5C;IACJ,CAAC,MAAM,IAAI8H,UAAU,IAAI9P,SAAS,CAAC8P,UAAU,CAACC,SAAS,CAAC,CAAC,CAAC,GAAG/P,SAAS,CAAC8P,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAE;MAC3F,IAAI,CAACR,SAAS,CAAC,CAAC,EAAExP,SAAS,CAAC8P,UAAU,CAACC,SAAS,CAAC,CAAC,CAAC,GAAGF,QAAQ,CAAC;MAC/DtC,SAAS,CAACrB,aAAa,CAAClE,cAAc,CAAC,CAAC;IAC5C;EACJ,CAAC;EACD4E,gBAAgBA,CAACW,SAAS,EAAEtB,SAAS,EAAE;IACnC,MAAMgC,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC1C,MAAMtE,OAAO,GAAGzJ,CAAC,CAACoN,SAAS,CAACrB,aAAa,IAAIqB,SAAS,CAACrB,aAAa,CAAC9E,MAAM,CAAC;IAC5E,IAAI,IAAI,CAACtC,MAAM,CAAC,WAAW,CAAC,IAAI,MAAM,KAAK,IAAI,CAACA,MAAM,CAAC,WAAW,CAAC,CAACmL,IAAI,IAAI,CAAChE,SAAS,EAAE;MACpF,MAAMiE,mBAAmB,GAAG,KAAK,KAAK,IAAI,CAACC,eAAe,CAACvG,OAAO,CAAC,IAAI,IAAI,CAAC4B,cAAc,CAAC,CAAC,IAAI3H,SAAS,CAAC+F,OAAO,CAAC;MAClH,MAAMwG,sBAAsB,GAAGxG,OAAO,CAACjG,QAAQ,CAAC,mBAAmB,CAAC;MACpE,IAAIyM,sBAAsB,IAAI,SAAS,KAAK,IAAI,CAACtL,MAAM,CAAC,8BAA8B,CAAC,EAAE;QACrF,IAAI,CAACY,oBAAoB,CAAC2K,4BAA4B,CAAC,CAAC;MAC5D;MACA,IAAIH,mBAAmB,IAAItG,OAAO,CAAClF,MAAM,CAAC,CAAC,CAACf,QAAQ,CAAC,aAAa,CAAC,IAAIiG,OAAO,CAACjG,QAAQ,CAAC,IAAI,CAACmG,eAAe,CAAC,UAAU,CAAC,CAAC,EAAE;QACvH,IAAI,CAACpE,oBAAoB,CAAC4K,mBAAmB,CAACrC,QAAQ,EAAE;UACpDL,KAAK,EAAEL,SAAS,CAACK,KAAK;UACtB2C,OAAO,EAAEhD,SAAS,CAACf;QACvB,CAAC,CAAC;QACFe,SAAS,CAACrB,aAAa,CAAClE,cAAc,CAAC,CAAC;QACxC,OAAO,IAAI;MACf;MACA,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,CAAC8E,iBAAiB,CAACS,SAAS,CAACrB,aAAa,CAAC;EAC1D,CAAC;EACDW,gBAAgBA,CAACU,SAAS,EAAEtB,SAAS,EAAE;IACnC,IAAI,CAACA,SAAS,IAAI,CAACsB,SAAS,CAACG,GAAG,IAAI,UAAU,KAAK,IAAI,CAAC5I,MAAM,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAACA,MAAM,CAAC,0BAA0B,CAAC,EAAE;MACzH,IAAI,CAACY,oBAAoB,CAAC8K,SAAS,CAAC,CAAC;MACrCjD,SAAS,CAACrB,aAAa,CAAClE,cAAc,CAAC,CAAC;IAC5C;EACJ,CAAC;EACD+E,cAAcA,CAACQ,SAAS,EAAEtB,SAAS,EAAE;IACjC,MAAMwE,cAAc,GAAG,IAAI,CAAC3L,MAAM,CAAC,SAAS,CAAC;IAC7C,MAAM4L,SAAS,GAAGnD,SAAS,CAACK,KAAK,GAAG,UAAU,GAAG,MAAM;IACvD,MAAM+C,qBAAqB,GAAGrQ,SAAS,CAAC,IAAI,CAAC8F,oBAAoB,CAAC,IAAI,CAAC7F,aAAa,CAAC,IAAI,CAAC6F,oBAAoB,CAAC;IAC/G,IAAIwK,yBAAyB,GAAG,CAACD,qBAAqB,IAAI,CAACpD,SAAS,CAACK,KAAK,IAAI,IAAI,CAACiD,gBAAgB,CAAC,IAAI,CAACzK,oBAAoB,CAAC,IAAImH,SAAS,CAACK,KAAK,IAAI,IAAI,CAACkD,iBAAiB,CAAC,IAAI,CAAC1K,oBAAoB,CAAC;IACtM,MAAM2K,WAAW,GAAGxD,SAAS,CAACrB,aAAa,CAAC9E,MAAM;IAClD,MAAM4J,kBAAkB,GAAG,IAAI,CAACtK,YAAY,IAAI,IAAI,CAACA,YAAY,CAACc,OAAO,CAAC,CAAC;IAC3E,IAAI,IAAI,CAACyJ,+BAA+B,CAACF,WAAW,EAAEL,SAAS,CAAC,EAAE;MAC9D;IACJ;IACAvQ,CAAC,CAAC6Q,kBAAkB,CAAC,CAACE,QAAQ,CAACvO,iBAAiB,CAAC;IACjD,IAAI8N,cAAc,IAAIM,WAAW,IAAI,CAACH,yBAAyB,EAAE;MAC7D,IAAIzQ,CAAC,CAAC4Q,WAAW,CAAC,CAACpN,QAAQ,CAAC,IAAI,CAACmG,eAAe,CAAC,UAAU,CAAC,CAAC,EAAE;QAC3D,IAAI,CAACO,iBAAiB,CAAC,CAAC;MAC5B;MACA,IAAI,IAAI,CAACoE,sBAAsB,CAAC,CAAC,EAAE;QAC/B,IAAI,CAACC,iCAAiC,CAACgC,SAAS,CAAC;MACrD;MACA,IAAIzE,SAAS,EAAE;QACX,IAAI,CAAC,IAAI,CAACkF,sBAAsB,CAAC5D,SAAS,EAAEmD,SAAS,CAAC,EAAE;UACpD;QACJ;MACJ,CAAC,MAAM,IAAI,IAAI,CAACU,qBAAqB,CAAC7D,SAAS,EAAEmD,SAAS,CAAC,EAAE;QACzDE,yBAAyB,GAAG,IAAI;MACpC;IACJ;IACA,IAAIA,yBAAyB,EAAE;MAC3B,IAAI,CAAC7K,cAAc,CAACsL,SAAS,CAAC,CAAC;MAC/B,IAAI,IAAI,CAAC1L,kBAAkB,CAACsG,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC/H,cAAc,CAAC,CAAC,EAAE;QAC/D,IAAI,CAACmG,iBAAiB,CAAC,IAAI,CAAC;QAC5B,IAAI,CAACC,iBAAiB,CAAC,CAAC;QACxB,IAAI,CAACwD,cAAc,CAAC,CAAC;MACzB;IACJ,CAAC,MAAM;MACHP,SAAS,CAACrB,aAAa,CAAClE,cAAc,CAAC,CAAC;IAC5C;EACJ,CAAC;EACDsJ,uBAAuBA,CAAA,EAAG;IACtB,MAAMxB,UAAU,GAAG,IAAI,CAACyB,SAAS,CAAC5K,aAAa,CAAC,CAAC;IACjD,MAAMM,QAAQ,GAAG,IAAI,CAACpB,OAAO,CAAC,UAAU,CAAC;IACzC,MAAM2L,MAAM,GAAG1B,UAAU,GAAGA,UAAU,CAAC2B,WAAW,CAAC,CAAC,GAAGxR,QAAQ,CAACgH,QAAQ,CAACO,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IACvF,OAAOgK,MAAM;EACjB,CAAC;EACDE,iBAAiBA,CAACC,WAAW,EAAE;IAC3B,MAAMC,iBAAiB,GAAG,IAAI,CAAC9L,kBAAkB,CAAC+L,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC;IAC/E,MAAMC,sBAAsB,GAAG,IAAI,CAAChM,kBAAkB,CAAC+L,iBAAiB,CAAC,CAAC;IAC1E,MAAMjN,MAAM,GAAGgN,iBAAiB,CAACD,WAAW,CAAC;IAC7C,IAAI5M,MAAM,GAAG,KAAK;IAClB,IAAIH,MAAM,EAAE;MACRG,MAAM,GAAG+M,sBAAsB,CAACC,OAAO,CAACnN,MAAM,CAAC,IAAI,CAAC;IACxD;IACA,OAAOG,MAAM;EACjB,CAAC;EACDiN,cAAcA,CAACL,WAAW,EAAE;IACxB,MAAMC,iBAAiB,GAAG,IAAI,CAAC9L,kBAAkB,CAAC+L,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC;IAC/E,MAAMjN,MAAM,GAAGgN,iBAAiB,CAACD,WAAW,CAAC;IAC7C,OAAO,CAAC,CAAC/M,MAAM,IAAI,CAAC,CAACA,MAAM,CAACqN,KAAK;EACrC,CAAC;EACDC,gBAAgBA,CAACP,WAAW,EAAE;IAC1B,MAAMQ,gBAAgB,GAAGR,WAAW,GAAG,IAAI,CAAC7L,kBAAkB,CAACsM,oBAAoB,CAAC,CAAC;IACrF,MAAMC,cAAc,GAAG,IAAI,CAACvM,kBAAkB,CAAC+L,iBAAiB,CAAC,CAAC;IAClE,MAAMjN,MAAM,GAAGyN,cAAc,CAACF,gBAAgB,CAAC;IAC/C,OAAO,CAAC,CAACvN,MAAM,IAAI,SAAS,KAAKA,MAAM,CAACK,OAAO;EACnD,CAAC;EACDyJ,iCAAiCA,CAACgC,SAAS,EAAE;IACzC,MAAMZ,UAAU,GAAG,IAAI,CAACyB,SAAS,CAAC5K,aAAa,CAAC,CAAC;IACjD,MAAMgL,WAAW,GAAG,IAAI,CAACW,cAAc,CAAC,CAAC;IACzC,IAAIC,eAAe;IACnB,IAAIC,wBAAwB,GAAG,CAAC;IAChC,IAAIC,YAAY,GAAG,KAAK;IACxB,QAAQ/B,SAAS;MACb,KAAK,MAAM;MACX,KAAK,WAAW;QAAE;UACd,MAAMgC,YAAY,GAAG,IAAI,CAACC,sBAAsB,CAAC,CAAC;UAClDJ,eAAe,GAAGZ,WAAW,GAAG,CAAC;UACjCa,wBAAwB,GAAG,IAAI,CAAC1N,MAAM,CAAC,YAAY,CAAC,GAAG,IAAI,CAACwM,uBAAuB,CAAC,CAAC,GAAG,CAAC;UACzF,IAAI,MAAM,KAAKZ,SAAS,EAAE;YACtB+B,YAAY,GAAGC,YAAY,KAAKH,eAAe,IAAI,IAAI,CAACP,cAAc,CAACL,WAAW,CAAC,IAAI,CAAC,IAAI,CAACD,iBAAiB,CAACa,eAAe,CAAC;UACnI,CAAC,MAAM;YACHE,YAAY,GAAGC,YAAY,GAAGH,eAAe,IAAI,IAAI,CAACP,cAAc,CAACL,WAAW,CAAC,IAAI,CAAC,IAAI,CAACD,iBAAiB,CAACa,eAAe,CAAC;UACjI;UACA;QACJ;MACA,KAAK,UAAU;MACf,KAAK,eAAe;QAChBA,eAAe,GAAGZ,WAAW,GAAG,CAAC;QACjCa,wBAAwB,GAAG,IAAI,CAAC1N,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAACwM,uBAAuB,CAAC,CAAC;QACzF,IAAI,UAAU,KAAKZ,SAAS,EAAE;UAC1B,MAAMkC,iBAAiB,GAAG,IAAI,CAAC9M,kBAAkB,CAACsM,oBAAoB,CAAC,CAAC;UACxE,MAAMS,gBAAgB,GAAGN,eAAe,GAAG,CAAC,IAAI,CAAC,KAAKK,iBAAiB;UACvEH,YAAY,GAAGI,gBAAgB,IAAI,IAAI,CAACb,cAAc,CAACL,WAAW,CAAC,IAAI,CAAC,IAAI,CAACD,iBAAiB,CAACa,eAAe,CAAC;QACnH,CAAC,MAAM;UACHE,YAAY,GAAGF,eAAe,IAAI,CAAC,IAAI,IAAI,CAACP,cAAc,CAACL,WAAW,CAAC,IAAI,CAAC,IAAI,CAACD,iBAAiB,CAACa,eAAe,CAAC;QACvH;IACR;IACA,IAAIE,YAAY,EAAE;MACd3C,UAAU,CAACgD,QAAQ,CAAC;QAChBC,IAAI,EAAEP;MACV,CAAC,CAAC;IACN,CAAC,MAAM,IAAIlS,SAAS,CAACiS,eAAe,CAAC,IAAIjS,SAAS,CAACoQ,SAAS,CAAC,IAAI,IAAI,CAACwB,gBAAgB,CAACK,eAAe,CAAC,EAAE;MACrGC,wBAAwB,GAAG,IAAI,CAACQ,kCAAkC,CAACtC,SAAS,CAAC;MAC7E,CAAC,KAAK8B,wBAAwB,IAAI1C,UAAU,CAACmD,QAAQ,CAAC;QAClDF,IAAI,EAAEP,wBAAwB;QAC9BU,GAAG,EAAE;MACT,CAAC,CAAC;IACN;EACJ,CAAC;EACDF,kCAAkCA,CAACtC,SAAS,EAAE;IAC1C,IAAIyC,cAAc,GAAG,CAAC;IACtB,MAAMC,YAAY,GAAG,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACjN,oBAAoB,CAAC;IAC7D,MAAMkN,gBAAgB,GAAGF,YAAY,IAAIlT,aAAa,CAACkT,YAAY,CAAC;IACpE,IAAIE,gBAAgB,GAAG,CAAC,EAAE;MACtB,MAAMC,aAAa,GAAG,IAAI,CAACzO,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MACxDqO,cAAc,GAAG,WAAW,KAAKzC,SAAS,IAAI,MAAM,KAAKA,SAAS,GAAG4C,gBAAgB,GAAGC,aAAa,GAAGD,gBAAgB,GAAGC,aAAa,GAAG,CAAC,CAAC;IACjJ;IACA,OAAOJ,cAAc;EACzB,CAAC;EACDhC,sBAAsBA,CAAC5D,SAAS,EAAEmD,SAAS,EAAE;IACzC,MAAMK,WAAW,GAAGxD,SAAS,CAACrB,aAAa,CAAC9E,MAAM;IAClD,IAAInD,KAAK,GAAG,IAAI,CAACuP,yBAAyB,CAACzC,WAAW,CAAC;IACvD,IAAI0C,gBAAgB;IACpB,MAAMtF,MAAM,GAAGZ,SAAS,CAACrB,aAAa;IACtC,MAAMwH,WAAW,GAAG,IAAI,CAACvD,eAAe,CAACY,WAAW,CAAC;IACrD,IAAI9M,KAAK,CAACwC,EAAE,CAAC,qBAAqB,CAAC,EAAE;MACjC,OAAO,CAAC,IAAI,CAAC2K,qBAAqB,CAAC7D,SAAS,EAAEmD,SAAS,CAAC;IAC5D;IACA,IAAI,CAACiD,0BAA0B,CAAC1P,KAAK,CAAC;IACtC,MAAM2P,YAAY,GAAG,IAAI,CAACC,oBAAoB,CAAC1F,MAAM,EAAEuC,SAAS,EAAEgD,WAAW,CAAC;IAC9EzP,KAAK,GAAG2P,YAAY,CAAC3P,KAAK;IAC1B,IAAI,CAACA,KAAK,IAAI,IAAI,CAACgN,+BAA+B,CAAChN,KAAK,EAAEyM,SAAS,CAAC,EAAE;MAClE,OAAO,KAAK;IAChB;IACA,MAAMoD,iBAAiB,GAAG,IAAI,CAAChO,kBAAkB;IACjD,MAAMiO,SAAS,GAAG,IAAI,CAAClO,OAAO,CAAC,UAAU,CAAC,CAACmO,YAAY,CAAC/P,KAAK,CAAC;IAC9D,MAAM0N,WAAW,GAAGoC,SAAS,GAAGD,iBAAiB,CAAC1B,oBAAoB,CAAC,CAAC;IACxE,MAAMxN,MAAM,GAAGkP,iBAAiB,CAACjC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAACF,WAAW,CAAC;IAC3E,MAAMjO,IAAI,GAAGO,KAAK,CAACS,MAAM,CAAC,CAAC;IAC3B,MAAMuJ,QAAQ,GAAG,IAAI,CAACgG,YAAY,CAACvQ,IAAI,CAAC;IACxC,MAAMwQ,GAAG,GAAG,IAAI,CAACzO,eAAe,CAAC0O,KAAK,CAAC,CAAC,CAAClG,QAAQ,CAAC;IAClD,MAAMmG,iBAAiB,GAAG,IAAI,CAACzO,kBAAkB;IACjD,IAAIf,MAAM,IAAIA,MAAM,CAACyP,YAAY,EAAE;MAC/B,MAAMxQ,SAAS,GAAG,CAACqQ,GAAG,IAAI,MAAM,KAAKA,GAAG,CAACI,OAAO;MAChDb,gBAAgB,GAAGW,iBAAiB,CAACG,aAAa,CAAC;QAC/CL,GAAG,EAAEA;MACT,CAAC,CAAC,GAAGrQ,SAAS,GAAGqQ,GAAG,IAAIA,GAAG,CAACM,QAAQ;IACxC;IACA,IAAI,CAACf,gBAAgB,EAAE;MACnB,IAAI,CAAC3F,cAAc,CAAC,CAAC;IACzB;IACA,IAAI,IAAI,CAAC2G,UAAU,CAACxQ,KAAK,EAAE,CAAC2P,YAAY,CAACc,aAAa,CAAC,EAAE;MACrD,IAAI,CAAC,IAAI,CAACxQ,cAAc,CAAC,CAAC,IAAIuP,gBAAgB,EAAE;QAC5C,IAAI,CAACkB,gBAAgB,CAAC,CAAC;MAC3B,CAAC,MAAM;QACH,IAAI,CAACC,wBAAwB,CAAC3Q,KAAK,EAAEsJ,SAAS,CAACK,KAAK,CAAC;MACzD;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACDwD,qBAAqBA,CAAC7D,SAAS,EAAEmD,SAAS,EAAE;IACxC,MAAMvC,MAAM,GAAGZ,SAAS,CAACrB,aAAa;IACtC,IAAI6E,WAAW,GAAG5C,MAAM,CAAC/G,MAAM;IAC/B,IAAInD,KAAK,GAAG,IAAI,CAACuP,yBAAyB,CAACzC,WAAW,CAAC;IACvD,MAAM8D,uBAAuB,GAAG,IAAI,CAACC,sBAAsB,CAAC7Q,KAAK,EAAE,CAACsJ,SAAS,CAACK,KAAK,CAAC;IACpF,IAAIgD,yBAAyB,GAAG,KAAK;IACrC,IAAI8C,WAAW;IACf,IAAI,CAAC3P,YAAY,CAAC,IAAI,EAAEE,KAAK,CAAC,IAAI4Q,uBAAuB,CAACxQ,MAAM,IAAI0M,WAAW,KAAK8D,uBAAuB,CAACjM,GAAG,CAAC,CAAC,CAAC,EAAE;MAChHgI,yBAAyB,GAAG,IAAI;IACpC,CAAC,MAAM;MACH,IAAI,KAAK,CAAC,KAAK,IAAI,CAACxK,oBAAoB,CAAC6H,QAAQ,IAAI9N,CAAC,CAAC4Q,WAAW,CAAC,CAACpN,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACpF,IAAI,CAACgQ,0BAA0B,CAAC1P,KAAK,CAAC;MAC1C;MACAyP,WAAW,GAAG,IAAI,CAACvD,eAAe,CAACY,WAAW,CAAC;MAC/C,IAAI,IAAI,CAACvF,cAAc,CAAC,CAAC,EAAE;QACvB,IAAI,CAACI,gBAAgB,CAAC,CAAC;QACvB,IAAI,KAAK,KAAK8H,WAAW,IAAI7P,SAAS,CAAC1D,CAAC,CAAC4Q,WAAW,CAAC,CAAC,EAAE;UACpDA,WAAW,GAAG,IAAI,CAACgE,sBAAsB,CAAC5U,CAAC,CAAC4Q,WAAW,CAAC,CAAC;UACzD2C,WAAW,GAAG,IAAI,CAACvD,eAAe,CAACY,WAAW,CAAC;QACnD;MACJ;MACA,MAAM6C,YAAY,GAAG,IAAI,CAACC,oBAAoB,CAAC1F,MAAM,EAAEuC,SAAS,EAAEgD,WAAW,CAAC;MAC9EzP,KAAK,GAAG2P,YAAY,CAAC3P,KAAK;MAC1B,IAAI,CAACA,KAAK,EAAE;QACR,OAAO,KAAK;MAChB;MACAA,KAAK,GAAG,IAAI,CAAC+Q,uBAAuB,CAAC7G,MAAM,EAAElK,KAAK,CAAC;MACnD,IAAI,CAACA,KAAK,EAAE;QACR,OAAO,KAAK;MAChB;MACA,IAAI,CAACwQ,UAAU,CAACxQ,KAAK,EAAE,CAAC2P,YAAY,CAACc,aAAa,CAAC;MACnD,IAAI,CAAC3Q,YAAY,CAAC,IAAI,EAAEE,KAAK,CAAC,EAAE;QAC5B,IAAI,CAAC2Q,wBAAwB,CAAC3Q,KAAK,EAAEsJ,SAAS,CAACK,KAAK,CAAC;MACzD;IACJ;IACA,OAAOgD,yBAAyB;EACpC,CAAC;EACDiD,oBAAoBA,CAAC1F,MAAM,EAAEuC,SAAS,EAAEgD,WAAW,EAAE;IACjD,IAAIzP,KAAK,GAAG,IAAI,CAAC0K,YAAY,CAAC+B,SAAS,EAAEgD,WAAW,CAAC;IACrD,MAAMpI,IAAI,GAAGrH,KAAK,IAAI,IAAI,CAACgR,wBAAwB,CAAC9G,MAAM,EAAElK,KAAK,EAAE,IAAI,CAAC;IACxE,IAAI,CAACqH,IAAI,IAAIA,IAAI,CAAC4J,MAAM,EAAE;MACtB,OAAO,CAAC,CAAC;IACb;IACA,IAAI5J,IAAI,CAAC6J,eAAe,EAAE;MACtBlR,KAAK,GAAGqH,IAAI,CAAC6J,eAAe;IAChC;IACA,OAAO;MACHlR,KAAK,EAAEA,KAAK;MACZyQ,aAAa,EAAEpJ,IAAI,CAACoJ;IACxB,CAAC;EACL,CAAC;EACDM,uBAAuBA,CAAC7G,MAAM,EAAElK,KAAK,EAAE;IACnC,MAAMgK,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC1C,MAAMxK,IAAI,GAAGO,KAAK,CAACS,MAAM,CAAC,CAAC;IAC3B,IAAIuJ,QAAQ,KAAK,IAAI,CAACgG,YAAY,CAACvQ,IAAI,CAAC,EAAE;MACtC,MAAM0R,YAAY,GAAG,IAAI,CAACC,gBAAgB,CAACpR,KAAK,CAAC;MACjD,MAAMqH,IAAI,GAAG,IAAI,CAACgK,uBAAuB,CAACnH,MAAM,EAAEzK,IAAI,CAAC;MACvD,IAAI4H,IAAI,CAAC4J,MAAM,EAAE;QACb;MACJ;MACA,IAAI5J,IAAI,CAACiK,eAAe,EAAE;QACtB,IAAI,CAACC,qBAAqB,CAACJ,YAAY,CAACzD,WAAW,CAAC;QACpD1N,KAAK,GAAG,IAAI,CAAC2D,eAAe,CAAC,CAAC;MAClC;IACJ;IACA,OAAO3D,KAAK;EAChB,CAAC;EACD+I,gBAAgBA,CAACO,SAAS,EAAEtB,SAAS,EAAE;IACnC,MAAMhI,KAAK,GAAG,IAAI,CAAC2D,eAAe,CAAC,CAAC;IACpC,MAAMqG,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC1C,MAAMxK,IAAI,GAAG,IAAI,CAACgD,YAAY,IAAI,IAAI,CAACA,YAAY,CAAC0H,MAAM,CAACH,QAAQ,CAAC;IACpE,IAAI,IAAI,CAACnJ,MAAM,CAAC,0BAA0B,CAAC,IAAIrB,UAAU,CAACC,IAAI,CAAC,IAAI,IAAI,CAACoB,MAAM,CAAC,sBAAsB,CAAC,IAAIb,KAAK,IAAIA,KAAK,CAACN,QAAQ,CAAC,mBAAmB,CAAC,EAAE;MACpJ,MAAM8R,GAAG,GAAG,IAAI,CAAChQ,eAAe,CAACiQ,gBAAgB,CAACzH,QAAQ,CAAC;MAC3D,MAAM0H,IAAI,GAAG,IAAI,CAAClQ,eAAe,CAAC0O,KAAK,CAAC,CAAC,CAAClG,QAAQ,CAAC;MACnD,IAAI,KAAK,CAAC,KAAKwH,GAAG,IAAIE,IAAI,IAAIA,IAAI,CAACC,IAAI,IAAI,CAACD,IAAI,CAACC,IAAI,CAACC,cAAc,EAAE;QAClE,IAAI,CAACpQ,eAAe,CAACqQ,eAAe,CAACL,GAAG,CAAC;MAC7C;IACJ,CAAC,MAAM;MACH,IAAI,CAACM,2BAA2B,CAACxI,SAAS,EAAEtB,SAAS,CAAC;IAC1D;EACJ,CAAC;EACD8J,2BAA2BA,CAACxI,SAAS,EAAEtB,SAAS,EAAE;IAC9C,MAAMyE,SAAS,GAAG,IAAI,CAACsF,qBAAqB,CAACzI,SAAS,CAAC;IACvD,MAAM0I,sBAAsB,GAAG,IAAI,CAACC,uBAAuB,CAAC,CAAC;IAC7D,IAAIjK,SAAS,IAAI,CAACgK,sBAAsB,IAAIvF,SAAS,EAAE;MACnD,IAAI,CAACyF,0BAA0B,CAAC5I,SAAS,CAACrB,aAAa,CAAC;MACxD,IAAI,MAAM,KAAKwE,SAAS,IAAI,UAAU,KAAKA,SAAS,EAAE;QAClD,IAAI,CAACU,qBAAqB,CAAC7D,SAAS,EAAEmD,SAAS,CAAC;MACpD,CAAC,MAAM,IAAI,SAAS,KAAKA,SAAS,IAAI,WAAW,KAAKA,SAAS,EAAE;QAC7D,IAAI,CAACtB,iBAAiB,CAAC7B,SAAS,CAACrB,aAAa,EAAEwE,SAAS,CAAC;MAC9D;IACJ,CAAC,MAAM,IAAIuF,sBAAsB,EAAE;MAC/B,IAAI,CAACG,aAAa,CAAC7I,SAAS,CAAC;IACjC;EACJ,CAAC;EACDyI,qBAAqBA,CAACzI,SAAS,EAAE;IAC7B,MAAM8I,iBAAiB,GAAG,IAAI,CAACvR,MAAM,CAAC,sCAAsC,CAAC;IAC7E,MAAMwR,OAAO,GAAG/I,SAAS,CAACK,KAAK;IAC/B,IAAI,QAAQ,KAAKyI,iBAAiB,EAAE;MAChC,OAAOC,OAAO,GAAG,SAAS,GAAG,WAAW;IAC5C;IACA,IAAI,KAAK,KAAKD,iBAAiB,EAAE;MAC7B,OAAOC,OAAO,GAAG,UAAU,GAAG,MAAM;IACxC;IACA;EACJ,CAAC;EACDH,0BAA0BA,CAAChP,KAAK,EAAE;IAC9B,MAAM;MACFC,MAAM,EAAEA;IACZ,CAAC,GAAGD,KAAK;IACT,MAAMlD,KAAK,GAAG,IAAI,CAACuP,yBAAyB,CAACpM,MAAM,CAAC;IACpD,MAAMmP,aAAa,GAAG,IAAI,CAACrS,cAAc,CAAC,CAAC;IAC3C,IAAI,CAACyP,0BAA0B,CAAC1P,KAAK,CAAC;IACtC,IAAIsS,aAAa,EAAE;MACf,IAAI,CAACC,kBAAkB,CAACvS,KAAK,CAAC;MAC9B8J,UAAU,CAAC,IAAI,CAACpI,kBAAkB,CAAC8Q,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC/Q,kBAAkB,CAAC,CAAC;IAClF,CAAC,MAAM;MACHtF,YAAY,CAAC4H,OAAO,CAAC9H,CAAC,CAACiH,MAAM,CAAC,EAAE,QAAQ,CAAC;MACzC,IAAI,CAAC0G,cAAc,CAAC,CAAC;MACrB3G,KAAK,CAACa,cAAc,CAAC,CAAC;IAC1B;EACJ,CAAC;EACDiF,iBAAiBA,CAACM,SAAS,EAAEtB,SAAS,EAAE;IACpC,MAAMhI,KAAK,GAAG,IAAI,CAACuP,yBAAyB,CAACjG,SAAS,CAACrB,aAAa,CAAC9E,MAAM,CAAC;IAC5E,IAAI6E,SAAS,EAAE;MACX,IAAI,CAAC0H,0BAA0B,CAAC1P,KAAK,CAAC;MACtC,IAAI,CAAC,IAAI,CAACC,cAAc,CAAC,CAAC,EAAE;QACxB,IAAI,MAAM,KAAK,IAAI,CAACyB,kBAAkB,CAACgR,WAAW,CAAC,CAAC,EAAE;UAClD,IAAI,CAAChR,kBAAkB,CAACiR,cAAc,CAAC,CAAC;QAC5C,CAAC,MAAM;UACH,IAAI,CAAC9I,cAAc,CAAC,CAAC;QACzB;MACJ,CAAC,MAAM;QACH,IAAI,CAAC0I,kBAAkB,CAACvS,KAAK,CAAC;QAC9B,IAAI,CAAC0B,kBAAkB,CAACiR,cAAc,CAAC,CAAC;QACxC,IAAI,CAAC,KAAK,IAAI,CAACnR,eAAe,CAAC0O,KAAK,CAAC,CAAC,CAAC9P,MAAM,EAAE;UAC3C,IAAI,CAACgG,iBAAiB,CAAC,CAAC;UACxB,IAAI,CAACtE,cAAc,CAACsL,SAAS,CAAC,CAAC;QACnC;MACJ;MACA9D,SAAS,CAACrB,aAAa,CAAClE,cAAc,CAAC,CAAC;IAC5C;EACJ,CAAC;EACDkF,gBAAgBA,CAACK,SAAS,EAAE;IACxB,IAAI,IAAI,CAACzI,MAAM,CAAC,qBAAqB,CAAC,EAAE;MACpC,MAAM+R,gBAAgB,GAAG,IAAI,CAACjR,YAAY,CAACkR,mBAAmB,CAAC,CAAC;MAChE,IAAID,gBAAgB,EAAE;QAClBA,gBAAgB,CAACE,KAAK,CAAC,CAAC;QACxBxJ,SAAS,CAACrB,aAAa,CAAClE,cAAc,CAAC,CAAC;MAC5C;IACJ;EACJ,CAAC;EACDmF,aAAaA,CAAA,EAAG;IACZ,MAAMlB,SAAS,GAAG,IAAI,CAACtG,kBAAkB,CAACsG,SAAS,CAAC,CAAC;IACrD,MAAMgC,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC1C,MAAMxK,IAAI,GAAG,IAAI,CAACgD,YAAY,IAAI,IAAI,CAACA,YAAY,CAAC0H,MAAM,CAACH,QAAQ,CAAC;IACpE,IAAI,CAAChC,SAAS,IAAIpI,SAAS,CAACH,IAAI,CAAC,EAAE;MAC/B,IAAI,CAAC0S,aAAa,CAAC,CAAC;IACxB;EACJ,CAAC;EACDhH,iBAAiBA,CAACjB,MAAM,EAAE6I,OAAO,EAAE;IAC/B,MAAM/S,KAAK,GAAG,IAAI,CAAC0K,YAAY,CAACqI,OAAO,CAAC;IACxC,MAAM3I,aAAa,GAAG,IAAI,CAACC,sBAAsB,CAAC0I,OAAO,CAAC;IAC1D,MAAMC,WAAW,GAAGhT,KAAK,IAAI,IAAI,CAACiT,YAAY,CAACjT,KAAK,CAAC;IACrD,MAAMc,MAAM,GAAGkS,WAAW,GAAG,IAAI,CAACrI,0BAA0B,CAACT,MAAM,EAAElK,KAAK,EAAEoK,aAAa,CAAC,GAAG,KAAK;IAClG,OAAOtJ,MAAM;EACjB,CAAC;EACD6J,0BAA0BA,CAACT,MAAM,EAAEgJ,SAAS,EAAEzG,SAAS,EAAE;IACrD,MAAM0G,mBAAmB,GAAG,SAAS,KAAK1G,SAAS,IAAI,SAAS,KAAKA,SAAS;IAC9E,MAAMpF,IAAI,GAAG,IAAI,CAAC+L,wBAAwB,CAAClJ,MAAM,EAAEgJ,SAAS,EAAEC,mBAAmB,EAAE,IAAI,CAAC;IACxFD,SAAS,GAAG7L,IAAI,CAAC6J,eAAe;IAChC,IAAI,CAAC7J,IAAI,CAAC4J,MAAM,IAAI,IAAI,CAACgC,YAAY,CAACC,SAAS,CAAC,EAAE;MAC9C,IAAI,CAACG,MAAM,CAACH,SAAS,EAAE,CAAC7L,IAAI,CAACoJ,aAAa,CAAC;MAC3C,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC;EACD5H,iBAAiBA,CAACZ,aAAa,EAAEqL,UAAU,EAAE;IACzC,IAAI,CAAC,IAAI,CAACnK,qBAAqB,CAAC,CAAC,IAAIlB,aAAa,CAACyB,MAAM,IAAIzB,aAAa,CAACuB,OAAO,IAAI,IAAI,CAAC9H,kBAAkB,CAACsG,SAAS,CAAC,CAAC,EAAE;MACvH,OAAO,KAAK;IAChB;IACA,IAAIsL,UAAU,EAAE;MACZ,IAAI,CAACnB,aAAa,CAAClK,aAAa,EAAE,QAAQ,CAAC;IAC/C,CAAC,MAAM;MACH,MAAM;QACFuJ,GAAG,EAAEA;MACT,CAAC,GAAGvJ,aAAa;MACjB,MAAM8K,OAAO,GAAG9K,aAAa,CAAC8K,OAAO,IAAI9K,aAAa,CAACsL,KAAK;MAC5D,MAAMC,cAAc,GAAGhC,GAAG,IAAIuB,OAAO,IAAIU,MAAM,CAACC,YAAY,CAACX,OAAO,CAAC;MACrE,IAAIS,cAAc,KAAK,CAAC,KAAKA,cAAc,CAACpT,MAAM,IAAI,QAAQ,KAAKoT,cAAc,CAAC,EAAE;QAChF,IAAI,CAACrB,aAAa,CAAClK,aAAa,EAAEuL,cAAc,CAAC;MACrD;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACD3M,oBAAoBA,CAAC3C,CAAC,EAAE;IACpB,MAAMhB,KAAK,GAAGgB,CAAC,CAAChB,KAAK,IAAIgB,CAAC;IAC1B,IAAIyB,OAAO,GAAGzJ,CAAC,CAACgH,KAAK,CAACyQ,aAAa,CAAC;IACpC,MAAM3Q,QAAQ,GAAG,IAAI,CAACpB,OAAO,CAAC,UAAU,CAAC;IACzC,MAAMmL,kBAAkB,GAAG/J,QAAQ,IAAIA,QAAQ,CAACO,OAAO,CAAC,CAAC;IACzD,MAAMqQ,OAAO,GAAGjO,OAAO,CAAClF,MAAM,CAAC,CAAC;IAChC,MAAMoT,oBAAoB,GAAG3X,CAAC,CAACgH,KAAK,CAACC,MAAM,CAAC,CAACX,EAAE,CAAC1D,6BAA6B,CAAC;IAC9E,MAAMgV,cAAc,GAAG,CAAC,CAAC5X,CAAC,CAACgH,KAAK,CAACC,MAAM,CAAC,CAACG,OAAO,CAAC,mBAAmB,CAAC,CAAClD,MAAM;IAC5E,MAAM2T,mBAAmB,GAAGpO,OAAO,CAACjG,QAAQ,CAAC,mBAAmB,CAAC;IACjE,IAAI,CAAC,IAAI,CAAC+D,qBAAqB,CAACP,KAAK,CAAC,EAAE;MACpC;IACJ;IACA,IAAI,CAAC4Q,cAAc,KAAK,IAAI,CAACb,YAAY,CAACtN,OAAO,EAAE,CAACkO,oBAAoB,CAAC,IAAIE,mBAAmB,CAAC,EAAE;MAC/FpO,OAAO,GAAG,IAAI,CAACqO,iBAAiB,CAACrO,OAAO,CAAC,GAAGzJ,CAAC,CAACgH,KAAK,CAACC,MAAM,CAAC,GAAGwC,OAAO;MACrE,IAAI,CAACsO,UAAU,CAAC,CAAC;MACjB/X,CAAC,CAAC6Q,kBAAkB,CAAC,CAACmH,WAAW,CAACxV,iBAAiB,CAAC;MACpD,IAAIkV,OAAO,CAAClU,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QACtC,IAAI,CAACgQ,0BAA0B,CAAC/J,OAAO,CAAC;QACxC,IAAI,CAACe,uBAAuB,CAAC,IAAI,CAACjE,YAAY,CAACc,OAAO,CAAC,CAAC,CAAC;QACzD,IAAI,CAACd,YAAY,CAACqQ,KAAK,CAAC,IAAI,CAAC;MACjC,CAAC,MAAM,IAAI,CAAC,IAAI,CAACqB,mBAAmB,CAACxO,OAAO,CAAC,EAAE;QAC3C,IAAI,CAACyO,uBAAuB,CAAClR,KAAK,EAAEyC,OAAO,CAAC;MAChD,CAAC,MAAM;QACH,IAAI,CAAC+J,0BAA0B,CAAC/J,OAAO,CAAC;MAC5C;IACJ,CAAC,MAAM,IAAIA,OAAO,CAACnD,EAAE,CAAC,IAAI,CAAC,EAAE;MACzB,IAAI,CAAC4D,iBAAiB,CAAC,CAAC;IAC5B;EACJ,CAAC;EACDgO,uBAAuBA,CAAClR,KAAK,EAAElD,KAAK,EAAE;IAClC,MAAM0N,WAAW,GAAG,IAAI,CAAC9L,OAAO,CAAC,UAAU,CAAC,CAACmO,YAAY,CAAC/P,KAAK,CAAC;IAChE,MAAMW,MAAM,GAAG,IAAI,CAACkB,kBAAkB,CAAC+L,iBAAiB,CAAC,CAAC,CAACF,WAAW,CAAC;IACvE,MAAM2G,cAAc,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;IAC7C,IAAI,CAAC3M,gBAAgB,CAAC,CAAC;IACvB,MAAMN,IAAI,GAAG,IAAI,CAAC+L,wBAAwB,CAAClQ,KAAK,EAAElD,KAAK,EAAE,IAAI,CAAC;IAC9DA,KAAK,GAAGqH,IAAI,CAAC6J,eAAe;IAC5B,IAAI,CAAC7J,IAAI,CAAC4J,MAAM,EAAE;MACd,IAAI5J,IAAI,CAACkN,eAAe,EAAE;QACtB,IAAI,CAACpT,aAAa,CAAC,OAAO,CAAC,CAACqT,gBAAgB,CAAC,CAAC;QAC9C;MACJ;MACA,IAAInN,IAAI,CAACiK,eAAe,EAAE;QACtBtR,KAAK,GAAG,IAAI,CAAC2D,eAAe,CAAC,CAAC;MAClC;MACA,IAAI,CAAC0D,IAAI,CAACoJ,aAAa,IAAI,CAAC4D,cAAc,EAAE;QACxC,IAAI,CAAC3M,eAAe,CAAC,CAAC;MAC1B;MACA,IAAI,CAACgI,0BAA0B,CAAC1P,KAAK,CAAC;MACtC,IAAI,IAAI,CAACyU,iBAAiB,CAAC,CAAC,IAAIJ,cAAc,IAAI1T,MAAM,IAAIA,MAAM,CAACyP,YAAY,EAAE;QAC7E,IAAI,CAAChL,YAAY,GAAG,KAAK;QACzB,IAAI,CAACC,cAAc,GAAG,KAAK;MAC/B,CAAC,MAAM;QACHrF,KAAK,GAAG,IAAI,CAAC2D,eAAe,CAAC,CAAC;QAC9B,MAAMgC,OAAO,GAAGzC,KAAK,IAAIhH,CAAC,CAACgH,KAAK,CAACC,MAAM,CAAC,CAACG,OAAO,CAACvE,+BAA+B,GAAG,MAAM,CAAC;QAC1F,MAAM2V,cAAc,GAAG/O,OAAO,IAAIA,OAAO,CAACgP,GAAG,CAAC3U,KAAK,CAAC,CAACwC,EAAE,CAACzD,+BAA+B,CAAC;QACxF,MAAM6V,QAAQ,GAAG,CAAC,CAACjU,MAAM,IAAI,CAACA,MAAM,CAACK,OAAO,IAAIhB,KAAK,CAACN,QAAQ,CAAC,gBAAgB,CAAC;QAChF,MAAMmV,UAAU,GAAG,CAACD,QAAQ,KAAK,CAACvN,IAAI,CAACoJ,aAAa,IAAIiE,cAAc,CAAC;QACvE,IAAI,CAACrB,MAAM,CAACrT,KAAK,EAAE6U,UAAU,EAAEH,cAAc,CAAC;MAClD;IACJ,CAAC,MAAM;MACH,IAAI,CAAChN,eAAe,CAAC,CAAC;MACtB,IAAI,CAACoN,kBAAkB,CAACzN,IAAI,CAAC0N,YAAY,CAAC;MAC1C,IAAI,IAAI,CAACrT,kBAAkB,CAACsG,SAAS,CAAC,CAAC,IAAIqM,cAAc,EAAE;QACvD,IAAI,CAACxK,cAAc,CAAC,CAAC;MACzB;IACJ;EACJ,CAAC;EACD4K,iBAAiBA,CAAA,EAAG;IAChB,MAAMzK,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC1C,MAAMgG,GAAG,GAAG,IAAI,CAACzO,eAAe,CAAC0O,KAAK,CAAC,CAAC,CAAClG,QAAQ,CAAC;IAClD,OAAO,IAAI,CAACtI,kBAAkB,CAAC4O,aAAa,CAAC;MACzCL,GAAG,EAAEA;IACT,CAAC,EAAE,OAAO,CAAC;EACf,CAAC;EACD6C,KAAKA,CAACvP,OAAO,EAAE;IACX,IAAIyR,qBAAqB;IACzB,MAAMC,iBAAiB,GAAG,IAAI,CAACpU,MAAM,CAAC,mBAAmB,CAAC;IAC1D,MAAM4P,aAAa,GAAG,IAAI,CAACyE,cAAc,CAAChZ,CAAC,CAACqH,OAAO,CAAC,CAAC;IACrD,IAAI,CAACA,OAAO,EAAE;MACVyR,qBAAqB,GAAG,yCAAyC;MACjE,IAAI,CAACC,iBAAiB,EAAE;QACpBD,qBAAqB,IAAI,gDAAgD;MAC7E;MACAzR,OAAO,GAAG,IAAI,CAAC+J,SAAS,CAACnN,QAAQ,CAAC,CAAC,CAAC0E,IAAI,CAACmQ,qBAAqB,CAAC,CAACG,KAAK,CAAC,CAAC;IAC3E;IACA5R,OAAO,IAAI,IAAI,CAAC6R,aAAa,CAAClZ,CAAC,CAACqH,OAAO,CAAC,EAAEkN,aAAa,CAAC;EAC5D,CAAC;EACD4E,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC5S,YAAY;EAC5B,CAAC;EACDH,gBAAgBA,CAAA,EAAG;IACf,IAAI,IAAI,CAACP,iBAAiB,CAAC,CAAC,IAAI,CAAC1F,SAAS,CAAC,IAAI,CAACoG,YAAY,CAAC,EAAE;MAC3D,IAAI,CAACwR,UAAU,CAAC,CAAC;IACrB;EACJ,CAAC;EACDmB,aAAaA,CAACjV,QAAQ,EAAEsQ,aAAa,EAAE;IACnC,MAAM6E,eAAe,GAAGpZ,CAAC,CAAC,IAAI,CAACqK,mBAAmB,CAAC,CAAC,CAAC;IACrD,MAAMgP,YAAY,GAAGpV,QAAQ,CAACmD,OAAO,CAACgS,eAAe,CAAC;IACtD,MAAM/N,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC,CAAC;IAC5C,IAAIF,IAAI,GAAG,CAAC,CAAC;IACb,IAAI,CAACkO,YAAY,CAACnV,MAAM,IAAI,IAAI,CAAC8U,cAAc,CAAC/U,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC8S,YAAY,CAAC9S,QAAQ,CAAC,EAAE;MACvF;IACJ;IACA,IAAI,CAAC8T,UAAU,CAAC,CAAC;IACjB,IAAI,CAAC7O,YAAY,GAAG,IAAI;IACxB,IAAI,CAAC7C,aAAa,GAAG,IAAI;IACzB,IAAI,IAAI,CAAC2S,cAAc,CAAC/U,QAAQ,CAAC,IAAIX,UAAU,CAACW,QAAQ,CAAC,EAAE;MACvD,IAAI,CAACwH,gBAAgB,CAAC,CAAC;MACvBN,IAAI,GAAG,IAAI,CAAC+L,wBAAwB,CAAC,IAAI,EAAEjT,QAAQ,EAAE,KAAK,EAAEsQ,aAAa,CAAC;MAC1EtQ,QAAQ,GAAGkH,IAAI,CAAC6J,eAAe;MAC/B,IAAI3J,cAAc,IAAI,CAACF,IAAI,CAACoJ,aAAa,EAAE;QACvC,IAAI,CAAC/I,eAAe,CAAC,CAAC;MAC1B;IACJ;IACA,IAAI,CAACL,IAAI,CAAC4J,MAAM,EAAE;MACd,IAAI,CAACoC,MAAM,CAAClT,QAAQ,EAAE,CAACkH,IAAI,CAACoJ,aAAa,CAAC;MAC1C,IAAI,CAACE,wBAAwB,CAACxQ,QAAQ,CAAC;IAC3C;EACJ,CAAC;EACDqV,wBAAwBA,CAACrV,QAAQ,EAAE;IAC/B,MAAMsV,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,MAAMK,KAAK,GAAGD,IAAI,IAAIvZ,CAAC,CAACuZ,IAAI,CAAClS,OAAO,CAAC,CAAC,CAAC;IACvC,OAAOpD,QAAQ,IAAI,CAAC,KAAKA,QAAQ,CAACmD,OAAO,CAACoS,KAAK,CAAC,CAACtV,MAAM;EAC3D,CAAC;EACD6T,UAAUA,CAAA,EAAG;IACT,IAAI,CAACxR,YAAY,GAAG,IAAI,CAACb,OAAO,CAAC,UAAU,CAAC;EAChD,CAAC;EACDyE,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACqB,eAAe,CAAC,CAAC;IACtB,IAAI,CAACjF,YAAY,GAAG,IAAI;EAC5B,CAAC;EACDkO,wBAAwBA,CAAC3Q,KAAK,EAAE2V,MAAM,EAAE;IACpC,IAAI,CAAC3V,KAAK,EAAE;MACR;IACJ;IACA,MAAM4E,eAAe,GAAG,IAAI,CAACiM,sBAAsB,CAAC7Q,KAAK,EAAE2V,MAAM,CAAC;IAClE,IAAI,CAACC,uBAAuB,GAAGhR,eAAe;IAC9CzH,aAAa,CAAC0Y,qBAAqB,CAAC,IAAI,EAAEjR,eAAe,CAAC;EAC9D,CAAC;EACDyO,MAAMA,CAACrT,KAAK,EAAE8V,YAAY,EAAEpB,cAAc,EAAE;IACxC,MAAMjV,IAAI,GAAGO,KAAK,IAAI,CAACA,KAAK,CAACN,QAAQ,CAAC,QAAQ,CAAC,GAAGM,KAAK,CAACsD,OAAO,CAAC,SAAS,CAAC,GAAGtD,KAAK;IAClF,IAAIP,IAAI,IAAII,eAAe,CAACJ,IAAI,CAAC,EAAE;MAC/B;IACJ;IACA,MAAMsW,WAAW,GAAG,IAAI,CAACtT,YAAY;IACrC,MAAMuT,iBAAiB,GAAGD,WAAW,IAAIA,WAAW,CAACxS,OAAO,CAAC,CAAC;IAC9D,IAAI0S,aAAa;IACjB,IAAI,CAAC5Q,cAAc,GAAGyQ,YAAY;IAClC,MAAMI,UAAU,GAAG1W,UAAU,CAACC,IAAI,CAAC,IAAI,IAAI,CAAC8H,cAAc,CAAC,CAAC;IAC5D,IAAI2O,UAAU,EAAE;MACZD,aAAa,GAAGxW,IAAI;MACpB,IAAIsW,WAAW,EAAE;QACb,IAAI,CAACjB,kBAAkB,CAAC,IAAI,CAAC9E,YAAY,CAACvQ,IAAI,CAAC,CAAC;MACpD;IACJ,CAAC,MAAM,IAAI,IAAI,CAACyV,cAAc,CAAClV,KAAK,CAAC,EAAE;MACnCiW,aAAa,GAAGjW,KAAK;MACrB,IAAI,CAAC0P,0BAA0B,CAAC1P,KAAK,CAAC;IAC1C;IACA,IAAIiW,aAAa,EAAE;MACf,IAAID,iBAAiB,EAAE;QACnBA,iBAAiB,CAACnR,IAAI,CAAC,2CAA2C,CAAC,CAAC8P,GAAG,CAACsB,aAAa,CAAC,CAAC/B,WAAW,CAAC,wBAAwB,CAAC,CAACiC,UAAU,CAAC,UAAU,CAAC;MACvJ;MACA/Z,YAAY,CAACga,GAAG,CAACH,aAAa,EAAE,MAAM,EAAE/R,CAAC,IAAI;QACzC,IAAIA,CAAC,CAACb,aAAa,EAAE;UACjB4S,aAAa,CAAC/B,WAAW,CAAC,wBAAwB,CAAC;QACvD;MACJ,CAAC,CAAC;MACF,IAAI,CAACQ,cAAc,EAAE;QACjB,IAAI,CAAChO,uBAAuB,CAACuP,aAAa,CAAC;QAC3C7Z,YAAY,CAAC4H,OAAO,CAACiS,aAAa,EAAE,OAAO,CAAC;MAChD;MACA,IAAIH,YAAY,EAAE;QACdG,aAAa,CAAChJ,QAAQ,CAAC,wBAAwB,CAAC;QAChD,IAAIiJ,UAAU,EAAE;UACZlW,KAAK,CAACiN,QAAQ,CAAC,wBAAwB,CAAC;QAC5C;MACJ,CAAC,MAAM;QACH,IAAI,CAACnL,cAAc,CAACgR,KAAK,CAACmD,aAAa,CAAC;MAC5C;IACJ;EACJ,CAAC;EACD1Q,YAAYA,CAAC8Q,YAAY,EAAE;IACvB,IAAI,CAACpU,mBAAmB,GAAG6H,UAAU,CAAC,MAAM;MACxC,MAAMqG,iBAAiB,GAAG,IAAI,CAACzO,kBAAkB;MACjD,MAAM2S,cAAc,GAAG,MAAM,KAAKlE,iBAAiB,CAACuC,WAAW,CAAC,CAAC;MACjE,MAAM4D,eAAe,GAAG,OAAO,KAAKnG,iBAAiB,CAACuC,WAAW,CAAC,CAAC;MACnE,IAAI2B,cAAc,IAAIlE,iBAAiB,CAACoG,UAAU,CAAC,CAAC,IAAID,eAAe,IAAInG,iBAAiB,CAACqG,kBAAkB,CAAC,CAAC,EAAE;QAC/GrG,iBAAiB,CAACsG,iBAAiB,CAAC,CAAC;QACrC;MACJ;MACA,IAAIzW,KAAK,GAAG,IAAI,CAAC2D,eAAe,CAAC,CAAC;MAClC,MAAMqE,SAAS,GAAGmI,iBAAiB,CAACnI,SAAS,CAAC,CAAC;MAC/C,IAAIhI,KAAK,IAAI,EAAE,IAAI,CAACmU,mBAAmB,CAACnU,KAAK,CAAC,IAAI,CAAC,IAAI,CAACC,cAAc,CAAC,CAAC,CAAC,EAAE;QACvE,IAAI,IAAI,CAACyW,WAAW,CAAC1W,KAAK,CAACS,MAAM,CAAC,CAAC,CAAC,EAAE;UAClC,MAAMgM,SAAS,GAAG,IAAI,CAACtK,oBAAoB,IAAI,IAAI,CAACA,oBAAoB,CAAC6H,QAAQ,GAAG,CAAC,GAAG,SAAS,GAAG,WAAW;UAC/GhK,KAAK,GAAG,IAAI,CAAC0K,YAAY,CAAC+B,SAAS,CAAC;QACxC;QACA,IAAIvM,gBAAgB,CAACF,KAAK,CAAC,EAAE;UACzB,IAAIA,KAAK,CAACwC,EAAE,CAAC,IAAI,CAAC,IAAIxC,KAAK,CAACN,QAAQ,CAAC,IAAI,CAACmG,eAAe,CAAC,gBAAgB,CAAC,CAAC,EAAE;YAC1E,MAAM8Q,aAAa,GAAG3W,KAAK,CAACwC,EAAE,CAAC,qBAAqB,CAAC;YACrD,MAAMoU,yBAAyB,GAAG5W,KAAK,CAAC6E,IAAI,CAAC,QAAQ,CAAC;YACtD,MAAMgS,uBAAuB,GAAG3W,gBAAgB,CAAC0W,yBAAyB,CAAC;YAC3E,IAAI,CAACP,YAAY,IAAI,CAACM,aAAa,KAAK,IAAI,CAAC7U,cAAc,CAACgR,KAAK,CAAC,CAAC,EAAE;cACjE,IAAI6D,aAAa,IAAIE,uBAAuB,EAAE;gBAC1C1Z,aAAa,CAAC0Y,qBAAqB,CAAC,IAAI,EAAEe,yBAAyB,CAAC;gBACpE;cACJ;cAAC,CAACC,uBAAuB,IAAI,IAAI,CAACxD,MAAM,CAACrT,KAAK,CAAC;YACnD,CAAC,MAAM,IAAI,CAAC6W,uBAAuB,KAAK,IAAI,CAACzR,YAAY,IAAI,IAAI,CAACC,cAAc,CAAC,EAAE;cAC/E,IAAI,CAACgO,MAAM,CAACrT,KAAK,EAAE,IAAI,CAACqF,cAAc,CAAC;YAC3C;YACA,IAAI2C,SAAS,EAAE;cACX,IAAI,CAAC2I,wBAAwB,CAAC8B,IAAI,CAAC,IAAI,CAAC,CAACzS,KAAK,CAAC;YACnD;UACJ,CAAC,MAAM;YACH5D,YAAY,CAAC4H,OAAO,CAAChE,KAAK,EAAE,OAAO,CAAC;UACxC;QACJ;MACJ;IACJ,CAAC,CAAC;EACN,CAAC;EACD2D,eAAeA,CAAA,EAAG;IACd,OAAOzH,CAAC,CAAC,IAAI,CAACkT,QAAQ,CAAC,IAAI,CAACjN,oBAAoB,CAAC,CAAC;EACtD,CAAC;EACDkG,kCAAkCA,CAAClF,MAAM,EAAE;IACvC,IAAIyE,EAAE;IACN,MAAM6H,WAAW,GAAG,IAAI,CAACvD,eAAe,CAAC/I,MAAM,CAAC;IAChD,IAAI,KAAK,KAAKsM,WAAW,IAAIpT,SAAS,CAAC,IAAI,MAAMuL,EAAE,GAAG,IAAI,CAACzF,oBAAoB,CAAC,IAAI,KAAK,CAAC,KAAKyF,EAAE,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC8F,WAAW,CAAC,EAAE;MAC1H,MAAMjO,IAAI,GAAGvD,CAAC,CAACiH,MAAM,CAAC;MACtB,IAAI,CAACV,YAAY,IAAIjD,UAAU,CAACC,IAAI,CAAC,IAAI,IAAI,CAACqV,kBAAkB,CAAC,IAAI,CAAC9E,YAAY,CAACvQ,IAAI,CAAC,CAAC;IAC7F,CAAC,MAAM;MACH,IAAI,CAACiQ,0BAA0B,CAAC,IAAI,CAACH,yBAAyB,CAACpM,MAAM,CAAC,CAAC;IAC3E;EACJ,CAAC;EACDuM,0BAA0BA,CAAC1P,KAAK,EAAEyM,SAAS,EAAE;IACzC,MAAMqK,QAAQ,GAAG,IAAI,CAAC1F,gBAAgB,CAACpR,KAAK,EAAEyM,SAAS,CAAC;IACxD,IAAIqK,QAAQ,EAAE;MACV,IAAI,CAAC9W,KAAK,CAACI,MAAM,IAAI0W,QAAQ,CAAC9M,QAAQ,IAAI,CAAC,IAAI8M,QAAQ,CAACpJ,WAAW,IAAI,CAAC,EAAE;QACtE,IAAI,CAACqJ,sBAAsB,CAACD,QAAQ,CAAC9M,QAAQ,EAAE8M,QAAQ,CAACpJ,WAAW,CAAC;MACxE;IACJ;IACA,OAAOoJ,QAAQ;EACnB,CAAC;EACDE,4BAA4BA,CAACtJ,WAAW,EAAE;IACtC,IAAIH,MAAM,GAAG,CAAC;IACd,MAAM5M,MAAM,GAAG,IAAI,CAACkB,kBAAkB,CAAC+L,iBAAiB,CAAC,CAAC,CAACF,WAAW,CAAC;IACvE,IAAI/M,MAAM,IAAIA,MAAM,CAACqN,KAAK,EAAE;MACxBT,MAAM,GAAG,IAAI,CAAC0J,0BAA0B,CAACtW,MAAM,CAAC;IACpD,CAAC,MAAM,IAAI+M,WAAW,IAAI,CAAC,EAAE;MACzBH,MAAM,GAAG,IAAI,CAAC1L,kBAAkB,CAACsM,oBAAoB,CAAC,CAAC;IAC3D;IACA,OAAOZ,MAAM;EACjB,CAAC;EACD0J,0BAA0BA,CAACtW,MAAM,EAAE;IAC/B,MAAM4M,MAAM,GAAG7M,gCAAgC,CAAC,IAAI,EAAEC,MAAM,CAAC,GAAG,IAAI,CAAC+N,sBAAsB,CAAC,CAAC,GAAG,IAAI,CAAC7M,kBAAkB,CAAC+L,iBAAiB,CAAC,CAAC,CAACxN,MAAM,GAAG,CAAC;IACtJ,OAAOmN,MAAM;EACjB,CAAC;EACD6D,gBAAgBA,CAACpR,KAAK,EAAEyM,SAAS,EAAE;IAC/B,IAAIiB,WAAW;IACf,MAAMjO,IAAI,GAAGS,gBAAgB,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACsD,OAAO,CAAC,IAAI,CAAC;IAC3D,MAAMN,QAAQ,GAAG,IAAI,CAACpB,OAAO,CAAC,UAAU,CAAC;IACzC,IAAI1B,gBAAgB,CAACT,IAAI,CAAC,EAAE;MACxB,MAAMuK,QAAQ,GAAG,IAAI,CAACgG,YAAY,CAACvQ,IAAI,CAAC;MACxCiO,WAAW,GAAG1K,QAAQ,CAAC+M,YAAY,CAAC/P,KAAK,EAAEgK,QAAQ,CAAC;MACpD0D,WAAW,IAAI,IAAI,CAACsJ,4BAA4B,CAACtJ,WAAW,CAAC;MAC7D,IAAIjB,SAAS,EAAE;QACXiB,WAAW,GAAG,UAAU,KAAKjB,SAAS,GAAGiB,WAAW,GAAG,CAAC,GAAGA,WAAW,GAAG,CAAC;QAC1EA,WAAW,GAAG,IAAI,CAACwJ,2BAA2B,CAACxJ,WAAW,CAAC;MAC/D;MACA,OAAO;QACH1D,QAAQ,EAAEA,QAAQ;QAClB0D,WAAW,EAAEA;MACjB,CAAC;IACL;IACA;EACJ,CAAC;EACD8C,UAAUA,CAACxQ,KAAK,EAAE6U,UAAU,EAAE;IAC1B,IAAI,IAAI,CAAC5B,YAAY,CAACjT,KAAK,CAAC,EAAE;MAC1B,IAAI,CAACqT,MAAM,CAACrT,KAAK,EAAE6U,UAAU,CAAC;MAC9B,OAAO,IAAI;IACf;IACA;EACJ,CAAC;EACDtC,kBAAkBA,CAACvS,KAAK,EAAE;IACtB,IAAIA,KAAK,CAACN,QAAQ,CAAC,uBAAuB,CAAC,EAAE;MACzC,IAAI,CAACoC,cAAc,CAACgR,KAAK,CAAC9S,KAAK,EAAE,IAAI,CAAC;IAC1C;EACJ,CAAC;EACDoG,iBAAiBA,CAAC+Q,aAAa,EAAE;IAC7B,IAAIvP,EAAE;IACN,MAAM5H,KAAK,GAAG,IAAI,CAAC2D,eAAe,CAAC,CAAC;IACpCzD,gBAAgB,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACmW,UAAU,CAAC,UAAU,CAAC;IACvD,IAAI,CAAC/Q,YAAY,GAAG,KAAK;IACzB,IAAI,CAAC7C,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACJ,oBAAoB,GAAG,CAAC,CAAC;IAC9B+E,YAAY,CAAC,IAAI,CAACjF,mBAAmB,CAAC;IACtC,IAAI,MAAM2F,EAAE,GAAG,IAAI,CAACnF,YAAY,CAAC,IAAI,KAAK,CAAC,KAAKmF,EAAE,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACwP,gBAAgB,CAAC;MAC9ED,aAAa,EAAEA;IACnB,CAAC,CAAC;EACN,CAAC;EACDE,uBAAuBA,CAACrN,QAAQ,EAAEE,MAAM,EAAE;IACtC,MAAMnK,IAAI,GAAG,IAAI;IACjB,IAAIsH,IAAI;IACR,IAAIiQ,WAAW;IACf,MAAMxM,SAAS,GAAGzO,SAAS,CAAC2N,QAAQ,CAAC;IACrC,MAAMhH,QAAQ,GAAGjD,IAAI,CAAC6B,OAAO,CAAC,UAAU,CAAC;IACzC,MAAM2V,gBAAgB,GAAGvU,QAAQ,CAACO,OAAO,CAAC,CAAC;IAC3C,MAAM;MACFmK,WAAW,EAAEA;IACjB,CAAC,GAAG3N,IAAI,CAACoC,oBAAoB;IAC7B,MAAMqV,cAAc,GAAGzX,IAAI,CAACyB,eAAe,CAACiW,iBAAiB,CAAC,CAAC;IAC/DzN,QAAQ,GAAGc,SAAS,GAAGd,QAAQ,GAAGhH,QAAQ,CAAC0U,sBAAsB,CAAC,CAAC,GAAGF,cAAc;IACpF,IAAI,CAAC1M,SAAS,EAAE;MACZ/K,IAAI,CAAC+B,cAAc,CAACsL,SAAS,CAAC,CAAC;MAC/BrN,IAAI,CAAC2G,uBAAuB,CAAC6Q,gBAAgB,CAAC;MAC9Cnb,YAAY,CAAC4H,OAAO,CAACuT,gBAAgB,EAAE,OAAO,CAAC;IACnD,CAAC,MAAM;MACHD,WAAW,GAAGtU,QAAQ,CAACmH,MAAM,CAACH,QAAQ,GAAGwN,cAAc,CAAC;MACxDnQ,IAAI,GAAGtH,IAAI,CAACsR,uBAAuB,CAACnH,MAAM,EAAEoN,WAAW,CAAC;MACxD,IAAI,CAACjQ,IAAI,CAAC4J,MAAM,IAAI5J,IAAI,CAACiK,eAAe,EAAE;QACtCtH,QAAQ,GAAG3C,IAAI,CAACsQ,WAAW;MAC/B;IACJ;IACA,IAAI,CAAC7M,SAAS,IAAI,CAACzD,IAAI,CAAC4J,MAAM,EAAE;MAC5BlR,IAAI,CAACgX,sBAAsB,CAAC/M,QAAQ,EAAE0D,WAAW,CAAC;IACtD;IACA5C,SAAS,IAAI/K,IAAI,CAACwF,YAAY,CAAC,CAAC;EACpC,CAAC;EACDqS,qBAAqBA,CAACzG,YAAY,EAAE1B,WAAW,EAAEoI,IAAI,EAAE;IACnD,IAAI;MACAnK,WAAW,EAAEA;IACjB,CAAC,GAAGyD,YAAY;IAChB,IAAI;MACAnH,QAAQ,EAAEA;IACd,CAAC,GAAGmH,YAAY;IAChB,IAAI2G,mBAAmB;IACvB,IAAI,KAAK,CAAC,KAAK3G,YAAY,CAACnH,QAAQ,IAAI,MAAM,KAAK6N,IAAI,EAAE;MACrD,OAAO;QACHnK,WAAW,EAAE,CAAC;QACd1D,QAAQ,EAAE;MACd,CAAC;IACL;IACA,QAAQ6N,IAAI;MACR,KAAK,WAAW;MAChB,KAAK,MAAM;QACPC,mBAAmB,GAAG,IAAI,CAACpJ,sBAAsB,CAAC,CAAC;QACnD,IAAIhB,WAAW,GAAGoK,mBAAmB,GAAG,CAAC,IAAI,KAAK,KAAKrI,WAAW,IAAI,IAAI,CAACsI,0BAA0B,CAAC;UAC9FrK,WAAW,EAAEA,WAAW;UACxB1D,QAAQ,EAAEA;QACd,CAAC,CAAC,EAAE;UACJ0D,WAAW,EAAE;QACjB,CAAC,MAAM,IAAI,CAAC,IAAI,CAACsK,UAAU,CAAChO,QAAQ,CAAC,IAAI,MAAM,KAAK6N,IAAI,EAAE;UACtDnK,WAAW,GAAG,CAAC;UACf1D,QAAQ,EAAE;QACd;QACA;MACJ,KAAK,eAAe;MACpB,KAAK,UAAU;QACX,IAAI0D,WAAW,GAAG,CAAC,IAAI,KAAK,KAAK+B,WAAW,IAAI,IAAI,CAACwI,2BAA2B,CAAC;UACzEvK,WAAW,EAAEA,WAAW;UACxB1D,QAAQ,EAAEA;QACd,CAAC,CAAC,EAAE;UACJ0D,WAAW,EAAE;QACjB,CAAC,MAAM,IAAI1D,QAAQ,GAAG,CAAC,IAAI,UAAU,KAAK6N,IAAI,EAAE;UAC5C7N,QAAQ,EAAE;UACV8N,mBAAmB,GAAG,IAAI,CAACpJ,sBAAsB,CAAC,CAAC;UACnDhB,WAAW,GAAGoK,mBAAmB,GAAG,CAAC;QACzC;QACA;MACJ,KAAK,SAAS;QACV9N,QAAQ,GAAGA,QAAQ,GAAG,CAAC,GAAGA,QAAQ,GAAG,CAAC,GAAGA,QAAQ;QACjD;MACJ,KAAK,WAAW;QACZA,QAAQ,GAAG,CAAC,IAAI,CAACgO,UAAU,CAAChO,QAAQ,CAAC,GAAGA,QAAQ,GAAG,CAAC,GAAGA,QAAQ;IACvE;IACA,OAAO;MACH0D,WAAW,EAAEA,WAAW;MACxB1D,QAAQ,EAAEA;IACd,CAAC;EACL,CAAC;EACD+M,sBAAsBA,CAAC/M,QAAQ,EAAE0D,WAAW,EAAE;IAC1C,IAAI,CAACoH,kBAAkB,CAAC9K,QAAQ,CAAC;IACjC,IAAI,CAACuH,qBAAqB,CAAC7D,WAAW,CAAC;EAC3C,CAAC;EACDoH,kBAAkBA,CAAC9K,QAAQ,EAAE;IACzB,IAAI,CAAC,IAAI,CAAC7H,oBAAoB,EAAE;MAC5B,IAAI,CAACA,oBAAoB,GAAG,CAAC,CAAC;IAClC;IACA,IAAI,CAACA,oBAAoB,CAAC6H,QAAQ,GAAGA,QAAQ;EACjD,CAAC;EACDuH,qBAAqBA,CAAC7D,WAAW,EAAE;IAC/B,IAAI,CAAC,IAAI,CAACvL,oBAAoB,EAAE;MAC5B,IAAI,CAACA,oBAAoB,GAAG,CAAC,CAAC;IAClC;IACA,IAAI,CAACA,oBAAoB,CAACuL,WAAW,GAAGA,WAAW;EACvD,CAAC;EACDrM,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACc,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAAC6H,QAAQ,GAAG,CAAC,CAAC;EAC9E,CAAC;EACDqE,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAAClM,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACuL,WAAW,GAAG,CAAC,CAAC;EACjF,CAAC;EACDzD,kBAAkBA,CAAA,EAAG;IACjB,MAAMD,QAAQ,GAAG,IAAI,CAAC7H,oBAAoB,IAAI,IAAI,CAACA,oBAAoB,CAAC6H,QAAQ;IAChF,IAAI,CAAC3N,SAAS,CAAC2N,QAAQ,CAAC,IAAIA,QAAQ,GAAG,CAAC,EAAE;MACtC,OAAO,CAAC,CAAC;IACb;IACA,OAAOA,QAAQ,GAAG,IAAI,CAACxI,eAAe,CAACiW,iBAAiB,CAAC,CAAC;EAC9D,CAAC;EACDS,qBAAqBA,CAAA,EAAG;IACpB,MAAMxK,WAAW,GAAG,IAAI,CAACvL,oBAAoB,IAAI,IAAI,CAACA,oBAAoB,CAACuL,WAAW;IACtF,IAAI,CAACrR,SAAS,CAACqR,WAAW,CAAC,EAAE;MACzB,OAAO,CAAC,CAAC;IACb;IACA,OAAOA,WAAW,GAAG,IAAI,CAAC7L,kBAAkB,CAACsM,oBAAoB,CAAC,CAAC;EACvE,CAAC;EACD+I,2BAA2BA,CAACxJ,WAAW,EAAE;IACrC,MAAMoK,mBAAmB,GAAG,IAAI,CAACpJ,sBAAsB,CAAC,CAAC;IACzD,IAAIhB,WAAW,GAAG,CAAC,EAAE;MACjBA,WAAW,GAAG,CAAC;IACnB,CAAC,MAAM,IAAIA,WAAW,IAAIoK,mBAAmB,EAAE;MAC3CpK,WAAW,GAAGoK,mBAAmB,GAAG,CAAC;IACzC;IACA,OAAOpK,WAAW;EACtB,CAAC;EACDyK,sBAAsBA,CAAChH,YAAY,EAAE;IACjC,MAAMnR,KAAK,GAAG9D,CAAC,CAAC,IAAI,CAACkT,QAAQ,CAAC+B,YAAY,CAAC,CAAC;IAC5C,OAAO,IAAI,CAAC8B,YAAY,CAACjT,KAAK,CAAC;EACnC,CAAC;EACDgY,UAAUA,CAAChO,QAAQ,EAAE;IACjB,MAAMoO,cAAc,GAAG,IAAI,CAAC5W,eAAe;IAC3C,MAAM6W,YAAY,GAAGD,cAAc,CAAClI,KAAK,CAAC,CAAC,CAACrM,MAAM,CAAC6N,IAAI,IAAI,KAAK,KAAKA,IAAI,CAAC4G,OAAO,CAAC;IAClF,IAAI,IAAI,CAAClN,mBAAmB,CAAC,CAAC,EAAE;MAC5B,OAAOpB,QAAQ,IAAIoO,cAAc,CAACG,cAAc,CAAC,CAAC;IACtD;IACA,OAAOvO,QAAQ,KAAKqO,YAAY,CAACjY,MAAM,GAAG,CAAC;EAC/C,CAAC;EACDyM,iBAAiBA,CAACsE,YAAY,EAAE;IAC5B,IAAIqH,gBAAgB,GAAG,KAAK;IAC5B,IAAI,CAAC,KAAKrH,YAAY,CAACnH,QAAQ,IAAImH,YAAY,CAACzD,WAAW,IAAI,CAAC,EAAE;MAC9D8K,gBAAgB,GAAGA,gBAAgB,IAAI,CAAC,IAAI,CAACP,2BAA2B,CAAC9G,YAAY,CAAC;IAC1F;IACA,OAAOqH,gBAAgB;EAC3B,CAAC;EACDP,2BAA2BA,CAAC9G,YAAY,EAAE;IACtC,IAAI;MACAzD,WAAW,EAAEA;IACjB,CAAC,GAAGyD,YAAY;IAChB,IAAIsH,aAAa,GAAG,KAAK;IACzB,OAAO/K,WAAW,GAAG,CAAC,IAAI,CAAC+K,aAAa,EAAE;MACtC,MAAMC,gBAAgB,GAAG;QACrBhL,WAAW,EAAE,EAAEA,WAAW;QAC1B1D,QAAQ,EAAEmH,YAAY,CAACnH;MAC3B,CAAC;MACDyO,aAAa,GAAG,IAAI,CAACN,sBAAsB,CAACO,gBAAgB,CAAC;IACjE;IACA,OAAOD,aAAa;EACxB,CAAC;EACDV,0BAA0BA,CAAC5G,YAAY,EAAE;IACrC,IAAI;MACAzD,WAAW,EAAEA;IACjB,CAAC,GAAGyD,YAAY;IAChB,IAAIsH,aAAa,GAAG,KAAK;IACzB,MAAME,kBAAkB,GAAG,IAAI,CAACjK,sBAAsB,CAAC,CAAC;IACxD,OAAOhB,WAAW,GAAGiL,kBAAkB,GAAG,CAAC,IAAI,CAACF,aAAa,EAAE;MAC3D,MAAMC,gBAAgB,GAAG;QACrBhL,WAAW,EAAE,EAAEA,WAAW;QAC1B1D,QAAQ,EAAEmH,YAAY,CAACnH;MAC3B,CAAC;MACDyO,aAAa,GAAG,IAAI,CAACN,sBAAsB,CAACO,gBAAgB,CAAC;IACjE;IACA,OAAOD,aAAa;EACxB,CAAC;EACD7L,gBAAgBA,CAACuE,YAAY,EAAE;IAC3B,MAAM7C,eAAe,GAAG6C,YAAY,CAACzD,WAAW,IAAI,CAAC,GAAGyD,YAAY,CAACzD,WAAW,GAAG,CAAC,GAAG,CAAC;IACxF,MAAM;MACF1D,QAAQ,EAAEA;IACd,CAAC,GAAGmH,YAAY;IAChB,MAAMuH,gBAAgB,GAAG;MACrBhL,WAAW,EAAEY,eAAe;MAC5BtE,QAAQ,EAAEA;IACd,CAAC;IACD,MAAM4O,WAAW,GAAG,IAAI,CAACpX,eAAe,CAACiF,cAAc,CAAC,CAAC;IACzD,MAAMwJ,GAAG,GAAG2I,WAAW,IAAIA,WAAW,CAAC5O,QAAQ,CAAC;IAChD,MAAM6O,SAAS,GAAG,IAAI,CAACb,UAAU,CAAChO,QAAQ,CAAC;IAC3C,IAAI,CAAC6O,SAAS,EAAE;MACZ,OAAO,KAAK;IAChB;IACA,IAAI5I,GAAG,IAAI,OAAO,KAAKA,GAAG,CAACI,OAAO,IAAIc,YAAY,CAACzD,WAAW,GAAG,CAAC,EAAE;MAChE,OAAO,IAAI;IACf;IACA,IAAIyD,YAAY,CAACzD,WAAW,KAAK,IAAI,CAACgB,sBAAsB,CAAC,CAAC,GAAG,CAAC,EAAE;MAChE,OAAO,IAAI;IACf;IACA,IAAI,IAAI,CAACyJ,sBAAsB,CAACO,gBAAgB,CAAC,EAAE;MAC/C,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,CAAC9L,gBAAgB,CAAC8L,gBAAgB,CAAC;EAClD,CAAC;EACDzF,YAAYA,CAACjT,KAAK,EAAE8Y,OAAO,EAAE;IACzB,IAAI5Y,gBAAgB,CAACF,KAAK,CAAC,EAAE;MACzB,MAAMgD,QAAQ,GAAG,IAAI,CAACpB,OAAO,CAAC,UAAU,CAAC;MACzC,MAAMnC,IAAI,GAAGO,KAAK,CAACS,MAAM,CAAC,CAAC;MAC3B,MAAMoP,iBAAiB,GAAG,IAAI,CAAChO,kBAAkB;MACjD,MAAM6L,WAAW,GAAG1K,QAAQ,CAAC+M,YAAY,CAAC/P,KAAK,CAAC,GAAG6P,iBAAiB,CAAC1B,oBAAoB,CAAC,CAAC;MAC3F,MAAMxN,MAAM,GAAGkP,iBAAiB,CAACjC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAACF,WAAW,CAAC;MAC3E,MAAMiL,kBAAkB,GAAG,IAAI,CAACjK,sBAAsB,CAAC,CAAC;MACxD,MAAMyB,iBAAiB,GAAG,IAAI,CAACzO,kBAAkB;MACjD,MAAMqX,iBAAiB,GAAGpZ,WAAW,CAACF,IAAI,CAAC;MAC3C,MAAMuZ,iBAAiB,GAAGrY,MAAM,IAAIA,MAAM,CAACsY,eAAe;MAC1D,MAAMC,UAAU,GAAGvY,MAAM,IAAI,CAACX,KAAK,CAACN,QAAQ,CAAC,mBAAmB,CAAC,IAAIE,SAAS,CAACH,IAAI,CAAC;MACpF,MAAM0Z,uBAAuB,GAAG,SAAAA,CAAA,EAAW;QACvC,OAAO,CAACJ,iBAAiB,IAAIpY,MAAM,KAAK,CAACtE,SAAS,CAACsE,MAAM,CAACyY,UAAU,CAAC,IAAIJ,iBAAiB,IAAIE,UAAU,CAAC,IAAIG,QAAQ,CAACrZ,KAAK,CAACsZ,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC;MACpJ,CAAC;MACD,MAAMC,UAAU,GAAGlc,6BAA6B,CAACkc,UAAU,CAACvZ,KAAK,CAAC;MAClE,IAAIuZ,UAAU,EAAE;QACZ,OAAO,KAAK;MAChB;MACA,IAAI,IAAI,CAACpF,mBAAmB,CAACnU,KAAK,CAAC,EAAE;QACjC,OAAO,IAAI;MACf;MACA,IAAI2Y,kBAAkB,GAAGjL,WAAW,IAAIyL,uBAAuB,CAAC,CAAC,EAAE;QAC/D,MAAMK,QAAQ,GAAG,IAAI,CAAChY,eAAe,CAAC0O,KAAK,CAAC,CAAC;QAC7C,MAAMrF,eAAe,GAAG7H,QAAQ,CAAC3B,WAAW,CAAC5B,IAAI,CAAC;QAClD,MAAMwQ,GAAG,GAAGuJ,QAAQ,CAAC3O,eAAe,CAAC;QACrC,MAAM4O,aAAa,GAAGtJ,iBAAiB,IAAI,IAAI,CAACmE,eAAe,CAAC,CAAC,IAAInE,iBAAiB,CAACnI,SAAS,CAAC,CAAC;QAClG,MAAMgD,wBAAwB,GAAGmF,iBAAiB,IAAIA,iBAAiB,CAACuJ,SAAS,CAAC7O,eAAe,CAAC;QAClG,MAAM7C,SAAS,GAAGgD,wBAAwB,IAAIyO,aAAa;QAC3D,IAAI9Y,MAAM,CAACK,OAAO,EAAE;UAChB,IAAI,IAAI,CAAC2Y,mBAAmB,CAAC,CAAC,EAAE;YAC5B,OAAO,CAAC3R,SAAS,IAAI,QAAQ,KAAKrH,MAAM,CAACK,OAAO;UACpD;UACA,IAAIyY,aAAa,EAAE;YACf,OAAO,KAAK;UAChB;UACA,IAAIzO,wBAAwB,EAAE;YAC1B,OAAO,QAAQ,KAAKrK,MAAM,CAACK,OAAO;UACtC;UACA,OAAO,CAACgH,SAAS;QACrB;QACA,IAAIyR,aAAa,IAAIxJ,GAAG,IAAI,MAAM,KAAKA,GAAG,CAACI,OAAO,EAAE;UAChD,OAAO,KAAK;QAChB;QACA,OAAO,CAACrI,SAAS,IAAIrH,MAAM,CAACyP,YAAY,IAAI0I,OAAO;MACvD;IACJ;EACJ,CAAC;EACDhI,sBAAsBA,CAACrR,IAAI,EAAEiO,WAAW,EAAE;IACtC,MAAM3N,IAAI,GAAG,IAAI;IACjB,MAAM6Z,MAAM,GAAGna,IAAI,CAACoF,IAAI,CAAC,MAAM,CAAC;IAChC,IAAI7E,KAAK;IACT,IAAI6Z,OAAO;IACXnM,WAAW,GAAGA,WAAW,IAAI,CAAC;IAC9B,KAAK,IAAIoM,CAAC,GAAGpM,WAAW,EAAEoM,CAAC,GAAGF,MAAM,CAACxZ,MAAM,EAAE,EAAE0Z,CAAC,EAAE;MAC9C9Z,KAAK,GAAG4Z,MAAM,CAAC9V,EAAE,CAACgW,CAAC,CAAC;MACpB,IAAI/Z,IAAI,CAACkT,YAAY,CAACjT,KAAK,CAAC,EAAE;QAC1B6Z,OAAO,GAAG7Z,KAAK;QACf;MACJ;IACJ;IACA,OAAO6Z,OAAO;EAClB,CAAC;EACDnP,YAAYA,CAACqI,OAAO,EAAEtD,WAAW,EAAE0B,YAAY,EAAE;IAC7C,MAAM4I,mBAAmB,GAAG5I,YAAY,IAAI,IAAI,CAAChP,oBAAoB;IACrE,MAAMoF,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC,CAAC;IAC5C,MAAMyS,mBAAmB,GAAGzS,cAAc,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAACY,QAAQ,CAAC4K,OAAO,CAAC;IACpF,IAAI/S,KAAK;IACT,IAAIP,IAAI;IACR,IAAI,IAAI,CAACgD,YAAY,IAAIsX,mBAAmB,EAAE;MAC1C,MAAME,sBAAsB,GAAG,IAAI,CAACrC,qBAAqB,CAACmC,mBAAmB,EAAEtK,WAAW,EAAEsD,OAAO,CAAC;MACpG/S,KAAK,GAAG9D,CAAC,CAAC,IAAI,CAACkT,QAAQ,CAAC6K,sBAAsB,CAAC,CAAC;MAChD,MAAMC,qBAAqB,GAAG,UAAU,KAAKnH,OAAO,GAAG,IAAI,CAAClG,iBAAiB,CAACoN,sBAAsB,CAAC,GAAG,IAAI,CAACrN,gBAAgB,CAACqN,sBAAsB,CAAC;MACrJ,IAAI/Z,gBAAgB,CAACF,KAAK,CAAC,IAAI,CAAC,IAAI,CAACiT,YAAY,CAACjT,KAAK,CAAC,IAAI,IAAI,CAACma,YAAY,CAACF,sBAAsB,EAAED,mBAAmB,CAAC,IAAI,CAACE,qBAAqB,EAAE;QAClJ,IAAI3S,cAAc,EAAE;UAChBvH,KAAK,GAAG,IAAI,CAAC8Q,sBAAsB,CAAC9Q,KAAK,CAACS,MAAM,CAAC,CAAC,EAAEwZ,sBAAsB,CAACvM,WAAW,CAAC;QAC3F,CAAC,MAAM;UACH1N,KAAK,GAAG,IAAI,CAAC0K,YAAY,CAACqI,OAAO,EAAE,MAAM,EAAEkH,sBAAsB,CAAC;QACtE;MACJ;MACAxa,IAAI,GAAGS,gBAAgB,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACS,MAAM,CAAC,CAAC;MAChD,IAAI,IAAI,CAACiW,WAAW,CAACjX,IAAI,CAAC,EAAE;QACxB,MAAMuK,QAAQ,GAAG,IAAI,CAACgG,YAAY,CAACvQ,IAAI,CAAC;QACxC,IAAI,CAAC,IAAI,CAACuY,UAAU,CAAChO,QAAQ,CAAC,EAAE;UAC5BhK,KAAK,GAAG,IAAI,CAAC0K,YAAY,CAACqI,OAAO,EAAE,KAAK,EAAE;YACtCrF,WAAW,EAAEqM,mBAAmB,CAACrM,WAAW;YAC5C1D,QAAQ,EAAEA;UACd,CAAC,CAAC;QACN,CAAC,MAAM;UACH,OAAO,IAAI;QACf;MACJ;MACA,OAAO9J,gBAAgB,CAACF,KAAK,CAAC,GAAGA,KAAK,GAAG,IAAI;IACjD;IACA,OAAO,IAAI;EACf,CAAC;EACDmS,aAAaA,CAAC7I,SAAS,EAAEkK,cAAc,EAAE;IACrC,MAAMuG,mBAAmB,GAAG,IAAI,CAAC5X,oBAAoB;IACrD,MAAM0I,eAAe,GAAG,IAAI,CAACZ,kBAAkB,CAAC,CAAC;IACjD,MAAMmQ,kBAAkB,GAAG,IAAI,CAAClC,qBAAqB,CAAC,CAAC;IACvD,MAAMjI,GAAG,GAAG,IAAI,CAACzO,eAAe,CAAC0O,KAAK,CAAC,CAAC,CAACrF,eAAe,CAAC;IACzD,MAAMlK,MAAM,GAAG,IAAI,CAACkB,kBAAkB,CAAC+L,iBAAiB,CAAC,CAAC,CAACwM,kBAAkB,CAAC;IAC9E,IAAI,IAAI,CAACC,eAAe,CAACpK,GAAG,EAAEtP,MAAM,CAAC,EAAE;MACnC,IAAI,IAAI,CAACV,cAAc,CAAC,CAAC,EAAE;QACvB,IAAI,CAACyB,kBAAkB,CAAC4Y,OAAO,CAACzP,eAAe,CAAC;MACpD,CAAC,MAAM,IAAIkP,mBAAmB,EAAE;QAC5B,IAAI,CAACQ,cAAc,CAACjR,SAAS,EAAEkK,cAAc,CAAC;MAClD;IACJ;EACJ,CAAC;EACD6G,eAAeA,CAACpK,GAAG,EAAEtP,MAAM,EAAE;IACzB,OAAO,IAAI,CAACe,kBAAkB,CAAC4O,aAAa,CAAC;MACzCL,GAAG,EAAEA;IACT,CAAC,CAAC,IAAItP,MAAM,IAAIA,MAAM,CAACyP,YAAY;EACvC,CAAC;EACDM,gBAAgBA,CAAA,EAAG;IACf,MAAM1G,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC1C,MAAMuQ,QAAQ,GAAG,IAAI,CAACtC,qBAAqB,CAAC,CAAC;IAC7C,OAAO,IAAI,CAACxW,kBAAkB,CAAC+Y,QAAQ,CAACzQ,QAAQ,EAAEwQ,QAAQ,CAAC;EAC/D,CAAC;EACDD,cAAcA,CAACjR,SAAS,EAAEkK,cAAc,EAAE;IACtC,IAAI,CAACtR,mBAAmB,GAAG7F,SAAS,CAACmX,cAAc,CAAC;IACpD,MAAMkH,UAAU,GAAG,IAAI,CAAChK,gBAAgB,CAAC,CAAC;IAC1C,IAAI,IAAI,CAACtH,qBAAqB,CAAC,CAAC,EAAE;MAC9B,IAAI,IAAI,KAAKsR,UAAU,EAAE;QACrB,IAAI,CAACC,mBAAmB,CAACrR,SAAS,EAAEkK,cAAc,CAAC;MACvD,CAAC,MAAM,IAAIkH,UAAU,IAAIA,UAAU,CAACE,IAAI,EAAE;QACtC,MAAMC,WAAW,GAAG,QAAQ,KAAKrH,cAAc,GAAGA,cAAc,GAAG,EAAE;QACrEkH,UAAU,CAACE,IAAI,CAAC,MAAM,IAAI,CAACD,mBAAmB,CAACrR,SAAS,EAAEuR,WAAW,CAAC,CAAC;MAC3E;IACJ;EACJ,CAAC;EACDF,mBAAmBA,CAACrR,SAAS,EAAEuR,WAAW,EAAE;IACxC,IAAIjT,EAAE,EAAEgD,EAAE;IACV,MAAMkQ,MAAM,GAAG,IAAI,CAACnX,eAAe,CAAC,CAAC,CAACkB,IAAI,CAAC/F,6BAA6B,CAAC,CAACgF,EAAE,CAAC,CAAC,CAAC;IAC/E,MAAMiX,YAAY,GAAGte,WAAW,CAAC6M,SAAS,EAAE;MACxC0R,IAAI,EAAE,SAAS;MACf7X,MAAM,EAAE2X,MAAM,CAACnW,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC;IACF,MAAMsW,aAAa,GAAGxe,WAAW,CAAC6M,SAAS,EAAE;MACzC0R,IAAI,EAAE,UAAU;MAChB7X,MAAM,EAAE2X,MAAM,CAACnW,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC;IACF,MAAMuW,UAAU,GAAGze,WAAW,CAAC6M,SAAS,EAAE;MACtC0R,IAAI,EAAE,OAAO;MACb7X,MAAM,EAAE2X,MAAM,CAACnW,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC;IACF,IAAIuW,UAAU,CAACjT,aAAa,EAAE;MAC1BiT,UAAU,CAACjT,aAAa,GAAGxL,WAAW,CAACye,UAAU,CAACjT,aAAa,EAAE;QAC7D0J,IAAI,EAAEkJ;MACV,CAAC,CAAC;IACN;IACA,IAAI,MAAMjQ,EAAE,GAAG,CAAChD,EAAE,GAAGkT,MAAM,CAACnW,GAAG,CAAC,CAAC,CAAC,EAAEwW,MAAM,CAAC,IAAI,KAAK,CAAC,KAAKvQ,EAAE,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACM,IAAI,CAACtD,EAAE,CAAC;IACnFxL,YAAY,CAAC4H,OAAO,CAAC8W,MAAM,EAAEC,YAAY,CAAC;IAC1C,IAAI,CAACA,YAAY,CAAC7S,kBAAkB,CAAC,CAAC,EAAE;MACpC9L,YAAY,CAAC4H,OAAO,CAAC8W,MAAM,EAAEG,aAAa,CAAC;MAC3C,IAAI,CAACA,aAAa,CAAC/S,kBAAkB,CAAC,CAAC,EAAE;QACrC,MAAMkT,OAAO,GAAGpe,OAAO,CAACqe,OAAO,GAAG,EAAE,GAAG,CAAC;QACxCvR,UAAU,CAAC,MAAM;UACbgR,MAAM,CAACQ,GAAG,CAACT,WAAW,CAAC;UACvB,MAAMU,gBAAgB,GAAGT,MAAM,CAACxX,OAAO,CAAC,YAAY,CAAC;UACrDlH,YAAY,CAAC2I,GAAG,CAACwW,gBAAgB,EAAE,UAAU,CAAC;UAC9Cnf,YAAY,CAACga,GAAG,CAACmF,gBAAgB,EAAE,UAAU,EAAE,MAAM;YACjDnf,YAAY,CAAC4H,OAAO,CAAC8W,MAAM,EAAE,QAAQ,CAAC;UAC1C,CAAC,CAAC;UACF1e,YAAY,CAAC4H,OAAO,CAAC8W,MAAM,EAAEI,UAAU,CAAC;QAC5C,CAAC,EAAEE,OAAO,CAAC;MACf;IACJ;EACJ,CAAC;EACDhI,wBAAwBA,CAAClJ,MAAM,EAAElK,KAAK,EAAEwb,YAAY,EAAE/K,aAAa,EAAE;IACjE,IAAIpJ,IAAI,GAAG,CAAC,CAAC;IACb,MAAM8J,YAAY,GAAG,IAAI,CAACC,gBAAgB,CAACpR,KAAK,CAAC,IAAI,CAAC,CAAC;IACvD,IAAI,IAAI,CAACyH,eAAe,CAAC,CAAC,EAAE;MACxBJ,IAAI,GAAG,IAAI,CAAC2J,wBAAwB,CAAC9G,MAAM,EAAElK,KAAK,EAAEyQ,aAAa,CAAC;MAClE,IAAI,CAACpJ,IAAI,CAAC4J,MAAM,EAAE;QACdE,YAAY,CAACzD,WAAW,GAAGrG,IAAI,CAACoU,cAAc;QAC9CtK,YAAY,CAACnH,QAAQ,GAAG3C,IAAI,CAACsQ,WAAW;QACxClH,aAAa,GAAGpJ,IAAI,CAACoJ,aAAa;QAClCzQ,KAAK,GAAG9D,CAAC,CAAC,IAAI,CAACkT,QAAQ,CAAC+B,YAAY,CAAC,CAAC;MAC1C;IACJ;IACA,IAAI,CAAC9J,IAAI,CAAC4J,MAAM,IAAIuK,YAAY,IAAIxb,KAAK,EAAE;MACvCqH,IAAI,GAAG,IAAI,CAACgK,uBAAuB,CAACnH,MAAM,EAAElK,KAAK,CAACS,MAAM,CAAC,CAAC,CAAC;MAC3D,IAAI,CAAC4G,IAAI,CAAC4J,MAAM,EAAE;QACdE,YAAY,CAACnH,QAAQ,GAAG3C,IAAI,CAACsQ,WAAW;QACxCtQ,IAAI,CAACoJ,aAAa,GAAGA,aAAa;MACtC;IACJ;IACApJ,IAAI,CAAC6J,eAAe,GAAGhV,CAAC,CAAC,IAAI,CAACkT,QAAQ,CAAC+B,YAAY,CAAC,CAAC;IACrD,IAAI,CAAC9J,IAAI,CAAC6J,eAAe,CAAC9Q,MAAM,EAAE;MAC9BiH,IAAI,CAAC6J,eAAe,GAAGlR,KAAK;IAChC;IACA,OAAOqH,IAAI;EACf,CAAC;EACD2J,wBAAwBA,CAAC9G,MAAM,EAAEwR,YAAY,EAAEjL,aAAa,EAAE;IAC1D,MAAMkL,aAAa,GAAG,IAAI,CAAC9a,MAAM,CAAC,oBAAoB,CAAC;IACvD,MAAMkU,YAAY,GAAG,IAAI,CAAClU,MAAM,CAAC,iBAAiB,CAAC;IACnD,MAAMsQ,YAAY,GAAG,IAAI,CAACC,gBAAgB,CAACsK,YAAY,CAAC;IACxD,MAAMhO,WAAW,GAAGyD,YAAY,GAAGA,YAAY,CAACzD,WAAW,GAAG,CAAC,CAAC;IAChE,MAAM1D,QAAQ,GAAGmH,YAAY,GAAGA,YAAY,CAACnH,QAAQ,GAAG,CAAC,CAAC;IAC1D,MAAM3C,IAAI,GAAG;MACTuU,WAAW,EAAEF,YAAY;MACzBG,eAAe,EAAEF,aAAa;MAC9B5G,YAAY,EAAEA,YAAY;MAC1B0G,cAAc,EAAE/N,WAAW;MAC3BiK,WAAW,EAAE3N,QAAQ;MACrB8R,IAAI,EAAE,IAAI,CAACta,eAAe,CAACiF,cAAc,CAAC,CAAC;MAC3CsV,OAAO,EAAE,IAAI,CAACla,kBAAkB,CAAC+L,iBAAiB,CAAC,CAAC;MACpD1K,KAAK,EAAEgH,MAAM;MACbuG,aAAa,EAAEA,aAAa,IAAI,KAAK;MACrCQ,MAAM,EAAE;IACZ,CAAC;IACD,IAAI,CAAC7O,qBAAqB,GAAG,IAAI;IACjC,IAAI,CAACmH,aAAa,CAAC,uBAAuB,EAAElC,IAAI,CAAC;IACjD,IAAIA,IAAI,CAACoU,cAAc,KAAK/N,WAAW,IAAIrG,IAAI,CAACsQ,WAAW,KAAK3N,QAAQ,EAAE;MACtE3C,IAAI,CAAC6J,eAAe,GAAGhV,CAAC,CAAC,IAAI,CAACkT,QAAQ,CAAC;QACnC1B,WAAW,EAAErG,IAAI,CAACoU,cAAc;QAChCzR,QAAQ,EAAE3C,IAAI,CAACsQ;MACnB,CAAC,CAAC,CAAC;IACP;IACA,IAAItQ,IAAI,CAAC4J,MAAM,EAAE;MACb,IAAI,CAAC7O,qBAAqB,GAAG;QACzB4H,QAAQ,EAAEA,QAAQ;QAClB0D,WAAW,EAAEA;MACjB,CAAC;IACL;IACA,OAAOrG,IAAI;EACf,CAAC;EACD2U,uBAAuBA,CAACN,YAAY,EAAEC,aAAa,EAAE5G,YAAY,EAAE;IAC/D,MAAMhV,IAAI,GAAG,IAAI;IACjB,MAAMqY,cAAc,GAAGrY,IAAI,CAACyB,eAAe;IAC3C,MAAMkM,WAAW,GAAG3N,IAAI,CAAC6B,OAAO,CAAC,UAAU,CAAC,CAACmO,YAAY,CAAC2L,YAAY,CAAC;IACvE,MAAM1R,QAAQ,GAAG,IAAI,CAACgG,YAAY,CAAC0L,YAAY,IAAIA,YAAY,CAACjb,MAAM,CAAC,CAAC,CAAC;IACzE,MAAMwb,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACnS,QAAQ,GAAGoO,cAAc,CAACX,iBAAiB,CAAC,CAAC,EAAEW,cAAc,CAAClI,KAAK,CAAC,CAAC,CAAC9P,MAAM,GAAG,CAAC,CAAC;IAChH,MAAMgc,aAAa,GAAGrc,IAAI,CAAC2B,kBAAkB,CAAC2a,UAAU,CAACJ,aAAa,EAAEvO,WAAW,CAAC;IACpF,MAAMuC,GAAG,GAAGmI,cAAc,CAAClI,KAAK,CAAC,CAAC,CAAC+L,aAAa,CAAC;IACjD,IAAI,CAACG,aAAa,KAAKT,aAAa,KAAKjO,WAAW,IAAIqH,YAAY,KAAK/K,QAAQ,CAAC,EAAE;MAChFjK,IAAI,CAACwJ,aAAa,CAAC,sBAAsB,EAAE;QACvCqS,WAAW,EAAEF,YAAY;QACzBhO,WAAW,EAAEA,WAAW;QACxB1D,QAAQ,EAAEA,QAAQ;QAClBiG,GAAG,EAAEA,GAAG;QACRtP,MAAM,EAAEZ,IAAI,CAAC8B,kBAAkB,CAAC+L,iBAAiB,CAAC,CAAC,CAACF,WAAW;MACnE,CAAC,CAAC;IACN;EACJ,CAAC;EACD2D,uBAAuBA,CAAC/H,SAAS,EAAEgT,cAAc,EAAE;IAC/C,MAAM3E,WAAW,GAAG,IAAI,CAAC3H,YAAY,CAACsM,cAAc,CAAC;IACrD,MAAMlE,cAAc,GAAG,IAAI,CAAC5W,eAAe;IAC3C,MAAM+a,mBAAmB,GAAG,IAAI,CAAC1b,MAAM,CAAC,iBAAiB,CAAC;IAC1D,MAAM2b,qBAAqB,GAAGpE,cAAc,CAACoE,qBAAqB,CAAC,CAAC;IACpE,MAAMnV,IAAI,GAAG;MACToV,UAAU,EAAEH,cAAc;MAC1BvH,YAAY,EAAEwH,mBAAmB;MACjC5E,WAAW,EAAEA,WAAW;MACxBzU,KAAK,EAAEoG,SAAS;MAChBwS,IAAI,EAAE1D,cAAc,CAAC3R,cAAc,CAAC,CAAC;MACrCwK,MAAM,EAAE;IACZ,CAAC;IACD,IAAI,CAACmH,cAAc,IAAIA,cAAc,CAAC/M,SAAS,CAAC,CAAC,KAAKmR,qBAAqB,CAACE,MAAM,IAAIF,qBAAqB,CAACG,MAAM,CAAC,EAAE;MACjHtV,IAAI,CAAC4J,MAAM,GAAG,IAAI;MAClB,OAAO5J,IAAI;IACf;IACA,IAAI,IAAI,CAACxG,MAAM,CAAC,mBAAmB,CAAC,EAAE;MAClC,IAAI,CAAC0I,aAAa,CAAC,sBAAsB,EAAElC,IAAI,CAAC;MAChD,IAAI,CAACA,IAAI,CAAC4J,MAAM,IAAI5J,IAAI,CAACsQ,WAAW,KAAKA,WAAW,EAAE;QAClDtQ,IAAI,CAACkN,eAAe,GAAGlN,IAAI,CAACsQ,WAAW,GAAG,CAAC;QAC3C,IAAI,CAACtQ,IAAI,CAACkN,eAAe,EAAE;UACvB,IAAI,CAACO,kBAAkB,CAACzN,IAAI,CAACsQ,WAAW,CAAC;QAC7C;QACAtQ,IAAI,CAACiK,eAAe,GAAG,IAAI;MAC/B;IACJ;IACA,OAAOjK,IAAI;EACf,CAAC;EACDuV,sBAAsBA,CAACtF,WAAW,EAAE;IAChC,IAAIrH,GAAG;IACP,MAAM4M,aAAa,GAAG,IAAI,CAAChc,MAAM,CAAC,eAAe,CAAC;IAClD,MAAMic,eAAe,GAAG,IAAI,CAAC3b,aAAa,CAAC,OAAO,CAAC;IACnD,MAAM4b,eAAe,GAAG,IAAI,KAAKD,eAAe,IAAI,KAAK,CAAC,KAAKA,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACE,uBAAuB,CAACH,aAAa,CAAC;IAChJ,IAAI,IAAI,CAAChc,MAAM,CAAC,mBAAmB,CAAC,EAAE;MAClC,IAAIkc,eAAe,IAAI,CAAC,EAAE;QACtB,MAAM3E,cAAc,GAAG,IAAI,CAAC5W,eAAe;QAC3CyO,GAAG,GAAG8M,eAAe,IAAI,CAAC,IAAI3E,cAAc,CAAC3R,cAAc,CAAC,CAAC,CAACsW,eAAe,GAAG3E,cAAc,CAACX,iBAAiB,CAAC,CAAC,CAAC;MACvH;MACA,IAAI,CAAClO,aAAa,CAAC,qBAAqB,EAAE;QACtCkT,UAAU,EAAEnF,WAAW;QACvBtN,QAAQ,EAAE+S,eAAe;QACzB9M,GAAG,EAAEA;MACT,CAAC,CAAC;IACN;EACJ,CAAC;EACDxM,qBAAqBA,CAACP,KAAK,EAAE;IACzB,OAAO/F,aAAa,CAAC8f,sBAAsB,CAAC,IAAI,EAAE/gB,CAAC,CAACgH,KAAK,CAACC,MAAM,CAAC,CAAC;EACtE,CAAC;EACDlD,cAAcA,CAAA,EAAG;IACb,MAAMid,QAAQ,GAAG,IAAI,CAACxb,kBAAkB,CAACgR,WAAW,CAAC,CAAC;IACtD,OAAO,KAAK,KAAKwK,QAAQ,IAAI,MAAM,KAAKA,QAAQ;EACpD,CAAC;EACD5I,eAAeA,CAAA,EAAG;IACd,MAAM4I,QAAQ,GAAG,IAAI,CAACxb,kBAAkB,CAACgR,WAAW,CAAC,CAAC;IACtD,OAAO,MAAM,KAAKwK,QAAQ,IAAI,OAAO,KAAKA,QAAQ;EACtD,CAAC;EACD/T,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACmL,eAAe,CAAC,CAAC,IAAI,IAAI,CAACzT,MAAM,CAAC,mCAAmC,CAAC;EACrF,CAAC;EACDgQ,sBAAsBA,CAAC7Q,KAAK,EAAE2V,MAAM,EAAE;IAClC,MAAM/Q,eAAe,GAAG5E,KAAK,CAAC6E,IAAI,CAAC/F,6BAA6B,CAAC,CAAC+E,MAAM,CAAC,UAAU,CAAC;IACpF,OAAO8R,MAAM,GAAG/Q,eAAe,CAACuY,IAAI,CAAC,CAAC,GAAGvY,eAAe,CAACuQ,KAAK,CAAC,CAAC;EACpE,CAAC;EACDzO,uBAAuBA,CAACvG,QAAQ,EAAE;IAC9B,MAAMid,QAAQ,GAAG,IAAI,CAACvc,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;IAC7CV,QAAQ,CAACmZ,IAAI,CAAC,UAAU,EAAEjd,SAAS,CAAC+gB,QAAQ,CAAC,GAAGA,QAAQ,GAAG,CAAC,CAAC;EACjE,CAAC;EACDhO,QAAQA,CAAC+B,YAAY,EAAE;IACnB,IAAI,IAAI,CAAC1O,YAAY,IAAI0O,YAAY,EAAE;MACnC,MAAMqG,cAAc,GAAG,IAAI,CAAChW,eAAe,CAACiW,iBAAiB,CAAC,CAAC;MAC/D,MAAM9W,MAAM,GAAG,IAAI,CAACkB,kBAAkB,CAAC+L,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAACuD,YAAY,CAACzD,WAAW,CAAC;MAC9F,MAAMiB,iBAAiB,GAAGhO,MAAM,IAAIA,MAAM,CAACqN,KAAK,GAAG,IAAI,CAACiJ,0BAA0B,CAACtW,MAAM,CAAC,GAAG,IAAI,CAACkB,kBAAkB,CAACsM,oBAAoB,CAAC,CAAC;MAC3I,MAAMnE,QAAQ,GAAGmH,YAAY,CAACnH,QAAQ,IAAI,CAAC,GAAGmH,YAAY,CAACnH,QAAQ,GAAGwN,cAAc,GAAG,CAAC,CAAC;MACzF,MAAM9J,WAAW,GAAGyD,YAAY,CAACzD,WAAW,IAAI,CAAC,GAAGyD,YAAY,CAACzD,WAAW,GAAGiB,iBAAiB,GAAG,CAAC,CAAC;MACrG,OAAO,IAAI,CAAClM,YAAY,CAAC4a,OAAO,CAAC;QAC7BrT,QAAQ,EAAEA,QAAQ;QAClB0D,WAAW,EAAEA;MACjB,CAAC,CAAC;IACN;EACJ,CAAC;EACDsC,YAAYA,CAACvQ,IAAI,EAAE;IACf,MAAMuD,QAAQ,GAAG,IAAI,CAACpB,OAAO,CAAC,UAAU,CAAC;IACzC,IAAIoI,QAAQ,GAAGhH,QAAQ,CAAC3B,WAAW,CAAC5B,IAAI,CAAC;IACzC,IAAIuK,QAAQ,IAAI,CAAC,EAAE;MACfA,QAAQ,IAAI,IAAI,CAACxI,eAAe,CAACiW,iBAAiB,CAAC,CAAC;IACxD;IACA,OAAOzN,QAAQ;EACnB,CAAC;EACD0M,WAAWA,CAACjX,IAAI,EAAE;IACd,MAAMwQ,GAAG,GAAGxQ,IAAI,IAAIA,IAAI,CAACkF,GAAG,CAAC,CAAC,CAAC;IAC/B,OAAOsL,GAAG,KAAK,MAAM,KAAKA,GAAG,CAACqN,KAAK,CAACC,OAAO,IAAI9d,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACmG,eAAe,CAAC,cAAc,CAAC,CAAC,IAAIlG,WAAW,CAACF,IAAI,CAAC,IAAI,CAACA,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACmG,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;EACjL,CAAC;EACDoM,uBAAuBA,CAAA,EAAG;IACtB,OAAO,WAAW,KAAK,IAAI,CAACpR,MAAM,CAAC,mCAAmC,CAAC;EAC3E,CAAC;EACD8Y,mBAAmBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAC9Y,MAAM,CAAC,6BAA6B,CAAC;EACrD,CAAC;EACDwJ,sBAAsBA,CAACmH,GAAG,EAAE;IACxB,IAAIpH,aAAa;IACjB,QAAQoH,GAAG;MACP,KAAK,SAAS;QACVpH,aAAa,GAAG,SAAS;QACzB;MACJ,KAAK,WAAW;QACZA,aAAa,GAAG,SAAS;QACzB;MACJ,KAAK,WAAW;QACZA,aAAa,GAAG,IAAI,CAACvJ,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW,GAAG,eAAe;QACzE;MACJ,KAAK,YAAY;QACbuJ,aAAa,GAAG,IAAI,CAACvJ,MAAM,CAAC,YAAY,CAAC,GAAG,eAAe,GAAG,WAAW;IACjF;IACA,OAAOuJ,aAAa;EACxB,CAAC;EACDhJ,mBAAmBA,CAAA,EAAG;IAClB,MAAMoc,aAAa,GAAG,IAAI,CAAC3c,MAAM,CAAC,gBAAgB,CAAC;IACnD,OAAO,SAAS,KAAK2c,aAAa,IAAI,UAAU,KAAKA,aAAa;EACtE,CAAC;EACDpS,mBAAmBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAChK,mBAAmB,CAAC,CAAC,IAAIjE,aAAa,CAACsgB,qBAAqB,CAAC,IAAI,CAAC;EAClF,CAAC;EACDjT,sBAAsBA,CAAA,EAAG;IACrB,OAAO,SAAS,KAAK,IAAI,CAAC3J,MAAM,CAAC,+BAA+B,CAAC;EACrE,CAAC;EACD0K,SAASA,CAACuD,IAAI,EAAEG,GAAG,EAAEjF,QAAQ,EAAEE,MAAM,EAAE;IACnC,MAAMnK,IAAI,GAAG,IAAI;IACjB,MAAM8L,UAAU,GAAG,IAAI,CAACjK,OAAO,CAAC,UAAU,CAAC,CAACc,aAAa,CAAC,CAAC;IAC3D,IAAI3C,IAAI,CAACoC,oBAAoB,EAAE;MAC3B,MAAMub,aAAa,GAAG,SAAAA,CAAA,EAAW;QAC7B7R,UAAU,CAAC9G,GAAG,CAAC,QAAQ,EAAE2Y,aAAa,CAAC;QACvC5T,UAAU,CAAC/J,IAAI,CAACsX,uBAAuB,CAAC5E,IAAI,CAAC1S,IAAI,EAAEiK,QAAQ,EAAEE,MAAM,CAAC,CAAC;MACzE,CAAC;MACD2B,UAAU,CAAC7G,EAAE,CAAC,QAAQ,EAAE0Y,aAAa,CAAC;IAC1C;IACA,OAAO7R,UAAU,CAACmD,QAAQ,CAAC;MACvBF,IAAI,EAAEA,IAAI;MACVG,GAAG,EAAEA;IACT,CAAC,CAAC;EACN,CAAC;EACD+E,iBAAiBA,CAACzQ,OAAO,EAAE;IACvB,MAAMoa,SAAS,GAAGzhB,CAAC,CAACqH,OAAO,CAAC,CAACD,OAAO,CAAC,GAAG,GAAG,IAAI,CAACuC,eAAe,CAAC,WAAW,CAAC,CAAC;IAC7E,OAAO8X,SAAS,CAACvd,MAAM,IAAI,IAAI,CAACwd,mBAAmB,CAACD,SAAS,CAAC;EAClE,CAAC;EACDxJ,mBAAmBA,CAAC5Q,OAAO,EAAE;IACzB,MAAMsa,iBAAiB,GAAG3hB,CAAC,CAACqH,OAAO,CAAC,CAACD,OAAO,CAAC,wBAAwB,CAAC;IACtE,OAAOua,iBAAiB,CAACzd,MAAM,IAAI,IAAI,CAACwd,mBAAmB,CAACC,iBAAiB,CAAC;EAClF,CAAC;EACDC,8BAA8BA,CAAC5K,SAAS,EAAE;IACtC,IAAI,CAAC,IAAI,CAACc,iBAAiB,CAACd,SAAS,CAAC,IAAIA,SAAS,EAAE;MACjD,IAAI,CAACxM,uBAAuB,CAACwM,SAAS,CAAC;IAC3C;EACJ,CAAC;EACDlG,+BAA+BA,CAAC7J,MAAM,EAAEsJ,SAAS,EAAE;IAC/C,IAAI,IAAI,CAAC0H,mBAAmB,CAAChR,MAAM,CAAC,EAAE;MAClC,IAAI,CAACuM,0BAA0B,CAACxT,CAAC,CAACiH,MAAM,CAAC,EAAEsJ,SAAS,CAAC;MACrD,MAAMyG,SAAS,GAAG,IAAI,CAACxI,YAAY,CAAC+B,SAAS,EAAE,KAAK,CAAC;MACrD,IAAI,CAACqR,8BAA8B,CAAC5K,SAAS,EAAEhX,CAAC,CAACiH,MAAM,CAAC,CAAC;MACzD,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC;EACD+I,eAAe,EAAE/I,MAAM,IAAIjH,CAAC,CAACiH,MAAM,CAAC,CAACX,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,MAAM;EAC9D4G,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACD,qBAAqB,CAAC,CAAC,IAAI,IAAI,CAACjH,mBAAmB;EACnE,CAAC;EACDwM,sBAAsBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAC7M,kBAAkB,CAAC+L,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAACxN,MAAM;EACvE,CAAC;EACD+Z,YAAYA,CAAChJ,YAAY,EAAE6I,mBAAmB,EAAE;IAC5C,MAAM;MACFtM,WAAW,EAAEA;IACjB,CAAC,GAAGyD,YAAY;IAChB,MAAM2G,mBAAmB,GAAG,IAAI,CAACpJ,sBAAsB,CAAC,CAAC;IACzD,OAAOsL,mBAAmB,GAAGtM,WAAW,IAAI,CAAC,IAAIA,WAAW,IAAIoK,mBAAmB,GAAG,CAAC,GAAGpK,WAAW,GAAG,CAAC,IAAIA,WAAW,GAAGoK,mBAAmB,GAAG,CAAC;EACtJ,CAAC;EACD5C,cAAc,EAAE/U,QAAQ,IAAIA,QAAQ,CAACC,MAAM,IAAI,IAAI,KAAKD,QAAQ,CAAC,CAAC,CAAC,CAAC4d,OAAO;EAC3ExO,yBAAyBA,CAACpM,MAAM,EAAE;IAC9B,MAAMsM,WAAW,GAAG,IAAI,CAACvD,eAAe,CAAC/I,MAAM,CAAC;IAChD,MAAM6a,cAAc,GAAG9hB,CAAC,CAACiH,MAAM,CAAC;IAChC,IAAInD,KAAK;IACT,IAAI,MAAM,KAAKyP,WAAW,EAAE;MACxBzP,KAAK,GAAGge,cAAc,CAAC1a,OAAO,CAAC,cAAc,CAAC;IAClD,CAAC,MAAM;MACHtD,KAAK,GAAGge,cAAc,CAACC,QAAQ,CAAC,CAAC,CAACtJ,GAAG,CAAC,oBAAoB,CAAC,CAACQ,KAAK,CAAC,CAAC;IACvE;IACA,OAAOnV,KAAK;EAChB,CAAC;EACDuG,mBAAmBA,CAAA,EAAG;IAClB,MAAMvD,QAAQ,GAAG,IAAI,CAACpB,OAAO,CAAC,UAAU,CAAC;IACzC,OAAOoB,QAAQ,IAAIA,QAAQ,CAACO,OAAO,CAAC,CAAC;EACzC,CAAC;EACDxB,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAAClB,MAAM,CAAC,4BAA4B,CAAC;EACpD,CAAC;EACDqd,gCAAgCA,CAAClU,QAAQ,EAAE0D,WAAW,EAAE;IACpD,IAAI,IAAI,CAACtL,qBAAqB,EAAE;MAC5B,MAAM+b,UAAU,GAAG,IAAI,CAAC/b,qBAAqB,CAAC4H,QAAQ,KAAKA,QAAQ,IAAI,IAAI,CAAC5H,qBAAqB,CAACsL,WAAW,KAAKA,WAAW;MAC7H,IAAI,CAACtL,qBAAqB,GAAG,IAAI;MACjC,OAAO+b,UAAU;IACrB;IACA;EACJ,CAAC;EACDC,qBAAqBA,CAAA,EAAG;IACpB,MAAMhG,cAAc,GAAG,IAAI,CAAC5W,eAAe;IAC3C,MAAMqJ,eAAe,GAAG,IAAI,CAACZ,kBAAkB,CAAC,CAAC;IACjD,MAAMoO,YAAY,GAAGD,cAAc,CAAClI,KAAK,CAAC,CAAC;IAC3C,MAAMmO,gBAAgB,GAAGhG,YAAY,CAACjY,MAAM,GAAGiY,YAAY,CAACjY,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3E,MAAMoX,cAAc,GAAGY,cAAc,CAACX,iBAAiB,CAAC,CAAC;IACzD4G,gBAAgB,IAAI,CAAC,IAAIxT,eAAe,GAAGwT,gBAAgB,IAAI,IAAI,CAACvJ,kBAAkB,CAACuJ,gBAAgB,GAAG7G,cAAc,CAAC;EAC7H;AACJ,CAAC;AACD,MAAM8G,4BAA4B,GAAGlhB,IAAI,CAACmhB,cAAc,CAACC,OAAO,CAACld,yBAAyB,CAAC;AAC3F,OAAO,MAAMmd,wBAAwB,GAAG;EACpCC,cAAc,EAAEA,CAAA,MAAO;IACnBC,2BAA2B,EAAE,KAAK;IAClCC,kBAAkB,EAAE;MAChBC,OAAO,EAAE,IAAI;MACbC,cAAc,EAAE,WAAW;MAC3B1M,iBAAiB,EAAE,MAAM;MACzB2M,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EACFC,WAAW,EAAE;IACTJ,kBAAkB,EAAEN;EACxB,CAAC;EACDW,SAAS,EAAE;IACPC,KAAK,EAAE;MACHlc,QAAQ,EAAE;QACNmc,SAASA,CAACjb,CAAC,EAAE;UACT,MAAMkb,YAAY,GAAG,IAAI,CAACje,aAAa,CAAC,SAAS,CAAC,CAACke,eAAe,CAAC,CAAC;UACpE,MAAMne,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;UACnE,MAAMY,iBAAiB,GAAGb,kBAAkB,CAACa,iBAAiB,CAAC,CAAC;UAChE,IAAIqd,YAAY,KAAKlb,CAAC,CAAC8F,QAAQ,EAAE;YAC7B9I,kBAAkB,CAACyG,gBAAgB,CAAC,CAAC;UACzC;UACA,MAAM2X,8BAA8B,GAAG,CAACjf,QAAQ,CAAC,CAAC,IAAI,CAAC0B,iBAAiB,KAAK,IAAI,CAAClB,MAAM,CAAC,mBAAmB,CAAC;UAC7G,IAAIye,8BAA8B,EAAE;YAChC,IAAI,CAACC,+BAA+B,CAACrb,CAAC,EAAE,CAACnC,iBAAiB,CAAC;UAC/D;UACA,IAAI,CAACkF,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QACxC,CAAC;QACDF,+BAA+BA,CAACrb,CAAC,EAAEwb,KAAK,EAAE;UACtC,MAAM;YACFzX,aAAa,EAAEA;UACnB,CAAC,GAAG/D,CAAC,CAAChB,KAAK;UACX,IAAI+E,aAAa,EAAE;YACf,MAAM/G,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;YACnE,MAAMnB,KAAK,GAAG9D,CAAC,CAAC+L,aAAa,CAAC9E,MAAM,CAAC;YACrC,MAAMuK,WAAW,GAAG,IAAI,CAACqC,YAAY,CAAC/P,KAAK,CAAC;YAC5C,MAAMW,MAAM,GAAG,IAAI,CAACQ,aAAa,CAAC,SAAS,CAAC,CAACyM,iBAAiB,CAAC,CAAC,CAACF,WAAW,CAAC;YAC7E,MAAMuC,GAAG,GAAG,IAAI,CAAC9O,aAAa,CAAC,MAAM,CAAC,CAAC+O,KAAK,CAAC,CAAC,CAAChM,CAAC,CAAC8F,QAAQ,CAAC;YAC1D,IAAI9I,kBAAkB,CAACmZ,eAAe,CAACpK,GAAG,EAAEtP,MAAM,CAAC,IAAI+e,KAAK,EAAE;cAC1D,MAAMpW,SAAS,GAAG7M,WAAW,CAACwL,aAAa,EAAE;gBACzC0L,aAAa,EAAE1L,aAAa,CAAC9E;cACjC,CAAC,CAAC;cACFjC,kBAAkB,CAAC2F,oBAAoB,CAACyC,SAAS,CAAC;YACtD;UACJ;QACJ,CAAC;QACD8N,gBAAgBA,CAACuI,MAAM,EAAE;UACrB,MAAM;YACFxI,aAAa,EAAEA,aAAa;YAC5ByI,eAAe,EAAEA;UACrB,CAAC,GAAG,IAAI,KAAKD,MAAM,IAAI,KAAK,CAAC,KAAKA,MAAM,GAAGA,MAAM,GAAG,CAAC,CAAC;UACtD,MAAMze,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;UACnE,MAAMoW,gBAAgB,GAAG,IAAI,CAAChU,OAAO,CAAC,CAAC;UACvC,IAAIgU,gBAAgB,IAAI,CAAChb,OAAO,CAACgb,gBAAgB,CAAC,EAAE;YAChDA,gBAAgB,CAAC+B,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC;UAC3C;UACAsG,eAAe,IAAI1e,kBAAkB,CAACkd,qBAAqB,CAAC,CAAC;UAC7D,IAAIpU,QAAQ,GAAG9I,kBAAkB,CAAC+I,kBAAkB,CAAC,CAAC;UACtD,IAAI,CAAC5N,SAAS,CAAC2N,QAAQ,CAAC,IAAIA,QAAQ,GAAG,CAAC,EAAE;YACtCA,QAAQ,GAAG,CAAC;UAChB;UACA,MAAM6V,YAAY,GAAG,IAAI,CAACjc,eAAe,CAACoG,QAAQ,CAAC;UACnD,IAAI9I,kBAAkB,CAACa,iBAAiB,CAAC,CAAC,IAAI8d,YAAY,CAACzf,MAAM,EAAE;YAC/D,IAAI,CAAC0f,0BAA0B,CAACD,YAAY,EAAE1I,aAAa,CAAC;UAChE;QACJ,CAAC;QACD2I,0BAA0BA,CAACD,YAAY,EAAE;UACrC,MAAM3e,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;UACnE,MAAM1B,IAAI,GAAGogB,YAAY,CAAC/b,EAAE,CAAC,CAAC,CAAC,CAACrD,MAAM,CAAC,CAAC;UACxC,IAAIjB,UAAU,CAACC,IAAI,CAAC,EAAE;YAClByB,kBAAkB,CAACwF,uBAAuB,CAACjH,IAAI,CAAC;UACpD,CAAC,MAAM;YACH,IAAIiO,WAAW,GAAGxM,kBAAkB,CAACmN,cAAc,CAAC,CAAC;YACrD,IAAI,CAAChS,SAAS,CAACqR,WAAW,CAAC,IAAIA,WAAW,GAAG,CAAC,EAAE;cAC5CA,WAAW,GAAG,CAAC;YACnB;YACA,IAAI,CAACqS,0BAA0B,CAACF,YAAY,EAAEnS,WAAW,CAAC;UAC9D;QACJ,CAAC;QACDqS,0BAA0BA,CAACF,YAAY,EAAEnS,WAAW,EAAE;UAClD,MAAMxM,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;UACnE,MAAM6e,kBAAkB,GAAGH,YAAY,GAAGA,YAAY,CAACzf,MAAM,GAAG,CAAC,CAAC;UAClE,MAAM6f,kBAAkB,GAAG,SAAAA,CAASjgB,KAAK,EAAE;YACvC,MAAMkgB,kBAAkB,GAAGhf,kBAAkB,CAACiT,mBAAmB,CAACnU,KAAK,CAAC;YACxE,MAAMmgB,WAAW,GAAGjf,kBAAkB,CAAC+R,YAAY,CAACjT,KAAK,CAAC;YAC1D,IAAI,CAACkgB,kBAAkB,IAAIC,WAAW,IAAIjf,kBAAkB,CAACgU,cAAc,CAAClV,KAAK,CAAC,EAAE;cAChFkB,kBAAkB,CAACwF,uBAAuB,CAAC1G,KAAK,CAAC;cACjDkB,kBAAkB,CAACyG,gBAAgB,CAAC,CAAC;cACrC,OAAO,IAAI;YACf;YACA;UACJ,CAAC;UACD,MAAM3H,KAAK,GAAG3C,6BAA6B,CAAC+iB,cAAc,CAACP,YAAY,EAAEnS,WAAW,CAAC;UACrF,IAAI1N,KAAK,CAACI,MAAM,EAAE;YACd6f,kBAAkB,CAACjgB,KAAK,CAAC;UAC7B,CAAC,MAAM;YACH,IAAIggB,kBAAkB,IAAItS,WAAW,EAAE;cACnCA,WAAW,GAAGsS,kBAAkB,GAAG,CAAC;YACxC;YACA,KAAK,IAAIlG,CAAC,GAAGpM,WAAW,EAAEoM,CAAC,GAAGkG,kBAAkB,EAAE,EAAElG,CAAC,EAAE;cACnD,IAAImG,kBAAkB,CAAC/jB,CAAC,CAAC2jB,YAAY,CAAC/F,CAAC,CAAC,CAAC,CAAC,EAAE;gBACxC;cACJ;YACJ;UACJ;QACJ,CAAC;QACDuG,sBAAsBA,CAACC,MAAM,EAAE;UAC3B,IAAI,CAACrZ,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACpC,IAAI,CAACc,oBAAoB,CAACD,MAAM,CAAC;QACrC,CAAC;QACDC,oBAAoBA,CAACD,MAAM,EAAE;UACzB,MAAM;YACFE,cAAc,EAAEA,cAAc;YAC9BC,kBAAkB,EAAEA;UACxB,CAAC,GAAG,IAAI,KAAKH,MAAM,IAAI,KAAK,CAAC,KAAKA,MAAM,GAAGA,MAAM,GAAG,CAAC,CAAC;UACtD,MAAM;YACFI,UAAU,EAAEA,UAAU;YACtBC,QAAQ,EAAEA;UACd,CAAC,GAAG,IAAI,KAAKH,cAAc,IAAI,KAAK,CAAC,KAAKA,cAAc,GAAGA,cAAc,GAAG,CAAC,CAAC;UAC9E,IAAI,CAACF,MAAM,IAAI,CAACG,kBAAkB,IAAIC,UAAU,IAAIC,QAAQ,EAAE;YAC1D,MAAMxJ,aAAa,GAAGlW,mBAAmB,CAAC,IAAI,CAAC;YAC/C,IAAI,CAACmW,gBAAgB,CAAC;cAClBD,aAAa,EAAEA,aAAa;cAC5ByI,eAAe,EAAEe;YACrB,CAAC,CAAC;UACN;QACJ,CAAC;QACDC,WAAWA,CAACN,MAAM,EAAE;UAChB,MAAMO,QAAQ,GAAG,IAAI,CAAC5Z,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACrD,IAAI,CAACc,oBAAoB,CAACD,MAAM,CAAC;UACjC,OAAOO,QAAQ;QACnB,CAAC;QACDC,iBAAiBA,CAAC9gB,KAAK,EAAE;UACrB,MAAM+gB,cAAc,GAAG,IAAI,CAACC,kBAAkB,CAAChhB,KAAK,CAAC;UACrD,MAAMkB,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;UACnE,MAAMmJ,uBAAuB,GAAGpJ,kBAAkB,IAAIA,kBAAkB,CAACkI,qBAAqB,CAAC,CAAC;UAChG,IAAI2X,cAAc,IAAIzW,uBAAuB,EAAE;YAC3C,IAAI,CAAC2W,4BAA4B,CAACF,cAAc,CAAC;UACrD;UACA,IAAI,CAAC9Z,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QACxC,CAAC;QACDwB,4BAA4BA,CAACF,cAAc,EAAE;UACzC,CAAC,WAAW,EAAE,SAAS,CAAC,CAACG,OAAO,CAAC9Y,OAAO,IAAI;YACxC,MAAM+Y,kBAAkB,GAAGJ,cAAc,CAACK,cAAc,CAAC,CAAC,CAAChZ,OAAO,CAAC;YACnE2Y,cAAc,CAACM,kBAAkB,CAACjZ,OAAO,EAAElE,CAAC,IAAI;cAC5C,MAAMod,gBAAgB,GAAG,MAAM,KAAKP,cAAc,CAACQ,MAAM,CAAC,CAAC,CAACjI,IAAI,CAAC,eAAe,CAAC;cACjF,IAAIgI,gBAAgB,EAAE;gBAClB,OAAOH,kBAAkB,IAAIA,kBAAkB,CAACjW,IAAI,CAAC6V,cAAc,EAAE7c,CAAC,CAAC;cAC3E;YACJ,CAAC,CAAC;UACN,CAAC,CAAC;UACF6c,cAAc,CAACM,kBAAkB,CAAC,WAAW,EAAEvkB,IAAI,CAAC;UACpDikB,cAAc,CAACM,kBAAkB,CAAC,YAAY,EAAEvkB,IAAI,CAAC;UACrD,MAAM0kB,iBAAiB,GAAG,WAAW,KAAKT,cAAc,CAACU,IAAI,IAAIV,cAAc,CAAClgB,MAAM,CAAC,iBAAiB,CAAC;UACzG,IAAI2gB,iBAAiB,EAAE;YACnBT,cAAc,CAACM,kBAAkB,CAAC,OAAO,EAAEvkB,IAAI,CAAC;UACpD;QACJ,CAAC;QACDkkB,kBAAkBA,CAAChhB,KAAK,EAAE;UACtB,MAAM0hB,OAAO,GAAG1hB,KAAK,CAAC6E,IAAI,CAAC,gBAAgB,CAAC,CAACf,EAAE,CAAC,CAAC,CAAC;UAClD,OAAO3G,aAAa,CAACwkB,iBAAiB,CAACD,OAAO,CAAC;QACnD;MACJ;IACJ,CAAC;IACD1C,WAAW,EAAE;MACT4C,OAAO,EAAE;QACLnH,QAAQA,CAACzQ,QAAQ,EAAE0D,WAAW,EAAE;UAC5B,MAAMxM,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;UACnE,IAAID,kBAAkB,CAACgd,gCAAgC,CAAClU,QAAQ,EAAE0D,WAAW,CAAC,EAAE;YAC5E,OAAO,KAAK;UAChB;UACA,MAAM+L,aAAa,GAAG,IAAI,CAACxS,QAAQ,CAAC+C,QAAQ,EAAE0D,WAAW,CAAC;UAC1D,IAAI+L,aAAa,EAAE;YACfvY,kBAAkB,CAACoB,gBAAgB,CAAC,CAAC;UACzC;UACA,OAAOmX,aAAa;QACxB,CAAC;QACDa,OAAOA,CAACtQ,QAAQ,EAAE;UACd,MAAM9I,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;UACnE,MAAMiZ,kBAAkB,GAAGlZ,kBAAkB,CAACgX,qBAAqB,CAAC,CAAC;UACrE,MAAMvX,MAAM,GAAG,IAAI,CAACkB,kBAAkB,CAAC+L,iBAAiB,CAAC,CAAC,CAACwM,kBAAkB,CAAC;UAC9E,IAAIzZ,MAAM,IAAIA,MAAM,CAACqa,IAAI,IAAI,MAAM,KAAK,IAAI,CAACna,MAAM,CAAC,cAAc,CAAC,EAAE;YACjEK,kBAAkB,CAACkF,iBAAiB,CAAC,CAAC;UAC1C;UACA,IAAI,CAACa,QAAQ,CAAC+C,QAAQ,CAAC;QAC3B,CAAC;QACD6X,MAAMA,CAACC,SAAS,EAAE;UACd,MAAM5gB,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;UACnED,kBAAkB,CAACoB,gBAAgB,CAAC,CAAC;UACrCpB,kBAAkB,CAACyG,gBAAgB,CAAC,CAAC;UACrC,OAAO,IAAI,CAACV,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QAC/C,CAAC;QACDsC,mBAAmBA,CAAC/X,QAAQ,EAAE;UAC1B,MAAMgY,4BAA4B,GAAG,IAAI,CAAC7gB,aAAa,CAAC,oBAAoB,CAAC;UAC7E,IAAInB,KAAK,GAAG,IAAI,CAACiH,QAAQ,CAAC+C,QAAQ,CAAC;UACnC,IAAIgY,4BAA4B,CAACjgB,iBAAiB,CAAC,CAAC,IAAIigB,4BAA4B,CAAC7f,oBAAoB,CAAC6H,QAAQ,KAAKA,QAAQ,EAAE;YAC7H,MAAMtG,YAAY,GAAGse,4BAA4B,CAACre,eAAe,CAAC,CAAC;YACnE,IAAIzD,gBAAgB,CAACwD,YAAY,CAAC,IAAI,CAACA,YAAY,CAAChE,QAAQ,CAAC,iBAAiB,CAAC,EAAE;cAC7EM,KAAK,GAAG0D,YAAY;YACxB;UACJ;UACA,OAAO1D,KAAK;QAChB,CAAC;QACDiiB,2BAA2BA,CAAA,EAAG;UAC1B,IAAI,CAAClY,aAAa,CAAC,CAAC,CAAC6Q,IAAI,CAAC,MAAM;YAC5B,MAAMgE,kBAAkB,GAAG,IAAI,CAACzd,aAAa,CAAC,oBAAoB,CAAC;YACnEyd,kBAAkB,CAACrZ,YAAY,CAAC,CAAC;UACrC,CAAC,CAAC;QACN,CAAC;QACDhE,IAAIA,CAAA,EAAG;UACH,IAAI,CAAC0F,QAAQ,CAAC,CAAC;UACf,IAAI,CAACib,6BAA6B,GAAG,IAAI,CAAC/gB,aAAa,CAAC,oBAAoB,CAAC;QACjF,CAAC;QACD4I,aAAaA,CAAA,EAAG;UACZ,MAAM6U,kBAAkB,GAAG,IAAI,CAACsD,6BAA6B;UAC7DtD,kBAAkB,CAAC1c,mBAAmB,GAAG,KAAK;UAC9C,MAAMpB,MAAM,GAAG,IAAI,CAACmG,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACnDb,kBAAkB,CAACrZ,YAAY,CAAC,CAAC;UACjC,OAAOzE,MAAM;QACjB,CAAC;QACDqhB,kBAAkBA,CAAA,EAAG;UACjB,IAAI,CAACD,6BAA6B,CAAC3f,aAAa,GAAG,IAAI;UACvD,IAAI,CAAC0E,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QACxC,CAAC;QACD2C,eAAeA,CAAA,EAAG;UACd,MAAMxD,kBAAkB,GAAG,IAAI,CAACzd,aAAa,CAAC,oBAAoB,CAAC;UACnE,MAAM8P,MAAM,GAAG,IAAI,CAAChK,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACnD,IAAIxO,MAAM,IAAI,CAAC2N,kBAAkB,CAACxZ,YAAY,EAAE;YAC5C,MAAMpF,KAAK,GAAG4e,kBAAkB,CAACjb,eAAe,CAAC,CAAC;YAClDib,kBAAkB,CAACvL,MAAM,CAACrT,KAAK,EAAE,IAAI,CAAC;UAC1C;UACA,OAAOiR,MAAM;QACjB;MACJ,CAAC;MACDU,IAAI,EAAE;QACF0Q,kBAAkBA,CAACC,qBAAqB,EAAE;UACtC,MAAMN,4BAA4B,GAAG,IAAI,CAAC7gB,aAAa,CAAC,oBAAoB,CAAC;UAC7E,MAAMohB,aAAa,GAAG,IAAI,CAACphB,aAAa,CAAC,eAAe,CAAC;UACzD,MAAM4Y,mBAAmB,GAAGiI,4BAA4B,CAAC7f,oBAAoB;UAC7E,IAAI,CAAC8E,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACpC,IAAI1F,mBAAmB,IAAIA,mBAAmB,CAAC/P,QAAQ,IAAI,CAAC,EAAE;YAC1D,MAAMwY,yBAAyB,GAAGF,qBAAqB,CAACvI,mBAAmB,CAAC/P,QAAQ,CAAC;YACrF,IAAIwY,yBAAyB,EAAE;cAC3BzI,mBAAmB,CAAC/P,QAAQ,IAAIwY,yBAAyB;cACzDD,aAAa,CAACE,OAAO,CAAC,CAAC;YAC3B;UACJ;QACJ,CAAC;QACDlK,cAAcA,CAAA,EAAG;UACb,IAAIzX,MAAM,GAAG,IAAI,CAACoP,KAAK,CAAC,CAAC,CAAC9P,MAAM,GAAG,CAAC;UACpC,MAAMsiB,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAAC,CAAC;UAClD,IAAIA,iBAAiB,EAAE;YACnB,MAAMlL,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;YAC/C3W,MAAM,IAAI0W,cAAc,GAAGkL,iBAAiB,CAACC,GAAG;UACpD;UACA,OAAO7hB,MAAM;QACjB;MACJ,CAAC;MACD8hB,eAAe,EAAE;QACbC,sBAAsBA,CAAAC,IAAA,EAInB;UAAA,IAJoB;YACnBC,QAAQ,EAAEA,QAAQ;YAClBnJ,MAAM,EAAEA,MAAM;YACdoJ,eAAe,EAAEA;UACrB,CAAC,GAAAF,IAAA;UACG,IAAI,CAAC7b,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACpC,mBAAmB,KAAKsD,QAAQ,IAAI,CAACC,eAAe,IAAIpJ,MAAM,CAACqJ,IAAI,CAAC,CAACC,CAAC,EAAEtH,WAAW,KAAK;YACpF,MAAM5b,KAAK,GAAG9D,CAAC,CAAC0f,WAAW,CAAC;YAC5Bpb,iBAAiB,CAACR,KAAK,CAAC,IAAIA,KAAK,CAACsZ,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;UACzD,CAAC,CAAC;QACN,CAAC;QACD6J,sBAAsBA,CAAAC,KAAA,EAInB;UAAA,IAJoB;YACnBL,QAAQ,EAAEA,QAAQ;YAClB/iB,KAAK,EAAEA,KAAK;YACZgjB,eAAe,EAAEA;UACrB,CAAC,GAAAI,KAAA;UACG,IAAI,CAACnc,QAAQ,CAACuY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACpC,IAAI,mBAAmB,KAAKsD,QAAQ,IAAI,CAACC,eAAe,IAAIxiB,iBAAiB,CAACR,KAAK,CAAC,EAAE;YAClFA,KAAK,CAACmW,UAAU,CAAC,UAAU,CAAC;UAChC;QACJ;MACJ;IACJ;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}