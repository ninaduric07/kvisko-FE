{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\nimport { getChar } from \"../../events/utils/index\";\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\nvar EMPTY_CHAR = \" \";\nclass DefaultMaskStrategy extends BaseMaskStrategy {\n  _getStrategyName() {\n    return \"default\";\n  }\n  getHandleEventNames() {\n    return [...super.getHandleEventNames(), \"keyPress\"];\n  }\n  _keyPressHandler(event) {\n    if (this._keyPressHandled) {\n      return;\n    }\n    this._keyPressHandled = true;\n    if (this.editor._isControlKeyFired(event)) {\n      return;\n    }\n    var {\n      editor: editor\n    } = this;\n    editor._maskKeyHandler(event, () => editor._handleKey(getChar(event)));\n  }\n  _inputHandler(event) {\n    if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\n      this._handleBackspaceInput(event);\n    }\n    if (event.originalEvent) {\n      this._autoFillHandler(event);\n    }\n    if (this._keyPressHandled) {\n      return;\n    }\n    this._keyPressHandled = true;\n    var inputValue = this.editorInput().val();\n    var caret = this.editorCaret();\n    if (!caret.end) {\n      return;\n    }\n    caret.start = caret.end - 1;\n    var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\n    var char = inputValue[caret.start];\n    var {\n      editor: editor\n    } = this;\n    this.editorInput().val(oldValue);\n    editor._caret({\n      start: caret.start,\n      end: caret.start\n    });\n    editor._maskKeyHandler(event, () => editor._handleKey(char));\n  }\n  _backspaceHandler(event) {\n    var {\n      editor: editor\n    } = this;\n    this._keyPressHandled = true;\n    var afterBackspaceHandler = (needAdjustCaret, callBack) => {\n      if (needAdjustCaret) {\n        editor._direction(this.DIRECTION.FORWARD);\n        editor._adjustCaret();\n      }\n      var currentCaret = this.editorCaret();\n      return new Promise(resolve => {\n        clearTimeout(this._backspaceHandlerTimeout);\n        this._backspaceHandlerTimeout = setTimeout(function () {\n          callBack(currentCaret);\n          resolve();\n        });\n      });\n    };\n    editor._maskKeyHandler(event, () => {\n      if (editor._hasSelection()) {\n        return afterBackspaceHandler(true, currentCaret => {\n          editor._displayMask(currentCaret);\n          editor._maskRulesChain.reset();\n        });\n      }\n      if (editor._tryMoveCaretBackward()) {\n        return afterBackspaceHandler(false, currentCaret => {\n          this.editorCaret(currentCaret);\n        });\n      }\n      editor._handleKey(EMPTY_CHAR, this.DIRECTION.BACKWARD);\n      return afterBackspaceHandler(true, currentCaret => {\n        editor._displayMask(currentCaret);\n        editor._maskRulesChain.reset();\n      });\n    });\n  }\n  _backspaceInputHandled(inputType) {\n    return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled;\n  }\n  _handleBackspaceInput(event) {\n    var {\n      start: start,\n      end: end\n    } = this.editorCaret();\n    this.editorCaret({\n      start: start + 1,\n      end: end + 1\n    });\n    this._backspaceHandler(event);\n  }\n}\nexport default DefaultMaskStrategy;","map":{"version":3,"names":["BaseMaskStrategy","getChar","BACKSPACE_INPUT_TYPE","EMPTY_CHAR","DefaultMaskStrategy","_getStrategyName","getHandleEventNames","_keyPressHandler","event","_keyPressHandled","editor","_isControlKeyFired","_maskKeyHandler","_handleKey","_inputHandler","_backspaceInputHandled","originalEvent","inputType","_handleBackspaceInput","_autoFillHandler","inputValue","editorInput","val","caret","editorCaret","end","start","oldValue","substring","char","_caret","_backspaceHandler","afterBackspaceHandler","needAdjustCaret","callBack","_direction","DIRECTION","FORWARD","_adjustCaret","currentCaret","Promise","resolve","clearTimeout","_backspaceHandlerTimeout","setTimeout","_hasSelection","_displayMask","_maskRulesChain","reset","_tryMoveCaretBackward","BACKWARD"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/node_modules/devextreme/esm/ui/text_box/ui.text_editor.mask.strategy.default.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\r\nimport {\r\n    getChar\r\n} from \"../../events/utils/index\";\r\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\r\nvar EMPTY_CHAR = \" \";\r\nclass DefaultMaskStrategy extends BaseMaskStrategy {\r\n    _getStrategyName() {\r\n        return \"default\"\r\n    }\r\n    getHandleEventNames() {\r\n        return [...super.getHandleEventNames(), \"keyPress\"]\r\n    }\r\n    _keyPressHandler(event) {\r\n        if (this._keyPressHandled) {\r\n            return\r\n        }\r\n        this._keyPressHandled = true;\r\n        if (this.editor._isControlKeyFired(event)) {\r\n            return\r\n        }\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        editor._maskKeyHandler(event, () => editor._handleKey(getChar(event)))\r\n    }\r\n    _inputHandler(event) {\r\n        if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\r\n            this._handleBackspaceInput(event)\r\n        }\r\n        if (event.originalEvent) {\r\n            this._autoFillHandler(event)\r\n        }\r\n        if (this._keyPressHandled) {\r\n            return\r\n        }\r\n        this._keyPressHandled = true;\r\n        var inputValue = this.editorInput().val();\r\n        var caret = this.editorCaret();\r\n        if (!caret.end) {\r\n            return\r\n        }\r\n        caret.start = caret.end - 1;\r\n        var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\r\n        var char = inputValue[caret.start];\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this.editorInput().val(oldValue);\r\n        editor._caret({\r\n            start: caret.start,\r\n            end: caret.start\r\n        });\r\n        editor._maskKeyHandler(event, () => editor._handleKey(char))\r\n    }\r\n    _backspaceHandler(event) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this._keyPressHandled = true;\r\n        var afterBackspaceHandler = (needAdjustCaret, callBack) => {\r\n            if (needAdjustCaret) {\r\n                editor._direction(this.DIRECTION.FORWARD);\r\n                editor._adjustCaret()\r\n            }\r\n            var currentCaret = this.editorCaret();\r\n            return new Promise(resolve => {\r\n                clearTimeout(this._backspaceHandlerTimeout);\r\n                this._backspaceHandlerTimeout = setTimeout((function() {\r\n                    callBack(currentCaret);\r\n                    resolve()\r\n                }))\r\n            })\r\n        };\r\n        editor._maskKeyHandler(event, () => {\r\n            if (editor._hasSelection()) {\r\n                return afterBackspaceHandler(true, currentCaret => {\r\n                    editor._displayMask(currentCaret);\r\n                    editor._maskRulesChain.reset()\r\n                })\r\n            }\r\n            if (editor._tryMoveCaretBackward()) {\r\n                return afterBackspaceHandler(false, currentCaret => {\r\n                    this.editorCaret(currentCaret)\r\n                })\r\n            }\r\n            editor._handleKey(EMPTY_CHAR, this.DIRECTION.BACKWARD);\r\n            return afterBackspaceHandler(true, currentCaret => {\r\n                editor._displayMask(currentCaret);\r\n                editor._maskRulesChain.reset()\r\n            })\r\n        })\r\n    }\r\n    _backspaceInputHandled(inputType) {\r\n        return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled\r\n    }\r\n    _handleBackspaceInput(event) {\r\n        var {\r\n            start: start,\r\n            end: end\r\n        } = this.editorCaret();\r\n        this.editorCaret({\r\n            start: start + 1,\r\n            end: end + 1\r\n        });\r\n        this._backspaceHandler(event)\r\n    }\r\n}\r\nexport default DefaultMaskStrategy;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}