{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.grid_view.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getInnerWidth, getWidth, getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport modules from \"./ui.grid_core.modules\";\nimport { deferRender, deferUpdate } from \"../../core/utils/common\";\nimport { hasWindow, getWindow } from \"../../core/utils/window\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isString, isDefined, isNumeric } from \"../../core/utils/type\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport messageLocalization from \"../../localization/message\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport * as accessibility from \"../shared/accessibility\";\nimport browser from \"../../core/utils/browser\";\nvar BORDERS_CLASS = \"borders\";\nvar TABLE_FIXED_CLASS = \"table-fixed\";\nvar IMPORTANT_MARGIN_CLASS = \"important-margin\";\nvar GRIDBASE_CONTAINER_CLASS = \"dx-gridbase-container\";\nvar GROUP_ROW_SELECTOR = \"tr.dx-group-row\";\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nvar VIEW_NAMES = [\"columnsSeparatorView\", \"blockSeparatorView\", \"trackerView\", \"headerPanel\", \"columnHeadersView\", \"rowsView\", \"footerView\", \"columnChooserView\", \"filterPanelView\", \"pagerView\", \"draggingHeaderView\", \"contextMenuView\", \"errorView\", \"headerFilterView\", \"filterBuilderView\"];\nvar isPercentWidth = function (width) {\n  return isString(width) && \"%\" === width.slice(-1);\n};\nvar isPixelWidth = function (width) {\n  return isString(width) && \"px\" === width.slice(-2);\n};\nvar calculateFreeWidth = function (that, widths) {\n  var contentWidth = that._rowsView.contentWidth();\n  var totalWidth = that._getTotalWidth(widths, contentWidth);\n  return contentWidth - totalWidth;\n};\nvar calculateFreeWidthWithCurrentMinWidth = function (that, columnIndex, currentMinWidth, widths) {\n  return calculateFreeWidth(that, widths.map(function (width, index) {\n    return index === columnIndex ? currentMinWidth : width;\n  }));\n};\nvar restoreFocus = function (focusedElement, selectionRange) {\n  accessibility.hiddenFocus(focusedElement);\n  gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n};\nvar resizingControllerMembers = {\n  _initPostRenderHandlers: function () {\n    var dataController = this._dataController;\n    if (!this._refreshSizesHandler) {\n      this._refreshSizesHandler = e => {\n        dataController.changed.remove(this._refreshSizesHandler);\n        this._refreshSizes(e);\n      };\n      dataController.changed.add(() => {\n        dataController.changed.add(this._refreshSizesHandler);\n      });\n    }\n  },\n  _refreshSizes: function (e) {\n    var resizeDeferred;\n    var that = this;\n    var changeType = e && e.changeType;\n    var isDelayed = e && e.isDelayed;\n    var items = that._dataController.items();\n    if (!e || \"refresh\" === changeType || \"prepend\" === changeType || \"append\" === changeType) {\n      if (!isDelayed) {\n        resizeDeferred = that.resize();\n      }\n    } else if (\"update\" === changeType) {\n      var _e$changeTypes;\n      if (0 === (null === (_e$changeTypes = e.changeTypes) || void 0 === _e$changeTypes ? void 0 : _e$changeTypes.length)) {\n        return;\n      }\n      if ((items.length > 1 || \"insert\" !== e.changeTypes[0]) && !(0 === items.length && \"remove\" === e.changeTypes[0]) && !e.needUpdateDimensions) {\n        resizeDeferred = new Deferred();\n        this._waitAsyncTemplates().done(() => {\n          deferUpdate(() => deferRender(() => deferUpdate(() => {\n            that._setScrollerSpacing();\n            that._rowsView.resize();\n            resizeDeferred.resolve();\n          })));\n        }).fail(resizeDeferred.reject);\n      } else {\n        resizeDeferred = that.resize();\n      }\n    }\n    if (changeType && \"updateSelection\" !== changeType && \"updateFocusedRow\" !== changeType && \"pageIndex\" !== changeType && !isDelayed) {\n      when(resizeDeferred).done(function () {\n        that._setAriaRowColCount();\n        that.fireContentReadyAction();\n      });\n    }\n  },\n  fireContentReadyAction: function () {\n    this.component._fireContentReadyAction();\n  },\n  _setAriaRowColCount: function () {\n    var component = this.component;\n    component.setAria({\n      rowCount: this._dataController.totalItemsCount(),\n      colCount: component.columnCount()\n    }, component.$element().children(\".\" + GRIDBASE_CONTAINER_CLASS));\n  },\n  _getBestFitWidths: function () {\n    var _widths;\n    var rowsView = this._rowsView;\n    var columnHeadersView = this._columnHeadersView;\n    var widths = rowsView.getColumnWidths();\n    if (!(null !== (_widths = widths) && void 0 !== _widths && _widths.length)) {\n      var _rowsView$getTableEle;\n      var headersTableElement = columnHeadersView.getTableElement();\n      columnHeadersView.setTableElement(null === (_rowsView$getTableEle = rowsView.getTableElement()) || void 0 === _rowsView$getTableEle ? void 0 : _rowsView$getTableEle.children(\".dx-header\"));\n      widths = columnHeadersView.getColumnWidths();\n      columnHeadersView.setTableElement(headersTableElement);\n    }\n    return widths;\n  },\n  _setVisibleWidths: function (visibleColumns, widths) {\n    var columnsController = this._columnsController;\n    columnsController.beginUpdate();\n    each(visibleColumns, function (index, column) {\n      var columnId = columnsController.getColumnId(column);\n      columnsController.columnOption(columnId, \"visibleWidth\", widths[index]);\n    });\n    columnsController.endUpdate();\n  },\n  _toggleBestFitModeForView: function (view, className, isBestFit) {\n    if (!view || !view.isVisible()) {\n      return;\n    }\n    var $rowsTables = this._rowsView.getTableElements();\n    var $viewTables = view.getTableElements();\n    each($rowsTables, (index, tableElement) => {\n      var $tableBody;\n      var $rowsTable = $(tableElement);\n      var $viewTable = $viewTables.eq(index);\n      if ($viewTable && $viewTable.length) {\n        if (isBestFit) {\n          $tableBody = $viewTable.children(\"tbody\").appendTo($rowsTable);\n        } else {\n          $tableBody = $rowsTable.children(\".\" + className).appendTo($viewTable);\n        }\n        $tableBody.toggleClass(className, isBestFit);\n        $tableBody.toggleClass(this.addWidgetPrefix(\"best-fit\"), isBestFit);\n      }\n    });\n  },\n  _toggleBestFitMode: function (isBestFit) {\n    var $rowsTable = this._rowsView.getTableElement();\n    var $rowsFixedTable = this._rowsView.getTableElements().eq(1);\n    if (!$rowsTable) {\n      return;\n    }\n    $rowsTable.css(\"tableLayout\", isBestFit ? \"auto\" : \"fixed\");\n    $rowsTable.children(\"colgroup\").css(\"display\", isBestFit ? \"none\" : \"\");\n    each($rowsFixedTable.find(GROUP_ROW_SELECTOR), (idx, item) => {\n      $(item).css(\"display\", isBestFit ? \"none\" : \"\");\n    });\n    $rowsFixedTable.toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\n    this._toggleBestFitModeForView(this._columnHeadersView, \"dx-header\", isBestFit);\n    this._toggleBestFitModeForView(this._footerView, \"dx-footer\", isBestFit);\n    if (this._needStretch()) {\n      $rowsTable.get(0).style.width = isBestFit ? \"auto\" : \"\";\n    }\n  },\n  _toggleContentMinHeight: function (value) {\n    var scrollable = this._rowsView.getScrollable();\n    var $contentElement = this._rowsView._findContentElement();\n    if (false === (null === scrollable || void 0 === scrollable ? void 0 : scrollable.option(\"useNative\"))) {\n      $contentElement.css({\n        minHeight: value ? gridCoreUtils.getContentHeightLimit(browser) : \"\"\n      });\n    }\n  },\n  _synchronizeColumns: function () {\n    var columnsController = this._columnsController;\n    var visibleColumns = columnsController.getVisibleColumns();\n    var columnAutoWidth = this.option(\"columnAutoWidth\");\n    var wordWrapEnabled = this.option(\"wordWrapEnabled\");\n    var needBestFit = this._needBestFit();\n    var hasMinWidth = false;\n    var resetBestFitMode;\n    var isColumnWidthsCorrected = false;\n    var resultWidths = [];\n    var focusedElement;\n    var selectionRange;\n    !needBestFit && each(visibleColumns, function (index, column) {\n      if (\"auto\" === column.width) {\n        needBestFit = true;\n        return false;\n      }\n    });\n    each(visibleColumns, function (index, column) {\n      if (column.minWidth) {\n        hasMinWidth = true;\n        return false;\n      }\n    });\n    this._setVisibleWidths(visibleColumns, []);\n    var $element = this.component.$element();\n    if (needBestFit) {\n      focusedElement = domAdapter.getActiveElement($element.get(0));\n      selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n      this._toggleBestFitMode(true);\n      resetBestFitMode = true;\n    }\n    this._toggleContentMinHeight(wordWrapEnabled);\n    if ($element && $element.get(0) && this._maxWidth) {\n      delete this._maxWidth;\n      $element[0].style.maxWidth = \"\";\n    }\n    deferUpdate(() => {\n      if (needBestFit) {\n        resultWidths = this._getBestFitWidths();\n        each(visibleColumns, function (index, column) {\n          var columnId = columnsController.getColumnId(column);\n          columnsController.columnOption(columnId, \"bestFitWidth\", resultWidths[index], true);\n        });\n      } else if (hasMinWidth) {\n        resultWidths = this._getBestFitWidths();\n      }\n      each(visibleColumns, function (index) {\n        var width = this.width;\n        if (\"auto\" !== width) {\n          if (isDefined(width)) {\n            resultWidths[index] = isNumeric(width) || isPixelWidth(width) ? parseFloat(width) : width;\n          } else if (!columnAutoWidth) {\n            resultWidths[index] = void 0;\n          }\n        }\n      });\n      if (resetBestFitMode) {\n        this._toggleBestFitMode(false);\n        resetBestFitMode = false;\n        if (focusedElement && focusedElement !== domAdapter.getActiveElement()) {\n          var isFocusOutsideWindow = getBoundingRect(focusedElement).bottom < 0;\n          if (!isFocusOutsideWindow) {\n            restoreFocus(focusedElement, selectionRange);\n          }\n        }\n      }\n      isColumnWidthsCorrected = this._correctColumnWidths(resultWidths, visibleColumns);\n      if (columnAutoWidth) {\n        !function () {\n          var expandColumnWidth;\n          each(visibleColumns, function (index, column) {\n            if (\"groupExpand\" === column.type) {\n              expandColumnWidth = resultWidths[index];\n            }\n          });\n          each(visibleColumns, function (index, column) {\n            if (\"groupExpand\" === column.type && expandColumnWidth) {\n              resultWidths[index] = expandColumnWidth;\n            }\n          });\n        }();\n        if (this._needStretch()) {\n          this._processStretch(resultWidths, visibleColumns);\n        }\n      }\n      deferRender(() => {\n        if (needBestFit || isColumnWidthsCorrected) {\n          this._setVisibleWidths(visibleColumns, resultWidths);\n        }\n        if (wordWrapEnabled) {\n          this._toggleContentMinHeight(false);\n        }\n      });\n    });\n  },\n  _needBestFit: function () {\n    return this.option(\"columnAutoWidth\");\n  },\n  _needStretch: function () {\n    return this._columnsController.getVisibleColumns().some(c => \"auto\" === c.width && !c.command);\n  },\n  _getAverageColumnsWidth: function (resultWidths) {\n    var freeWidth = calculateFreeWidth(this, resultWidths);\n    var columnCountWithoutWidth = resultWidths.filter(function (width) {\n      return void 0 === width;\n    }).length;\n    return freeWidth / columnCountWithoutWidth;\n  },\n  _correctColumnWidths: function (resultWidths, visibleColumns) {\n    var that = this;\n    var i;\n    var hasPercentWidth = false;\n    var hasAutoWidth = false;\n    var isColumnWidthsCorrected = false;\n    var $element = that.component.$element();\n    var hasWidth = that._hasWidth;\n    var _loop = function () {\n      var index = i;\n      var column = visibleColumns[index];\n      var isHiddenColumn = resultWidths[index] === HIDDEN_COLUMNS_WIDTH;\n      var width = resultWidths[index];\n      var minWidth = column.minWidth;\n      if (minWidth) {\n        if (void 0 === width) {\n          var averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);\n          width = averageColumnsWidth;\n        } else if (isPercentWidth(width)) {\n          var freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);\n          if (freeWidth < 0) {\n            width = -1;\n          }\n        }\n      }\n      var realColumnWidth = that._getRealColumnWidth(index, resultWidths.map(function (columnWidth, columnIndex) {\n        return index === columnIndex ? width : columnWidth;\n      }));\n      if (minWidth && !isHiddenColumn && realColumnWidth < minWidth) {\n        resultWidths[index] = minWidth;\n        isColumnWidthsCorrected = true;\n        i = -1;\n      }\n      if (!isDefined(column.width)) {\n        hasAutoWidth = true;\n      }\n      if (isPercentWidth(column.width)) {\n        hasPercentWidth = true;\n      }\n    };\n    for (i = 0; i < visibleColumns.length; i++) {\n      _loop();\n    }\n    if (!hasAutoWidth && resultWidths.length) {\n      var $rowsViewElement = that._rowsView.element();\n      var contentWidth = that._rowsView.contentWidth();\n      var scrollbarWidth = that._rowsView.getScrollbarWidth();\n      var totalWidth = that._getTotalWidth(resultWidths, contentWidth);\n      if (totalWidth < contentWidth) {\n        var lastColumnIndex = gridCoreUtils.getLastResizableColumnIndex(visibleColumns, resultWidths);\n        if (lastColumnIndex >= 0) {\n          resultWidths[lastColumnIndex] = \"auto\";\n          isColumnWidthsCorrected = true;\n          if (false === hasWidth && !hasPercentWidth) {\n            var borderWidth = that.option(\"showBorders\") ? Math.ceil(getOuterWidth($rowsViewElement) - getInnerWidth($rowsViewElement)) : 0;\n            that._maxWidth = totalWidth + scrollbarWidth + borderWidth;\n            $element.css(\"maxWidth\", that._maxWidth);\n          }\n        }\n      }\n    }\n    return isColumnWidthsCorrected;\n  },\n  _processStretch: function (resultSizes, visibleColumns) {\n    var groupSize = this._rowsView.contentWidth();\n    var tableSize = this._getTotalWidth(resultSizes, groupSize);\n    var unusedIndexes = {\n      length: 0\n    };\n    if (!resultSizes.length) {\n      return;\n    }\n    each(visibleColumns, function (index) {\n      if (this.width || resultSizes[index] === HIDDEN_COLUMNS_WIDTH) {\n        unusedIndexes[index] = true;\n        unusedIndexes.length++;\n      }\n    });\n    var diff = groupSize - tableSize;\n    var diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));\n    var onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);\n    if (diff >= 0) {\n      for (var i = 0; i < resultSizes.length; i++) {\n        if (unusedIndexes[i]) {\n          continue;\n        }\n        resultSizes[i] += diffElement;\n        if (onePixelElementsCount > 0) {\n          if (onePixelElementsCount < 1) {\n            resultSizes[i] += onePixelElementsCount;\n            onePixelElementsCount = 0;\n          } else {\n            resultSizes[i]++;\n            onePixelElementsCount--;\n          }\n        }\n      }\n    }\n  },\n  _getRealColumnWidth: function (columnIndex, columnWidths, groupWidth) {\n    var ratio = 1;\n    var width = columnWidths[columnIndex];\n    if (!isPercentWidth(width)) {\n      return parseFloat(width);\n    }\n    var percentTotalWidth = columnWidths.reduce((sum, width, index) => {\n      if (!isPercentWidth(width)) {\n        return sum;\n      }\n      return sum + parseFloat(width);\n    }, 0);\n    var pixelTotalWidth = columnWidths.reduce((sum, width) => {\n      if (!width || width === HIDDEN_COLUMNS_WIDTH || isPercentWidth(width)) {\n        return sum;\n      }\n      return sum + parseFloat(width);\n    }, 0);\n    groupWidth = groupWidth || this._rowsView.contentWidth();\n    var freeSpace = groupWidth - pixelTotalWidth;\n    var percentTotalWidthInPixel = percentTotalWidth * groupWidth / 100;\n    if (pixelTotalWidth > 0 && percentTotalWidthInPixel + pixelTotalWidth >= groupWidth) {\n      ratio = percentTotalWidthInPixel > freeSpace ? freeSpace / percentTotalWidthInPixel : 1;\n    }\n    return parseFloat(width) * groupWidth * ratio / 100;\n  },\n  _getTotalWidth: function (widths, groupWidth) {\n    var result = 0;\n    for (var i = 0; i < widths.length; i++) {\n      var width = widths[i];\n      if (width && width !== HIDDEN_COLUMNS_WIDTH) {\n        result += this._getRealColumnWidth(i, widths, groupWidth);\n      }\n    }\n    return Math.ceil(result);\n  },\n  _getGroupElement: function () {\n    return this.component.$element().children().get(0);\n  },\n  updateSize: function (rootElement) {\n    var $rootElement = $(rootElement);\n    var importantMarginClass = this.addWidgetPrefix(IMPORTANT_MARGIN_CLASS);\n    if (void 0 === this._hasHeight && $rootElement && $rootElement.is(\":visible\") && getWidth($rootElement)) {\n      var $groupElement = $rootElement.children(\".\" + this.getWidgetContainerClass());\n      if ($groupElement.length) {\n        $groupElement.detach();\n      }\n      this._hasHeight = !!getHeight($rootElement);\n      var width = getWidth($rootElement);\n      $rootElement.addClass(importantMarginClass);\n      this._hasWidth = getWidth($rootElement) === width;\n      $rootElement.removeClass(importantMarginClass);\n      if ($groupElement.length) {\n        $groupElement.appendTo($rootElement);\n      }\n    }\n  },\n  publicMethods: function () {\n    return [\"resize\", \"updateDimensions\"];\n  },\n  _waitAsyncTemplates: function () {\n    var _this$_columnHeadersV, _this$_rowsView, _this$_footerView;\n    return when(null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV ? void 0 : _this$_columnHeadersV.waitAsyncTemplates(), null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.waitAsyncTemplates(), null === (_this$_footerView = this._footerView) || void 0 === _this$_footerView ? void 0 : _this$_footerView.waitAsyncTemplates());\n  },\n  resize: function () {\n    if (this.component._requireResize) {\n      return;\n    }\n    var d = new Deferred();\n    this._waitAsyncTemplates().done(() => {\n      when(this.updateDimensions()).done(d.resolve).fail(d.reject);\n    }).fail(d.reject);\n    return d.promise();\n  },\n  updateDimensions: function (checkSize) {\n    var that = this;\n    that._initPostRenderHandlers();\n    if (!that._checkSize(checkSize)) {\n      return;\n    }\n    var prevResult = that._resizeDeferred;\n    var result = that._resizeDeferred = new Deferred();\n    when(prevResult).always(function () {\n      deferRender(function () {\n        if (that._dataController.isLoaded()) {\n          that._synchronizeColumns();\n        }\n        that._resetGroupElementHeight();\n        deferUpdate(function () {\n          deferRender(function () {\n            deferUpdate(function () {\n              that._updateDimensionsCore();\n            });\n          });\n        });\n      }).done(result.resolve).fail(result.reject);\n    });\n    return result.promise();\n  },\n  _resetGroupElementHeight: function () {\n    var groupElement = this._getGroupElement();\n    var scrollable = this._rowsView.getScrollable();\n    if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {\n      groupElement.style.height = \"\";\n    }\n  },\n  _checkSize: function (checkSize) {\n    var $rootElement = this.component.$element();\n    if (checkSize && (this._lastWidth === getWidth($rootElement) && this._lastHeight === getHeight($rootElement) && this._devicePixelRatio === getWindow().devicePixelRatio || !$rootElement.is(\":visible\"))) {\n      return false;\n    }\n    return true;\n  },\n  _setScrollerSpacingCore: function () {\n    var that = this;\n    var vScrollbarWidth = that._rowsView.getScrollbarWidth();\n    var hScrollbarWidth = that._rowsView.getScrollbarWidth(true);\n    deferRender(function () {\n      that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);\n      that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);\n      that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth);\n    });\n  },\n  _setScrollerSpacing: function () {\n    var scrollable = this._rowsView.getScrollable();\n    var isNativeScrolling = true === this.option(\"scrolling.useNative\");\n    if (!scrollable || isNativeScrolling) {\n      deferRender(() => {\n        deferUpdate(() => {\n          this._setScrollerSpacingCore();\n        });\n      });\n    } else {\n      this._setScrollerSpacingCore();\n    }\n  },\n  _updateDimensionsCore: function () {\n    var that = this;\n    var dataController = that._dataController;\n    var editorFactory = that.getController(\"editorFactory\");\n    var rowsView = that._rowsView;\n    var $rootElement = that.component.$element();\n    var groupElement = this._getGroupElement();\n    var rootElementHeight = getHeight($rootElement);\n    var height = that.option(\"height\") || $rootElement.get(0).style.height;\n    var isHeightSpecified = !!height && \"auto\" !== height;\n    var maxHeight = parseInt($rootElement.css(\"maxHeight\"));\n    var maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;\n    var isMaxHeightApplied = groupElement && groupElement.scrollHeight === groupElement.offsetHeight;\n    that.updateSize($rootElement);\n    deferRender(function () {\n      var hasHeight = that._hasHeight || !!maxHeight || isHeightSpecified;\n      rowsView.hasHeight(hasHeight);\n      if (maxHeightHappened && !isMaxHeightApplied) {\n        $(groupElement).css(\"height\", maxHeight);\n      }\n      if (!dataController.isLoaded()) {\n        rowsView.setLoading(dataController.isLoading());\n        return;\n      }\n      deferUpdate(function () {\n        that._updateLastSizes($rootElement);\n        that._setScrollerSpacing();\n        each(VIEW_NAMES, function (index, viewName) {\n          var view = that.getView(viewName);\n          if (view) {\n            view.resize();\n          }\n        });\n        editorFactory && editorFactory.resize();\n      });\n    });\n  },\n  _updateLastSizes: function ($rootElement) {\n    this._lastWidth = getWidth($rootElement);\n    this._lastHeight = getHeight($rootElement);\n    this._devicePixelRatio = getWindow().devicePixelRatio;\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"width\":\n      case \"height\":\n        this.component._renderDimensions();\n        this.resize();\n      case \"renderAsync\":\n        args.handled = true;\n        return;\n      default:\n        this.callBase(args);\n    }\n  },\n  init: function () {\n    this._dataController = this.getController(\"data\");\n    this._columnsController = this.getController(\"columns\");\n    this._columnHeadersView = this.getView(\"columnHeadersView\");\n    this._footerView = this.getView(\"footerView\");\n    this._rowsView = this.getView(\"rowsView\");\n  }\n};\nvar ResizingController = modules.ViewController.inherit(resizingControllerMembers);\nvar SynchronizeScrollingController = modules.ViewController.inherit({\n  _scrollChangedHandler: function (views, pos, viewName) {\n    for (var j = 0; j < views.length; j++) {\n      if (views[j] && views[j].name !== viewName) {\n        views[j].scrollTo({\n          left: pos.left,\n          top: pos.top\n        });\n      }\n    }\n  },\n  init: function () {\n    var views = [this.getView(\"columnHeadersView\"), this.getView(\"footerView\"), this.getView(\"rowsView\")];\n    for (var i = 0; i < views.length; i++) {\n      var view = views[i];\n      if (view) {\n        view.scrollChanged.add(this._scrollChangedHandler.bind(this, views));\n      }\n    }\n  }\n});\nvar GridView = modules.View.inherit({\n  _endUpdateCore: function () {\n    if (this.component._requireResize) {\n      this.component._requireResize = false;\n      this._resizingController.resize();\n    }\n  },\n  _getWidgetAriaLabel: function () {\n    return \"dxDataGrid-ariaDataGrid\";\n  },\n  init: function () {\n    this._resizingController = this.getController(\"resizing\");\n    this._dataController = this.getController(\"data\");\n  },\n  getView: function (name) {\n    return this.component._views[name];\n  },\n  element: function () {\n    return this._groupElement;\n  },\n  optionChanged: function (args) {\n    if (isDefined(this._groupElement) && \"showBorders\" === args.name) {\n      this._groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!args.value);\n      args.handled = true;\n    } else {\n      this.callBase(args);\n    }\n  },\n  _renderViews: function ($groupElement) {\n    var that = this;\n    each(VIEW_NAMES, function (index, viewName) {\n      var view = that.getView(viewName);\n      if (view) {\n        view.render($groupElement);\n      }\n    });\n  },\n  _getTableRoleName: function () {\n    return \"grid\";\n  },\n  render: function ($rootElement) {\n    var isFirstRender = !this._groupElement;\n    var $groupElement = this._groupElement || $(\"<div>\").addClass(this.getWidgetContainerClass());\n    $groupElement.addClass(GRIDBASE_CONTAINER_CLASS);\n    $groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!this.option(\"showBorders\"));\n    this.setAria(\"role\", \"presentation\", $rootElement);\n    this.component.setAria({\n      role: this._getTableRoleName(),\n      label: messageLocalization.format(this._getWidgetAriaLabel())\n    }, $groupElement);\n    this._rootElement = $rootElement || this._rootElement;\n    if (isFirstRender) {\n      this._groupElement = $groupElement;\n      hasWindow() && this.getController(\"resizing\").updateSize($rootElement);\n      $groupElement.appendTo($rootElement);\n    }\n    this._renderViews($groupElement);\n  },\n  update: function () {\n    var $rootElement = this._rootElement;\n    var $groupElement = this._groupElement;\n    var resizingController = this.getController(\"resizing\");\n    if ($rootElement && $groupElement) {\n      resizingController.resize();\n      if (this._dataController.isLoaded()) {\n        this._resizingController.fireContentReadyAction();\n      }\n    }\n  }\n});\nexport var gridViewModule = {\n  defaultOptions: function () {\n    return {\n      showBorders: false,\n      renderAsync: false\n    };\n  },\n  controllers: {\n    resizing: ResizingController,\n    synchronizeScrolling: SynchronizeScrollingController\n  },\n  views: {\n    gridView: GridView\n  },\n  VIEW_NAMES: VIEW_NAMES\n};","map":{"version":3,"names":["getOuterWidth","getInnerWidth","getWidth","getHeight","$","modules","deferRender","deferUpdate","hasWindow","getWindow","each","isString","isDefined","isNumeric","getBoundingRect","gridCoreUtils","messageLocalization","when","Deferred","domAdapter","accessibility","browser","BORDERS_CLASS","TABLE_FIXED_CLASS","IMPORTANT_MARGIN_CLASS","GRIDBASE_CONTAINER_CLASS","GROUP_ROW_SELECTOR","HIDDEN_COLUMNS_WIDTH","VIEW_NAMES","isPercentWidth","width","slice","isPixelWidth","calculateFreeWidth","that","widths","contentWidth","_rowsView","totalWidth","_getTotalWidth","calculateFreeWidthWithCurrentMinWidth","columnIndex","currentMinWidth","map","index","restoreFocus","focusedElement","selectionRange","hiddenFocus","setSelectionRange","resizingControllerMembers","_initPostRenderHandlers","dataController","_dataController","_refreshSizesHandler","e","changed","remove","_refreshSizes","add","resizeDeferred","changeType","isDelayed","items","resize","_e$changeTypes","changeTypes","length","needUpdateDimensions","_waitAsyncTemplates","done","_setScrollerSpacing","resolve","fail","reject","_setAriaRowColCount","fireContentReadyAction","component","_fireContentReadyAction","setAria","rowCount","totalItemsCount","colCount","columnCount","$element","children","_getBestFitWidths","_widths","rowsView","columnHeadersView","_columnHeadersView","getColumnWidths","_rowsView$getTableEle","headersTableElement","getTableElement","setTableElement","_setVisibleWidths","visibleColumns","columnsController","_columnsController","beginUpdate","column","columnId","getColumnId","columnOption","endUpdate","_toggleBestFitModeForView","view","className","isBestFit","isVisible","$rowsTables","getTableElements","$viewTables","tableElement","$tableBody","$rowsTable","$viewTable","eq","appendTo","toggleClass","addWidgetPrefix","_toggleBestFitMode","$rowsFixedTable","css","find","idx","item","_footerView","_needStretch","get","style","_toggleContentMinHeight","value","scrollable","getScrollable","$contentElement","_findContentElement","option","minHeight","getContentHeightLimit","_synchronizeColumns","getVisibleColumns","columnAutoWidth","wordWrapEnabled","needBestFit","_needBestFit","hasMinWidth","resetBestFitMode","isColumnWidthsCorrected","resultWidths","minWidth","getActiveElement","getSelectionRange","_maxWidth","maxWidth","parseFloat","isFocusOutsideWindow","bottom","_correctColumnWidths","expandColumnWidth","type","_processStretch","some","c","command","_getAverageColumnsWidth","freeWidth","columnCountWithoutWidth","filter","i","hasPercentWidth","hasAutoWidth","hasWidth","_hasWidth","_loop","isHiddenColumn","averageColumnsWidth","realColumnWidth","_getRealColumnWidth","columnWidth","$rowsViewElement","element","scrollbarWidth","getScrollbarWidth","lastColumnIndex","getLastResizableColumnIndex","borderWidth","Math","ceil","resultSizes","groupSize","tableSize","unusedIndexes","diff","diffElement","floor","onePixelElementsCount","columnWidths","groupWidth","ratio","percentTotalWidth","reduce","sum","pixelTotalWidth","freeSpace","percentTotalWidthInPixel","result","_getGroupElement","updateSize","rootElement","$rootElement","importantMarginClass","_hasHeight","is","$groupElement","getWidgetContainerClass","detach","addClass","removeClass","publicMethods","_this$_columnHeadersV","_this$_rowsView","_this$_footerView","waitAsyncTemplates","_requireResize","d","updateDimensions","promise","checkSize","_checkSize","prevResult","_resizeDeferred","always","isLoaded","_resetGroupElementHeight","_updateDimensionsCore","groupElement","height","scrollTop","_lastWidth","_lastHeight","_devicePixelRatio","devicePixelRatio","_setScrollerSpacingCore","vScrollbarWidth","hScrollbarWidth","setScrollerSpacing","isNativeScrolling","editorFactory","getController","rootElementHeight","isHeightSpecified","maxHeight","parseInt","maxHeightHappened","isMaxHeightApplied","scrollHeight","offsetHeight","hasHeight","setLoading","isLoading","_updateLastSizes","viewName","getView","optionChanged","args","name","_renderDimensions","handled","callBase","init","ResizingController","ViewController","inherit","SynchronizeScrollingController","_scrollChangedHandler","views","pos","j","scrollTo","left","top","scrollChanged","bind","GridView","View","_endUpdateCore","_resizingController","_getWidgetAriaLabel","_views","_groupElement","_renderViews","render","_getTableRoleName","isFirstRender","role","label","format","_rootElement","update","resizingController","gridViewModule","defaultOptions","showBorders","renderAsync","controllers","resizing","synchronizeScrolling","gridView"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.grid_view.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.grid_view.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterWidth,\r\n    getInnerWidth,\r\n    getWidth,\r\n    getHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    deferRender,\r\n    deferUpdate\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    hasWindow,\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    isString,\r\n    isDefined,\r\n    isNumeric\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../core/utils/position\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport * as accessibility from \"../shared/accessibility\";\r\nimport browser from \"../../core/utils/browser\";\r\nvar BORDERS_CLASS = \"borders\";\r\nvar TABLE_FIXED_CLASS = \"table-fixed\";\r\nvar IMPORTANT_MARGIN_CLASS = \"important-margin\";\r\nvar GRIDBASE_CONTAINER_CLASS = \"dx-gridbase-container\";\r\nvar GROUP_ROW_SELECTOR = \"tr.dx-group-row\";\r\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nvar VIEW_NAMES = [\"columnsSeparatorView\", \"blockSeparatorView\", \"trackerView\", \"headerPanel\", \"columnHeadersView\", \"rowsView\", \"footerView\", \"columnChooserView\", \"filterPanelView\", \"pagerView\", \"draggingHeaderView\", \"contextMenuView\", \"errorView\", \"headerFilterView\", \"filterBuilderView\"];\r\nvar isPercentWidth = function(width) {\r\n    return isString(width) && \"%\" === width.slice(-1)\r\n};\r\nvar isPixelWidth = function(width) {\r\n    return isString(width) && \"px\" === width.slice(-2)\r\n};\r\nvar calculateFreeWidth = function(that, widths) {\r\n    var contentWidth = that._rowsView.contentWidth();\r\n    var totalWidth = that._getTotalWidth(widths, contentWidth);\r\n    return contentWidth - totalWidth\r\n};\r\nvar calculateFreeWidthWithCurrentMinWidth = function(that, columnIndex, currentMinWidth, widths) {\r\n    return calculateFreeWidth(that, widths.map((function(width, index) {\r\n        return index === columnIndex ? currentMinWidth : width\r\n    })))\r\n};\r\nvar restoreFocus = function(focusedElement, selectionRange) {\r\n    accessibility.hiddenFocus(focusedElement);\r\n    gridCoreUtils.setSelectionRange(focusedElement, selectionRange)\r\n};\r\nvar resizingControllerMembers = {\r\n    _initPostRenderHandlers: function() {\r\n        var dataController = this._dataController;\r\n        if (!this._refreshSizesHandler) {\r\n            this._refreshSizesHandler = e => {\r\n                dataController.changed.remove(this._refreshSizesHandler);\r\n                this._refreshSizes(e)\r\n            };\r\n            dataController.changed.add(() => {\r\n                dataController.changed.add(this._refreshSizesHandler)\r\n            })\r\n        }\r\n    },\r\n    _refreshSizes: function(e) {\r\n        var resizeDeferred;\r\n        var that = this;\r\n        var changeType = e && e.changeType;\r\n        var isDelayed = e && e.isDelayed;\r\n        var items = that._dataController.items();\r\n        if (!e || \"refresh\" === changeType || \"prepend\" === changeType || \"append\" === changeType) {\r\n            if (!isDelayed) {\r\n                resizeDeferred = that.resize()\r\n            }\r\n        } else if (\"update\" === changeType) {\r\n            var _e$changeTypes;\r\n            if (0 === (null === (_e$changeTypes = e.changeTypes) || void 0 === _e$changeTypes ? void 0 : _e$changeTypes.length)) {\r\n                return\r\n            }\r\n            if ((items.length > 1 || \"insert\" !== e.changeTypes[0]) && !(0 === items.length && \"remove\" === e.changeTypes[0]) && !e.needUpdateDimensions) {\r\n                resizeDeferred = new Deferred;\r\n                this._waitAsyncTemplates().done(() => {\r\n                    deferUpdate(() => deferRender(() => deferUpdate(() => {\r\n                        that._setScrollerSpacing();\r\n                        that._rowsView.resize();\r\n                        resizeDeferred.resolve()\r\n                    })))\r\n                }).fail(resizeDeferred.reject)\r\n            } else {\r\n                resizeDeferred = that.resize()\r\n            }\r\n        }\r\n        if (changeType && \"updateSelection\" !== changeType && \"updateFocusedRow\" !== changeType && \"pageIndex\" !== changeType && !isDelayed) {\r\n            when(resizeDeferred).done((function() {\r\n                that._setAriaRowColCount();\r\n                that.fireContentReadyAction()\r\n            }))\r\n        }\r\n    },\r\n    fireContentReadyAction: function() {\r\n        this.component._fireContentReadyAction()\r\n    },\r\n    _setAriaRowColCount: function() {\r\n        var component = this.component;\r\n        component.setAria({\r\n            rowCount: this._dataController.totalItemsCount(),\r\n            colCount: component.columnCount()\r\n        }, component.$element().children(\".\" + GRIDBASE_CONTAINER_CLASS))\r\n    },\r\n    _getBestFitWidths: function() {\r\n        var _widths;\r\n        var rowsView = this._rowsView;\r\n        var columnHeadersView = this._columnHeadersView;\r\n        var widths = rowsView.getColumnWidths();\r\n        if (!(null !== (_widths = widths) && void 0 !== _widths && _widths.length)) {\r\n            var _rowsView$getTableEle;\r\n            var headersTableElement = columnHeadersView.getTableElement();\r\n            columnHeadersView.setTableElement(null === (_rowsView$getTableEle = rowsView.getTableElement()) || void 0 === _rowsView$getTableEle ? void 0 : _rowsView$getTableEle.children(\".dx-header\"));\r\n            widths = columnHeadersView.getColumnWidths();\r\n            columnHeadersView.setTableElement(headersTableElement)\r\n        }\r\n        return widths\r\n    },\r\n    _setVisibleWidths: function(visibleColumns, widths) {\r\n        var columnsController = this._columnsController;\r\n        columnsController.beginUpdate();\r\n        each(visibleColumns, (function(index, column) {\r\n            var columnId = columnsController.getColumnId(column);\r\n            columnsController.columnOption(columnId, \"visibleWidth\", widths[index])\r\n        }));\r\n        columnsController.endUpdate()\r\n    },\r\n    _toggleBestFitModeForView: function(view, className, isBestFit) {\r\n        if (!view || !view.isVisible()) {\r\n            return\r\n        }\r\n        var $rowsTables = this._rowsView.getTableElements();\r\n        var $viewTables = view.getTableElements();\r\n        each($rowsTables, (index, tableElement) => {\r\n            var $tableBody;\r\n            var $rowsTable = $(tableElement);\r\n            var $viewTable = $viewTables.eq(index);\r\n            if ($viewTable && $viewTable.length) {\r\n                if (isBestFit) {\r\n                    $tableBody = $viewTable.children(\"tbody\").appendTo($rowsTable)\r\n                } else {\r\n                    $tableBody = $rowsTable.children(\".\" + className).appendTo($viewTable)\r\n                }\r\n                $tableBody.toggleClass(className, isBestFit);\r\n                $tableBody.toggleClass(this.addWidgetPrefix(\"best-fit\"), isBestFit)\r\n            }\r\n        })\r\n    },\r\n    _toggleBestFitMode: function(isBestFit) {\r\n        var $rowsTable = this._rowsView.getTableElement();\r\n        var $rowsFixedTable = this._rowsView.getTableElements().eq(1);\r\n        if (!$rowsTable) {\r\n            return\r\n        }\r\n        $rowsTable.css(\"tableLayout\", isBestFit ? \"auto\" : \"fixed\");\r\n        $rowsTable.children(\"colgroup\").css(\"display\", isBestFit ? \"none\" : \"\");\r\n        each($rowsFixedTable.find(GROUP_ROW_SELECTOR), (idx, item) => {\r\n            $(item).css(\"display\", isBestFit ? \"none\" : \"\")\r\n        });\r\n        $rowsFixedTable.toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\r\n        this._toggleBestFitModeForView(this._columnHeadersView, \"dx-header\", isBestFit);\r\n        this._toggleBestFitModeForView(this._footerView, \"dx-footer\", isBestFit);\r\n        if (this._needStretch()) {\r\n            $rowsTable.get(0).style.width = isBestFit ? \"auto\" : \"\"\r\n        }\r\n    },\r\n    _toggleContentMinHeight: function(value) {\r\n        var scrollable = this._rowsView.getScrollable();\r\n        var $contentElement = this._rowsView._findContentElement();\r\n        if (false === (null === scrollable || void 0 === scrollable ? void 0 : scrollable.option(\"useNative\"))) {\r\n            $contentElement.css({\r\n                minHeight: value ? gridCoreUtils.getContentHeightLimit(browser) : \"\"\r\n            })\r\n        }\r\n    },\r\n    _synchronizeColumns: function() {\r\n        var columnsController = this._columnsController;\r\n        var visibleColumns = columnsController.getVisibleColumns();\r\n        var columnAutoWidth = this.option(\"columnAutoWidth\");\r\n        var wordWrapEnabled = this.option(\"wordWrapEnabled\");\r\n        var needBestFit = this._needBestFit();\r\n        var hasMinWidth = false;\r\n        var resetBestFitMode;\r\n        var isColumnWidthsCorrected = false;\r\n        var resultWidths = [];\r\n        var focusedElement;\r\n        var selectionRange;\r\n        !needBestFit && each(visibleColumns, (function(index, column) {\r\n            if (\"auto\" === column.width) {\r\n                needBestFit = true;\r\n                return false\r\n            }\r\n        }));\r\n        each(visibleColumns, (function(index, column) {\r\n            if (column.minWidth) {\r\n                hasMinWidth = true;\r\n                return false\r\n            }\r\n        }));\r\n        this._setVisibleWidths(visibleColumns, []);\r\n        var $element = this.component.$element();\r\n        if (needBestFit) {\r\n            focusedElement = domAdapter.getActiveElement($element.get(0));\r\n            selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\r\n            this._toggleBestFitMode(true);\r\n            resetBestFitMode = true\r\n        }\r\n        this._toggleContentMinHeight(wordWrapEnabled);\r\n        if ($element && $element.get(0) && this._maxWidth) {\r\n            delete this._maxWidth;\r\n            $element[0].style.maxWidth = \"\"\r\n        }\r\n        deferUpdate(() => {\r\n            if (needBestFit) {\r\n                resultWidths = this._getBestFitWidths();\r\n                each(visibleColumns, (function(index, column) {\r\n                    var columnId = columnsController.getColumnId(column);\r\n                    columnsController.columnOption(columnId, \"bestFitWidth\", resultWidths[index], true)\r\n                }))\r\n            } else if (hasMinWidth) {\r\n                resultWidths = this._getBestFitWidths()\r\n            }\r\n            each(visibleColumns, (function(index) {\r\n                var width = this.width;\r\n                if (\"auto\" !== width) {\r\n                    if (isDefined(width)) {\r\n                        resultWidths[index] = isNumeric(width) || isPixelWidth(width) ? parseFloat(width) : width\r\n                    } else if (!columnAutoWidth) {\r\n                        resultWidths[index] = void 0\r\n                    }\r\n                }\r\n            }));\r\n            if (resetBestFitMode) {\r\n                this._toggleBestFitMode(false);\r\n                resetBestFitMode = false;\r\n                if (focusedElement && focusedElement !== domAdapter.getActiveElement()) {\r\n                    var isFocusOutsideWindow = getBoundingRect(focusedElement).bottom < 0;\r\n                    if (!isFocusOutsideWindow) {\r\n                        restoreFocus(focusedElement, selectionRange)\r\n                    }\r\n                }\r\n            }\r\n            isColumnWidthsCorrected = this._correctColumnWidths(resultWidths, visibleColumns);\r\n            if (columnAutoWidth) {\r\n                ! function() {\r\n                    var expandColumnWidth;\r\n                    each(visibleColumns, (function(index, column) {\r\n                        if (\"groupExpand\" === column.type) {\r\n                            expandColumnWidth = resultWidths[index]\r\n                        }\r\n                    }));\r\n                    each(visibleColumns, (function(index, column) {\r\n                        if (\"groupExpand\" === column.type && expandColumnWidth) {\r\n                            resultWidths[index] = expandColumnWidth\r\n                        }\r\n                    }))\r\n                }();\r\n                if (this._needStretch()) {\r\n                    this._processStretch(resultWidths, visibleColumns)\r\n                }\r\n            }\r\n            deferRender(() => {\r\n                if (needBestFit || isColumnWidthsCorrected) {\r\n                    this._setVisibleWidths(visibleColumns, resultWidths)\r\n                }\r\n                if (wordWrapEnabled) {\r\n                    this._toggleContentMinHeight(false)\r\n                }\r\n            })\r\n        })\r\n    },\r\n    _needBestFit: function() {\r\n        return this.option(\"columnAutoWidth\")\r\n    },\r\n    _needStretch: function() {\r\n        return this._columnsController.getVisibleColumns().some(c => \"auto\" === c.width && !c.command)\r\n    },\r\n    _getAverageColumnsWidth: function(resultWidths) {\r\n        var freeWidth = calculateFreeWidth(this, resultWidths);\r\n        var columnCountWithoutWidth = resultWidths.filter((function(width) {\r\n            return void 0 === width\r\n        })).length;\r\n        return freeWidth / columnCountWithoutWidth\r\n    },\r\n    _correctColumnWidths: function(resultWidths, visibleColumns) {\r\n        var that = this;\r\n        var i;\r\n        var hasPercentWidth = false;\r\n        var hasAutoWidth = false;\r\n        var isColumnWidthsCorrected = false;\r\n        var $element = that.component.$element();\r\n        var hasWidth = that._hasWidth;\r\n        var _loop = function() {\r\n            var index = i;\r\n            var column = visibleColumns[index];\r\n            var isHiddenColumn = resultWidths[index] === HIDDEN_COLUMNS_WIDTH;\r\n            var width = resultWidths[index];\r\n            var minWidth = column.minWidth;\r\n            if (minWidth) {\r\n                if (void 0 === width) {\r\n                    var averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);\r\n                    width = averageColumnsWidth\r\n                } else if (isPercentWidth(width)) {\r\n                    var freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);\r\n                    if (freeWidth < 0) {\r\n                        width = -1\r\n                    }\r\n                }\r\n            }\r\n            var realColumnWidth = that._getRealColumnWidth(index, resultWidths.map((function(columnWidth, columnIndex) {\r\n                return index === columnIndex ? width : columnWidth\r\n            })));\r\n            if (minWidth && !isHiddenColumn && realColumnWidth < minWidth) {\r\n                resultWidths[index] = minWidth;\r\n                isColumnWidthsCorrected = true;\r\n                i = -1\r\n            }\r\n            if (!isDefined(column.width)) {\r\n                hasAutoWidth = true\r\n            }\r\n            if (isPercentWidth(column.width)) {\r\n                hasPercentWidth = true\r\n            }\r\n        };\r\n        for (i = 0; i < visibleColumns.length; i++) {\r\n            _loop()\r\n        }\r\n        if (!hasAutoWidth && resultWidths.length) {\r\n            var $rowsViewElement = that._rowsView.element();\r\n            var contentWidth = that._rowsView.contentWidth();\r\n            var scrollbarWidth = that._rowsView.getScrollbarWidth();\r\n            var totalWidth = that._getTotalWidth(resultWidths, contentWidth);\r\n            if (totalWidth < contentWidth) {\r\n                var lastColumnIndex = gridCoreUtils.getLastResizableColumnIndex(visibleColumns, resultWidths);\r\n                if (lastColumnIndex >= 0) {\r\n                    resultWidths[lastColumnIndex] = \"auto\";\r\n                    isColumnWidthsCorrected = true;\r\n                    if (false === hasWidth && !hasPercentWidth) {\r\n                        var borderWidth = that.option(\"showBorders\") ? Math.ceil(getOuterWidth($rowsViewElement) - getInnerWidth($rowsViewElement)) : 0;\r\n                        that._maxWidth = totalWidth + scrollbarWidth + borderWidth;\r\n                        $element.css(\"maxWidth\", that._maxWidth)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return isColumnWidthsCorrected\r\n    },\r\n    _processStretch: function(resultSizes, visibleColumns) {\r\n        var groupSize = this._rowsView.contentWidth();\r\n        var tableSize = this._getTotalWidth(resultSizes, groupSize);\r\n        var unusedIndexes = {\r\n            length: 0\r\n        };\r\n        if (!resultSizes.length) {\r\n            return\r\n        }\r\n        each(visibleColumns, (function(index) {\r\n            if (this.width || resultSizes[index] === HIDDEN_COLUMNS_WIDTH) {\r\n                unusedIndexes[index] = true;\r\n                unusedIndexes.length++\r\n            }\r\n        }));\r\n        var diff = groupSize - tableSize;\r\n        var diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));\r\n        var onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);\r\n        if (diff >= 0) {\r\n            for (var i = 0; i < resultSizes.length; i++) {\r\n                if (unusedIndexes[i]) {\r\n                    continue\r\n                }\r\n                resultSizes[i] += diffElement;\r\n                if (onePixelElementsCount > 0) {\r\n                    if (onePixelElementsCount < 1) {\r\n                        resultSizes[i] += onePixelElementsCount;\r\n                        onePixelElementsCount = 0\r\n                    } else {\r\n                        resultSizes[i]++;\r\n                        onePixelElementsCount--\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _getRealColumnWidth: function(columnIndex, columnWidths, groupWidth) {\r\n        var ratio = 1;\r\n        var width = columnWidths[columnIndex];\r\n        if (!isPercentWidth(width)) {\r\n            return parseFloat(width)\r\n        }\r\n        var percentTotalWidth = columnWidths.reduce((sum, width, index) => {\r\n            if (!isPercentWidth(width)) {\r\n                return sum\r\n            }\r\n            return sum + parseFloat(width)\r\n        }, 0);\r\n        var pixelTotalWidth = columnWidths.reduce((sum, width) => {\r\n            if (!width || width === HIDDEN_COLUMNS_WIDTH || isPercentWidth(width)) {\r\n                return sum\r\n            }\r\n            return sum + parseFloat(width)\r\n        }, 0);\r\n        groupWidth = groupWidth || this._rowsView.contentWidth();\r\n        var freeSpace = groupWidth - pixelTotalWidth;\r\n        var percentTotalWidthInPixel = percentTotalWidth * groupWidth / 100;\r\n        if (pixelTotalWidth > 0 && percentTotalWidthInPixel + pixelTotalWidth >= groupWidth) {\r\n            ratio = percentTotalWidthInPixel > freeSpace ? freeSpace / percentTotalWidthInPixel : 1\r\n        }\r\n        return parseFloat(width) * groupWidth * ratio / 100\r\n    },\r\n    _getTotalWidth: function(widths, groupWidth) {\r\n        var result = 0;\r\n        for (var i = 0; i < widths.length; i++) {\r\n            var width = widths[i];\r\n            if (width && width !== HIDDEN_COLUMNS_WIDTH) {\r\n                result += this._getRealColumnWidth(i, widths, groupWidth)\r\n            }\r\n        }\r\n        return Math.ceil(result)\r\n    },\r\n    _getGroupElement: function() {\r\n        return this.component.$element().children().get(0)\r\n    },\r\n    updateSize: function(rootElement) {\r\n        var $rootElement = $(rootElement);\r\n        var importantMarginClass = this.addWidgetPrefix(IMPORTANT_MARGIN_CLASS);\r\n        if (void 0 === this._hasHeight && $rootElement && $rootElement.is(\":visible\") && getWidth($rootElement)) {\r\n            var $groupElement = $rootElement.children(\".\" + this.getWidgetContainerClass());\r\n            if ($groupElement.length) {\r\n                $groupElement.detach()\r\n            }\r\n            this._hasHeight = !!getHeight($rootElement);\r\n            var width = getWidth($rootElement);\r\n            $rootElement.addClass(importantMarginClass);\r\n            this._hasWidth = getWidth($rootElement) === width;\r\n            $rootElement.removeClass(importantMarginClass);\r\n            if ($groupElement.length) {\r\n                $groupElement.appendTo($rootElement)\r\n            }\r\n        }\r\n    },\r\n    publicMethods: function() {\r\n        return [\"resize\", \"updateDimensions\"]\r\n    },\r\n    _waitAsyncTemplates: function() {\r\n        var _this$_columnHeadersV, _this$_rowsView, _this$_footerView;\r\n        return when(null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV ? void 0 : _this$_columnHeadersV.waitAsyncTemplates(), null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.waitAsyncTemplates(), null === (_this$_footerView = this._footerView) || void 0 === _this$_footerView ? void 0 : _this$_footerView.waitAsyncTemplates())\r\n    },\r\n    resize: function() {\r\n        if (this.component._requireResize) {\r\n            return\r\n        }\r\n        var d = new Deferred;\r\n        this._waitAsyncTemplates().done(() => {\r\n            when(this.updateDimensions()).done(d.resolve).fail(d.reject)\r\n        }).fail(d.reject);\r\n        return d.promise()\r\n    },\r\n    updateDimensions: function(checkSize) {\r\n        var that = this;\r\n        that._initPostRenderHandlers();\r\n        if (!that._checkSize(checkSize)) {\r\n            return\r\n        }\r\n        var prevResult = that._resizeDeferred;\r\n        var result = that._resizeDeferred = new Deferred;\r\n        when(prevResult).always((function() {\r\n            deferRender((function() {\r\n                if (that._dataController.isLoaded()) {\r\n                    that._synchronizeColumns()\r\n                }\r\n                that._resetGroupElementHeight();\r\n                deferUpdate((function() {\r\n                    deferRender((function() {\r\n                        deferUpdate((function() {\r\n                            that._updateDimensionsCore()\r\n                        }))\r\n                    }))\r\n                }))\r\n            })).done(result.resolve).fail(result.reject)\r\n        }));\r\n        return result.promise()\r\n    },\r\n    _resetGroupElementHeight: function() {\r\n        var groupElement = this._getGroupElement();\r\n        var scrollable = this._rowsView.getScrollable();\r\n        if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {\r\n            groupElement.style.height = \"\"\r\n        }\r\n    },\r\n    _checkSize: function(checkSize) {\r\n        var $rootElement = this.component.$element();\r\n        if (checkSize && (this._lastWidth === getWidth($rootElement) && this._lastHeight === getHeight($rootElement) && this._devicePixelRatio === getWindow().devicePixelRatio || !$rootElement.is(\":visible\"))) {\r\n            return false\r\n        }\r\n        return true\r\n    },\r\n    _setScrollerSpacingCore: function() {\r\n        var that = this;\r\n        var vScrollbarWidth = that._rowsView.getScrollbarWidth();\r\n        var hScrollbarWidth = that._rowsView.getScrollbarWidth(true);\r\n        deferRender((function() {\r\n            that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);\r\n            that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);\r\n            that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth)\r\n        }))\r\n    },\r\n    _setScrollerSpacing: function() {\r\n        var scrollable = this._rowsView.getScrollable();\r\n        var isNativeScrolling = true === this.option(\"scrolling.useNative\");\r\n        if (!scrollable || isNativeScrolling) {\r\n            deferRender(() => {\r\n                deferUpdate(() => {\r\n                    this._setScrollerSpacingCore()\r\n                })\r\n            })\r\n        } else {\r\n            this._setScrollerSpacingCore()\r\n        }\r\n    },\r\n    _updateDimensionsCore: function() {\r\n        var that = this;\r\n        var dataController = that._dataController;\r\n        var editorFactory = that.getController(\"editorFactory\");\r\n        var rowsView = that._rowsView;\r\n        var $rootElement = that.component.$element();\r\n        var groupElement = this._getGroupElement();\r\n        var rootElementHeight = getHeight($rootElement);\r\n        var height = that.option(\"height\") || $rootElement.get(0).style.height;\r\n        var isHeightSpecified = !!height && \"auto\" !== height;\r\n        var maxHeight = parseInt($rootElement.css(\"maxHeight\"));\r\n        var maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;\r\n        var isMaxHeightApplied = groupElement && groupElement.scrollHeight === groupElement.offsetHeight;\r\n        that.updateSize($rootElement);\r\n        deferRender((function() {\r\n            var hasHeight = that._hasHeight || !!maxHeight || isHeightSpecified;\r\n            rowsView.hasHeight(hasHeight);\r\n            if (maxHeightHappened && !isMaxHeightApplied) {\r\n                $(groupElement).css(\"height\", maxHeight)\r\n            }\r\n            if (!dataController.isLoaded()) {\r\n                rowsView.setLoading(dataController.isLoading());\r\n                return\r\n            }\r\n            deferUpdate((function() {\r\n                that._updateLastSizes($rootElement);\r\n                that._setScrollerSpacing();\r\n                each(VIEW_NAMES, (function(index, viewName) {\r\n                    var view = that.getView(viewName);\r\n                    if (view) {\r\n                        view.resize()\r\n                    }\r\n                }));\r\n                editorFactory && editorFactory.resize()\r\n            }))\r\n        }))\r\n    },\r\n    _updateLastSizes: function($rootElement) {\r\n        this._lastWidth = getWidth($rootElement);\r\n        this._lastHeight = getHeight($rootElement);\r\n        this._devicePixelRatio = getWindow().devicePixelRatio\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"width\":\r\n            case \"height\":\r\n                this.component._renderDimensions();\r\n                this.resize();\r\n            case \"renderAsync\":\r\n                args.handled = true;\r\n                return;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    init: function() {\r\n        this._dataController = this.getController(\"data\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._columnHeadersView = this.getView(\"columnHeadersView\");\r\n        this._footerView = this.getView(\"footerView\");\r\n        this._rowsView = this.getView(\"rowsView\")\r\n    }\r\n};\r\nvar ResizingController = modules.ViewController.inherit(resizingControllerMembers);\r\nvar SynchronizeScrollingController = modules.ViewController.inherit({\r\n    _scrollChangedHandler: function(views, pos, viewName) {\r\n        for (var j = 0; j < views.length; j++) {\r\n            if (views[j] && views[j].name !== viewName) {\r\n                views[j].scrollTo({\r\n                    left: pos.left,\r\n                    top: pos.top\r\n                })\r\n            }\r\n        }\r\n    },\r\n    init: function() {\r\n        var views = [this.getView(\"columnHeadersView\"), this.getView(\"footerView\"), this.getView(\"rowsView\")];\r\n        for (var i = 0; i < views.length; i++) {\r\n            var view = views[i];\r\n            if (view) {\r\n                view.scrollChanged.add(this._scrollChangedHandler.bind(this, views))\r\n            }\r\n        }\r\n    }\r\n});\r\nvar GridView = modules.View.inherit({\r\n    _endUpdateCore: function() {\r\n        if (this.component._requireResize) {\r\n            this.component._requireResize = false;\r\n            this._resizingController.resize()\r\n        }\r\n    },\r\n    _getWidgetAriaLabel: function() {\r\n        return \"dxDataGrid-ariaDataGrid\"\r\n    },\r\n    init: function() {\r\n        this._resizingController = this.getController(\"resizing\");\r\n        this._dataController = this.getController(\"data\")\r\n    },\r\n    getView: function(name) {\r\n        return this.component._views[name]\r\n    },\r\n    element: function() {\r\n        return this._groupElement\r\n    },\r\n    optionChanged: function(args) {\r\n        if (isDefined(this._groupElement) && \"showBorders\" === args.name) {\r\n            this._groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!args.value);\r\n            args.handled = true\r\n        } else {\r\n            this.callBase(args)\r\n        }\r\n    },\r\n    _renderViews: function($groupElement) {\r\n        var that = this;\r\n        each(VIEW_NAMES, (function(index, viewName) {\r\n            var view = that.getView(viewName);\r\n            if (view) {\r\n                view.render($groupElement)\r\n            }\r\n        }))\r\n    },\r\n    _getTableRoleName: function() {\r\n        return \"grid\"\r\n    },\r\n    render: function($rootElement) {\r\n        var isFirstRender = !this._groupElement;\r\n        var $groupElement = this._groupElement || $(\"<div>\").addClass(this.getWidgetContainerClass());\r\n        $groupElement.addClass(GRIDBASE_CONTAINER_CLASS);\r\n        $groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!this.option(\"showBorders\"));\r\n        this.setAria(\"role\", \"presentation\", $rootElement);\r\n        this.component.setAria({\r\n            role: this._getTableRoleName(),\r\n            label: messageLocalization.format(this._getWidgetAriaLabel())\r\n        }, $groupElement);\r\n        this._rootElement = $rootElement || this._rootElement;\r\n        if (isFirstRender) {\r\n            this._groupElement = $groupElement;\r\n            hasWindow() && this.getController(\"resizing\").updateSize($rootElement);\r\n            $groupElement.appendTo($rootElement)\r\n        }\r\n        this._renderViews($groupElement)\r\n    },\r\n    update: function() {\r\n        var $rootElement = this._rootElement;\r\n        var $groupElement = this._groupElement;\r\n        var resizingController = this.getController(\"resizing\");\r\n        if ($rootElement && $groupElement) {\r\n            resizingController.resize();\r\n            if (this._dataController.isLoaded()) {\r\n                this._resizingController.fireContentReadyAction()\r\n            }\r\n        }\r\n    }\r\n});\r\nexport var gridViewModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            showBorders: false,\r\n            renderAsync: false\r\n        }\r\n    },\r\n    controllers: {\r\n        resizing: ResizingController,\r\n        synchronizeScrolling: SynchronizeScrollingController\r\n    },\r\n    views: {\r\n        gridView: GridView\r\n    },\r\n    VIEW_NAMES: VIEW_NAMES\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,aAAa,EACbC,aAAa,EACbC,QAAQ,EACRC,SAAS,QACN,uBAAuB;AAC9B,OAAOC,CAAC,MAAM,qBAAqB;AACnC,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,SACIC,WAAW,EACXC,WAAW,QACR,yBAAyB;AAChC,SACIC,SAAS,EACTC,SAAS,QACN,yBAAyB;AAChC,SACIC,IAAI,QACD,2BAA2B;AAClC,SACIC,QAAQ,EACRC,SAAS,EACTC,SAAS,QACN,uBAAuB;AAC9B,SACIC,eAAe,QACZ,2BAA2B;AAClC,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,mBAAmB,MAAM,4BAA4B;AAC5D,SACIC,IAAI,EACJC,QAAQ,QACL,2BAA2B;AAClC,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAO,KAAKC,aAAa,MAAM,yBAAyB;AACxD,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,IAAIC,aAAa,GAAG,SAAS;AAC7B,IAAIC,iBAAiB,GAAG,aAAa;AACrC,IAAIC,sBAAsB,GAAG,kBAAkB;AAC/C,IAAIC,wBAAwB,GAAG,uBAAuB;AACtD,IAAIC,kBAAkB,GAAG,iBAAiB;AAC1C,IAAIC,oBAAoB,GAAG,gBAAgB;AAC3C,IAAIC,UAAU,GAAG,CAAC,sBAAsB,EAAE,oBAAoB,EAAE,aAAa,EAAE,aAAa,EAAE,mBAAmB,EAAE,UAAU,EAAE,YAAY,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,WAAW,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,WAAW,EAAE,kBAAkB,EAAE,mBAAmB,CAAC;AAChS,IAAIC,cAAc,GAAG,SAAAA,CAASC,KAAK,EAAE;EACjC,OAAOnB,QAAQ,CAACmB,KAAK,CAAC,IAAI,GAAG,KAAKA,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC;AACD,IAAIC,YAAY,GAAG,SAAAA,CAASF,KAAK,EAAE;EAC/B,OAAOnB,QAAQ,CAACmB,KAAK,CAAC,IAAI,IAAI,KAAKA,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC;AACD,IAAIE,kBAAkB,GAAG,SAAAA,CAASC,IAAI,EAAEC,MAAM,EAAE;EAC5C,IAAIC,YAAY,GAAGF,IAAI,CAACG,SAAS,CAACD,YAAY,CAAC,CAAC;EAChD,IAAIE,UAAU,GAAGJ,IAAI,CAACK,cAAc,CAACJ,MAAM,EAAEC,YAAY,CAAC;EAC1D,OAAOA,YAAY,GAAGE,UAAU;AACpC,CAAC;AACD,IAAIE,qCAAqC,GAAG,SAAAA,CAASN,IAAI,EAAEO,WAAW,EAAEC,eAAe,EAAEP,MAAM,EAAE;EAC7F,OAAOF,kBAAkB,CAACC,IAAI,EAAEC,MAAM,CAACQ,GAAG,CAAE,UAASb,KAAK,EAAEc,KAAK,EAAE;IAC/D,OAAOA,KAAK,KAAKH,WAAW,GAAGC,eAAe,GAAGZ,KAAK;EAC1D,CAAE,CAAC,CAAC;AACR,CAAC;AACD,IAAIe,YAAY,GAAG,SAAAA,CAASC,cAAc,EAAEC,cAAc,EAAE;EACxD3B,aAAa,CAAC4B,WAAW,CAACF,cAAc,CAAC;EACzC/B,aAAa,CAACkC,iBAAiB,CAACH,cAAc,EAAEC,cAAc,CAAC;AACnE,CAAC;AACD,IAAIG,yBAAyB,GAAG;EAC5BC,uBAAuB,EAAE,SAAAA,CAAA,EAAW;IAChC,IAAIC,cAAc,GAAG,IAAI,CAACC,eAAe;IACzC,IAAI,CAAC,IAAI,CAACC,oBAAoB,EAAE;MAC5B,IAAI,CAACA,oBAAoB,GAAGC,CAAC,IAAI;QAC7BH,cAAc,CAACI,OAAO,CAACC,MAAM,CAAC,IAAI,CAACH,oBAAoB,CAAC;QACxD,IAAI,CAACI,aAAa,CAACH,CAAC,CAAC;MACzB,CAAC;MACDH,cAAc,CAACI,OAAO,CAACG,GAAG,CAAC,MAAM;QAC7BP,cAAc,CAACI,OAAO,CAACG,GAAG,CAAC,IAAI,CAACL,oBAAoB,CAAC;MACzD,CAAC,CAAC;IACN;EACJ,CAAC;EACDI,aAAa,EAAE,SAAAA,CAASH,CAAC,EAAE;IACvB,IAAIK,cAAc;IAClB,IAAI1B,IAAI,GAAG,IAAI;IACf,IAAI2B,UAAU,GAAGN,CAAC,IAAIA,CAAC,CAACM,UAAU;IAClC,IAAIC,SAAS,GAAGP,CAAC,IAAIA,CAAC,CAACO,SAAS;IAChC,IAAIC,KAAK,GAAG7B,IAAI,CAACmB,eAAe,CAACU,KAAK,CAAC,CAAC;IACxC,IAAI,CAACR,CAAC,IAAI,SAAS,KAAKM,UAAU,IAAI,SAAS,KAAKA,UAAU,IAAI,QAAQ,KAAKA,UAAU,EAAE;MACvF,IAAI,CAACC,SAAS,EAAE;QACZF,cAAc,GAAG1B,IAAI,CAAC8B,MAAM,CAAC,CAAC;MAClC;IACJ,CAAC,MAAM,IAAI,QAAQ,KAAKH,UAAU,EAAE;MAChC,IAAII,cAAc;MAClB,IAAI,CAAC,MAAM,IAAI,MAAMA,cAAc,GAAGV,CAAC,CAACW,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKD,cAAc,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACE,MAAM,CAAC,EAAE;QACjH;MACJ;MACA,IAAI,CAACJ,KAAK,CAACI,MAAM,GAAG,CAAC,IAAI,QAAQ,KAAKZ,CAAC,CAACW,WAAW,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,KAAKH,KAAK,CAACI,MAAM,IAAI,QAAQ,KAAKZ,CAAC,CAACW,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAACX,CAAC,CAACa,oBAAoB,EAAE;QAC1IR,cAAc,GAAG,IAAI1C,QAAQ,CAAD,CAAC;QAC7B,IAAI,CAACmD,mBAAmB,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;UAClC/D,WAAW,CAAC,MAAMD,WAAW,CAAC,MAAMC,WAAW,CAAC,MAAM;YAClD2B,IAAI,CAACqC,mBAAmB,CAAC,CAAC;YAC1BrC,IAAI,CAACG,SAAS,CAAC2B,MAAM,CAAC,CAAC;YACvBJ,cAAc,CAACY,OAAO,CAAC,CAAC;UAC5B,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAACC,IAAI,CAACb,cAAc,CAACc,MAAM,CAAC;MAClC,CAAC,MAAM;QACHd,cAAc,GAAG1B,IAAI,CAAC8B,MAAM,CAAC,CAAC;MAClC;IACJ;IACA,IAAIH,UAAU,IAAI,iBAAiB,KAAKA,UAAU,IAAI,kBAAkB,KAAKA,UAAU,IAAI,WAAW,KAAKA,UAAU,IAAI,CAACC,SAAS,EAAE;MACjI7C,IAAI,CAAC2C,cAAc,CAAC,CAACU,IAAI,CAAE,YAAW;QAClCpC,IAAI,CAACyC,mBAAmB,CAAC,CAAC;QAC1BzC,IAAI,CAAC0C,sBAAsB,CAAC,CAAC;MACjC,CAAE,CAAC;IACP;EACJ,CAAC;EACDA,sBAAsB,EAAE,SAAAA,CAAA,EAAW;IAC/B,IAAI,CAACC,SAAS,CAACC,uBAAuB,CAAC,CAAC;EAC5C,CAAC;EACDH,mBAAmB,EAAE,SAAAA,CAAA,EAAW;IAC5B,IAAIE,SAAS,GAAG,IAAI,CAACA,SAAS;IAC9BA,SAAS,CAACE,OAAO,CAAC;MACdC,QAAQ,EAAE,IAAI,CAAC3B,eAAe,CAAC4B,eAAe,CAAC,CAAC;MAChDC,QAAQ,EAAEL,SAAS,CAACM,WAAW,CAAC;IACpC,CAAC,EAAEN,SAAS,CAACO,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,GAAG,GAAG5D,wBAAwB,CAAC,CAAC;EACrE,CAAC;EACD6D,iBAAiB,EAAE,SAAAA,CAAA,EAAW;IAC1B,IAAIC,OAAO;IACX,IAAIC,QAAQ,GAAG,IAAI,CAACnD,SAAS;IAC7B,IAAIoD,iBAAiB,GAAG,IAAI,CAACC,kBAAkB;IAC/C,IAAIvD,MAAM,GAAGqD,QAAQ,CAACG,eAAe,CAAC,CAAC;IACvC,IAAI,EAAE,IAAI,MAAMJ,OAAO,GAAGpD,MAAM,CAAC,IAAI,KAAK,CAAC,KAAKoD,OAAO,IAAIA,OAAO,CAACpB,MAAM,CAAC,EAAE;MACxE,IAAIyB,qBAAqB;MACzB,IAAIC,mBAAmB,GAAGJ,iBAAiB,CAACK,eAAe,CAAC,CAAC;MAC7DL,iBAAiB,CAACM,eAAe,CAAC,IAAI,MAAMH,qBAAqB,GAAGJ,QAAQ,CAACM,eAAe,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKF,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACP,QAAQ,CAAC,YAAY,CAAC,CAAC;MAC5LlD,MAAM,GAAGsD,iBAAiB,CAACE,eAAe,CAAC,CAAC;MAC5CF,iBAAiB,CAACM,eAAe,CAACF,mBAAmB,CAAC;IAC1D;IACA,OAAO1D,MAAM;EACjB,CAAC;EACD6D,iBAAiB,EAAE,SAAAA,CAASC,cAAc,EAAE9D,MAAM,EAAE;IAChD,IAAI+D,iBAAiB,GAAG,IAAI,CAACC,kBAAkB;IAC/CD,iBAAiB,CAACE,WAAW,CAAC,CAAC;IAC/B1F,IAAI,CAACuF,cAAc,EAAG,UAASrD,KAAK,EAAEyD,MAAM,EAAE;MAC1C,IAAIC,QAAQ,GAAGJ,iBAAiB,CAACK,WAAW,CAACF,MAAM,CAAC;MACpDH,iBAAiB,CAACM,YAAY,CAACF,QAAQ,EAAE,cAAc,EAAEnE,MAAM,CAACS,KAAK,CAAC,CAAC;IAC3E,CAAE,CAAC;IACHsD,iBAAiB,CAACO,SAAS,CAAC,CAAC;EACjC,CAAC;EACDC,yBAAyB,EAAE,SAAAA,CAASC,IAAI,EAAEC,SAAS,EAAEC,SAAS,EAAE;IAC5D,IAAI,CAACF,IAAI,IAAI,CAACA,IAAI,CAACG,SAAS,CAAC,CAAC,EAAE;MAC5B;IACJ;IACA,IAAIC,WAAW,GAAG,IAAI,CAAC1E,SAAS,CAAC2E,gBAAgB,CAAC,CAAC;IACnD,IAAIC,WAAW,GAAGN,IAAI,CAACK,gBAAgB,CAAC,CAAC;IACzCtG,IAAI,CAACqG,WAAW,EAAE,CAACnE,KAAK,EAAEsE,YAAY,KAAK;MACvC,IAAIC,UAAU;MACd,IAAIC,UAAU,GAAGhH,CAAC,CAAC8G,YAAY,CAAC;MAChC,IAAIG,UAAU,GAAGJ,WAAW,CAACK,EAAE,CAAC1E,KAAK,CAAC;MACtC,IAAIyE,UAAU,IAAIA,UAAU,CAAClD,MAAM,EAAE;QACjC,IAAI0C,SAAS,EAAE;UACXM,UAAU,GAAGE,UAAU,CAAChC,QAAQ,CAAC,OAAO,CAAC,CAACkC,QAAQ,CAACH,UAAU,CAAC;QAClE,CAAC,MAAM;UACHD,UAAU,GAAGC,UAAU,CAAC/B,QAAQ,CAAC,GAAG,GAAGuB,SAAS,CAAC,CAACW,QAAQ,CAACF,UAAU,CAAC;QAC1E;QACAF,UAAU,CAACK,WAAW,CAACZ,SAAS,EAAEC,SAAS,CAAC;QAC5CM,UAAU,CAACK,WAAW,CAAC,IAAI,CAACC,eAAe,CAAC,UAAU,CAAC,EAAEZ,SAAS,CAAC;MACvE;IACJ,CAAC,CAAC;EACN,CAAC;EACDa,kBAAkB,EAAE,SAAAA,CAASb,SAAS,EAAE;IACpC,IAAIO,UAAU,GAAG,IAAI,CAAC/E,SAAS,CAACyD,eAAe,CAAC,CAAC;IACjD,IAAI6B,eAAe,GAAG,IAAI,CAACtF,SAAS,CAAC2E,gBAAgB,CAAC,CAAC,CAACM,EAAE,CAAC,CAAC,CAAC;IAC7D,IAAI,CAACF,UAAU,EAAE;MACb;IACJ;IACAA,UAAU,CAACQ,GAAG,CAAC,aAAa,EAAEf,SAAS,GAAG,MAAM,GAAG,OAAO,CAAC;IAC3DO,UAAU,CAAC/B,QAAQ,CAAC,UAAU,CAAC,CAACuC,GAAG,CAAC,SAAS,EAAEf,SAAS,GAAG,MAAM,GAAG,EAAE,CAAC;IACvEnG,IAAI,CAACiH,eAAe,CAACE,IAAI,CAACnG,kBAAkB,CAAC,EAAE,CAACoG,GAAG,EAAEC,IAAI,KAAK;MAC1D3H,CAAC,CAAC2H,IAAI,CAAC,CAACH,GAAG,CAAC,SAAS,EAAEf,SAAS,GAAG,MAAM,GAAG,EAAE,CAAC;IACnD,CAAC,CAAC;IACFc,eAAe,CAACH,WAAW,CAAC,IAAI,CAACC,eAAe,CAAClG,iBAAiB,CAAC,EAAE,CAACsF,SAAS,CAAC;IAChF,IAAI,CAACH,yBAAyB,CAAC,IAAI,CAAChB,kBAAkB,EAAE,WAAW,EAAEmB,SAAS,CAAC;IAC/E,IAAI,CAACH,yBAAyB,CAAC,IAAI,CAACsB,WAAW,EAAE,WAAW,EAAEnB,SAAS,CAAC;IACxE,IAAI,IAAI,CAACoB,YAAY,CAAC,CAAC,EAAE;MACrBb,UAAU,CAACc,GAAG,CAAC,CAAC,CAAC,CAACC,KAAK,CAACrG,KAAK,GAAG+E,SAAS,GAAG,MAAM,GAAG,EAAE;IAC3D;EACJ,CAAC;EACDuB,uBAAuB,EAAE,SAAAA,CAASC,KAAK,EAAE;IACrC,IAAIC,UAAU,GAAG,IAAI,CAACjG,SAAS,CAACkG,aAAa,CAAC,CAAC;IAC/C,IAAIC,eAAe,GAAG,IAAI,CAACnG,SAAS,CAACoG,mBAAmB,CAAC,CAAC;IAC1D,IAAI,KAAK,MAAM,IAAI,KAAKH,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACI,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE;MACpGF,eAAe,CAACZ,GAAG,CAAC;QAChBe,SAAS,EAAEN,KAAK,GAAGtH,aAAa,CAAC6H,qBAAqB,CAACvH,OAAO,CAAC,GAAG;MACtE,CAAC,CAAC;IACN;EACJ,CAAC;EACDwH,mBAAmB,EAAE,SAAAA,CAAA,EAAW;IAC5B,IAAI3C,iBAAiB,GAAG,IAAI,CAACC,kBAAkB;IAC/C,IAAIF,cAAc,GAAGC,iBAAiB,CAAC4C,iBAAiB,CAAC,CAAC;IAC1D,IAAIC,eAAe,GAAG,IAAI,CAACL,MAAM,CAAC,iBAAiB,CAAC;IACpD,IAAIM,eAAe,GAAG,IAAI,CAACN,MAAM,CAAC,iBAAiB,CAAC;IACpD,IAAIO,WAAW,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IACrC,IAAIC,WAAW,GAAG,KAAK;IACvB,IAAIC,gBAAgB;IACpB,IAAIC,uBAAuB,GAAG,KAAK;IACnC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIxG,cAAc;IAClB,IAAIC,cAAc;IAClB,CAACkG,WAAW,IAAIvI,IAAI,CAACuF,cAAc,EAAG,UAASrD,KAAK,EAAEyD,MAAM,EAAE;MAC1D,IAAI,MAAM,KAAKA,MAAM,CAACvE,KAAK,EAAE;QACzBmH,WAAW,GAAG,IAAI;QAClB,OAAO,KAAK;MAChB;IACJ,CAAE,CAAC;IACHvI,IAAI,CAACuF,cAAc,EAAG,UAASrD,KAAK,EAAEyD,MAAM,EAAE;MAC1C,IAAIA,MAAM,CAACkD,QAAQ,EAAE;QACjBJ,WAAW,GAAG,IAAI;QAClB,OAAO,KAAK;MAChB;IACJ,CAAE,CAAC;IACH,IAAI,CAACnD,iBAAiB,CAACC,cAAc,EAAE,EAAE,CAAC;IAC1C,IAAIb,QAAQ,GAAG,IAAI,CAACP,SAAS,CAACO,QAAQ,CAAC,CAAC;IACxC,IAAI6D,WAAW,EAAE;MACbnG,cAAc,GAAG3B,UAAU,CAACqI,gBAAgB,CAACpE,QAAQ,CAAC8C,GAAG,CAAC,CAAC,CAAC,CAAC;MAC7DnF,cAAc,GAAGhC,aAAa,CAAC0I,iBAAiB,CAAC3G,cAAc,CAAC;MAChE,IAAI,CAAC4E,kBAAkB,CAAC,IAAI,CAAC;MAC7B0B,gBAAgB,GAAG,IAAI;IAC3B;IACA,IAAI,CAAChB,uBAAuB,CAACY,eAAe,CAAC;IAC7C,IAAI5D,QAAQ,IAAIA,QAAQ,CAAC8C,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,CAACwB,SAAS,EAAE;MAC/C,OAAO,IAAI,CAACA,SAAS;MACrBtE,QAAQ,CAAC,CAAC,CAAC,CAAC+C,KAAK,CAACwB,QAAQ,GAAG,EAAE;IACnC;IACApJ,WAAW,CAAC,MAAM;MACd,IAAI0I,WAAW,EAAE;QACbK,YAAY,GAAG,IAAI,CAAChE,iBAAiB,CAAC,CAAC;QACvC5E,IAAI,CAACuF,cAAc,EAAG,UAASrD,KAAK,EAAEyD,MAAM,EAAE;UAC1C,IAAIC,QAAQ,GAAGJ,iBAAiB,CAACK,WAAW,CAACF,MAAM,CAAC;UACpDH,iBAAiB,CAACM,YAAY,CAACF,QAAQ,EAAE,cAAc,EAAEgD,YAAY,CAAC1G,KAAK,CAAC,EAAE,IAAI,CAAC;QACvF,CAAE,CAAC;MACP,CAAC,MAAM,IAAIuG,WAAW,EAAE;QACpBG,YAAY,GAAG,IAAI,CAAChE,iBAAiB,CAAC,CAAC;MAC3C;MACA5E,IAAI,CAACuF,cAAc,EAAG,UAASrD,KAAK,EAAE;QAClC,IAAId,KAAK,GAAG,IAAI,CAACA,KAAK;QACtB,IAAI,MAAM,KAAKA,KAAK,EAAE;UAClB,IAAIlB,SAAS,CAACkB,KAAK,CAAC,EAAE;YAClBwH,YAAY,CAAC1G,KAAK,CAAC,GAAG/B,SAAS,CAACiB,KAAK,CAAC,IAAIE,YAAY,CAACF,KAAK,CAAC,GAAG8H,UAAU,CAAC9H,KAAK,CAAC,GAAGA,KAAK;UAC7F,CAAC,MAAM,IAAI,CAACiH,eAAe,EAAE;YACzBO,YAAY,CAAC1G,KAAK,CAAC,GAAG,KAAK,CAAC;UAChC;QACJ;MACJ,CAAE,CAAC;MACH,IAAIwG,gBAAgB,EAAE;QAClB,IAAI,CAAC1B,kBAAkB,CAAC,KAAK,CAAC;QAC9B0B,gBAAgB,GAAG,KAAK;QACxB,IAAItG,cAAc,IAAIA,cAAc,KAAK3B,UAAU,CAACqI,gBAAgB,CAAC,CAAC,EAAE;UACpE,IAAIK,oBAAoB,GAAG/I,eAAe,CAACgC,cAAc,CAAC,CAACgH,MAAM,GAAG,CAAC;UACrE,IAAI,CAACD,oBAAoB,EAAE;YACvBhH,YAAY,CAACC,cAAc,EAAEC,cAAc,CAAC;UAChD;QACJ;MACJ;MACAsG,uBAAuB,GAAG,IAAI,CAACU,oBAAoB,CAACT,YAAY,EAAErD,cAAc,CAAC;MACjF,IAAI8C,eAAe,EAAE;QACjB,CAAE,YAAW;UACT,IAAIiB,iBAAiB;UACrBtJ,IAAI,CAACuF,cAAc,EAAG,UAASrD,KAAK,EAAEyD,MAAM,EAAE;YAC1C,IAAI,aAAa,KAAKA,MAAM,CAAC4D,IAAI,EAAE;cAC/BD,iBAAiB,GAAGV,YAAY,CAAC1G,KAAK,CAAC;YAC3C;UACJ,CAAE,CAAC;UACHlC,IAAI,CAACuF,cAAc,EAAG,UAASrD,KAAK,EAAEyD,MAAM,EAAE;YAC1C,IAAI,aAAa,KAAKA,MAAM,CAAC4D,IAAI,IAAID,iBAAiB,EAAE;cACpDV,YAAY,CAAC1G,KAAK,CAAC,GAAGoH,iBAAiB;YAC3C;UACJ,CAAE,CAAC;QACP,CAAC,CAAC,CAAC;QACH,IAAI,IAAI,CAAC/B,YAAY,CAAC,CAAC,EAAE;UACrB,IAAI,CAACiC,eAAe,CAACZ,YAAY,EAAErD,cAAc,CAAC;QACtD;MACJ;MACA3F,WAAW,CAAC,MAAM;QACd,IAAI2I,WAAW,IAAII,uBAAuB,EAAE;UACxC,IAAI,CAACrD,iBAAiB,CAACC,cAAc,EAAEqD,YAAY,CAAC;QACxD;QACA,IAAIN,eAAe,EAAE;UACjB,IAAI,CAACZ,uBAAuB,CAAC,KAAK,CAAC;QACvC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDc,YAAY,EAAE,SAAAA,CAAA,EAAW;IACrB,OAAO,IAAI,CAACR,MAAM,CAAC,iBAAiB,CAAC;EACzC,CAAC;EACDT,YAAY,EAAE,SAAAA,CAAA,EAAW;IACrB,OAAO,IAAI,CAAC9B,kBAAkB,CAAC2C,iBAAiB,CAAC,CAAC,CAACqB,IAAI,CAACC,CAAC,IAAI,MAAM,KAAKA,CAAC,CAACtI,KAAK,IAAI,CAACsI,CAAC,CAACC,OAAO,CAAC;EAClG,CAAC;EACDC,uBAAuB,EAAE,SAAAA,CAAShB,YAAY,EAAE;IAC5C,IAAIiB,SAAS,GAAGtI,kBAAkB,CAAC,IAAI,EAAEqH,YAAY,CAAC;IACtD,IAAIkB,uBAAuB,GAAGlB,YAAY,CAACmB,MAAM,CAAE,UAAS3I,KAAK,EAAE;MAC/D,OAAO,KAAK,CAAC,KAAKA,KAAK;IAC3B,CAAE,CAAC,CAACqC,MAAM;IACV,OAAOoG,SAAS,GAAGC,uBAAuB;EAC9C,CAAC;EACDT,oBAAoB,EAAE,SAAAA,CAAST,YAAY,EAAErD,cAAc,EAAE;IACzD,IAAI/D,IAAI,GAAG,IAAI;IACf,IAAIwI,CAAC;IACL,IAAIC,eAAe,GAAG,KAAK;IAC3B,IAAIC,YAAY,GAAG,KAAK;IACxB,IAAIvB,uBAAuB,GAAG,KAAK;IACnC,IAAIjE,QAAQ,GAAGlD,IAAI,CAAC2C,SAAS,CAACO,QAAQ,CAAC,CAAC;IACxC,IAAIyF,QAAQ,GAAG3I,IAAI,CAAC4I,SAAS;IAC7B,IAAIC,KAAK,GAAG,SAAAA,CAAA,EAAW;MACnB,IAAInI,KAAK,GAAG8H,CAAC;MACb,IAAIrE,MAAM,GAAGJ,cAAc,CAACrD,KAAK,CAAC;MAClC,IAAIoI,cAAc,GAAG1B,YAAY,CAAC1G,KAAK,CAAC,KAAKjB,oBAAoB;MACjE,IAAIG,KAAK,GAAGwH,YAAY,CAAC1G,KAAK,CAAC;MAC/B,IAAI2G,QAAQ,GAAGlD,MAAM,CAACkD,QAAQ;MAC9B,IAAIA,QAAQ,EAAE;QACV,IAAI,KAAK,CAAC,KAAKzH,KAAK,EAAE;UAClB,IAAImJ,mBAAmB,GAAG/I,IAAI,CAACoI,uBAAuB,CAAChB,YAAY,CAAC;UACpExH,KAAK,GAAGmJ,mBAAmB;QAC/B,CAAC,MAAM,IAAIpJ,cAAc,CAACC,KAAK,CAAC,EAAE;UAC9B,IAAIyI,SAAS,GAAG/H,qCAAqC,CAACN,IAAI,EAAEU,KAAK,EAAE2G,QAAQ,EAAED,YAAY,CAAC;UAC1F,IAAIiB,SAAS,GAAG,CAAC,EAAE;YACfzI,KAAK,GAAG,CAAC,CAAC;UACd;QACJ;MACJ;MACA,IAAIoJ,eAAe,GAAGhJ,IAAI,CAACiJ,mBAAmB,CAACvI,KAAK,EAAE0G,YAAY,CAAC3G,GAAG,CAAE,UAASyI,WAAW,EAAE3I,WAAW,EAAE;QACvG,OAAOG,KAAK,KAAKH,WAAW,GAAGX,KAAK,GAAGsJ,WAAW;MACtD,CAAE,CAAC,CAAC;MACJ,IAAI7B,QAAQ,IAAI,CAACyB,cAAc,IAAIE,eAAe,GAAG3B,QAAQ,EAAE;QAC3DD,YAAY,CAAC1G,KAAK,CAAC,GAAG2G,QAAQ;QAC9BF,uBAAuB,GAAG,IAAI;QAC9BqB,CAAC,GAAG,CAAC,CAAC;MACV;MACA,IAAI,CAAC9J,SAAS,CAACyF,MAAM,CAACvE,KAAK,CAAC,EAAE;QAC1B8I,YAAY,GAAG,IAAI;MACvB;MACA,IAAI/I,cAAc,CAACwE,MAAM,CAACvE,KAAK,CAAC,EAAE;QAC9B6I,eAAe,GAAG,IAAI;MAC1B;IACJ,CAAC;IACD,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzE,cAAc,CAAC9B,MAAM,EAAEuG,CAAC,EAAE,EAAE;MACxCK,KAAK,CAAC,CAAC;IACX;IACA,IAAI,CAACH,YAAY,IAAItB,YAAY,CAACnF,MAAM,EAAE;MACtC,IAAIkH,gBAAgB,GAAGnJ,IAAI,CAACG,SAAS,CAACiJ,OAAO,CAAC,CAAC;MAC/C,IAAIlJ,YAAY,GAAGF,IAAI,CAACG,SAAS,CAACD,YAAY,CAAC,CAAC;MAChD,IAAImJ,cAAc,GAAGrJ,IAAI,CAACG,SAAS,CAACmJ,iBAAiB,CAAC,CAAC;MACvD,IAAIlJ,UAAU,GAAGJ,IAAI,CAACK,cAAc,CAAC+G,YAAY,EAAElH,YAAY,CAAC;MAChE,IAAIE,UAAU,GAAGF,YAAY,EAAE;QAC3B,IAAIqJ,eAAe,GAAG1K,aAAa,CAAC2K,2BAA2B,CAACzF,cAAc,EAAEqD,YAAY,CAAC;QAC7F,IAAImC,eAAe,IAAI,CAAC,EAAE;UACtBnC,YAAY,CAACmC,eAAe,CAAC,GAAG,MAAM;UACtCpC,uBAAuB,GAAG,IAAI;UAC9B,IAAI,KAAK,KAAKwB,QAAQ,IAAI,CAACF,eAAe,EAAE;YACxC,IAAIgB,WAAW,GAAGzJ,IAAI,CAACwG,MAAM,CAAC,aAAa,CAAC,GAAGkD,IAAI,CAACC,IAAI,CAAC7L,aAAa,CAACqL,gBAAgB,CAAC,GAAGpL,aAAa,CAACoL,gBAAgB,CAAC,CAAC,GAAG,CAAC;YAC/HnJ,IAAI,CAACwH,SAAS,GAAGpH,UAAU,GAAGiJ,cAAc,GAAGI,WAAW;YAC1DvG,QAAQ,CAACwC,GAAG,CAAC,UAAU,EAAE1F,IAAI,CAACwH,SAAS,CAAC;UAC5C;QACJ;MACJ;IACJ;IACA,OAAOL,uBAAuB;EAClC,CAAC;EACDa,eAAe,EAAE,SAAAA,CAAS4B,WAAW,EAAE7F,cAAc,EAAE;IACnD,IAAI8F,SAAS,GAAG,IAAI,CAAC1J,SAAS,CAACD,YAAY,CAAC,CAAC;IAC7C,IAAI4J,SAAS,GAAG,IAAI,CAACzJ,cAAc,CAACuJ,WAAW,EAAEC,SAAS,CAAC;IAC3D,IAAIE,aAAa,GAAG;MAChB9H,MAAM,EAAE;IACZ,CAAC;IACD,IAAI,CAAC2H,WAAW,CAAC3H,MAAM,EAAE;MACrB;IACJ;IACAzD,IAAI,CAACuF,cAAc,EAAG,UAASrD,KAAK,EAAE;MAClC,IAAI,IAAI,CAACd,KAAK,IAAIgK,WAAW,CAAClJ,KAAK,CAAC,KAAKjB,oBAAoB,EAAE;QAC3DsK,aAAa,CAACrJ,KAAK,CAAC,GAAG,IAAI;QAC3BqJ,aAAa,CAAC9H,MAAM,EAAE;MAC1B;IACJ,CAAE,CAAC;IACH,IAAI+H,IAAI,GAAGH,SAAS,GAAGC,SAAS;IAChC,IAAIG,WAAW,GAAGP,IAAI,CAACQ,KAAK,CAACF,IAAI,IAAIJ,WAAW,CAAC3H,MAAM,GAAG8H,aAAa,CAAC9H,MAAM,CAAC,CAAC;IAChF,IAAIkI,qBAAqB,GAAGH,IAAI,GAAGC,WAAW,IAAIL,WAAW,CAAC3H,MAAM,GAAG8H,aAAa,CAAC9H,MAAM,CAAC;IAC5F,IAAI+H,IAAI,IAAI,CAAC,EAAE;MACX,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,WAAW,CAAC3H,MAAM,EAAEuG,CAAC,EAAE,EAAE;QACzC,IAAIuB,aAAa,CAACvB,CAAC,CAAC,EAAE;UAClB;QACJ;QACAoB,WAAW,CAACpB,CAAC,CAAC,IAAIyB,WAAW;QAC7B,IAAIE,qBAAqB,GAAG,CAAC,EAAE;UAC3B,IAAIA,qBAAqB,GAAG,CAAC,EAAE;YAC3BP,WAAW,CAACpB,CAAC,CAAC,IAAI2B,qBAAqB;YACvCA,qBAAqB,GAAG,CAAC;UAC7B,CAAC,MAAM;YACHP,WAAW,CAACpB,CAAC,CAAC,EAAE;YAChB2B,qBAAqB,EAAE;UAC3B;QACJ;MACJ;IACJ;EACJ,CAAC;EACDlB,mBAAmB,EAAE,SAAAA,CAAS1I,WAAW,EAAE6J,YAAY,EAAEC,UAAU,EAAE;IACjE,IAAIC,KAAK,GAAG,CAAC;IACb,IAAI1K,KAAK,GAAGwK,YAAY,CAAC7J,WAAW,CAAC;IACrC,IAAI,CAACZ,cAAc,CAACC,KAAK,CAAC,EAAE;MACxB,OAAO8H,UAAU,CAAC9H,KAAK,CAAC;IAC5B;IACA,IAAI2K,iBAAiB,GAAGH,YAAY,CAACI,MAAM,CAAC,CAACC,GAAG,EAAE7K,KAAK,EAAEc,KAAK,KAAK;MAC/D,IAAI,CAACf,cAAc,CAACC,KAAK,CAAC,EAAE;QACxB,OAAO6K,GAAG;MACd;MACA,OAAOA,GAAG,GAAG/C,UAAU,CAAC9H,KAAK,CAAC;IAClC,CAAC,EAAE,CAAC,CAAC;IACL,IAAI8K,eAAe,GAAGN,YAAY,CAACI,MAAM,CAAC,CAACC,GAAG,EAAE7K,KAAK,KAAK;MACtD,IAAI,CAACA,KAAK,IAAIA,KAAK,KAAKH,oBAAoB,IAAIE,cAAc,CAACC,KAAK,CAAC,EAAE;QACnE,OAAO6K,GAAG;MACd;MACA,OAAOA,GAAG,GAAG/C,UAAU,CAAC9H,KAAK,CAAC;IAClC,CAAC,EAAE,CAAC,CAAC;IACLyK,UAAU,GAAGA,UAAU,IAAI,IAAI,CAAClK,SAAS,CAACD,YAAY,CAAC,CAAC;IACxD,IAAIyK,SAAS,GAAGN,UAAU,GAAGK,eAAe;IAC5C,IAAIE,wBAAwB,GAAGL,iBAAiB,GAAGF,UAAU,GAAG,GAAG;IACnE,IAAIK,eAAe,GAAG,CAAC,IAAIE,wBAAwB,GAAGF,eAAe,IAAIL,UAAU,EAAE;MACjFC,KAAK,GAAGM,wBAAwB,GAAGD,SAAS,GAAGA,SAAS,GAAGC,wBAAwB,GAAG,CAAC;IAC3F;IACA,OAAOlD,UAAU,CAAC9H,KAAK,CAAC,GAAGyK,UAAU,GAAGC,KAAK,GAAG,GAAG;EACvD,CAAC;EACDjK,cAAc,EAAE,SAAAA,CAASJ,MAAM,EAAEoK,UAAU,EAAE;IACzC,IAAIQ,MAAM,GAAG,CAAC;IACd,KAAK,IAAIrC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvI,MAAM,CAACgC,MAAM,EAAEuG,CAAC,EAAE,EAAE;MACpC,IAAI5I,KAAK,GAAGK,MAAM,CAACuI,CAAC,CAAC;MACrB,IAAI5I,KAAK,IAAIA,KAAK,KAAKH,oBAAoB,EAAE;QACzCoL,MAAM,IAAI,IAAI,CAAC5B,mBAAmB,CAACT,CAAC,EAAEvI,MAAM,EAAEoK,UAAU,CAAC;MAC7D;IACJ;IACA,OAAOX,IAAI,CAACC,IAAI,CAACkB,MAAM,CAAC;EAC5B,CAAC;EACDC,gBAAgB,EAAE,SAAAA,CAAA,EAAW;IACzB,OAAO,IAAI,CAACnI,SAAS,CAACO,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC6C,GAAG,CAAC,CAAC,CAAC;EACtD,CAAC;EACD+E,UAAU,EAAE,SAAAA,CAASC,WAAW,EAAE;IAC9B,IAAIC,YAAY,GAAG/M,CAAC,CAAC8M,WAAW,CAAC;IACjC,IAAIE,oBAAoB,GAAG,IAAI,CAAC3F,eAAe,CAACjG,sBAAsB,CAAC;IACvE,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC6L,UAAU,IAAIF,YAAY,IAAIA,YAAY,CAACG,EAAE,CAAC,UAAU,CAAC,IAAIpN,QAAQ,CAACiN,YAAY,CAAC,EAAE;MACrG,IAAII,aAAa,GAAGJ,YAAY,CAAC9H,QAAQ,CAAC,GAAG,GAAG,IAAI,CAACmI,uBAAuB,CAAC,CAAC,CAAC;MAC/E,IAAID,aAAa,CAACpJ,MAAM,EAAE;QACtBoJ,aAAa,CAACE,MAAM,CAAC,CAAC;MAC1B;MACA,IAAI,CAACJ,UAAU,GAAG,CAAC,CAAClN,SAAS,CAACgN,YAAY,CAAC;MAC3C,IAAIrL,KAAK,GAAG5B,QAAQ,CAACiN,YAAY,CAAC;MAClCA,YAAY,CAACO,QAAQ,CAACN,oBAAoB,CAAC;MAC3C,IAAI,CAACtC,SAAS,GAAG5K,QAAQ,CAACiN,YAAY,CAAC,KAAKrL,KAAK;MACjDqL,YAAY,CAACQ,WAAW,CAACP,oBAAoB,CAAC;MAC9C,IAAIG,aAAa,CAACpJ,MAAM,EAAE;QACtBoJ,aAAa,CAAChG,QAAQ,CAAC4F,YAAY,CAAC;MACxC;IACJ;EACJ,CAAC;EACDS,aAAa,EAAE,SAAAA,CAAA,EAAW;IACtB,OAAO,CAAC,QAAQ,EAAE,kBAAkB,CAAC;EACzC,CAAC;EACDvJ,mBAAmB,EAAE,SAAAA,CAAA,EAAW;IAC5B,IAAIwJ,qBAAqB,EAAEC,eAAe,EAAEC,iBAAiB;IAC7D,OAAO9M,IAAI,CAAC,IAAI,MAAM4M,qBAAqB,GAAG,IAAI,CAACnI,kBAAkB,CAAC,IAAI,KAAK,CAAC,KAAKmI,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACG,kBAAkB,CAAC,CAAC,EAAE,IAAI,MAAMF,eAAe,GAAG,IAAI,CAACzL,SAAS,CAAC,IAAI,KAAK,CAAC,KAAKyL,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACE,kBAAkB,CAAC,CAAC,EAAE,IAAI,MAAMD,iBAAiB,GAAG,IAAI,CAAC/F,WAAW,CAAC,IAAI,KAAK,CAAC,KAAK+F,iBAAiB,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACC,kBAAkB,CAAC,CAAC,CAAC;EACna,CAAC;EACDhK,MAAM,EAAE,SAAAA,CAAA,EAAW;IACf,IAAI,IAAI,CAACa,SAAS,CAACoJ,cAAc,EAAE;MAC/B;IACJ;IACA,IAAIC,CAAC,GAAG,IAAIhN,QAAQ,CAAD,CAAC;IACpB,IAAI,CAACmD,mBAAmB,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MAClCrD,IAAI,CAAC,IAAI,CAACkN,gBAAgB,CAAC,CAAC,CAAC,CAAC7J,IAAI,CAAC4J,CAAC,CAAC1J,OAAO,CAAC,CAACC,IAAI,CAACyJ,CAAC,CAACxJ,MAAM,CAAC;IAChE,CAAC,CAAC,CAACD,IAAI,CAACyJ,CAAC,CAACxJ,MAAM,CAAC;IACjB,OAAOwJ,CAAC,CAACE,OAAO,CAAC,CAAC;EACtB,CAAC;EACDD,gBAAgB,EAAE,SAAAA,CAASE,SAAS,EAAE;IAClC,IAAInM,IAAI,GAAG,IAAI;IACfA,IAAI,CAACiB,uBAAuB,CAAC,CAAC;IAC9B,IAAI,CAACjB,IAAI,CAACoM,UAAU,CAACD,SAAS,CAAC,EAAE;MAC7B;IACJ;IACA,IAAIE,UAAU,GAAGrM,IAAI,CAACsM,eAAe;IACrC,IAAIzB,MAAM,GAAG7K,IAAI,CAACsM,eAAe,GAAG,IAAItN,QAAQ,CAAD,CAAC;IAChDD,IAAI,CAACsN,UAAU,CAAC,CAACE,MAAM,CAAE,YAAW;MAChCnO,WAAW,CAAE,YAAW;QACpB,IAAI4B,IAAI,CAACmB,eAAe,CAACqL,QAAQ,CAAC,CAAC,EAAE;UACjCxM,IAAI,CAAC2G,mBAAmB,CAAC,CAAC;QAC9B;QACA3G,IAAI,CAACyM,wBAAwB,CAAC,CAAC;QAC/BpO,WAAW,CAAE,YAAW;UACpBD,WAAW,CAAE,YAAW;YACpBC,WAAW,CAAE,YAAW;cACpB2B,IAAI,CAAC0M,qBAAqB,CAAC,CAAC;YAChC,CAAE,CAAC;UACP,CAAE,CAAC;QACP,CAAE,CAAC;MACP,CAAE,CAAC,CAACtK,IAAI,CAACyI,MAAM,CAACvI,OAAO,CAAC,CAACC,IAAI,CAACsI,MAAM,CAACrI,MAAM,CAAC;IAChD,CAAE,CAAC;IACH,OAAOqI,MAAM,CAACqB,OAAO,CAAC,CAAC;EAC3B,CAAC;EACDO,wBAAwB,EAAE,SAAAA,CAAA,EAAW;IACjC,IAAIE,YAAY,GAAG,IAAI,CAAC7B,gBAAgB,CAAC,CAAC;IAC1C,IAAI1E,UAAU,GAAG,IAAI,CAACjG,SAAS,CAACkG,aAAa,CAAC,CAAC;IAC/C,IAAIsG,YAAY,IAAIA,YAAY,CAAC1G,KAAK,CAAC2G,MAAM,KAAK,CAACxG,UAAU,IAAI,CAACA,UAAU,CAACyG,SAAS,CAAC,CAAC,CAAC,EAAE;MACvFF,YAAY,CAAC1G,KAAK,CAAC2G,MAAM,GAAG,EAAE;IAClC;EACJ,CAAC;EACDR,UAAU,EAAE,SAAAA,CAASD,SAAS,EAAE;IAC5B,IAAIlB,YAAY,GAAG,IAAI,CAACtI,SAAS,CAACO,QAAQ,CAAC,CAAC;IAC5C,IAAIiJ,SAAS,KAAK,IAAI,CAACW,UAAU,KAAK9O,QAAQ,CAACiN,YAAY,CAAC,IAAI,IAAI,CAAC8B,WAAW,KAAK9O,SAAS,CAACgN,YAAY,CAAC,IAAI,IAAI,CAAC+B,iBAAiB,KAAKzO,SAAS,CAAC,CAAC,CAAC0O,gBAAgB,IAAI,CAAChC,YAAY,CAACG,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE;MACtM,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf,CAAC;EACD8B,uBAAuB,EAAE,SAAAA,CAAA,EAAW;IAChC,IAAIlN,IAAI,GAAG,IAAI;IACf,IAAImN,eAAe,GAAGnN,IAAI,CAACG,SAAS,CAACmJ,iBAAiB,CAAC,CAAC;IACxD,IAAI8D,eAAe,GAAGpN,IAAI,CAACG,SAAS,CAACmJ,iBAAiB,CAAC,IAAI,CAAC;IAC5DlL,WAAW,CAAE,YAAW;MACpB4B,IAAI,CAACwD,kBAAkB,IAAIxD,IAAI,CAACwD,kBAAkB,CAAC6J,kBAAkB,CAACF,eAAe,CAAC;MACtFnN,IAAI,CAAC8F,WAAW,IAAI9F,IAAI,CAAC8F,WAAW,CAACuH,kBAAkB,CAACF,eAAe,CAAC;MACxEnN,IAAI,CAACG,SAAS,CAACkN,kBAAkB,CAACF,eAAe,EAAEC,eAAe,CAAC;IACvE,CAAE,CAAC;EACP,CAAC;EACD/K,mBAAmB,EAAE,SAAAA,CAAA,EAAW;IAC5B,IAAI+D,UAAU,GAAG,IAAI,CAACjG,SAAS,CAACkG,aAAa,CAAC,CAAC;IAC/C,IAAIiH,iBAAiB,GAAG,IAAI,KAAK,IAAI,CAAC9G,MAAM,CAAC,qBAAqB,CAAC;IACnE,IAAI,CAACJ,UAAU,IAAIkH,iBAAiB,EAAE;MAClClP,WAAW,CAAC,MAAM;QACdC,WAAW,CAAC,MAAM;UACd,IAAI,CAAC6O,uBAAuB,CAAC,CAAC;QAClC,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,MAAM;MACH,IAAI,CAACA,uBAAuB,CAAC,CAAC;IAClC;EACJ,CAAC;EACDR,qBAAqB,EAAE,SAAAA,CAAA,EAAW;IAC9B,IAAI1M,IAAI,GAAG,IAAI;IACf,IAAIkB,cAAc,GAAGlB,IAAI,CAACmB,eAAe;IACzC,IAAIoM,aAAa,GAAGvN,IAAI,CAACwN,aAAa,CAAC,eAAe,CAAC;IACvD,IAAIlK,QAAQ,GAAGtD,IAAI,CAACG,SAAS;IAC7B,IAAI8K,YAAY,GAAGjL,IAAI,CAAC2C,SAAS,CAACO,QAAQ,CAAC,CAAC;IAC5C,IAAIyJ,YAAY,GAAG,IAAI,CAAC7B,gBAAgB,CAAC,CAAC;IAC1C,IAAI2C,iBAAiB,GAAGxP,SAAS,CAACgN,YAAY,CAAC;IAC/C,IAAI2B,MAAM,GAAG5M,IAAI,CAACwG,MAAM,CAAC,QAAQ,CAAC,IAAIyE,YAAY,CAACjF,GAAG,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC2G,MAAM;IACtE,IAAIc,iBAAiB,GAAG,CAAC,CAACd,MAAM,IAAI,MAAM,KAAKA,MAAM;IACrD,IAAIe,SAAS,GAAGC,QAAQ,CAAC3C,YAAY,CAACvF,GAAG,CAAC,WAAW,CAAC,CAAC;IACvD,IAAImI,iBAAiB,GAAGF,SAAS,IAAIF,iBAAiB,IAAIE,SAAS;IACnE,IAAIG,kBAAkB,GAAGnB,YAAY,IAAIA,YAAY,CAACoB,YAAY,KAAKpB,YAAY,CAACqB,YAAY;IAChGhO,IAAI,CAAC+K,UAAU,CAACE,YAAY,CAAC;IAC7B7M,WAAW,CAAE,YAAW;MACpB,IAAI6P,SAAS,GAAGjO,IAAI,CAACmL,UAAU,IAAI,CAAC,CAACwC,SAAS,IAAID,iBAAiB;MACnEpK,QAAQ,CAAC2K,SAAS,CAACA,SAAS,CAAC;MAC7B,IAAIJ,iBAAiB,IAAI,CAACC,kBAAkB,EAAE;QAC1C5P,CAAC,CAACyO,YAAY,CAAC,CAACjH,GAAG,CAAC,QAAQ,EAAEiI,SAAS,CAAC;MAC5C;MACA,IAAI,CAACzM,cAAc,CAACsL,QAAQ,CAAC,CAAC,EAAE;QAC5BlJ,QAAQ,CAAC4K,UAAU,CAAChN,cAAc,CAACiN,SAAS,CAAC,CAAC,CAAC;QAC/C;MACJ;MACA9P,WAAW,CAAE,YAAW;QACpB2B,IAAI,CAACoO,gBAAgB,CAACnD,YAAY,CAAC;QACnCjL,IAAI,CAACqC,mBAAmB,CAAC,CAAC;QAC1B7D,IAAI,CAACkB,UAAU,EAAG,UAASgB,KAAK,EAAE2N,QAAQ,EAAE;UACxC,IAAI5J,IAAI,GAAGzE,IAAI,CAACsO,OAAO,CAACD,QAAQ,CAAC;UACjC,IAAI5J,IAAI,EAAE;YACNA,IAAI,CAAC3C,MAAM,CAAC,CAAC;UACjB;QACJ,CAAE,CAAC;QACHyL,aAAa,IAAIA,aAAa,CAACzL,MAAM,CAAC,CAAC;MAC3C,CAAE,CAAC;IACP,CAAE,CAAC;EACP,CAAC;EACDsM,gBAAgB,EAAE,SAAAA,CAASnD,YAAY,EAAE;IACrC,IAAI,CAAC6B,UAAU,GAAG9O,QAAQ,CAACiN,YAAY,CAAC;IACxC,IAAI,CAAC8B,WAAW,GAAG9O,SAAS,CAACgN,YAAY,CAAC;IAC1C,IAAI,CAAC+B,iBAAiB,GAAGzO,SAAS,CAAC,CAAC,CAAC0O,gBAAgB;EACzD,CAAC;EACDsB,aAAa,EAAE,SAAAA,CAASC,IAAI,EAAE;IAC1B,QAAQA,IAAI,CAACC,IAAI;MACb,KAAK,OAAO;MACZ,KAAK,QAAQ;QACT,IAAI,CAAC9L,SAAS,CAAC+L,iBAAiB,CAAC,CAAC;QAClC,IAAI,CAAC5M,MAAM,CAAC,CAAC;MACjB,KAAK,aAAa;QACd0M,IAAI,CAACG,OAAO,GAAG,IAAI;QACnB;MACJ;QACI,IAAI,CAACC,QAAQ,CAACJ,IAAI,CAAC;IAC3B;EACJ,CAAC;EACDK,IAAI,EAAE,SAAAA,CAAA,EAAW;IACb,IAAI,CAAC1N,eAAe,GAAG,IAAI,CAACqM,aAAa,CAAC,MAAM,CAAC;IACjD,IAAI,CAACvJ,kBAAkB,GAAG,IAAI,CAACuJ,aAAa,CAAC,SAAS,CAAC;IACvD,IAAI,CAAChK,kBAAkB,GAAG,IAAI,CAAC8K,OAAO,CAAC,mBAAmB,CAAC;IAC3D,IAAI,CAACxI,WAAW,GAAG,IAAI,CAACwI,OAAO,CAAC,YAAY,CAAC;IAC7C,IAAI,CAACnO,SAAS,GAAG,IAAI,CAACmO,OAAO,CAAC,UAAU,CAAC;EAC7C;AACJ,CAAC;AACD,IAAIQ,kBAAkB,GAAG3Q,OAAO,CAAC4Q,cAAc,CAACC,OAAO,CAAChO,yBAAyB,CAAC;AAClF,IAAIiO,8BAA8B,GAAG9Q,OAAO,CAAC4Q,cAAc,CAACC,OAAO,CAAC;EAChEE,qBAAqB,EAAE,SAAAA,CAASC,KAAK,EAAEC,GAAG,EAAEf,QAAQ,EAAE;IAClD,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAAClN,MAAM,EAAEoN,CAAC,EAAE,EAAE;MACnC,IAAIF,KAAK,CAACE,CAAC,CAAC,IAAIF,KAAK,CAACE,CAAC,CAAC,CAACZ,IAAI,KAAKJ,QAAQ,EAAE;QACxCc,KAAK,CAACE,CAAC,CAAC,CAACC,QAAQ,CAAC;UACdC,IAAI,EAAEH,GAAG,CAACG,IAAI;UACdC,GAAG,EAAEJ,GAAG,CAACI;QACb,CAAC,CAAC;MACN;IACJ;EACJ,CAAC;EACDX,IAAI,EAAE,SAAAA,CAAA,EAAW;IACb,IAAIM,KAAK,GAAG,CAAC,IAAI,CAACb,OAAO,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAACA,OAAO,CAAC,YAAY,CAAC,EAAE,IAAI,CAACA,OAAO,CAAC,UAAU,CAAC,CAAC;IACrG,KAAK,IAAI9F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2G,KAAK,CAAClN,MAAM,EAAEuG,CAAC,EAAE,EAAE;MACnC,IAAI/D,IAAI,GAAG0K,KAAK,CAAC3G,CAAC,CAAC;MACnB,IAAI/D,IAAI,EAAE;QACNA,IAAI,CAACgL,aAAa,CAAChO,GAAG,CAAC,IAAI,CAACyN,qBAAqB,CAACQ,IAAI,CAAC,IAAI,EAAEP,KAAK,CAAC,CAAC;MACxE;IACJ;EACJ;AACJ,CAAC,CAAC;AACF,IAAIQ,QAAQ,GAAGxR,OAAO,CAACyR,IAAI,CAACZ,OAAO,CAAC;EAChCa,cAAc,EAAE,SAAAA,CAAA,EAAW;IACvB,IAAI,IAAI,CAAClN,SAAS,CAACoJ,cAAc,EAAE;MAC/B,IAAI,CAACpJ,SAAS,CAACoJ,cAAc,GAAG,KAAK;MACrC,IAAI,CAAC+D,mBAAmB,CAAChO,MAAM,CAAC,CAAC;IACrC;EACJ,CAAC;EACDiO,mBAAmB,EAAE,SAAAA,CAAA,EAAW;IAC5B,OAAO,yBAAyB;EACpC,CAAC;EACDlB,IAAI,EAAE,SAAAA,CAAA,EAAW;IACb,IAAI,CAACiB,mBAAmB,GAAG,IAAI,CAACtC,aAAa,CAAC,UAAU,CAAC;IACzD,IAAI,CAACrM,eAAe,GAAG,IAAI,CAACqM,aAAa,CAAC,MAAM,CAAC;EACrD,CAAC;EACDc,OAAO,EAAE,SAAAA,CAASG,IAAI,EAAE;IACpB,OAAO,IAAI,CAAC9L,SAAS,CAACqN,MAAM,CAACvB,IAAI,CAAC;EACtC,CAAC;EACDrF,OAAO,EAAE,SAAAA,CAAA,EAAW;IAChB,OAAO,IAAI,CAAC6G,aAAa;EAC7B,CAAC;EACD1B,aAAa,EAAE,SAAAA,CAASC,IAAI,EAAE;IAC1B,IAAI9P,SAAS,CAAC,IAAI,CAACuR,aAAa,CAAC,IAAI,aAAa,KAAKzB,IAAI,CAACC,IAAI,EAAE;MAC9D,IAAI,CAACwB,aAAa,CAAC3K,WAAW,CAAC,IAAI,CAACC,eAAe,CAACnG,aAAa,CAAC,EAAE,CAAC,CAACoP,IAAI,CAACrI,KAAK,CAAC;MACjFqI,IAAI,CAACG,OAAO,GAAG,IAAI;IACvB,CAAC,MAAM;MACH,IAAI,CAACC,QAAQ,CAACJ,IAAI,CAAC;IACvB;EACJ,CAAC;EACD0B,YAAY,EAAE,SAAAA,CAAS7E,aAAa,EAAE;IAClC,IAAIrL,IAAI,GAAG,IAAI;IACfxB,IAAI,CAACkB,UAAU,EAAG,UAASgB,KAAK,EAAE2N,QAAQ,EAAE;MACxC,IAAI5J,IAAI,GAAGzE,IAAI,CAACsO,OAAO,CAACD,QAAQ,CAAC;MACjC,IAAI5J,IAAI,EAAE;QACNA,IAAI,CAAC0L,MAAM,CAAC9E,aAAa,CAAC;MAC9B;IACJ,CAAE,CAAC;EACP,CAAC;EACD+E,iBAAiB,EAAE,SAAAA,CAAA,EAAW;IAC1B,OAAO,MAAM;EACjB,CAAC;EACDD,MAAM,EAAE,SAAAA,CAASlF,YAAY,EAAE;IAC3B,IAAIoF,aAAa,GAAG,CAAC,IAAI,CAACJ,aAAa;IACvC,IAAI5E,aAAa,GAAG,IAAI,CAAC4E,aAAa,IAAI/R,CAAC,CAAC,OAAO,CAAC,CAACsN,QAAQ,CAAC,IAAI,CAACF,uBAAuB,CAAC,CAAC,CAAC;IAC7FD,aAAa,CAACG,QAAQ,CAACjM,wBAAwB,CAAC;IAChD8L,aAAa,CAAC/F,WAAW,CAAC,IAAI,CAACC,eAAe,CAACnG,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAACoH,MAAM,CAAC,aAAa,CAAC,CAAC;IAC5F,IAAI,CAAC3D,OAAO,CAAC,MAAM,EAAE,cAAc,EAAEoI,YAAY,CAAC;IAClD,IAAI,CAACtI,SAAS,CAACE,OAAO,CAAC;MACnByN,IAAI,EAAE,IAAI,CAACF,iBAAiB,CAAC,CAAC;MAC9BG,KAAK,EAAEzR,mBAAmB,CAAC0R,MAAM,CAAC,IAAI,CAACT,mBAAmB,CAAC,CAAC;IAChE,CAAC,EAAE1E,aAAa,CAAC;IACjB,IAAI,CAACoF,YAAY,GAAGxF,YAAY,IAAI,IAAI,CAACwF,YAAY;IACrD,IAAIJ,aAAa,EAAE;MACf,IAAI,CAACJ,aAAa,GAAG5E,aAAa;MAClC/M,SAAS,CAAC,CAAC,IAAI,IAAI,CAACkP,aAAa,CAAC,UAAU,CAAC,CAACzC,UAAU,CAACE,YAAY,CAAC;MACtEI,aAAa,CAAChG,QAAQ,CAAC4F,YAAY,CAAC;IACxC;IACA,IAAI,CAACiF,YAAY,CAAC7E,aAAa,CAAC;EACpC,CAAC;EACDqF,MAAM,EAAE,SAAAA,CAAA,EAAW;IACf,IAAIzF,YAAY,GAAG,IAAI,CAACwF,YAAY;IACpC,IAAIpF,aAAa,GAAG,IAAI,CAAC4E,aAAa;IACtC,IAAIU,kBAAkB,GAAG,IAAI,CAACnD,aAAa,CAAC,UAAU,CAAC;IACvD,IAAIvC,YAAY,IAAII,aAAa,EAAE;MAC/BsF,kBAAkB,CAAC7O,MAAM,CAAC,CAAC;MAC3B,IAAI,IAAI,CAACX,eAAe,CAACqL,QAAQ,CAAC,CAAC,EAAE;QACjC,IAAI,CAACsD,mBAAmB,CAACpN,sBAAsB,CAAC,CAAC;MACrD;IACJ;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,IAAIkO,cAAc,GAAG;EACxBC,cAAc,EAAE,SAAAA,CAAA,EAAW;IACvB,OAAO;MACHC,WAAW,EAAE,KAAK;MAClBC,WAAW,EAAE;IACjB,CAAC;EACL,CAAC;EACDC,WAAW,EAAE;IACTC,QAAQ,EAAEnC,kBAAkB;IAC5BoC,oBAAoB,EAAEjC;EAC1B,CAAC;EACDE,KAAK,EAAE;IACHgC,QAAQ,EAAExB;EACd,CAAC;EACDjQ,UAAU,EAAEA;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}