{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nexport const GRID_SKELETON_ROW_ROOT_ID = 'auto-generated-skeleton-row-root';\nconst getSkeletonRowId = index => `${GRID_SKELETON_ROW_ROOT_ID}-${index}`;\nexport const useGridLazyLoaderPreProcessors = (privateApiRef, props) => {\n  var _props$experimentalFe;\n  const {\n    lazyLoading\n  } = (_props$experimentalFe = props.experimentalFeatures) != null ? _props$experimentalFe : {};\n  const addSkeletonRows = React.useCallback(groupingParams => {\n    const tree = _extends({}, groupingParams.tree);\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    if (!lazyLoading || props.rowsLoadingMode !== 'server' || !props.rowCount || rootGroup.children.length >= props.rowCount) {\n      return groupingParams;\n    }\n    const rootGroupChildren = [...rootGroup.children];\n    for (let i = 0; i < props.rowCount - rootGroup.children.length; i += 1) {\n      const skeletonId = getSkeletonRowId(i);\n      rootGroupChildren.push(skeletonId);\n      const skeletonRowNode = {\n        type: 'skeletonRow',\n        id: skeletonId,\n        parent: GRID_ROOT_GROUP_ID,\n        depth: 0\n      };\n      tree[skeletonId] = skeletonRowNode;\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n    return _extends({}, groupingParams, {\n      tree\n    });\n  }, [props.rowCount, props.rowsLoadingMode, lazyLoading]);\n  useGridRegisterPipeProcessor(privateApiRef, 'hydrateRows', addSkeletonRows);\n};","map":{"version":3,"names":["_extends","React","useGridRegisterPipeProcessor","GRID_ROOT_GROUP_ID","GRID_SKELETON_ROW_ROOT_ID","getSkeletonRowId","index","useGridLazyLoaderPreProcessors","privateApiRef","props","_props$experimentalFe","lazyLoading","experimentalFeatures","addSkeletonRows","useCallback","groupingParams","tree","rootGroup","rowsLoadingMode","rowCount","children","length","rootGroupChildren","i","skeletonId","push","skeletonRowNode","type","id","parent","depth"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/node_modules/@mui/x-data-grid-pro/hooks/features/lazyLoader/useGridLazyLoaderPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';\nexport const GRID_SKELETON_ROW_ROOT_ID = 'auto-generated-skeleton-row-root';\nconst getSkeletonRowId = index => `${GRID_SKELETON_ROW_ROOT_ID}-${index}`;\nexport const useGridLazyLoaderPreProcessors = (privateApiRef, props) => {\n  var _props$experimentalFe;\n  const {\n    lazyLoading\n  } = (_props$experimentalFe = props.experimentalFeatures) != null ? _props$experimentalFe : {};\n  const addSkeletonRows = React.useCallback(groupingParams => {\n    const tree = _extends({}, groupingParams.tree);\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    if (!lazyLoading || props.rowsLoadingMode !== 'server' || !props.rowCount || rootGroup.children.length >= props.rowCount) {\n      return groupingParams;\n    }\n    const rootGroupChildren = [...rootGroup.children];\n    for (let i = 0; i < props.rowCount - rootGroup.children.length; i += 1) {\n      const skeletonId = getSkeletonRowId(i);\n      rootGroupChildren.push(skeletonId);\n      const skeletonRowNode = {\n        type: 'skeletonRow',\n        id: skeletonId,\n        parent: GRID_ROOT_GROUP_ID,\n        depth: 0\n      };\n      tree[skeletonId] = skeletonRowNode;\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n    return _extends({}, groupingParams, {\n      tree\n    });\n  }, [props.rowCount, props.rowsLoadingMode, lazyLoading]);\n  useGridRegisterPipeProcessor(privateApiRef, 'hydrateRows', addSkeletonRows);\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,4BAA4B,QAAQ,4BAA4B;AACzE,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,OAAO,MAAMC,yBAAyB,GAAG,kCAAkC;AAC3E,MAAMC,gBAAgB,GAAGC,KAAK,IAAK,GAAEF,yBAA0B,IAAGE,KAAM,EAAC;AACzE,OAAO,MAAMC,8BAA8B,GAAGA,CAACC,aAAa,EAAEC,KAAK,KAAK;EACtE,IAAIC,qBAAqB;EACzB,MAAM;IACJC;EACF,CAAC,GAAG,CAACD,qBAAqB,GAAGD,KAAK,CAACG,oBAAoB,KAAK,IAAI,GAAGF,qBAAqB,GAAG,CAAC,CAAC;EAC7F,MAAMG,eAAe,GAAGZ,KAAK,CAACa,WAAW,CAACC,cAAc,IAAI;IAC1D,MAAMC,IAAI,GAAGhB,QAAQ,CAAC,CAAC,CAAC,EAAEe,cAAc,CAACC,IAAI,CAAC;IAC9C,MAAMC,SAAS,GAAGD,IAAI,CAACb,kBAAkB,CAAC;IAC1C,IAAI,CAACQ,WAAW,IAAIF,KAAK,CAACS,eAAe,KAAK,QAAQ,IAAI,CAACT,KAAK,CAACU,QAAQ,IAAIF,SAAS,CAACG,QAAQ,CAACC,MAAM,IAAIZ,KAAK,CAACU,QAAQ,EAAE;MACxH,OAAOJ,cAAc;IACvB;IACA,MAAMO,iBAAiB,GAAG,CAAC,GAAGL,SAAS,CAACG,QAAQ,CAAC;IACjD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,KAAK,CAACU,QAAQ,GAAGF,SAAS,CAACG,QAAQ,CAACC,MAAM,EAAEE,CAAC,IAAI,CAAC,EAAE;MACtE,MAAMC,UAAU,GAAGnB,gBAAgB,CAACkB,CAAC,CAAC;MACtCD,iBAAiB,CAACG,IAAI,CAACD,UAAU,CAAC;MAClC,MAAME,eAAe,GAAG;QACtBC,IAAI,EAAE,aAAa;QACnBC,EAAE,EAAEJ,UAAU;QACdK,MAAM,EAAE1B,kBAAkB;QAC1B2B,KAAK,EAAE;MACT,CAAC;MACDd,IAAI,CAACQ,UAAU,CAAC,GAAGE,eAAe;IACpC;IACAV,IAAI,CAACb,kBAAkB,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC,EAAEiB,SAAS,EAAE;MACjDG,QAAQ,EAAEE;IACZ,CAAC,CAAC;IACF,OAAOtB,QAAQ,CAAC,CAAC,CAAC,EAAEe,cAAc,EAAE;MAClCC;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACP,KAAK,CAACU,QAAQ,EAAEV,KAAK,CAACS,eAAe,EAAEP,WAAW,CAAC,CAAC;EACxDT,4BAA4B,CAACM,aAAa,EAAE,aAAa,EAAEK,eAAe,CAAC;AAC7E,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}