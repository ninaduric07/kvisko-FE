{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/date_box/ui.date_box.strategy.native.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { noop } from \"../../core/utils/common\";\nimport DateBoxStrategy from \"./ui.date_box.strategy\";\nimport { inputType } from \"../../core/utils/support\";\nimport dateUtils from \"./ui.date_utils\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport { extend } from \"../../core/utils/extend\";\nimport devices from \"../../core/devices\";\nvar NativeStrategy = DateBoxStrategy.inherit({\n  NAME: \"Native\",\n  popupConfig: function (_popupConfig) {\n    return extend({}, _popupConfig, {\n      width: \"auto\"\n    });\n  },\n  getParsedText: function (text) {\n    if (!text) {\n      return null;\n    }\n    if (\"datetime\" === this.dateBox.option(\"type\")) {\n      return new Date(text.replace(/-/g, \"/\").replace(\"T\", \" \").split(\".\")[0]);\n    }\n    return dateUtils.fromStandardDateFormat(text);\n  },\n  renderPopupContent: noop,\n  _getWidgetName: noop,\n  _getWidgetOptions: noop,\n  _getDateBoxType: function () {\n    var type = this.dateBox.option(\"type\");\n    if (!dateUtils.SUPPORTED_FORMATS.includes(type)) {\n      type = \"date\";\n    } else if (\"datetime\" === type && !inputType(type)) {\n      type = \"datetime-local\";\n    }\n    return type;\n  },\n  customizeButtons: function () {\n    var dropDownButton = this.dateBox.getButton(\"dropDown\");\n    if (devices.real().android && dropDownButton) {\n      dropDownButton.on(\"click\", function () {\n        this.dateBox._input().get(0).click();\n      }.bind(this));\n    }\n  },\n  getDefaultOptions: function () {\n    return {\n      mode: this._getDateBoxType()\n    };\n  },\n  getDisplayFormat: function (displayFormat) {\n    var type = this._getDateBoxType();\n    return displayFormat || dateUtils.FORMATS_MAP[type];\n  },\n  renderInputMinMax: function ($input) {\n    $input.attr({\n      min: dateSerialization.serializeDate(this.dateBox.dateOption(\"min\"), \"yyyy-MM-dd\"),\n      max: dateSerialization.serializeDate(this.dateBox.dateOption(\"max\"), \"yyyy-MM-dd\")\n    });\n  }\n});\nexport default NativeStrategy;","map":{"version":3,"names":["noop","DateBoxStrategy","inputType","dateUtils","dateSerialization","extend","devices","NativeStrategy","inherit","NAME","popupConfig","_popupConfig","width","getParsedText","text","dateBox","option","Date","replace","split","fromStandardDateFormat","renderPopupContent","_getWidgetName","_getWidgetOptions","_getDateBoxType","type","SUPPORTED_FORMATS","includes","customizeButtons","dropDownButton","getButton","real","android","on","_input","get","click","bind","getDefaultOptions","mode","getDisplayFormat","displayFormat","FORMATS_MAP","renderInputMinMax","$input","attr","min","serializeDate","dateOption","max"],"sources":["C:/Users/ninad/OneDrive/Radna povr≈°ina/zavrsni/client/node_modules/devextreme/esm/ui/date_box/ui.date_box.strategy.native.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/date_box/ui.date_box.strategy.native.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport DateBoxStrategy from \"./ui.date_box.strategy\";\r\nimport {\r\n    inputType\r\n} from \"../../core/utils/support\";\r\nimport dateUtils from \"./ui.date_utils\";\r\nimport dateSerialization from \"../../core/utils/date_serialization\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport devices from \"../../core/devices\";\r\nvar NativeStrategy = DateBoxStrategy.inherit({\r\n    NAME: \"Native\",\r\n    popupConfig: function(_popupConfig) {\r\n        return extend({}, _popupConfig, {\r\n            width: \"auto\"\r\n        })\r\n    },\r\n    getParsedText: function(text) {\r\n        if (!text) {\r\n            return null\r\n        }\r\n        if (\"datetime\" === this.dateBox.option(\"type\")) {\r\n            return new Date(text.replace(/-/g, \"/\").replace(\"T\", \" \").split(\".\")[0])\r\n        }\r\n        return dateUtils.fromStandardDateFormat(text)\r\n    },\r\n    renderPopupContent: noop,\r\n    _getWidgetName: noop,\r\n    _getWidgetOptions: noop,\r\n    _getDateBoxType: function() {\r\n        var type = this.dateBox.option(\"type\");\r\n        if (!dateUtils.SUPPORTED_FORMATS.includes(type)) {\r\n            type = \"date\"\r\n        } else if (\"datetime\" === type && !inputType(type)) {\r\n            type = \"datetime-local\"\r\n        }\r\n        return type\r\n    },\r\n    customizeButtons: function() {\r\n        var dropDownButton = this.dateBox.getButton(\"dropDown\");\r\n        if (devices.real().android && dropDownButton) {\r\n            dropDownButton.on(\"click\", function() {\r\n                this.dateBox._input().get(0).click()\r\n            }.bind(this))\r\n        }\r\n    },\r\n    getDefaultOptions: function() {\r\n        return {\r\n            mode: this._getDateBoxType()\r\n        }\r\n    },\r\n    getDisplayFormat: function(displayFormat) {\r\n        var type = this._getDateBoxType();\r\n        return displayFormat || dateUtils.FORMATS_MAP[type]\r\n    },\r\n    renderInputMinMax: function($input) {\r\n        $input.attr({\r\n            min: dateSerialization.serializeDate(this.dateBox.dateOption(\"min\"), \"yyyy-MM-dd\"),\r\n            max: dateSerialization.serializeDate(this.dateBox.dateOption(\"max\"), \"yyyy-MM-dd\")\r\n        })\r\n    }\r\n});\r\nexport default NativeStrategy;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,IAAI,QACD,yBAAyB;AAChC,OAAOC,eAAe,MAAM,wBAAwB;AACpD,SACIC,SAAS,QACN,0BAA0B;AACjC,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,iBAAiB,MAAM,qCAAqC;AACnE,SACIC,MAAM,QACH,yBAAyB;AAChC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,IAAIC,cAAc,GAAGN,eAAe,CAACO,OAAO,CAAC;EACzCC,IAAI,EAAE,QAAQ;EACdC,WAAW,EAAE,SAAAA,CAASC,YAAY,EAAE;IAChC,OAAON,MAAM,CAAC,CAAC,CAAC,EAAEM,YAAY,EAAE;MAC5BC,KAAK,EAAE;IACX,CAAC,CAAC;EACN,CAAC;EACDC,aAAa,EAAE,SAAAA,CAASC,IAAI,EAAE;IAC1B,IAAI,CAACA,IAAI,EAAE;MACP,OAAO,IAAI;IACf;IACA,IAAI,UAAU,KAAK,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,MAAM,CAAC,EAAE;MAC5C,OAAO,IAAIC,IAAI,CAACH,IAAI,CAACI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5E;IACA,OAAOhB,SAAS,CAACiB,sBAAsB,CAACN,IAAI,CAAC;EACjD,CAAC;EACDO,kBAAkB,EAAErB,IAAI;EACxBsB,cAAc,EAAEtB,IAAI;EACpBuB,iBAAiB,EAAEvB,IAAI;EACvBwB,eAAe,EAAE,SAAAA,CAAA,EAAW;IACxB,IAAIC,IAAI,GAAG,IAAI,CAACV,OAAO,CAACC,MAAM,CAAC,MAAM,CAAC;IACtC,IAAI,CAACb,SAAS,CAACuB,iBAAiB,CAACC,QAAQ,CAACF,IAAI,CAAC,EAAE;MAC7CA,IAAI,GAAG,MAAM;IACjB,CAAC,MAAM,IAAI,UAAU,KAAKA,IAAI,IAAI,CAACvB,SAAS,CAACuB,IAAI,CAAC,EAAE;MAChDA,IAAI,GAAG,gBAAgB;IAC3B;IACA,OAAOA,IAAI;EACf,CAAC;EACDG,gBAAgB,EAAE,SAAAA,CAAA,EAAW;IACzB,IAAIC,cAAc,GAAG,IAAI,CAACd,OAAO,CAACe,SAAS,CAAC,UAAU,CAAC;IACvD,IAAIxB,OAAO,CAACyB,IAAI,CAAC,CAAC,CAACC,OAAO,IAAIH,cAAc,EAAE;MAC1CA,cAAc,CAACI,EAAE,CAAC,OAAO,EAAE,YAAW;QAClC,IAAI,CAAClB,OAAO,CAACmB,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;MACxC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjB;EACJ,CAAC;EACDC,iBAAiB,EAAE,SAAAA,CAAA,EAAW;IAC1B,OAAO;MACHC,IAAI,EAAE,IAAI,CAACf,eAAe,CAAC;IAC/B,CAAC;EACL,CAAC;EACDgB,gBAAgB,EAAE,SAAAA,CAASC,aAAa,EAAE;IACtC,IAAIhB,IAAI,GAAG,IAAI,CAACD,eAAe,CAAC,CAAC;IACjC,OAAOiB,aAAa,IAAItC,SAAS,CAACuC,WAAW,CAACjB,IAAI,CAAC;EACvD,CAAC;EACDkB,iBAAiB,EAAE,SAAAA,CAASC,MAAM,EAAE;IAChCA,MAAM,CAACC,IAAI,CAAC;MACRC,GAAG,EAAE1C,iBAAiB,CAAC2C,aAAa,CAAC,IAAI,CAAChC,OAAO,CAACiC,UAAU,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC;MAClFC,GAAG,EAAE7C,iBAAiB,CAAC2C,aAAa,CAAC,IAAI,CAAChC,OAAO,CAACiC,UAAU,CAAC,KAAK,CAAC,EAAE,YAAY;IACrF,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF,eAAezC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}