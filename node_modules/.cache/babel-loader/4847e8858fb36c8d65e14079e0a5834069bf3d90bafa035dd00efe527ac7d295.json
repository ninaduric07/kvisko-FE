{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_headers.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { ColumnsView } from \"./ui.grid_core.columns_view\";\nimport messageLocalization from \"../../localization/message\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { registerKeyboardAction } from \"./ui.grid_core.accessibility\";\nvar CELL_CONTENT_CLASS = \"text-content\";\nvar HEADERS_CLASS = \"headers\";\nvar NOWRAP_CLASS = \"nowrap\";\nvar ROW_CLASS_SELECTOR = \".dx-row\";\nvar HEADER_ROW_CLASS = \"dx-header-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\";\nvar CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\";\nvar CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\";\nvar TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\";\nvar SORT_INDICATOR_CLASS = \"dx-sort-indicator\";\nvar SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\";\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nvar HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\";\nvar MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\nexport var columnHeadersModule = {\n  defaultOptions: function () {\n    return {\n      showColumnHeaders: true,\n      cellHintEnabled: true\n    };\n  },\n  views: {\n    columnHeadersView: ColumnsView.inherit(function () {\n      var createCellContent = function (that, $cell, options) {\n        var $cellContent = $(\"<div>\").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        that.setAria(\"role\", \"presentation\", $cellContent);\n        addCssClassesToCellContent(that, $cell, options.column, $cellContent);\n        var showColumnLines = that.option(\"showColumnLines\");\n        var contentAlignment = that.getController(\"columns\").getHeaderContentAlignment(options.column.alignment);\n        return $cellContent[showColumnLines || \"right\" === contentAlignment ? \"appendTo\" : \"prependTo\"]($cell);\n      };\n      function addCssClassesToCellContent(that, $cell, column, $cellContent) {\n        var $indicatorElements = that._getIndicatorElements($cell, true);\n        var $visibleIndicatorElements = that._getIndicatorElements($cell);\n        var indicatorCount = $indicatorElements && $indicatorElements.length;\n        var columnAlignment = that._getColumnAlignment(column.alignment);\n        var sortIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sort\"));\n        var sortIndexIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sortIndex\"));\n        var $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);\n        var $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);\n        $cellContent = $cellContent || $cell.children(\".\" + that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$sortIndicator.length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$sortIndexIndicator.length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(\".\" + that._getIndicatorClassName(\"headerFilter\")).length);\n      }\n      var members = {\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n          eventsEngine.on($table, \"mousedown selectstart\", this.createAction(function (e) {\n            var event = e.event;\n            if (event.shiftKey) {\n              event.preventDefault();\n            }\n          }));\n          return $table;\n        },\n        _isLegacyKeyboardNavigation() {\n          return this.option(\"useLegacyKeyboardNavigation\");\n        },\n        _getDefaultTemplate: function (column) {\n          var that = this;\n          return function ($container, options) {\n            var $content = column.command ? $container : createCellContent(that, $container, options);\n            var caption = \"expand\" !== column.command && column.caption;\n            if (caption) {\n              $content.text(caption);\n            } else if (column.command) {\n              $container.html(\"&nbsp;\");\n            }\n          };\n        },\n        _getHeaderTemplate: function (column) {\n          return column.headerCellTemplate || {\n            allowRenderToDetachedContainer: true,\n            render: this._getDefaultTemplate(column)\n          };\n        },\n        _processTemplate: function (template, options) {\n          var that = this;\n          var resultTemplate;\n          var column = options.column;\n          var renderingTemplate = that.callBase(template);\n          if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\n            resultTemplate = {\n              render: function (options) {\n                var $content = createCellContent(that, options.container, options.model);\n                renderingTemplate.render(extend({}, options, {\n                  container: $content\n                }));\n              }\n            };\n          } else {\n            resultTemplate = renderingTemplate;\n          }\n          return resultTemplate;\n        },\n        _handleDataChanged: function (e) {\n          if (\"refresh\" !== e.changeType) {\n            return;\n          }\n          if (this._isGroupingChanged || this._requireReady) {\n            this._isGroupingChanged = false;\n            this.render();\n          }\n        },\n        _renderCell: function ($row, options) {\n          var $cell = this.callBase($row, options);\n          if (\"header\" === options.row.rowType) {\n            $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\n            if (!this._isLegacyKeyboardNavigation()) {\n              if (options.column && !options.column.type) {\n                $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0);\n              }\n            }\n          }\n          return $cell;\n        },\n        _setCellAriaAttributes: function ($cell, cellOptions) {\n          this.callBase($cell, cellOptions);\n          if (\"header\" === cellOptions.rowType) {\n            this.setAria(\"role\", \"columnheader\", $cell);\n            if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\n              $cell.attr(\"id\", cellOptions.column.headerId);\n              this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaColumn\") + \" \" + cellOptions.column.caption, $cell);\n            }\n          }\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n          $row.toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\n          if (\"header\" === row.rowType) {\n            $row.addClass(HEADER_ROW_CLASS);\n            if (!this._isLegacyKeyboardNavigation()) {\n              registerKeyboardAction(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this));\n            }\n          }\n          return $row;\n        },\n        _handleActionKeyDown: function (args) {\n          var event = args.event;\n          var $target = $(event.target);\n          this._lastActionElement = event.target;\n          if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\n            var headerFilterController = this.getController(\"headerFilter\");\n            var $column = $target.closest(\"td\");\n            var columnIndex = this.getColumnIndexByElement($column);\n            if (columnIndex >= 0) {\n              headerFilterController.showHeaderFilterMenu(columnIndex, false);\n            }\n          } else {\n            var $row = $target.closest(ROW_CLASS_SELECTOR);\n            this._processHeaderAction(event, $row);\n          }\n          event.preventDefault();\n        },\n        _renderCore: function () {\n          var that = this;\n          var $container = that.element();\n          var change = {};\n          if (that._tableElement && !that._dataController.isLoaded() && !that._hasRowElements) {\n            return;\n          }\n          $container.addClass(that.addWidgetPrefix(HEADERS_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\")).empty();\n          that.setAria(\"role\", \"presentation\", $container);\n          var deferred = that._updateContent(that._renderTable({\n            change: change\n          }), change);\n          if (that.getRowCount() > 1) {\n            $container.addClass(MULTI_ROW_HEADER_CLASS);\n          }\n          that.callBase.apply(that, arguments);\n          return deferred;\n        },\n        _renderRows: function () {\n          var that = this;\n          if (that._dataController.isLoaded() || that._hasRowElements) {\n            that.callBase.apply(that, arguments);\n            that._hasRowElements = true;\n          }\n        },\n        _getRowVisibleColumns: function (rowIndex) {\n          return this._columnsController.getVisibleColumns(rowIndex);\n        },\n        _renderRow: function ($table, options) {\n          options.columns = this._getRowVisibleColumns(options.row.rowIndex);\n          this.callBase($table, options);\n        },\n        _createCell: function (options) {\n          var column = options.column;\n          var $cellElement = this.callBase.apply(this, arguments);\n          column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\n          return $cellElement;\n        },\n        _getRows: function () {\n          var result = [];\n          var rowCount = this.getRowCount();\n          if (this.option(\"showColumnHeaders\")) {\n            for (var i = 0; i < rowCount; i++) {\n              result.push({\n                rowType: \"header\",\n                rowIndex: i\n              });\n            }\n          }\n          return result;\n        },\n        _getCellTemplate: function (options) {\n          if (\"header\" === options.rowType) {\n            return this._getHeaderTemplate(options.column);\n          }\n        },\n        _columnOptionChanged: function (e) {\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n          if (changeTypes.grouping || changeTypes.groupExpanding) {\n            if (changeTypes.grouping) {\n              this._isGroupingChanged = true;\n            }\n            return;\n          }\n          this.callBase(e);\n          if (optionNames.width || optionNames.visible) {\n            this.resizeCompleted.fire();\n          }\n        },\n        _isElementVisible: function (elementOptions) {\n          return elementOptions && elementOptions.visible;\n        },\n        _alignCaptionByCenter: function ($cell) {\n          var $indicatorsContainer = this._getIndicatorContainer($cell, true);\n          if ($indicatorsContainer && $indicatorsContainer.length) {\n            $indicatorsContainer.filter(\".\" + VISIBILITY_HIDDEN_CLASS).remove();\n            $indicatorsContainer = this._getIndicatorContainer($cell);\n            $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css(\"float\", \"\").insertBefore($cell.children(\".\" + this.addWidgetPrefix(CELL_CONTENT_CLASS)));\n          }\n        },\n        _updateCell: function ($cell, options) {\n          if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _updateIndicator: function ($cell, column, indicatorName) {\n          var $indicatorElement = this.callBase.apply(this, arguments);\n          if (\"center\" === column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n          addCssClassesToCellContent(this, $cell, column);\n          return $indicatorElement;\n        },\n        _getIndicatorContainer: function ($cell, returnAll) {\n          var $indicatorsContainer = this.callBase($cell);\n          return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.\" + VISIBILITY_HIDDEN_CLASS + \")\");\n        },\n        _isSortableElement: function () {\n          return true;\n        },\n        getHeadersRowHeight: function () {\n          var $tableElement = this.getTableElement();\n          var $headerRows = $tableElement && $tableElement.find(\".\" + HEADER_ROW_CLASS);\n          return $headerRows && $headerRows.toArray().reduce(function (sum, headerRow) {\n            return sum + getHeight(headerRow);\n          }, 0) || 0;\n        },\n        getHeaderElement: function (index) {\n          var columnElements = this.getColumnElements();\n          return columnElements && columnElements.eq(index);\n        },\n        getColumnElements: function (index, bandColumnIndex) {\n          var that = this;\n          var $cellElement;\n          var columnsController = that._columnsController;\n          var rowCount = that.getRowCount();\n          if (that.option(\"showColumnHeaders\")) {\n            if (rowCount > 1 && (!isDefined(index) || isDefined(bandColumnIndex))) {\n              var result = [];\n              var visibleColumns = isDefined(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\n              each(visibleColumns, function (_, column) {\n                var rowIndex = isDefined(index) ? index : columnsController.getRowIndex(column.index);\n                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\n                $cellElement && result.push($cellElement.get(0));\n              });\n              return $(result);\n            } else if (!index || index < rowCount) {\n              return that.getCellElements(index || 0);\n            }\n          }\n        },\n        getColumnIndexByElement: function ($cell) {\n          var cellIndex = this.getCellIndex($cell);\n          var $row = $cell.closest(\".dx-row\");\n          var rowIndex = $row[0].rowIndex;\n          var column = this.getColumns(rowIndex)[cellIndex];\n          return column ? column.index : -1;\n        },\n        getVisibleColumnIndex: function (columnIndex, rowIndex) {\n          var column = this.getColumns()[columnIndex];\n          return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1;\n        },\n        getColumnWidths: function () {\n          var $columnElements = this.getColumnElements();\n          if ($columnElements && $columnElements.length) {\n            return this._getWidths($columnElements);\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        allowDragging: function (column, sourceLocation, draggingPanels) {\n          var i;\n          var draggableColumnCount = 0;\n          var rowIndex = column && this._columnsController.getRowIndex(column.index);\n          var columns = this.getColumns(0 === rowIndex ? 0 : null);\n          var canHideColumn = (null === column || void 0 === column ? void 0 : column.allowHiding) && columns.length > 1;\n          var allowDrag = function (column) {\n            return column.allowReordering || column.allowGrouping || column.allowHiding;\n          };\n          for (i = 0; i < columns.length; i++) {\n            if (allowDrag(columns[i])) {\n              draggableColumnCount++;\n            }\n          }\n          if (draggableColumnCount <= 1 && !canHideColumn) {\n            return false;\n          } else if (!draggingPanels) {\n            return (this.option(\"allowColumnReordering\") || this._columnsController.isColumnOptionUsed(\"allowReordering\")) && column && column.allowReordering;\n          }\n          for (i = 0; i < draggingPanels.length; i++) {\n            var draggingPanel = draggingPanels[i];\n            if (draggingPanel && draggingPanel.allowDragging(column, sourceLocation)) {\n              return true;\n            }\n          }\n          return false;\n        },\n        getBoundingRect: function () {\n          var $columnElements = this.getColumnElements();\n          if ($columnElements && $columnElements.length) {\n            var offset = this.getTableElement().offset();\n            return {\n              top: offset.top\n            };\n          }\n          return null;\n        },\n        getName: function () {\n          return \"headers\";\n        },\n        getColumnCount: function () {\n          var $columnElements = this.getColumnElements();\n          return $columnElements ? $columnElements.length : 0;\n        },\n        isVisible: function () {\n          return this.option(\"showColumnHeaders\");\n        },\n        optionChanged: function (args) {\n          switch (args.name) {\n            case \"showColumnHeaders\":\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n              this._invalidate(true, true);\n              args.handled = true;\n              break;\n            default:\n              this.callBase(args);\n          }\n        },\n        getHeight: function () {\n          return this.getElementHeight();\n        },\n        getContextMenuItems: function (options) {\n          var that = this;\n          var column = options.column;\n          if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n            var sortingOptions = that.option(\"sorting\");\n            if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\n              var onItemClick = function (params) {\n                setTimeout(function () {\n                  that._columnsController.changeSortOrder(column.index, params.itemData.value);\n                });\n              };\n              return [{\n                text: sortingOptions.ascendingText,\n                value: \"asc\",\n                disabled: \"asc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_ASC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.descendingText,\n                value: \"desc\",\n                disabled: \"desc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_DESC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.clearText,\n                value: \"none\",\n                disabled: !column.sortOrder,\n                icon: CONTEXT_MENU_SORT_NONE_ICON,\n                onItemClick: onItemClick\n              }];\n            }\n          }\n        },\n        getRowCount: function () {\n          return this._columnsController && this._columnsController.getRowCount();\n        },\n        setRowsOpacity: function (columnIndex, value, rowIndex) {\n          var that = this;\n          var i;\n          var columnElements;\n          var rowCount = that.getRowCount();\n          var columns = that._columnsController.getColumns();\n          var column = columns && columns[columnIndex];\n          var columnID = column && column.isBand && column.index;\n          var setColumnOpacity = function (index, column) {\n            if (column.ownerBand === columnID) {\n              columnElements.eq(index).css({\n                opacity: value\n              });\n              if (column.isBand) {\n                that.setRowsOpacity(column.index, value, i + 1);\n              }\n            }\n          };\n          if (isDefined(columnID)) {\n            rowIndex = rowIndex || 0;\n            for (i = rowIndex; i < rowCount; i++) {\n              columnElements = that.getCellElements(i);\n              each(that.getColumns(i), setColumnOpacity);\n            }\n          }\n        }\n      };\n      return members;\n    }())\n  }\n};","map":{"version":3,"names":["getHeight","$","eventsEngine","ColumnsView","messageLocalization","isDefined","each","extend","registerKeyboardAction","CELL_CONTENT_CLASS","HEADERS_CLASS","NOWRAP_CLASS","ROW_CLASS_SELECTOR","HEADER_ROW_CLASS","COLUMN_LINES_CLASS","CONTEXT_MENU_SORT_ASC_ICON","CONTEXT_MENU_SORT_DESC_ICON","CONTEXT_MENU_SORT_NONE_ICON","CELL_FOCUS_DISABLED_CLASS","VISIBILITY_HIDDEN_CLASS","TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX","SORT_INDICATOR_CLASS","SORT_INDEX_INDICATOR_CLASS","HEADER_FILTER_CLASS_SELECTOR","HEADER_FILTER_INDICATOR_CLASS","MULTI_ROW_HEADER_CLASS","columnHeadersModule","defaultOptions","showColumnHeaders","cellHintEnabled","views","columnHeadersView","inherit","createCellContent","that","$cell","options","$cellContent","addClass","addWidgetPrefix","setAria","addCssClassesToCellContent","column","showColumnLines","option","contentAlignment","getController","getHeaderContentAlignment","alignment","$indicatorElements","_getIndicatorElements","$visibleIndicatorElements","indicatorCount","length","columnAlignment","_getColumnAlignment","sortIndicatorClassName","concat","_getIndicatorClassName","sortIndexIndicatorClassName","$sortIndicator","filter","$sortIndexIndicator","children","toggleClass","members","_createTable","$table","callBase","apply","arguments","on","createAction","e","event","shiftKey","preventDefault","_isLegacyKeyboardNavigation","_getDefaultTemplate","$container","$content","command","caption","text","html","_getHeaderTemplate","headerCellTemplate","allowRenderToDetachedContainer","render","_processTemplate","template","resultTemplate","renderingTemplate","rowType","container","model","_handleDataChanged","changeType","_isGroupingChanged","_requireReady","_renderCell","$row","row","type","attr","_setCellAriaAttributes","cellOptions","isBand","headerId","format","_createRow","_handleActionKeyDown","bind","args","$target","target","_lastActionElement","is","headerFilterController","$column","closest","columnIndex","getColumnIndexByElement","showHeaderFilterMenu","_processHeaderAction","_renderCore","element","change","_tableElement","_dataController","isLoaded","_hasRowElements","empty","deferred","_updateContent","_renderTable","getRowCount","_renderRows","_getRowVisibleColumns","rowIndex","_columnsController","getVisibleColumns","_renderRow","columns","_createCell","$cellElement","rowspan","_getRows","result","rowCount","i","push","_getCellTemplate","_columnOptionChanged","changeTypes","optionNames","grouping","groupExpanding","width","visible","resizeCompleted","fire","_isElementVisible","elementOptions","_alignCaptionByCenter","$indicatorsContainer","_getIndicatorContainer","remove","clone","css","insertBefore","_updateCell","_updateIndicator","indicatorName","$indicatorElement","returnAll","_isSortableElement","getHeadersRowHeight","$tableElement","getTableElement","$headerRows","find","toArray","reduce","sum","headerRow","getHeaderElement","index","columnElements","getColumnElements","eq","bandColumnIndex","columnsController","visibleColumns","getChildrenByBandColumn","_","getRowIndex","_getCellElement","getVisibleIndex","get","getCellElements","cellIndex","getCellIndex","getColumns","getVisibleColumnIndex","getColumnWidths","$columnElements","_getWidths","allowDragging","sourceLocation","draggingPanels","draggableColumnCount","canHideColumn","allowHiding","allowDrag","allowReordering","allowGrouping","isColumnOptionUsed","draggingPanel","getBoundingRect","offset","top","getName","getColumnCount","isVisible","optionChanged","name","_invalidate","handled","getElementHeight","getContextMenuItems","sortingOptions","mode","allowSorting","onItemClick","params","setTimeout","changeSortOrder","itemData","value","ascendingText","disabled","sortOrder","icon","descendingText","clearText","setRowsOpacity","columnID","setColumnOpacity","ownerBand","opacity"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_headers.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_headers.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    ColumnsView\r\n} from \"./ui.grid_core.columns_view\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    registerKeyboardAction\r\n} from \"./ui.grid_core.accessibility\";\r\nvar CELL_CONTENT_CLASS = \"text-content\";\r\nvar HEADERS_CLASS = \"headers\";\r\nvar NOWRAP_CLASS = \"nowrap\";\r\nvar ROW_CLASS_SELECTOR = \".dx-row\";\r\nvar HEADER_ROW_CLASS = \"dx-header-row\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\";\r\nvar CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\";\r\nvar CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\";\r\nvar TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\";\r\nvar SORT_INDICATOR_CLASS = \"dx-sort-indicator\";\r\nvar SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\";\r\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\r\nvar HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\";\r\nvar MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\r\nexport var columnHeadersModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            showColumnHeaders: true,\r\n            cellHintEnabled: true\r\n        }\r\n    },\r\n    views: {\r\n        columnHeadersView: ColumnsView.inherit(function() {\r\n            var createCellContent = function(that, $cell, options) {\r\n                var $cellContent = $(\"<div>\").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));\r\n                that.setAria(\"role\", \"presentation\", $cellContent);\r\n                addCssClassesToCellContent(that, $cell, options.column, $cellContent);\r\n                var showColumnLines = that.option(\"showColumnLines\");\r\n                var contentAlignment = that.getController(\"columns\").getHeaderContentAlignment(options.column.alignment);\r\n                return $cellContent[showColumnLines || \"right\" === contentAlignment ? \"appendTo\" : \"prependTo\"]($cell)\r\n            };\r\n\r\n            function addCssClassesToCellContent(that, $cell, column, $cellContent) {\r\n                var $indicatorElements = that._getIndicatorElements($cell, true);\r\n                var $visibleIndicatorElements = that._getIndicatorElements($cell);\r\n                var indicatorCount = $indicatorElements && $indicatorElements.length;\r\n                var columnAlignment = that._getColumnAlignment(column.alignment);\r\n                var sortIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sort\"));\r\n                var sortIndexIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sortIndex\"));\r\n                var $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);\r\n                var $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);\r\n                $cellContent = $cellContent || $cell.children(\".\" + that.addWidgetPrefix(CELL_CONTENT_CLASS));\r\n                $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$sortIndicator.length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$sortIndexIndicator.length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(\".\" + that._getIndicatorClassName(\"headerFilter\")).length)\r\n            }\r\n            var members = {\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    eventsEngine.on($table, \"mousedown selectstart\", this.createAction((function(e) {\r\n                        var event = e.event;\r\n                        if (event.shiftKey) {\r\n                            event.preventDefault()\r\n                        }\r\n                    })));\r\n                    return $table\r\n                },\r\n                _isLegacyKeyboardNavigation() {\r\n                    return this.option(\"useLegacyKeyboardNavigation\")\r\n                },\r\n                _getDefaultTemplate: function(column) {\r\n                    var that = this;\r\n                    return function($container, options) {\r\n                        var $content = column.command ? $container : createCellContent(that, $container, options);\r\n                        var caption = \"expand\" !== column.command && column.caption;\r\n                        if (caption) {\r\n                            $content.text(caption)\r\n                        } else if (column.command) {\r\n                            $container.html(\"&nbsp;\")\r\n                        }\r\n                    }\r\n                },\r\n                _getHeaderTemplate: function(column) {\r\n                    return column.headerCellTemplate || {\r\n                        allowRenderToDetachedContainer: true,\r\n                        render: this._getDefaultTemplate(column)\r\n                    }\r\n                },\r\n                _processTemplate: function(template, options) {\r\n                    var that = this;\r\n                    var resultTemplate;\r\n                    var column = options.column;\r\n                    var renderingTemplate = that.callBase(template);\r\n                    if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\r\n                        resultTemplate = {\r\n                            render: function(options) {\r\n                                var $content = createCellContent(that, options.container, options.model);\r\n                                renderingTemplate.render(extend({}, options, {\r\n                                    container: $content\r\n                                }))\r\n                            }\r\n                        }\r\n                    } else {\r\n                        resultTemplate = renderingTemplate\r\n                    }\r\n                    return resultTemplate\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    if (\"refresh\" !== e.changeType) {\r\n                        return\r\n                    }\r\n                    if (this._isGroupingChanged || this._requireReady) {\r\n                        this._isGroupingChanged = false;\r\n                        this.render()\r\n                    }\r\n                },\r\n                _renderCell: function($row, options) {\r\n                    var $cell = this.callBase($row, options);\r\n                    if (\"header\" === options.row.rowType) {\r\n                        $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\r\n                        if (!this._isLegacyKeyboardNavigation()) {\r\n                            if (options.column && !options.column.type) {\r\n                                $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0)\r\n                            }\r\n                        }\r\n                    }\r\n                    return $cell\r\n                },\r\n                _setCellAriaAttributes: function($cell, cellOptions) {\r\n                    this.callBase($cell, cellOptions);\r\n                    if (\"header\" === cellOptions.rowType) {\r\n                        this.setAria(\"role\", \"columnheader\", $cell);\r\n                        if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\r\n                            $cell.attr(\"id\", cellOptions.column.headerId);\r\n                            this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaColumn\") + \" \" + cellOptions.column.caption, $cell)\r\n                        }\r\n                    }\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    $row.toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\r\n                    if (\"header\" === row.rowType) {\r\n                        $row.addClass(HEADER_ROW_CLASS);\r\n                        if (!this._isLegacyKeyboardNavigation()) {\r\n                            registerKeyboardAction(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this))\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _handleActionKeyDown: function(args) {\r\n                    var event = args.event;\r\n                    var $target = $(event.target);\r\n                    this._lastActionElement = event.target;\r\n                    if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\r\n                        var headerFilterController = this.getController(\"headerFilter\");\r\n                        var $column = $target.closest(\"td\");\r\n                        var columnIndex = this.getColumnIndexByElement($column);\r\n                        if (columnIndex >= 0) {\r\n                            headerFilterController.showHeaderFilterMenu(columnIndex, false)\r\n                        }\r\n                    } else {\r\n                        var $row = $target.closest(ROW_CLASS_SELECTOR);\r\n                        this._processHeaderAction(event, $row)\r\n                    }\r\n                    event.preventDefault()\r\n                },\r\n                _renderCore: function() {\r\n                    var that = this;\r\n                    var $container = that.element();\r\n                    var change = {};\r\n                    if (that._tableElement && !that._dataController.isLoaded() && !that._hasRowElements) {\r\n                        return\r\n                    }\r\n                    $container.addClass(that.addWidgetPrefix(HEADERS_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\")).empty();\r\n                    that.setAria(\"role\", \"presentation\", $container);\r\n                    var deferred = that._updateContent(that._renderTable({\r\n                        change: change\r\n                    }), change);\r\n                    if (that.getRowCount() > 1) {\r\n                        $container.addClass(MULTI_ROW_HEADER_CLASS)\r\n                    }\r\n                    that.callBase.apply(that, arguments);\r\n                    return deferred\r\n                },\r\n                _renderRows: function() {\r\n                    var that = this;\r\n                    if (that._dataController.isLoaded() || that._hasRowElements) {\r\n                        that.callBase.apply(that, arguments);\r\n                        that._hasRowElements = true\r\n                    }\r\n                },\r\n                _getRowVisibleColumns: function(rowIndex) {\r\n                    return this._columnsController.getVisibleColumns(rowIndex)\r\n                },\r\n                _renderRow: function($table, options) {\r\n                    options.columns = this._getRowVisibleColumns(options.row.rowIndex);\r\n                    this.callBase($table, options)\r\n                },\r\n                _createCell: function(options) {\r\n                    var column = options.column;\r\n                    var $cellElement = this.callBase.apply(this, arguments);\r\n                    column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\r\n                    return $cellElement\r\n                },\r\n                _getRows: function() {\r\n                    var result = [];\r\n                    var rowCount = this.getRowCount();\r\n                    if (this.option(\"showColumnHeaders\")) {\r\n                        for (var i = 0; i < rowCount; i++) {\r\n                            result.push({\r\n                                rowType: \"header\",\r\n                                rowIndex: i\r\n                            })\r\n                        }\r\n                    }\r\n                    return result\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    if (\"header\" === options.rowType) {\r\n                        return this._getHeaderTemplate(options.column)\r\n                    }\r\n                },\r\n                _columnOptionChanged: function(e) {\r\n                    var changeTypes = e.changeTypes;\r\n                    var optionNames = e.optionNames;\r\n                    if (changeTypes.grouping || changeTypes.groupExpanding) {\r\n                        if (changeTypes.grouping) {\r\n                            this._isGroupingChanged = true\r\n                        }\r\n                        return\r\n                    }\r\n                    this.callBase(e);\r\n                    if (optionNames.width || optionNames.visible) {\r\n                        this.resizeCompleted.fire()\r\n                    }\r\n                },\r\n                _isElementVisible: function(elementOptions) {\r\n                    return elementOptions && elementOptions.visible\r\n                },\r\n                _alignCaptionByCenter: function($cell) {\r\n                    var $indicatorsContainer = this._getIndicatorContainer($cell, true);\r\n                    if ($indicatorsContainer && $indicatorsContainer.length) {\r\n                        $indicatorsContainer.filter(\".\" + VISIBILITY_HIDDEN_CLASS).remove();\r\n                        $indicatorsContainer = this._getIndicatorContainer($cell);\r\n                        $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css(\"float\", \"\").insertBefore($cell.children(\".\" + this.addWidgetPrefix(CELL_CONTENT_CLASS)))\r\n                    }\r\n                },\r\n                _updateCell: function($cell, options) {\r\n                    if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\r\n                        this._alignCaptionByCenter($cell)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _updateIndicator: function($cell, column, indicatorName) {\r\n                    var $indicatorElement = this.callBase.apply(this, arguments);\r\n                    if (\"center\" === column.alignment) {\r\n                        this._alignCaptionByCenter($cell)\r\n                    }\r\n                    addCssClassesToCellContent(this, $cell, column);\r\n                    return $indicatorElement\r\n                },\r\n                _getIndicatorContainer: function($cell, returnAll) {\r\n                    var $indicatorsContainer = this.callBase($cell);\r\n                    return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.\" + VISIBILITY_HIDDEN_CLASS + \")\")\r\n                },\r\n                _isSortableElement: function() {\r\n                    return true\r\n                },\r\n                getHeadersRowHeight: function() {\r\n                    var $tableElement = this.getTableElement();\r\n                    var $headerRows = $tableElement && $tableElement.find(\".\" + HEADER_ROW_CLASS);\r\n                    return $headerRows && $headerRows.toArray().reduce((function(sum, headerRow) {\r\n                        return sum + getHeight(headerRow)\r\n                    }), 0) || 0\r\n                },\r\n                getHeaderElement: function(index) {\r\n                    var columnElements = this.getColumnElements();\r\n                    return columnElements && columnElements.eq(index)\r\n                },\r\n                getColumnElements: function(index, bandColumnIndex) {\r\n                    var that = this;\r\n                    var $cellElement;\r\n                    var columnsController = that._columnsController;\r\n                    var rowCount = that.getRowCount();\r\n                    if (that.option(\"showColumnHeaders\")) {\r\n                        if (rowCount > 1 && (!isDefined(index) || isDefined(bandColumnIndex))) {\r\n                            var result = [];\r\n                            var visibleColumns = isDefined(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\r\n                            each(visibleColumns, (function(_, column) {\r\n                                var rowIndex = isDefined(index) ? index : columnsController.getRowIndex(column.index);\r\n                                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\r\n                                $cellElement && result.push($cellElement.get(0))\r\n                            }));\r\n                            return $(result)\r\n                        } else if (!index || index < rowCount) {\r\n                            return that.getCellElements(index || 0)\r\n                        }\r\n                    }\r\n                },\r\n                getColumnIndexByElement: function($cell) {\r\n                    var cellIndex = this.getCellIndex($cell);\r\n                    var $row = $cell.closest(\".dx-row\");\r\n                    var rowIndex = $row[0].rowIndex;\r\n                    var column = this.getColumns(rowIndex)[cellIndex];\r\n                    return column ? column.index : -1\r\n                },\r\n                getVisibleColumnIndex: function(columnIndex, rowIndex) {\r\n                    var column = this.getColumns()[columnIndex];\r\n                    return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1\r\n                },\r\n                getColumnWidths: function() {\r\n                    var $columnElements = this.getColumnElements();\r\n                    if ($columnElements && $columnElements.length) {\r\n                        return this._getWidths($columnElements)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                allowDragging: function(column, sourceLocation, draggingPanels) {\r\n                    var i;\r\n                    var draggableColumnCount = 0;\r\n                    var rowIndex = column && this._columnsController.getRowIndex(column.index);\r\n                    var columns = this.getColumns(0 === rowIndex ? 0 : null);\r\n                    var canHideColumn = (null === column || void 0 === column ? void 0 : column.allowHiding) && columns.length > 1;\r\n                    var allowDrag = function(column) {\r\n                        return column.allowReordering || column.allowGrouping || column.allowHiding\r\n                    };\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        if (allowDrag(columns[i])) {\r\n                            draggableColumnCount++\r\n                        }\r\n                    }\r\n                    if (draggableColumnCount <= 1 && !canHideColumn) {\r\n                        return false\r\n                    } else if (!draggingPanels) {\r\n                        return (this.option(\"allowColumnReordering\") || this._columnsController.isColumnOptionUsed(\"allowReordering\")) && column && column.allowReordering\r\n                    }\r\n                    for (i = 0; i < draggingPanels.length; i++) {\r\n                        var draggingPanel = draggingPanels[i];\r\n                        if (draggingPanel && draggingPanel.allowDragging(column, sourceLocation)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                getBoundingRect: function() {\r\n                    var $columnElements = this.getColumnElements();\r\n                    if ($columnElements && $columnElements.length) {\r\n                        var offset = this.getTableElement().offset();\r\n                        return {\r\n                            top: offset.top\r\n                        }\r\n                    }\r\n                    return null\r\n                },\r\n                getName: function() {\r\n                    return \"headers\"\r\n                },\r\n                getColumnCount: function() {\r\n                    var $columnElements = this.getColumnElements();\r\n                    return $columnElements ? $columnElements.length : 0\r\n                },\r\n                isVisible: function() {\r\n                    return this.option(\"showColumnHeaders\")\r\n                },\r\n                optionChanged: function(args) {\r\n                    switch (args.name) {\r\n                        case \"showColumnHeaders\":\r\n                        case \"wordWrapEnabled\":\r\n                        case \"showColumnLines\":\r\n                            this._invalidate(true, true);\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                getHeight: function() {\r\n                    return this.getElementHeight()\r\n                },\r\n                getContextMenuItems: function(options) {\r\n                    var that = this;\r\n                    var column = options.column;\r\n                    if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\r\n                        var sortingOptions = that.option(\"sorting\");\r\n                        if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\r\n                            var onItemClick = function(params) {\r\n                                setTimeout((function() {\r\n                                    that._columnsController.changeSortOrder(column.index, params.itemData.value)\r\n                                }))\r\n                            };\r\n                            return [{\r\n                                text: sortingOptions.ascendingText,\r\n                                value: \"asc\",\r\n                                disabled: \"asc\" === column.sortOrder,\r\n                                icon: CONTEXT_MENU_SORT_ASC_ICON,\r\n                                onItemClick: onItemClick\r\n                            }, {\r\n                                text: sortingOptions.descendingText,\r\n                                value: \"desc\",\r\n                                disabled: \"desc\" === column.sortOrder,\r\n                                icon: CONTEXT_MENU_SORT_DESC_ICON,\r\n                                onItemClick: onItemClick\r\n                            }, {\r\n                                text: sortingOptions.clearText,\r\n                                value: \"none\",\r\n                                disabled: !column.sortOrder,\r\n                                icon: CONTEXT_MENU_SORT_NONE_ICON,\r\n                                onItemClick: onItemClick\r\n                            }]\r\n                        }\r\n                    }\r\n                },\r\n                getRowCount: function() {\r\n                    return this._columnsController && this._columnsController.getRowCount()\r\n                },\r\n                setRowsOpacity: function(columnIndex, value, rowIndex) {\r\n                    var that = this;\r\n                    var i;\r\n                    var columnElements;\r\n                    var rowCount = that.getRowCount();\r\n                    var columns = that._columnsController.getColumns();\r\n                    var column = columns && columns[columnIndex];\r\n                    var columnID = column && column.isBand && column.index;\r\n                    var setColumnOpacity = function(index, column) {\r\n                        if (column.ownerBand === columnID) {\r\n                            columnElements.eq(index).css({\r\n                                opacity: value\r\n                            });\r\n                            if (column.isBand) {\r\n                                that.setRowsOpacity(column.index, value, i + 1)\r\n                            }\r\n                        }\r\n                    };\r\n                    if (isDefined(columnID)) {\r\n                        rowIndex = rowIndex || 0;\r\n                        for (i = rowIndex; i < rowCount; i++) {\r\n                            columnElements = that.getCellElements(i);\r\n                            each(that.getColumns(i), setColumnOpacity)\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            return members\r\n        }())\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}