{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.columns_controller.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport Callbacks from \"../../core/utils/callbacks\";\nimport variableWrapper from \"../../core/utils/variable_wrapper\";\nimport { compileGetter, compileSetter } from \"../../core/utils/data\";\nimport { isDefined, isString, isNumeric, isFunction, isObject, isPlainObject, type } from \"../../core/utils/type\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport { getDefaultAlignment } from \"../../core/utils/position\";\nimport { extend } from \"../../core/utils/extend\";\nimport { normalizeIndexes } from \"../../core/utils/array\";\nimport config from \"../../core/config\";\nimport { orderEach, deepExtendArraySafe } from \"../../core/utils/object\";\nimport errors from \"../widget/ui.errors\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { captionize } from \"../../core/utils/inflector\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport numberLocalization from \"../../localization/number\";\nimport dateLocalization from \"../../localization/date\";\nimport messageLocalization from \"../../localization/message\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport Store from \"../../data/abstract_store\";\nimport { DataSource } from \"../../data/data_source/data_source\";\nimport { normalizeDataSourceOptions } from \"../../data/data_source/utils\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport filterUtils from \"../shared/filtering\";\nvar USER_STATE_FIELD_NAMES_15_1 = [\"filterValues\", \"filterType\", \"fixed\", \"fixedPosition\"];\nvar USER_STATE_FIELD_NAMES = [\"visibleIndex\", \"dataField\", \"name\", \"dataType\", \"width\", \"visible\", \"sortOrder\", \"lastSortOrder\", \"sortIndex\", \"groupIndex\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"added\"].concat(USER_STATE_FIELD_NAMES_15_1);\nvar IGNORE_COLUMN_OPTION_NAMES = {\n  visibleWidth: true,\n  bestFitWidth: true,\n  bufferedFilterValue: true\n};\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar GROUP_COMMAND_COLUMN_NAME = \"groupExpand\";\nvar regExp = /columns\\[(\\d+)\\]\\.?/gi;\nvar globalColumnId = 1;\nexport var columnsControllerModule = {\n  defaultOptions: function () {\n    return {\n      commonColumnSettings: {\n        allowFiltering: true,\n        allowHiding: true,\n        allowSorting: true,\n        allowEditing: true,\n        encodeHtml: true,\n        trueText: messageLocalization.format(\"dxDataGrid-trueText\"),\n        falseText: messageLocalization.format(\"dxDataGrid-falseText\")\n      },\n      allowColumnReordering: false,\n      allowColumnResizing: false,\n      columnResizingMode: \"nextColumn\",\n      columnMinWidth: void 0,\n      columnWidth: void 0,\n      adaptColumnWidthByRatio: true,\n      columns: void 0,\n      regenerateColumnsByVisibleItems: false,\n      customizeColumns: null,\n      dateSerializationFormat: void 0\n    };\n  },\n  controllers: {\n    columns: modules.Controller.inherit(function () {\n      var DEFAULT_COLUMN_OPTIONS = {\n        visible: true,\n        showInColumnChooser: true\n      };\n      var DATATYPE_OPERATIONS = {\n        number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\n        string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\"],\n        date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\n        datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"]\n      };\n      var COLUMN_INDEX_OPTIONS = {\n        visibleIndex: true,\n        groupIndex: true,\n        grouped: true,\n        sortIndex: true,\n        sortOrder: true\n      };\n      var setFilterOperationsAsDefaultValues = function (column) {\n        column.filterOperations = column.defaultFilterOperations;\n      };\n      var createColumn = function (that, columnOptions, userStateColumnOptions, bandColumn) {\n        var commonColumnOptions = {};\n        if (columnOptions) {\n          if (isString(columnOptions)) {\n            columnOptions = {\n              dataField: columnOptions\n            };\n          }\n          that.setName(columnOptions);\n          var result = {};\n          if (columnOptions.command) {\n            result = deepExtendArraySafe(commonColumnOptions, columnOptions);\n          } else {\n            commonColumnOptions = that.getCommonSettings(columnOptions);\n            if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {\n              columnOptions = extend({}, columnOptions, {\n                dataField: userStateColumnOptions.dataField\n              });\n            }\n            var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);\n            if (!columnOptions.type) {\n              result = {\n                headerId: \"dx-col-\".concat(globalColumnId++)\n              };\n            }\n            result = deepExtendArraySafe(result, DEFAULT_COLUMN_OPTIONS);\n            deepExtendArraySafe(result, commonColumnOptions);\n            deepExtendArraySafe(result, calculatedColumnOptions);\n            deepExtendArraySafe(result, columnOptions);\n            deepExtendArraySafe(result, {\n              selector: null\n            });\n          }\n          if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {\n            setFilterOperationsAsDefaultValues(result);\n          }\n          return result;\n        }\n      };\n      var createColumnsFromOptions = function createColumnsFromOptions(that, columnsOptions, bandColumn) {\n        var result = [];\n        if (columnsOptions) {\n          each(columnsOptions, function (index, columnOptions) {\n            var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index]) && that._columnsUserState[index];\n            var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);\n            if (column) {\n              if (bandColumn) {\n                column.ownerBand = bandColumn;\n              }\n              result.push(column);\n              if (column.columns) {\n                result = result.concat(createColumnsFromOptions(that, column.columns, column));\n                delete column.columns;\n                column.hasColumns = true;\n              }\n            }\n          });\n        }\n        return result;\n      };\n      var getParentBandColumns = function (columnIndex, columnParentByIndex) {\n        var result = [];\n        var parent = columnParentByIndex[columnIndex];\n        while (parent) {\n          result.unshift(parent);\n          columnIndex = parent.index;\n          parent = columnParentByIndex[columnIndex];\n        }\n        return result;\n      };\n      var _getChildrenByBandColumn = function (columnIndex, columnChildrenByIndex, recursive) {\n        var result = [];\n        var children = columnChildrenByIndex[columnIndex];\n        if (children) {\n          for (var i = 0; i < children.length; i++) {\n            var column = children[i];\n            if (!isDefined(column.groupIndex) || column.showWhenGrouped) {\n              result.push(column);\n              if (recursive && column.isBand) {\n                result = result.concat(_getChildrenByBandColumn(column.index, columnChildrenByIndex, recursive));\n              }\n            }\n          }\n        }\n        return result;\n      };\n      var getColumnFullPath = function (that, column) {\n        var result = [];\n        var columns;\n        var bandColumnsCache = that.getBandColumnsCache();\n        var callbackFilter = function (item) {\n          return item.ownerBand === column.ownerBand;\n        };\n        if (bandColumnsCache.isPlain) {\n          var columnIndex = that._columns.indexOf(column);\n          if (columnIndex >= 0) {\n            result = [\"columns[\".concat(columnIndex, \"]\")];\n          }\n        } else {\n          columns = that._columns.filter(callbackFilter);\n          while (columns.length && -1 !== columns.indexOf(column)) {\n            result.unshift(\"columns[\".concat(columns.indexOf(column), \"]\"));\n            column = bandColumnsCache.columnParentByIndex[column.index];\n            columns = column ? that._columns.filter(callbackFilter) : [];\n          }\n        }\n        return result.join(\".\");\n      };\n      var calculateColspan = function calculateColspan(that, columnID) {\n        var colspan = 0;\n        var columns = that.getChildrenByBandColumn(columnID, true);\n        each(columns, function (_, column) {\n          if (column.isBand) {\n            column.colspan = column.colspan || calculateColspan(that, column.index);\n            colspan += column.colspan || 1;\n          } else {\n            colspan += 1;\n          }\n        });\n        return colspan;\n      };\n      var getValueDataType = function (value) {\n        var dataType = type(value);\n        if (\"string\" !== dataType && \"boolean\" !== dataType && \"number\" !== dataType && \"date\" !== dataType && \"object\" !== dataType) {\n          dataType = void 0;\n        }\n        return dataType;\n      };\n      var getSerializationFormat = function (dataType, value) {\n        switch (dataType) {\n          case \"date\":\n          case \"datetime\":\n            return dateSerialization.getDateSerializationFormat(value);\n          case \"number\":\n            if (isString(value)) {\n              return \"string\";\n            }\n            if (isNumeric(value)) {\n              return null;\n            }\n        }\n      };\n      var updateSerializers = function (options, dataType) {\n        if (!options.deserializeValue) {\n          if (gridCoreUtils.isDateType(dataType)) {\n            options.deserializeValue = function (value) {\n              return dateSerialization.deserializeDate(value);\n            };\n            options.serializeValue = function (value) {\n              return isString(value) ? value : dateSerialization.serializeDate(value, this.serializationFormat);\n            };\n          }\n          if (\"number\" === dataType) {\n            options.deserializeValue = function (value) {\n              var parsedValue = parseFloat(value);\n              return isNaN(parsedValue) ? value : parsedValue;\n            };\n            options.serializeValue = function (value, target) {\n              if (\"filter\" === target) {\n                return value;\n              }\n              return isDefined(value) && \"string\" === this.serializationFormat ? value.toString() : value;\n            };\n          }\n        }\n      };\n      var customizeTextForBooleanDataType = function (e) {\n        if (true === e.value) {\n          return this.trueText || \"true\";\n        } else if (false === e.value) {\n          return this.falseText || \"false\";\n        } else {\n          return e.valueText || \"\";\n        }\n      };\n      var getCustomizeTextByDataType = function (dataType) {\n        if (\"boolean\" === dataType) {\n          return customizeTextForBooleanDataType;\n        }\n      };\n      var updateColumnIndexes = function (that) {\n        each(that._columns, function (index, column) {\n          column.index = index;\n        });\n        each(that._columns, function (index, column) {\n          if (isObject(column.ownerBand)) {\n            column.ownerBand = column.ownerBand.index;\n          }\n        });\n        each(that._commandColumns, function (index, column) {\n          column.index = -(index + 1);\n        });\n      };\n      var updateColumnGroupIndexes = function (that, currentColumn) {\n        normalizeIndexes(that._columns, \"groupIndex\", currentColumn, function (column) {\n          var grouped = column.grouped;\n          delete column.grouped;\n          return grouped;\n        });\n      };\n      var getColumnIndexByVisibleIndex = function (that, visibleIndex, location) {\n        var rowIndex = isObject(visibleIndex) ? visibleIndex.rowIndex : null;\n        var columns = \"group\" === location ? that.getGroupColumns() : \"columnChooser\" === location ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);\n        var column;\n        visibleIndex = isObject(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;\n        column = columns[visibleIndex];\n        if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {\n          column = that._columns.filter(col => column.type === col.type)[0] || column;\n        }\n        return column && isDefined(column.index) ? column.index : -1;\n      };\n      function checkUserStateColumn(column, userStateColumn) {\n        return column && userStateColumn && userStateColumn.name === (column.name || column.dataField) && (userStateColumn.dataField === column.dataField || column.name);\n      }\n      var applyUserState = function (that) {\n        var columnsUserState = that._columnsUserState;\n        var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];\n        var columns = that._columns;\n        var columnCountById = {};\n        var resultColumns = [];\n        var allColumnsHaveState = true;\n        var userStateColumnIndexes = [];\n        var column;\n        var userStateColumnIndex;\n        var i;\n        function applyFieldsState(column, userStateColumn) {\n          if (!userStateColumn) {\n            return;\n          }\n          for (var index = 0; index < USER_STATE_FIELD_NAMES.length; index++) {\n            var fieldName = USER_STATE_FIELD_NAMES[index];\n            if (ignoreColumnOptionNames.includes(fieldName)) {\n              continue;\n            }\n            if (\"dataType\" === fieldName) {\n              column[fieldName] = column[fieldName] || userStateColumn[fieldName];\n            } else if (USER_STATE_FIELD_NAMES_15_1.includes(fieldName)) {\n              if (fieldName in userStateColumn) {\n                column[fieldName] = userStateColumn[fieldName];\n              }\n            } else {\n              if (\"selectedFilterOperation\" === fieldName && userStateColumn[fieldName]) {\n                column.defaultSelectedFilterOperation = column[fieldName] || null;\n              }\n              column[fieldName] = userStateColumn[fieldName];\n            }\n          }\n        }\n        function findUserStateColumn(columnsUserState, column) {\n          var id = column.name || column.dataField;\n          var count = columnCountById[id] || 0;\n          for (var j = 0; j < columnsUserState.length; j++) {\n            if (checkUserStateColumn(column, columnsUserState[j])) {\n              if (count) {\n                count--;\n              } else {\n                columnCountById[id] = columnCountById[id] || 0;\n                columnCountById[id]++;\n                return j;\n              }\n            }\n          }\n          return -1;\n        }\n        if (columnsUserState) {\n          for (i = 0; i < columns.length; i++) {\n            userStateColumnIndex = findUserStateColumn(columnsUserState, columns[i]);\n            allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;\n            userStateColumnIndexes.push(userStateColumnIndex);\n          }\n          for (i = 0; i < columns.length; i++) {\n            column = columns[i];\n            userStateColumnIndex = userStateColumnIndexes[i];\n            if (that._hasUserState || allColumnsHaveState) {\n              applyFieldsState(column, columnsUserState[userStateColumnIndex]);\n            }\n            if (userStateColumnIndex >= 0 && isDefined(columnsUserState[userStateColumnIndex].initialIndex)) {\n              resultColumns[userStateColumnIndex] = column;\n            } else {\n              resultColumns.push(column);\n            }\n          }\n          var hasAddedBands = false;\n          for (i = 0; i < columnsUserState.length; i++) {\n            var columnUserState = columnsUserState[i];\n            if (columnUserState.added && findUserStateColumn(columns, columnUserState) < 0) {\n              column = createColumn(that, columnUserState.added);\n              applyFieldsState(column, columnUserState);\n              resultColumns.push(column);\n              if (columnUserState.added.columns) {\n                hasAddedBands = true;\n              }\n            }\n          }\n          if (hasAddedBands) {\n            updateColumnIndexes(that);\n            resultColumns = createColumnsFromOptions(that, resultColumns);\n          }\n          assignColumns(that, resultColumns);\n        }\n      };\n      var updateIndexes = function (that, column) {\n        updateColumnIndexes(that);\n        updateColumnGroupIndexes(that, column);\n        !function (that, currentColumn) {\n          each(that._columns, function (index, column) {\n            if (isDefined(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {\n              delete column.sortIndex;\n            }\n          });\n          normalizeIndexes(that._columns, \"sortIndex\", currentColumn, function (column) {\n            return !isDefined(column.groupIndex) && isSortOrderValid(column.sortOrder);\n          });\n        }(that, column);\n        resetBandColumnsCache(that);\n        !function (that, currentColumn) {\n          var column;\n          var result = [];\n          var bandColumnsCache = that.getBandColumnsCache();\n          var bandedColumns = [];\n          var columns = that._columns.filter(column => !column.command);\n          for (var i = 0; i < columns.length; i++) {\n            column = columns[i];\n            var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);\n            if (parentBandColumns.length) {\n              bandedColumns.push(column);\n            } else {\n              result.push(column);\n            }\n          }\n          normalizeIndexes(bandedColumns, \"visibleIndex\", currentColumn);\n          normalizeIndexes(result, \"visibleIndex\", currentColumn);\n        }(that, column);\n      };\n      var resetColumnsCache = function (that) {\n        that.resetColumnsCache();\n      };\n      function assignColumns(that, columns) {\n        that._previousColumns = that._columns;\n        that._columns = columns;\n        resetColumnsCache(that);\n        that.updateColumnDataTypes();\n      }\n      var updateColumnChanges = function (that, changeType, optionName, columnIndex) {\n        var columnChanges = that._columnChanges || {\n          optionNames: {\n            length: 0\n          },\n          changeTypes: {\n            length: 0\n          },\n          columnIndex: columnIndex\n        };\n        optionName = optionName || \"all\";\n        optionName = optionName.split(\".\")[0];\n        var changeTypes = columnChanges.changeTypes;\n        if (changeType && !changeTypes[changeType]) {\n          changeTypes[changeType] = true;\n          changeTypes.length++;\n        }\n        var optionNames = columnChanges.optionNames;\n        if (optionName && !optionNames[optionName]) {\n          optionNames[optionName] = true;\n          optionNames.length++;\n        }\n        if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {\n          delete columnChanges.columnIndex;\n        }\n        that._columnChanges = columnChanges;\n        resetColumnsCache(that);\n      };\n      var fireColumnsChanged = function (that) {\n        var onColumnsChanging = that.option(\"onColumnsChanging\");\n        var columnChanges = that._columnChanges;\n        var reinitOptionNames = [\"dataField\", \"lookup\", \"dataType\", \"columns\"];\n        if (that.isInitialized() && !that._updateLockCount && columnChanges) {\n          if (onColumnsChanging) {\n            that._updateLockCount++;\n            onColumnsChanging(extend({\n              component: that.component\n            }, columnChanges));\n            that._updateLockCount--;\n          }\n          that._columnChanges = void 0;\n          if (options = columnChanges.optionNames, options && reinitOptionNames.some(name => options[name])) {\n            that._reinitAfterLookupChanges = null === columnChanges || void 0 === columnChanges ? void 0 : columnChanges.optionNames.lookup;\n            that.reinit();\n            that._reinitAfterLookupChanges = void 0;\n          } else {\n            that.columnsChanged.fire(columnChanges);\n          }\n        }\n        var options;\n      };\n      var updateSortOrderWhenGrouping = function (that, column, groupIndex, prevGroupIndex) {\n        var columnWasGrouped = prevGroupIndex >= 0;\n        if (groupIndex >= 0) {\n          if (!columnWasGrouped) {\n            column.lastSortOrder = column.sortOrder;\n          }\n        } else {\n          var sortMode = that.option(\"sorting.mode\");\n          var sortOrder = column.lastSortOrder;\n          if (\"single\" === sortMode) {\n            var sortedByAnotherColumn = that._columns.some(col => col !== column && isDefined(col.sortIndex));\n            if (sortedByAnotherColumn) {\n              sortOrder = void 0;\n            }\n          }\n          column.sortOrder = sortOrder;\n        }\n      };\n      var fireOptionChanged = function (that, options) {\n        var value = options.value;\n        var optionName = options.optionName;\n        var prevValue = options.prevValue;\n        var fullOptionName = options.fullOptionName;\n        var fullOptionPath = \"\".concat(fullOptionName, \".\").concat(optionName);\n        if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {\n          that._skipProcessingColumnsChange = fullOptionPath;\n          that.component._notifyOptionChanged(fullOptionPath, value, prevValue);\n          that._skipProcessingColumnsChange = false;\n        }\n      };\n      var columnOptionCore = function (that, column, optionName, value, notFireEvent) {\n        var optionGetter = compileGetter(optionName);\n        var columnIndex = column.index;\n        var columns;\n        var changeType;\n        var initialColumn;\n        if (3 === arguments.length) {\n          return optionGetter(column, {\n            functionsAsIs: true\n          });\n        }\n        var prevValue = optionGetter(column, {\n          functionsAsIs: true\n        });\n        if (!equalByValue(prevValue, value)) {\n          if (\"groupIndex\" === optionName || \"calculateGroupValue\" === optionName) {\n            changeType = \"grouping\";\n            updateSortOrderWhenGrouping(that, column, value, prevValue);\n          } else if (\"sortIndex\" === optionName || \"sortOrder\" === optionName || \"calculateSortValue\" === optionName) {\n            changeType = \"sorting\";\n          } else {\n            changeType = \"columns\";\n          }\n          var optionSetter = compileSetter(optionName);\n          optionSetter(column, value, {\n            functionsAsIs: true\n          });\n          var fullOptionName = getColumnFullPath(that, column);\n          if (COLUMN_INDEX_OPTIONS[optionName]) {\n            updateIndexes(that, column);\n            value = optionGetter(column);\n          }\n          if (\"name\" === optionName || \"allowEditing\" === optionName) {\n            that._checkColumns();\n          }\n          if (!isDefined(prevValue) && !isDefined(value) && 0 !== optionName.indexOf(\"buffer\")) {\n            notFireEvent = true;\n          }\n          if (!notFireEvent) {\n            if (!USER_STATE_FIELD_NAMES.includes(optionName) && \"visibleWidth\" !== optionName) {\n              columns = that.option(\"columns\");\n              initialColumn = that.getColumnByPath(fullOptionName, columns);\n              if (isString(initialColumn)) {\n                initialColumn = columns[columnIndex] = {\n                  dataField: initialColumn\n                };\n              }\n              if (initialColumn && checkUserStateColumn(initialColumn, column)) {\n                optionSetter(initialColumn, value, {\n                  functionsAsIs: true\n                });\n              }\n            }\n            updateColumnChanges(that, changeType, optionName, columnIndex);\n          } else {\n            resetColumnsCache(that);\n          }\n          fullOptionName && fireOptionChanged(that, {\n            fullOptionName: fullOptionName,\n            optionName: optionName,\n            value: value,\n            prevValue: prevValue\n          });\n        }\n      };\n      function isSortOrderValid(sortOrder) {\n        return \"asc\" === sortOrder || \"desc\" === sortOrder;\n      }\n      var defaultSetCellValue = function (data, value) {\n        if (!this.dataField) {\n          return;\n        }\n        var path = this.dataField.split(\".\");\n        var dotCount = path.length - 1;\n        if (this.serializeValue) {\n          value = this.serializeValue(value);\n        }\n        for (var i = 0; i < dotCount; i++) {\n          var name = path[i];\n          data = data[name] = data[name] || {};\n        }\n        data[path[dotCount]] = value;\n      };\n      var isCustomCommandColumn = (that, commandColumn) => !!that._columns.filter(column => column.type === commandColumn.type).length;\n      var getFixedPosition = function (that, column) {\n        var rtlEnabled = that.option(\"rtlEnabled\");\n        if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {\n          return rtlEnabled ? \"right\" : \"left\";\n        }\n        return column.fixedPosition;\n      };\n      var processExpandColumns = function (columns, expandColumns, type, columnIndex) {\n        var customColumnIndex;\n        var rowCount = this.getRowCount();\n        var rowspan = columns[columnIndex] && columns[columnIndex].rowspan;\n        var expandColumnsByType = expandColumns.filter(column => column.type === type);\n        columns.forEach((column, index) => {\n          if (column.type === type) {\n            customColumnIndex = index;\n            rowspan = columns[index + 1] ? columns[index + 1].rowspan : rowCount;\n          }\n        });\n        if (rowspan > 1) {\n          expandColumnsByType = map(expandColumnsByType, function (expandColumn) {\n            return extend({}, expandColumn, {\n              rowspan: rowspan\n            });\n          });\n        }\n        expandColumnsByType.unshift.apply(expandColumnsByType, isDefined(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);\n        columns.splice.apply(columns, expandColumnsByType);\n        return rowspan || 1;\n      };\n      var numberToString = function (number, digitsCount) {\n        var str = number ? number.toString() : \"0\";\n        while (str.length < digitsCount) {\n          str = \"0\" + str;\n        }\n        return str;\n      };\n      var mergeColumns = (that, columns, commandColumns, needToExtend) => {\n        var column;\n        var commandColumnIndex;\n        var result = columns.slice().map(column => extend({}, column));\n        var isColumnFixing = that._isColumnFixing();\n        var defaultCommandColumns = commandColumns.slice().map(column => extend({\n          fixed: isColumnFixing\n        }, column));\n        var getCommandColumnIndex = column => commandColumns.reduce((result, commandColumn, index) => {\n          var columnType = needToExtend && column.type === GROUP_COMMAND_COLUMN_NAME ? \"expand\" : column.type;\n          return commandColumn.type === columnType || commandColumn.command === column.command ? index : result;\n        }, -1);\n        var callbackFilter = commandColumn => commandColumn.command !== commandColumns[commandColumnIndex].command;\n        for (var i = 0; i < columns.length; i++) {\n          column = columns[i];\n          commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;\n          if (commandColumnIndex >= 0) {\n            if (needToExtend) {\n              result[i] = extend({\n                fixed: isColumnFixing\n              }, commandColumns[commandColumnIndex], column);\n              if (column.type !== GROUP_COMMAND_COLUMN_NAME) {\n                defaultCommandColumns = defaultCommandColumns.filter(callbackFilter);\n              }\n            } else {\n              var columnOptions = {\n                visibleIndex: column.visibleIndex,\n                index: column.index,\n                headerId: column.headerId,\n                allowFixing: 0 === column.groupIndex,\n                allowReordering: 0 === column.groupIndex,\n                groupIndex: column.groupIndex\n              };\n              result[i] = extend({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions);\n            }\n          }\n        }\n        if (columns.length && needToExtend && defaultCommandColumns.length) {\n          result = result.concat(defaultCommandColumns);\n        }\n        return result;\n      };\n      var isColumnFixed = (that, column) => isDefined(column.fixed) || !column.type ? column.fixed : that._isColumnFixing();\n      var resetBandColumnsCache = that => {\n        that._bandColumnsCache = void 0;\n      };\n      var findColumn = (columns, identifier) => {\n        var identifierOptionName = isString(identifier) && identifier.substr(0, identifier.indexOf(\":\"));\n        var column;\n        if (void 0 === identifier) {\n          return;\n        }\n        if (identifierOptionName) {\n          identifier = identifier.substr(identifierOptionName.length + 1);\n        }\n        if (identifierOptionName) {\n          column = columns.filter(column => \"\" + column[identifierOptionName] === identifier)[0];\n        } else {\n          [\"index\", \"name\", \"dataField\", \"caption\"].some(optionName => {\n            column = columns.filter(column => column[optionName] === identifier)[0];\n            return !!column;\n          });\n        }\n        return column;\n      };\n      var members = {\n        _getExpandColumnOptions: function () {\n          return {\n            type: \"expand\",\n            command: \"expand\",\n            width: \"auto\",\n            cssClass: COMMAND_EXPAND_CLASS,\n            allowEditing: false,\n            allowGrouping: false,\n            allowSorting: false,\n            allowResizing: false,\n            allowReordering: false,\n            allowHiding: false\n          };\n        },\n        _getFirstItems: function (dataSource) {\n          var groupsCount;\n          var items = [];\n          if (dataSource && dataSource.items().length > 0) {\n            groupsCount = gridCoreUtils.normalizeSortingInfo(dataSource.group()).length;\n            items = function getFirstItemsCore(items, groupsCount) {\n              if (!items || !groupsCount) {\n                return items;\n              }\n              for (var i = 0; i < items.length; i++) {\n                var childItems = getFirstItemsCore(items[i].items || items[i].collapsedItems, groupsCount - 1);\n                if (childItems && childItems.length) {\n                  return childItems;\n                }\n              }\n            }(dataSource.items(), groupsCount) || [];\n          }\n          return items;\n        },\n        _endUpdateCore: function () {\n          !this._skipProcessingColumnsChange && fireColumnsChanged(this);\n        },\n        init: function (isApplyingUserState) {\n          var columns = this.option(\"columns\");\n          this._commandColumns = this._commandColumns || [];\n          this._columns = this._columns || [];\n          this._isColumnsFromOptions = !!columns;\n          if (this._isColumnsFromOptions) {\n            assignColumns(this, columns ? createColumnsFromOptions(this, columns) : []);\n            applyUserState(this);\n          } else {\n            assignColumns(this, this._columnsUserState ? createColumnsFromOptions(this, this._columnsUserState) : this._columns);\n          }\n          !function (that) {\n            var options = that._getExpandColumnOptions();\n            that.addCommandColumn(options);\n          }(this);\n          if (this._dataSourceApplied) {\n            this.applyDataSource(this._dataSource, true, isApplyingUserState);\n          } else {\n            updateIndexes(this);\n          }\n          this._checkColumns();\n        },\n        callbackNames: function () {\n          return [\"columnsChanged\"];\n        },\n        getColumnByPath: function (path, columns) {\n          var column;\n          var columnIndexes = [];\n          path.replace(regExp, function (_, columnIndex) {\n            columnIndexes.push(parseInt(columnIndex));\n            return \"\";\n          });\n          if (columnIndexes.length) {\n            if (columns) {\n              column = columnIndexes.reduce(function (column, index) {\n                return column && column.columns && column.columns[index];\n              }, {\n                columns: columns\n              });\n            } else {\n              column = function (that, columnIndexes) {\n                var result;\n                var columns;\n                var bandColumnsCache = that.getBandColumnsCache();\n                var callbackFilter = function (column) {\n                  var ownerBand = result ? result.index : void 0;\n                  return column.ownerBand === ownerBand;\n                };\n                if (bandColumnsCache.isPlain) {\n                  result = that._columns[columnIndexes[0]];\n                } else {\n                  columns = that._columns.filter(callbackFilter);\n                  for (var i = 0; i < columnIndexes.length; i++) {\n                    result = columns[columnIndexes[i]];\n                    if (result) {\n                      columns = that._columns.filter(callbackFilter);\n                    }\n                  }\n                }\n                return result;\n              }(this, columnIndexes);\n            }\n          }\n          return column;\n        },\n        optionChanged: function (args) {\n          var needUpdateRequireResize;\n          switch (args.name) {\n            case \"adaptColumnWidthByRatio\":\n              args.handled = true;\n              break;\n            case \"dataSource\":\n              if (args.value !== args.previousValue && !this.option(\"columns\") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {\n                this._columns = [];\n              }\n              break;\n            case \"columns\":\n              needUpdateRequireResize = this._skipProcessingColumnsChange;\n              args.handled = true;\n              if (!this._skipProcessingColumnsChange) {\n                if (args.name === args.fullName) {\n                  this._columnsUserState = null;\n                  this._ignoreColumnOptionNames = null;\n                  this.init();\n                } else {\n                  this._columnOptionChanged(args);\n                  needUpdateRequireResize = true;\n                }\n              }\n              if (needUpdateRequireResize) {\n                this._updateRequireResize(args);\n              }\n              break;\n            case \"commonColumnSettings\":\n            case \"columnAutoWidth\":\n            case \"allowColumnResizing\":\n            case \"allowColumnReordering\":\n            case \"columnFixing\":\n            case \"grouping\":\n            case \"groupPanel\":\n            case \"regenerateColumnsByVisibleItems\":\n            case \"customizeColumns\":\n            case \"columnHidingEnabled\":\n            case \"dateSerializationFormat\":\n            case \"columnResizingMode\":\n            case \"columnMinWidth\":\n            case \"columnWidth\":\n              args.handled = true;\n              var ignoreColumnOptionNames = \"columnWidth\" === args.fullName && [\"width\"];\n              this.reinit(ignoreColumnOptionNames);\n              break;\n            case \"rtlEnabled\":\n              this.reinit();\n              break;\n            default:\n              this.callBase(args);\n          }\n        },\n        _columnOptionChanged: function (args) {\n          var columnOptionValue = {};\n          var column = this.getColumnByPath(args.fullName);\n          var columnOptionName = args.fullName.replace(regExp, \"\");\n          if (column) {\n            if (columnOptionName) {\n              columnOptionValue[columnOptionName] = args.value;\n            } else {\n              columnOptionValue = args.value;\n            }\n            this._skipProcessingColumnsChange = args.fullName;\n            this.columnOption(column.index, columnOptionValue);\n            this._skipProcessingColumnsChange = false;\n          }\n        },\n        _updateRequireResize: function (args) {\n          var component = this.component;\n          if (\"width\" === args.fullName.replace(regExp, \"\") && component._updateLockCount) {\n            component._requireResize = true;\n          }\n        },\n        publicMethods: function () {\n          return [\"addColumn\", \"deleteColumn\", \"columnOption\", \"columnCount\", \"clearSorting\", \"clearGrouping\", \"getVisibleColumns\", \"getVisibleColumnIndex\"];\n        },\n        applyDataSource: function (dataSource, forceApplying, isApplyingUserState) {\n          var isDataSourceLoaded = dataSource && dataSource.isLoaded();\n          this._dataSource = dataSource;\n          if (!this._dataSourceApplied || 0 === this._dataSourceColumnsCount || forceApplying || this.option(\"regenerateColumnsByVisibleItems\")) {\n            if (isDataSourceLoaded) {\n              if (!this._isColumnsFromOptions) {\n                var columnsFromDataSource = function (that, dataSource) {\n                  var firstItems = that._getFirstItems(dataSource);\n                  var fieldName;\n                  var processedFields = {};\n                  var result = [];\n                  for (var i = 0; i < firstItems.length; i++) {\n                    if (firstItems[i]) {\n                      for (fieldName in firstItems[i]) {\n                        if (!isFunction(firstItems[i][fieldName]) || variableWrapper.isWrapped(firstItems[i][fieldName])) {\n                          processedFields[fieldName] = true;\n                        }\n                      }\n                    }\n                  }\n                  for (fieldName in processedFields) {\n                    if (0 !== fieldName.indexOf(\"__\")) {\n                      var column = createColumn(that, fieldName);\n                      result.push(column);\n                    }\n                  }\n                  return result;\n                }(this, dataSource);\n                if (columnsFromDataSource.length) {\n                  assignColumns(this, columnsFromDataSource);\n                  this._dataSourceColumnsCount = this._columns.length;\n                  applyUserState(this);\n                }\n              }\n              return this.updateColumns(dataSource, forceApplying, isApplyingUserState);\n            } else {\n              this._dataSourceApplied = false;\n              updateIndexes(this);\n            }\n          } else if (isDataSourceLoaded && !this.isAllDataTypesDefined(true) && this.updateColumnDataTypes(dataSource)) {\n            updateColumnChanges(this, \"columns\");\n            fireColumnsChanged(this);\n            return new Deferred().reject().promise();\n          }\n        },\n        reset: function () {\n          this._dataSource = null;\n          this._dataSourceApplied = false;\n          this._dataSourceColumnsCount = void 0;\n          this.reinit();\n        },\n        resetColumnsCache: function () {\n          this._visibleColumns = void 0;\n          this._fixedColumns = void 0;\n          this._rowCount = void 0;\n          resetBandColumnsCache(this);\n        },\n        reinit: function (ignoreColumnOptionNames) {\n          this._columnsUserState = this.getUserState();\n          this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;\n          this.init();\n          if (ignoreColumnOptionNames) {\n            this._ignoreColumnOptionNames = null;\n          }\n        },\n        isInitialized: function () {\n          return !!this._columns.length || !!this.option(\"columns\");\n        },\n        isDataSourceApplied: function () {\n          return this._dataSourceApplied;\n        },\n        getCommonSettings: function (column) {\n          var commonColumnSettings = (!column || !column.type) && this.option(\"commonColumnSettings\") || {};\n          var groupingOptions = this.option(\"grouping\") || {};\n          var groupPanelOptions = this.option(\"groupPanel\") || {};\n          return extend({\n            allowFixing: this.option(\"columnFixing.enabled\"),\n            allowResizing: this.option(\"allowColumnResizing\") || void 0,\n            allowReordering: this.option(\"allowColumnReordering\"),\n            minWidth: this.option(\"columnMinWidth\"),\n            width: this.option(\"columnWidth\"),\n            autoExpandGroup: groupingOptions.autoExpandAll,\n            allowCollapsing: groupingOptions.allowCollapsing,\n            allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled\n          }, commonColumnSettings);\n        },\n        isColumnOptionUsed: function (optionName) {\n          for (var i = 0; i < this._columns.length; i++) {\n            if (this._columns[i][optionName]) {\n              return true;\n            }\n          }\n        },\n        isAllDataTypesDefined: function (checkSerializers) {\n          var columns = this._columns;\n          if (!columns.length) {\n            return false;\n          }\n          for (var i = 0; i < columns.length; i++) {\n            if (!columns[i].dataField && columns[i].calculateCellValue === columns[i].defaultCalculateCellValue) {\n              continue;\n            }\n            if (!columns[i].dataType || checkSerializers && columns[i].deserializeValue && void 0 === columns[i].serializationFormat) {\n              return false;\n            }\n          }\n          return true;\n        },\n        getColumns: function () {\n          return this._columns;\n        },\n        isBandColumnsUsed: function () {\n          return this.getColumns().some(function (column) {\n            return column.isBand;\n          });\n        },\n        getGroupColumns: function () {\n          var result = [];\n          each(this._columns, function () {\n            if (isDefined(this.groupIndex)) {\n              result[this.groupIndex] = this;\n            }\n          });\n          return result;\n        },\n        _shouldReturnVisibleColumns: function () {\n          return true;\n        },\n        _compileVisibleColumns: function (rowIndex) {\n          this._visibleColumns = this._visibleColumns || this._compileVisibleColumnsCore();\n          rowIndex = isDefined(rowIndex) ? rowIndex : this._visibleColumns.length - 1;\n          return this._visibleColumns[rowIndex] || [];\n        },\n        getVisibleColumns: function (rowIndex) {\n          if (!this._shouldReturnVisibleColumns()) {\n            return [];\n          }\n          return this._compileVisibleColumns.apply(this, arguments);\n        },\n        getFixedColumns: function (rowIndex) {\n          this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();\n          rowIndex = isDefined(rowIndex) ? rowIndex : this._fixedColumns.length - 1;\n          return this._fixedColumns[rowIndex] || [];\n        },\n        getFilteringColumns: function () {\n          return this.getColumns().filter(item => (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering)).map(item => {\n            var field = extend(true, {}, item);\n            if (!isDefined(field.dataField)) {\n              field.dataField = field.name;\n            }\n            field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;\n            return field;\n          });\n        },\n        getColumnIndexOffset: function () {\n          return 0;\n        },\n        _getFixedColumnsCore: function () {\n          var result = [];\n          var rowCount = this.getRowCount();\n          var isColumnFixing = this._isColumnFixing();\n          var transparentColumn = {\n            command: \"transparent\"\n          };\n          var transparentColspan = 0;\n          var notFixedColumnCount;\n          var transparentColumnIndex;\n          var lastFixedPosition;\n          if (isColumnFixing) {\n            for (var i = 0; i <= rowCount; i++) {\n              notFixedColumnCount = 0;\n              lastFixedPosition = null;\n              transparentColumnIndex = null;\n              var visibleColumns = this.getVisibleColumns(i, true);\n              for (var j = 0; j < visibleColumns.length; j++) {\n                var prevColumn = visibleColumns[j - 1];\n                var column = visibleColumns[j];\n                if (!column.fixed) {\n                  if (0 === i) {\n                    if (column.isBand && column.colspan) {\n                      transparentColspan += column.colspan;\n                    } else {\n                      transparentColspan++;\n                    }\n                  }\n                  notFixedColumnCount++;\n                  if (!isDefined(transparentColumnIndex)) {\n                    transparentColumnIndex = j;\n                  }\n                } else if (prevColumn && prevColumn.fixed && getFixedPosition(this, prevColumn) !== getFixedPosition(this, column)) {\n                  if (!isDefined(transparentColumnIndex)) {\n                    transparentColumnIndex = j;\n                  }\n                } else {\n                  lastFixedPosition = column.fixedPosition;\n                }\n              }\n              if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {\n                return [];\n              }\n              if (!isDefined(transparentColumnIndex)) {\n                transparentColumnIndex = \"right\" === lastFixedPosition ? 0 : visibleColumns.length;\n              }\n              result[i] = visibleColumns.slice(0);\n              if (!transparentColumn.colspan) {\n                transparentColumn.colspan = transparentColspan;\n              }\n              result[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn);\n            }\n          }\n          return result.map(columns => columns.map(column => {\n            var newColumn = _extends({}, column);\n            if (newColumn.headerId) {\n              newColumn.headerId += \"-fixed\";\n            }\n            return newColumn;\n          }));\n        },\n        _isColumnFixing: function () {\n          var isColumnFixing = this.option(\"columnFixing.enabled\");\n          !isColumnFixing && each(this._columns, function (_, column) {\n            if (column.fixed) {\n              isColumnFixing = true;\n              return false;\n            }\n          });\n          return isColumnFixing;\n        },\n        _getExpandColumnsCore: function () {\n          return this.getGroupColumns();\n        },\n        getExpandColumns: function () {\n          var expandColumns = this._getExpandColumnsCore();\n          var expandColumn;\n          var firstGroupColumn = expandColumns.filter(column => 0 === column.groupIndex)[0];\n          var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;\n          var isColumnFixing = this._isColumnFixing();\n          var rtlEnabled = this.option(\"rtlEnabled\");\n          if (expandColumns.length) {\n            expandColumn = this.columnOption(\"command:expand\");\n          }\n          expandColumns = map(expandColumns, column => extend({}, column, {\n            visibleWidth: null,\n            minWidth: null,\n            cellTemplate: !isDefined(column.groupIndex) ? column.cellTemplate : null,\n            headerCellTemplate: null,\n            fixed: !isDefined(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true,\n            fixedPosition: rtlEnabled ? \"right\" : \"left\"\n          }, expandColumn, {\n            index: column.index,\n            type: column.type || GROUP_COMMAND_COLUMN_NAME\n          }));\n          return expandColumns;\n        },\n        getBandColumnsCache: function () {\n          if (!this._bandColumnsCache) {\n            var columns = this._columns;\n            var columnChildrenByIndex = {};\n            var columnParentByIndex = {};\n            var isPlain = true;\n            columns.forEach(function (column) {\n              var ownerBand = column.ownerBand;\n              var parentIndex = isObject(ownerBand) ? ownerBand.index : ownerBand;\n              var parent = columns[parentIndex];\n              if (column.hasColumns) {\n                isPlain = false;\n              }\n              if (column.colspan) {\n                column.colspan = void 0;\n              }\n              if (column.rowspan) {\n                column.rowspan = void 0;\n              }\n              if (parent) {\n                columnParentByIndex[column.index] = parent;\n              } else {\n                parentIndex = -1;\n              }\n              columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];\n              columnChildrenByIndex[parentIndex].push(column);\n            });\n            this._bandColumnsCache = {\n              isPlain: isPlain,\n              columnChildrenByIndex: columnChildrenByIndex,\n              columnParentByIndex: columnParentByIndex\n            };\n          }\n          return this._bandColumnsCache;\n        },\n        _isColumnVisible: function (column) {\n          return column.visible && this.isParentColumnVisible(column.index);\n        },\n        _compileVisibleColumnsCore: function () {\n          var that = this;\n          var i;\n          var result = [];\n          var rowspanGroupColumns = 0;\n          var rowspanExpandColumns = 0;\n          var rowCount = that.getRowCount();\n          var positiveIndexedColumns = [];\n          var negativeIndexedColumns = [];\n          var notGroupedColumnsCount = 0;\n          var isFixedToEnd;\n          var rtlEnabled = that.option(\"rtlEnabled\");\n          var bandColumnsCache = that.getBandColumnsCache();\n          var expandColumns = mergeColumns(that, that.getExpandColumns(), that._columns);\n          var columns = mergeColumns(that, that._columns, that._commandColumns, true);\n          var columnDigitsCount = function (number) {\n            var i;\n            for (i = 0; number > 1; i++) {\n              number /= 10;\n            }\n            return i;\n          }(columns.length);\n          !function (that, columns, bandColumnsCache) {\n            var rowspan;\n            for (var i = 0; i < columns.length; i++) {\n              var column = columns[i];\n              if (column.visible || column.command) {\n                if (column.isBand) {\n                  column.colspan = column.colspan || calculateColspan(that, column.index);\n                }\n                if (!column.isBand || !column.colspan) {\n                  rowspan = that.getRowCount();\n                  if (!column.command && (!isDefined(column.groupIndex) || column.showWhenGrouped)) {\n                    rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length;\n                  }\n                  if (rowspan > 1) {\n                    column.rowspan = rowspan;\n                  }\n                }\n              }\n            }\n          }(that, columns, bandColumnsCache);\n          for (i = 0; i < rowCount; i++) {\n            result[i] = [];\n            negativeIndexedColumns[i] = [{}];\n            positiveIndexedColumns[i] = [{}, {}, {}];\n          }\n          each(columns, function () {\n            var visibleIndex = this.visibleIndex;\n            var indexedColumns;\n            var parentBandColumns = getParentBandColumns(this.index, bandColumnsCache.columnParentByIndex);\n            var visible = that._isColumnVisible(this);\n            if (visible && (!isDefined(this.groupIndex) || this.showWhenGrouped)) {\n              var rowIndex = parentBandColumns.length;\n              if (visibleIndex < 0) {\n                visibleIndex = -visibleIndex;\n                indexedColumns = negativeIndexedColumns[rowIndex];\n              } else {\n                this.fixed = parentBandColumns.length ? parentBandColumns[0].fixed : this.fixed;\n                this.fixedPosition = parentBandColumns.length ? parentBandColumns[0].fixedPosition : this.fixedPosition;\n                if (this.fixed) {\n                  isFixedToEnd = \"right\" === this.fixedPosition;\n                  if (rtlEnabled && (!this.command || isCustomCommandColumn(that, this))) {\n                    isFixedToEnd = !isFixedToEnd;\n                  }\n                  if (isFixedToEnd) {\n                    indexedColumns = positiveIndexedColumns[rowIndex][2];\n                  } else {\n                    indexedColumns = positiveIndexedColumns[rowIndex][0];\n                  }\n                } else {\n                  indexedColumns = positiveIndexedColumns[rowIndex][1];\n                }\n              }\n              if (parentBandColumns.length) {\n                visibleIndex = numberToString(visibleIndex, columnDigitsCount);\n                for (i = parentBandColumns.length - 1; i >= 0; i--) {\n                  visibleIndex = numberToString(parentBandColumns[i].visibleIndex, columnDigitsCount) + visibleIndex;\n                }\n              }\n              indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];\n              indexedColumns[visibleIndex].push(this);\n              notGroupedColumnsCount++;\n            }\n          });\n          each(result, function (rowIndex) {\n            orderEach(negativeIndexedColumns[rowIndex], function (_, columns) {\n              result[rowIndex].unshift.apply(result[rowIndex], columns);\n            });\n            var firstPositiveIndexColumn = result[rowIndex].length;\n            each(positiveIndexedColumns[rowIndex], function (index, columnsByFixing) {\n              orderEach(columnsByFixing, function (_, columnsByVisibleIndex) {\n                result[rowIndex].push.apply(result[rowIndex], columnsByVisibleIndex);\n              });\n            });\n            if (rowspanExpandColumns < rowIndex + 1) {\n              rowspanExpandColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, \"detailExpand\", firstPositiveIndexColumn);\n            }\n            if (rowspanGroupColumns < rowIndex + 1) {\n              rowspanGroupColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn);\n            }\n          });\n          result.push(function getDataColumns(columns, rowIndex, bandColumnID) {\n            var result = [];\n            rowIndex = rowIndex || 0;\n            columns[rowIndex] && each(columns[rowIndex], function (_, column) {\n              if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {\n                if (!column.isBand || !column.colspan) {\n                  if (!column.command || rowIndex < 1) {\n                    result.push(column);\n                  }\n                } else {\n                  result.push.apply(result, getDataColumns(columns, rowIndex + 1, column.index));\n                }\n              }\n            });\n            return result;\n          }(result));\n          if (!notGroupedColumnsCount && that._columns.length) {\n            result[rowCount].push({\n              command: \"empty\"\n            });\n          }\n          return result;\n        },\n        getInvisibleColumns: function (columns, bandColumnIndex) {\n          var that = this;\n          var result = [];\n          var hiddenColumnsByBand;\n          columns = columns || that._columns;\n          each(columns, function (_, column) {\n            if (column.ownerBand !== bandColumnIndex) {\n              return;\n            }\n            if (column.isBand) {\n              if (!column.visible) {\n                hiddenColumnsByBand = that.getChildrenByBandColumn(column.index);\n              } else {\n                hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index);\n              }\n              if (hiddenColumnsByBand.length) {\n                result.push(column);\n                result = result.concat(hiddenColumnsByBand);\n              }\n              return;\n            }\n            if (!column.visible) {\n              result.push(column);\n            }\n          });\n          return result;\n        },\n        getChooserColumns: function (getAllColumns) {\n          var columns = getAllColumns ? this.getColumns() : this.getInvisibleColumns();\n          var columnChooserColumns = columns.filter(column => column.showInColumnChooser);\n          var sortOrder = this.option(\"columnChooser.sortOrder\");\n          return ((columns, sortOrder) => {\n            if (\"asc\" !== sortOrder && \"desc\" !== sortOrder) {\n              return columns;\n            }\n            var sign = \"asc\" === sortOrder ? 1 : -1;\n            columns.sort(function (column1, column2) {\n              var caption1 = column1.caption || \"\";\n              var caption2 = column2.caption || \"\";\n              return sign * caption1.localeCompare(caption2);\n            });\n            return columns;\n          })(columnChooserColumns, sortOrder);\n        },\n        allowMoveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var columnIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);\n          var sourceColumn = this._columns[columnIndex];\n          if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {\n            if (sourceLocation === targetLocation) {\n              if (\"columnChooser\" === sourceLocation) {\n                return false;\n              }\n              fromVisibleIndex = isObject(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;\n              toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\n              return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex;\n            } else if (\"group\" === sourceLocation && \"columnChooser\" !== targetLocation || \"group\" === targetLocation) {\n              return sourceColumn && sourceColumn.allowGrouping;\n            } else if (\"columnChooser\" === sourceLocation || \"columnChooser\" === targetLocation) {\n              return sourceColumn && sourceColumn.allowHiding;\n            }\n            return true;\n          }\n          return false;\n        },\n        moveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var options = {};\n          var prevGroupIndex;\n          var fromIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);\n          var toIndex = getColumnIndexByVisibleIndex(this, toVisibleIndex, targetLocation);\n          var targetGroupIndex;\n          if (fromIndex >= 0) {\n            var column = this._columns[fromIndex];\n            toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\n            targetGroupIndex = toIndex >= 0 ? this._columns[toIndex].groupIndex : -1;\n            if (isDefined(column.groupIndex) && \"group\" === sourceLocation) {\n              if (targetGroupIndex > column.groupIndex) {\n                targetGroupIndex--;\n              }\n              if (\"group\" !== targetLocation) {\n                options.groupIndex = void 0;\n              } else {\n                prevGroupIndex = column.groupIndex;\n                delete column.groupIndex;\n                updateColumnGroupIndexes(this);\n              }\n            }\n            if (\"group\" === targetLocation) {\n              options.groupIndex = function (that, column, groupIndex) {\n                var groupColumns = that.getGroupColumns();\n                var i;\n                if (groupIndex >= 0) {\n                  for (i = 0; i < groupColumns.length; i++) {\n                    if (groupColumns[i].groupIndex >= groupIndex) {\n                      groupColumns[i].groupIndex++;\n                    }\n                  }\n                } else {\n                  groupIndex = 0;\n                  for (i = 0; i < groupColumns.length; i++) {\n                    groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1);\n                  }\n                }\n                return groupIndex;\n              }(this, 0, targetGroupIndex);\n              column.groupIndex = prevGroupIndex;\n            } else if (toVisibleIndex >= 0) {\n              var targetColumn = this._columns[toIndex];\n              if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {\n                options.visibleIndex = MAX_SAFE_INTEGER;\n              } else if (isColumnFixed(this, column) ^ isColumnFixed(this, targetColumn)) {\n                options.visibleIndex = MAX_SAFE_INTEGER;\n              } else {\n                options.visibleIndex = targetColumn.visibleIndex;\n              }\n            }\n            var isVisible = \"columnChooser\" !== targetLocation;\n            if (column.visible !== isVisible) {\n              options.visible = isVisible;\n            }\n            this.columnOption(column.index, options);\n          }\n        },\n        changeSortOrder: function (columnIndex, sortOrder) {\n          var options = {};\n          var sortingOptions = this.option(\"sorting\");\n          var sortingMode = sortingOptions && sortingOptions.mode;\n          var needResetSorting = \"single\" === sortingMode || !sortOrder;\n          var allowSorting = \"single\" === sortingMode || \"multiple\" === sortingMode;\n          var column = this._columns[columnIndex];\n          if (allowSorting && column && column.allowSorting) {\n            if (needResetSorting && !isDefined(column.groupIndex)) {\n              each(this._columns, function (index) {\n                if (index !== columnIndex && this.sortOrder) {\n                  if (!isDefined(this.groupIndex)) {\n                    delete this.sortOrder;\n                  }\n                  delete this.sortIndex;\n                }\n              });\n            }\n            if (isSortOrderValid(sortOrder)) {\n              if (column.sortOrder !== sortOrder) {\n                options.sortOrder = sortOrder;\n              }\n            } else if (\"none\" === sortOrder) {\n              if (column.sortOrder) {\n                options.sortIndex = void 0;\n                options.sortOrder = void 0;\n              }\n            } else {\n              !function (column) {\n                if (\"ctrl\" === sortOrder) {\n                  if (!(\"sortOrder\" in column && \"sortIndex\" in column)) {\n                    return false;\n                  }\n                  options.sortOrder = void 0;\n                  options.sortIndex = void 0;\n                } else if (isDefined(column.groupIndex) || isDefined(column.sortIndex)) {\n                  options.sortOrder = \"desc\" === column.sortOrder ? \"asc\" : \"desc\";\n                } else {\n                  options.sortOrder = \"asc\";\n                }\n                return true;\n              }(column);\n            }\n          }\n          this.columnOption(column.index, options);\n        },\n        getSortDataSourceParameters: function (useLocalSelector) {\n          var sortColumns = [];\n          var sort = [];\n          each(this._columns, function () {\n            if ((this.dataField || this.selector || this.calculateCellValue) && isDefined(this.sortIndex) && !isDefined(this.groupIndex)) {\n              sortColumns[this.sortIndex] = this;\n            }\n          });\n          each(sortColumns, function () {\n            var sortOrder = this && this.sortOrder;\n            if (isSortOrderValid(sortOrder)) {\n              var sortItem = {\n                selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,\n                desc: \"desc\" === this.sortOrder\n              };\n              if (this.sortingMethod) {\n                sortItem.compare = this.sortingMethod.bind(this);\n              }\n              sort.push(sortItem);\n            }\n          });\n          return sort.length > 0 ? sort : null;\n        },\n        getGroupDataSourceParameters: function (useLocalSelector) {\n          var group = [];\n          each(this.getGroupColumns(), function () {\n            var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;\n            if (selector) {\n              var groupItem = {\n                selector: selector,\n                desc: \"desc\" === this.sortOrder,\n                isExpanded: !!this.autoExpandGroup\n              };\n              if (this.sortingMethod) {\n                groupItem.compare = this.sortingMethod.bind(this);\n              }\n              group.push(groupItem);\n            }\n          });\n          return group.length > 0 ? group : null;\n        },\n        refresh: function (updateNewLookupsOnly) {\n          var deferreds = [];\n          each(this._columns, function () {\n            var lookup = this.lookup;\n            if (lookup && !this.calculateDisplayValue) {\n              if (updateNewLookupsOnly && lookup.valueMap) {\n                return;\n              }\n              if (lookup.update) {\n                deferreds.push(lookup.update());\n              }\n            }\n          });\n          return when.apply($, deferreds).done(resetColumnsCache.bind(null, this));\n        },\n        _updateColumnOptions: function (column, columnIndex) {\n          column.selector = column.selector || function (data) {\n            return column.calculateCellValue(data);\n          };\n          if (this._reinitAfterLookupChanges && this._previousColumns) {\n            column.selector.columnIndex = columnIndex;\n            column.selector.originalCallback = this._previousColumns[columnIndex].selector.originalCallback;\n          } else {\n            column.selector.columnIndex = columnIndex;\n            column.selector.originalCallback = column.selector;\n          }\n          each([\"calculateSortValue\", \"calculateGroupValue\", \"calculateDisplayValue\"], function (_, calculateCallbackName) {\n            var calculateCallback = column[calculateCallbackName];\n            if (isFunction(calculateCallback)) {\n              if (!calculateCallback.originalCallback) {\n                var context = {\n                  column: column\n                };\n                column[calculateCallbackName] = function (data) {\n                  return calculateCallback.call(context.column, data);\n                };\n                column[calculateCallbackName].originalCallback = calculateCallback;\n                column[calculateCallbackName].columnIndex = columnIndex;\n                column[calculateCallbackName].context = context;\n              } else {\n                column[calculateCallbackName].context.column = column;\n              }\n            }\n          });\n          if (isString(column.calculateDisplayValue)) {\n            column.displayField = column.calculateDisplayValue;\n            column.calculateDisplayValue = compileGetter(column.displayField);\n          }\n          if (column.calculateDisplayValue) {\n            column.displayValueMap = column.displayValueMap || {};\n          }\n          updateSerializers(column, column.dataType);\n          var lookup = column.lookup;\n          if (lookup) {\n            updateSerializers(lookup, lookup.dataType);\n          }\n          var dataType = lookup ? lookup.dataType : column.dataType;\n          if (dataType) {\n            column.alignment = column.alignment || function (dataType, isRTL) {\n              switch (dataType) {\n                case \"number\":\n                  return \"right\";\n                case \"boolean\":\n                  return \"center\";\n                default:\n                  return getDefaultAlignment(isRTL);\n              }\n            }(dataType, this.option(\"rtlEnabled\"));\n            column.format = column.format || gridCoreUtils.getFormatByDataType(dataType);\n            column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);\n            column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];\n            if (!isDefined(column.filterOperations)) {\n              setFilterOperationsAsDefaultValues(column);\n            }\n            column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || \"=\";\n            column.showEditorAlways = isDefined(column.showEditorAlways) ? column.showEditorAlways : \"boolean\" === dataType && !column.cellTemplate && !column.lookup;\n          }\n        },\n        updateColumnDataTypes: function (dataSource) {\n          var that = this;\n          var dateSerializationFormat = that.option(\"dateSerializationFormat\");\n          var firstItems = that._getFirstItems(dataSource);\n          var isColumnDataTypesUpdated = false;\n          each(that._columns, function (index, column) {\n            var i;\n            var value;\n            var dataType;\n            var lookupDataType;\n            var valueDataType;\n            var lookup = column.lookup;\n            if (gridCoreUtils.isDateType(column.dataType) && void 0 === column.serializationFormat) {\n              column.serializationFormat = dateSerializationFormat;\n            }\n            if (lookup && gridCoreUtils.isDateType(lookup.dataType) && void 0 === column.serializationFormat) {\n              lookup.serializationFormat = dateSerializationFormat;\n            }\n            if (column.calculateCellValue && firstItems.length) {\n              if (!column.dataType || lookup && !lookup.dataType) {\n                for (i = 0; i < firstItems.length; i++) {\n                  value = column.calculateCellValue(firstItems[i]);\n                  if (!column.dataType) {\n                    valueDataType = getValueDataType(value);\n                    dataType = dataType || valueDataType;\n                    if (dataType && valueDataType && dataType !== valueDataType) {\n                      dataType = \"string\";\n                    }\n                  }\n                  if (lookup && !lookup.dataType) {\n                    valueDataType = getValueDataType(gridCoreUtils.getDisplayValue(column, value, firstItems[i]));\n                    lookupDataType = lookupDataType || valueDataType;\n                    if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {\n                      lookupDataType = \"string\";\n                    }\n                  }\n                }\n                if (dataType || lookupDataType) {\n                  if (dataType) {\n                    column.dataType = dataType;\n                  }\n                  if (lookup && lookupDataType) {\n                    lookup.dataType = lookupDataType;\n                  }\n                  isColumnDataTypesUpdated = true;\n                }\n              }\n              if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {\n                for (i = 0; i < firstItems.length; i++) {\n                  value = column.calculateCellValue(firstItems[i], true);\n                  if (void 0 === column.serializationFormat) {\n                    column.serializationFormat = getSerializationFormat(column.dataType, value);\n                  }\n                  if (lookup && void 0 === lookup.serializationFormat) {\n                    lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value, true));\n                  }\n                }\n              }\n            }\n            that._updateColumnOptions(column, index);\n          });\n          return isColumnDataTypesUpdated;\n        },\n        _customizeColumns: function (columns) {\n          var customizeColumns = this.option(\"customizeColumns\");\n          if (customizeColumns) {\n            var hasOwnerBand = columns.some(function (column) {\n              return isObject(column.ownerBand);\n            });\n            if (hasOwnerBand) {\n              updateIndexes(this);\n            }\n            customizeColumns(columns);\n            assignColumns(this, createColumnsFromOptions(this, columns));\n          }\n        },\n        updateColumns: function (dataSource, forceApplying, isApplyingUserState) {\n          if (!forceApplying) {\n            this.updateSortingGrouping(dataSource);\n          }\n          if (!dataSource || dataSource.isLoaded()) {\n            var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();\n            var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();\n            var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;\n            if (!isApplyingUserState) {\n              this._customizeColumns(this._columns);\n            }\n            updateIndexes(this);\n            var columns = this._columns;\n            return when(this.refresh(true)).always(() => {\n              if (this._columns !== columns) {\n                return;\n              }\n              this._updateChanges(dataSource, {\n                sorting: sortParameters,\n                grouping: groupParameters,\n                filtering: filterParameters\n              });\n              fireColumnsChanged(this);\n            });\n          }\n        },\n        _updateChanges: function (dataSource, parameters) {\n          if (dataSource) {\n            this.updateColumnDataTypes(dataSource);\n            this._dataSourceApplied = true;\n          }\n          if (!gridCoreUtils.equalSortParameters(parameters.sorting, this.getSortDataSourceParameters())) {\n            updateColumnChanges(this, \"sorting\");\n          }\n          if (!gridCoreUtils.equalSortParameters(parameters.grouping, this.getGroupDataSourceParameters())) {\n            updateColumnChanges(this, \"grouping\");\n          }\n          var dataController = this.getController(\"data\");\n          if (dataController && !gridCoreUtils.equalFilterParameters(parameters.filtering, dataController.getCombinedFilter())) {\n            updateColumnChanges(this, \"filtering\");\n          }\n          updateColumnChanges(this, \"columns\");\n        },\n        updateSortingGrouping: function (dataSource, fromDataSource) {\n          var that = this;\n          var sortParameters;\n          var isColumnsChanged;\n          var updateSortGroupParameterIndexes = function (columns, sortParameters, indexParameterName) {\n            each(columns, function (index, column) {\n              delete column[indexParameterName];\n              if (sortParameters) {\n                for (var i = 0; i < sortParameters.length; i++) {\n                  var selector = sortParameters[i].selector;\n                  var isExpanded = sortParameters[i].isExpanded;\n                  if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue || selector === column.calculateDisplayValue) {\n                    if (fromDataSource) {\n                      column.sortOrder = \"sortOrder\" in column ? column.sortOrder : sortParameters[i].desc ? \"desc\" : \"asc\";\n                    } else {\n                      column.sortOrder = column.sortOrder || (sortParameters[i].desc ? \"desc\" : \"asc\");\n                    }\n                    if (void 0 !== isExpanded) {\n                      column.autoExpandGroup = isExpanded;\n                    }\n                    column[indexParameterName] = i;\n                    break;\n                  }\n                }\n              }\n            });\n          };\n          if (dataSource) {\n            sortParameters = gridCoreUtils.normalizeSortingInfo(dataSource.sort());\n            var groupParameters = gridCoreUtils.normalizeSortingInfo(dataSource.group());\n            var columnsGroupParameters = that.getGroupDataSourceParameters();\n            var columnsSortParameters = that.getSortDataSourceParameters();\n            var groupingChanged = !gridCoreUtils.equalSortParameters(groupParameters, columnsGroupParameters, true);\n            var groupExpandingChanged = !groupingChanged && !gridCoreUtils.equalSortParameters(groupParameters, columnsGroupParameters);\n            if (!that._columns.length) {\n              each(groupParameters, function (index, group) {\n                that._columns.push(group.selector);\n              });\n              each(sortParameters, function (index, sort) {\n                if (!isFunction(sort.selector)) {\n                  that._columns.push(sort.selector);\n                }\n              });\n              assignColumns(that, createColumnsFromOptions(that, that._columns));\n            }\n            if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && (groupingChanged || groupExpandingChanged)) {\n              updateSortGroupParameterIndexes(that._columns, groupParameters, \"groupIndex\");\n              if (fromDataSource) {\n                groupingChanged && updateColumnChanges(that, \"grouping\");\n                groupExpandingChanged && updateColumnChanges(that, \"groupExpanding\");\n                isColumnsChanged = true;\n              }\n            }\n            if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !gridCoreUtils.equalSortParameters(sortParameters, columnsSortParameters)) {\n              updateSortGroupParameterIndexes(that._columns, sortParameters, \"sortIndex\");\n              if (fromDataSource) {\n                updateColumnChanges(that, \"sorting\");\n                isColumnsChanged = true;\n              }\n            }\n            if (isColumnsChanged) {\n              fireColumnsChanged(that);\n            }\n          }\n        },\n        updateFilter: function (filter, remoteFiltering, columnIndex, filterValue) {\n          if (!Array.isArray(filter)) {\n            return filter;\n          }\n          filter = extend([], filter);\n          columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;\n          filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;\n          if (isString(filter[0]) && \"!\" !== filter[0]) {\n            var column = this.columnOption(filter[0]);\n            if (remoteFiltering) {\n              if (config().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {\n                filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], \"filter\");\n              }\n            } else if (column && column.selector) {\n              filter[0] = column.selector;\n              filter[0].columnIndex = column.index;\n            }\n          } else if (isFunction(filter[0])) {\n            filter[0].columnIndex = columnIndex;\n            filter[0].filterValue = filterValue;\n            filter[0].selectedFilterOperation = filter.selectedFilterOperation;\n          }\n          for (var i = 0; i < filter.length; i++) {\n            filter[i] = this.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue);\n          }\n          return filter;\n        },\n        columnCount: function () {\n          return this._columns ? this._columns.length : 0;\n        },\n        columnOption: function (identifier, option, value, notFireEvent) {\n          var that = this;\n          var columns = that._columns.concat(that._commandColumns);\n          var column = findColumn(columns, identifier);\n          if (column) {\n            if (1 === arguments.length) {\n              return extend({}, column);\n            }\n            if (isString(option)) {\n              if (2 === arguments.length) {\n                return columnOptionCore(that, column, option);\n              } else {\n                columnOptionCore(that, column, option, value, notFireEvent);\n              }\n            } else if (isObject(option)) {\n              each(option, function (optionName, value) {\n                columnOptionCore(that, column, optionName, value, notFireEvent);\n              });\n            }\n            fireColumnsChanged(that);\n          }\n        },\n        clearSorting: function () {\n          var columnCount = this.columnCount();\n          this.beginUpdate();\n          for (var i = 0; i < columnCount; i++) {\n            this.columnOption(i, \"sortOrder\", void 0);\n            delete findColumn(this._columns, i).sortOrder;\n          }\n          this.endUpdate();\n        },\n        clearGrouping: function () {\n          var columnCount = this.columnCount();\n          this.beginUpdate();\n          for (var i = 0; i < columnCount; i++) {\n            this.columnOption(i, \"groupIndex\", void 0);\n          }\n          this.endUpdate();\n        },\n        getVisibleIndex: function (index, rowIndex) {\n          var columns = this.getVisibleColumns(rowIndex);\n          for (var i = columns.length - 1; i >= 0; i--) {\n            if (columns[i].index === index) {\n              return i;\n            }\n          }\n          return -1;\n        },\n        getVisibleIndexByColumn: function (column, rowIndex) {\n          var visibleColumns = this.getVisibleColumns(rowIndex);\n          var visibleColumn = visibleColumns.filter(col => col.index === column.index && col.command === column.command)[0];\n          return visibleColumns.indexOf(visibleColumn);\n        },\n        getVisibleColumnIndex: function (id, rowIndex) {\n          var index = this.columnOption(id, \"index\");\n          return this.getVisibleIndex(index, rowIndex);\n        },\n        addColumn: function (options) {\n          var column = createColumn(this, options);\n          var index = this._columns.length;\n          this._columns.push(column);\n          if (column.isBand) {\n            this._columns = createColumnsFromOptions(this, this._columns);\n            column = this._columns[index];\n          }\n          column.added = options;\n          updateIndexes(this, column);\n          this.updateColumns(this._dataSource);\n          this._checkColumns();\n        },\n        deleteColumn: function (id) {\n          var column = this.columnOption(id);\n          if (column && column.index >= 0) {\n            columns = this._columns, void columns.forEach(column => {\n              if (isDefined(column.ownerBand)) {\n                column.ownerBand = columns[column.ownerBand];\n              }\n            });\n            this._columns.splice(column.index, 1);\n            if (column.isBand) {\n              var childIndexes = this.getChildrenByBandColumn(column.index).map(column => column.index);\n              this._columns = this._columns.filter(column => childIndexes.indexOf(column.index) < 0);\n            }\n            updateIndexes(this);\n            this.updateColumns(this._dataSource);\n          }\n          var columns;\n        },\n        addCommandColumn: function (options) {\n          var commandColumn = this._commandColumns.filter(column => column.command === options.command)[0];\n          if (!commandColumn) {\n            commandColumn = options;\n            this._commandColumns.push(commandColumn);\n          }\n        },\n        getUserState: function () {\n          var columns = this._columns;\n          var result = [];\n          var i;\n          function handleStateField(index, value) {\n            if (void 0 !== columns[i][value]) {\n              result[i][value] = columns[i][value];\n            }\n          }\n          for (i = 0; i < columns.length; i++) {\n            result[i] = {};\n            each(USER_STATE_FIELD_NAMES, handleStateField);\n          }\n          return result;\n        },\n        setName: function (column) {\n          column.name = column.name || column.dataField || column.type;\n        },\n        setUserState: function (state) {\n          var dataSource = this._dataSource;\n          var ignoreColumnOptionNames = this.option(\"stateStoring.ignoreColumnOptionNames\");\n          null === state || void 0 === state ? void 0 : state.forEach(this.setName);\n          if (!ignoreColumnOptionNames) {\n            ignoreColumnOptionNames = [];\n            var commonColumnSettings = this.getCommonSettings();\n            if (!this.option(\"columnChooser.enabled\")) {\n              ignoreColumnOptionNames.push(\"visible\");\n            }\n            if (\"none\" === this.option(\"sorting.mode\")) {\n              ignoreColumnOptionNames.push(\"sortIndex\", \"sortOrder\");\n            }\n            if (!commonColumnSettings.allowGrouping) {\n              ignoreColumnOptionNames.push(\"groupIndex\");\n            }\n            if (!commonColumnSettings.allowFixing) {\n              ignoreColumnOptionNames.push(\"fixed\", \"fixedPosition\");\n            }\n            if (!commonColumnSettings.allowResizing) {\n              ignoreColumnOptionNames.push(\"width\", \"visibleWidth\");\n            }\n            var isFilterPanelHidden = !this.option(\"filterPanel.visible\");\n            if (!this.option(\"filterRow.visible\") && isFilterPanelHidden) {\n              ignoreColumnOptionNames.push(\"filterValue\", \"selectedFilterOperation\");\n            }\n            if (!this.option(\"headerFilter.visible\") && isFilterPanelHidden) {\n              ignoreColumnOptionNames.push(\"filterValues\", \"filterType\");\n            }\n          }\n          this._columnsUserState = state;\n          this._ignoreColumnOptionNames = ignoreColumnOptionNames;\n          this._hasUserState = !!state;\n          updateColumnChanges(this, \"filtering\");\n          this.init(true);\n          if (dataSource) {\n            dataSource.sort(this.getSortDataSourceParameters());\n            dataSource.group(this.getGroupDataSourceParameters());\n          }\n        },\n        _checkColumns: function () {\n          var usedNames = {};\n          var hasEditableColumnWithoutName = false;\n          var duplicatedNames = [];\n          this._columns.forEach(column => {\n            var _column$columns;\n            var name = column.name;\n            var isBand = null === (_column$columns = column.columns) || void 0 === _column$columns ? void 0 : _column$columns.length;\n            var isEditable = column.allowEditing && (column.dataField || column.setCellValue) && !isBand;\n            if (name) {\n              if (usedNames[name]) {\n                duplicatedNames.push('\"'.concat(name, '\"'));\n              }\n              usedNames[name] = true;\n            } else if (isEditable) {\n              hasEditableColumnWithoutName = true;\n            }\n          });\n          if (duplicatedNames.length) {\n            errors.log(\"E1059\", duplicatedNames.join(\", \"));\n          }\n          if (hasEditableColumnWithoutName) {\n            errors.log(\"E1060\");\n          }\n        },\n        _createCalculatedColumnOptions: function (columnOptions, bandColumn) {\n          var calculatedColumnOptions = {};\n          var dataField = columnOptions.dataField;\n          if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {\n            calculatedColumnOptions.isBand = true;\n            dataField = null;\n          }\n          if (dataField) {\n            if (isString(dataField)) {\n              var getter = compileGetter(dataField);\n              calculatedColumnOptions = {\n                caption: captionize(dataField),\n                calculateCellValue: function (data, skipDeserialization) {\n                  var value = getter(data);\n                  return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value;\n                },\n                setCellValue: defaultSetCellValue,\n                parseValue: function (text) {\n                  var result;\n                  var parsedValue;\n                  if (\"number\" === this.dataType) {\n                    if (isString(text) && this.format) {\n                      result = function (text, format) {\n                        var parsedValue = numberLocalization.parse(text);\n                        if (isNumeric(parsedValue)) {\n                          var formattedValue = numberLocalization.format(parsedValue, format);\n                          var formattedValueWithDefaultFormat = numberLocalization.format(parsedValue, \"decimal\");\n                          if (formattedValue === text || formattedValueWithDefaultFormat === text) {\n                            return parsedValue;\n                          }\n                        }\n                      }(text.trim(), this.format);\n                    } else if (isDefined(text) && isNumeric(text)) {\n                      result = Number(text);\n                    }\n                  } else if (\"boolean\" === this.dataType) {\n                    if (text === this.trueText) {\n                      result = true;\n                    } else if (text === this.falseText) {\n                      result = false;\n                    }\n                  } else if (gridCoreUtils.isDateType(this.dataType)) {\n                    parsedValue = dateLocalization.parse(text, this.format);\n                    if (parsedValue) {\n                      result = parsedValue;\n                    }\n                  } else {\n                    result = text;\n                  }\n                  return result;\n                }\n              };\n            }\n            calculatedColumnOptions.allowFiltering = true;\n          } else {\n            calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression;\n          }\n          calculatedColumnOptions.calculateFilterExpression = function () {\n            return filterUtils.defaultCalculateFilterExpression.apply(this, arguments);\n          };\n          calculatedColumnOptions.defaultFilterOperation = \"=\";\n          calculatedColumnOptions.createFilterExpression = function (filterValue, selectedFilterOperation) {\n            var result;\n            if (this.calculateFilterExpression) {\n              result = this.calculateFilterExpression.apply(this, arguments);\n            }\n            if (isFunction(result)) {\n              result = [result, \"=\", true];\n            }\n            if (result) {\n              result.columnIndex = this.index;\n              result.filterValue = filterValue;\n              result.selectedFilterOperation = selectedFilterOperation;\n            }\n            return result;\n          };\n          if (!dataField || !isString(dataField)) {\n            extend(true, calculatedColumnOptions, {\n              allowSorting: false,\n              allowGrouping: false,\n              calculateCellValue: function () {\n                return null;\n              }\n            });\n          }\n          if (bandColumn) {\n            calculatedColumnOptions.allowFixing = false;\n          }\n          if (columnOptions.dataType) {\n            calculatedColumnOptions.userDataType = columnOptions.dataType;\n          }\n          if (columnOptions.selectedFilterOperation && !(\"defaultSelectedFilterOperation\" in calculatedColumnOptions)) {\n            calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation;\n          }\n          if (columnOptions.lookup) {\n            calculatedColumnOptions.lookup = {\n              calculateCellValue: function (value, skipDeserialization) {\n                if (this.valueExpr) {\n                  value = this.valueMap && this.valueMap[value];\n                }\n                return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value;\n              },\n              updateValueMap: function () {\n                this.valueMap = {};\n                if (this.items) {\n                  var calculateValue = compileGetter(this.valueExpr);\n                  var calculateDisplayValue = compileGetter(this.displayExpr);\n                  for (var i = 0; i < this.items.length; i++) {\n                    var item = this.items[i];\n                    var displayValue = calculateDisplayValue(item);\n                    this.valueMap[calculateValue(item)] = displayValue;\n                    this.dataType = this.dataType || getValueDataType(displayValue);\n                  }\n                }\n              },\n              update: function () {\n                var that = this;\n                var dataSource = that.dataSource;\n                if (dataSource) {\n                  if (isFunction(dataSource) && !variableWrapper.isWrapped(dataSource)) {\n                    dataSource = dataSource({});\n                  }\n                  if (isPlainObject(dataSource) || dataSource instanceof Store || Array.isArray(dataSource)) {\n                    if (that.valueExpr) {\n                      var dataSourceOptions = normalizeDataSourceOptions(dataSource);\n                      dataSourceOptions.paginate = false;\n                      dataSource = new DataSource(dataSourceOptions);\n                      return dataSource.load().done(function (data) {\n                        that.items = data;\n                        that.updateValueMap && that.updateValueMap();\n                      });\n                    }\n                  } else {\n                    errors.log(\"E1016\");\n                  }\n                } else {\n                  that.updateValueMap && that.updateValueMap();\n                }\n              }\n            };\n          }\n          calculatedColumnOptions.resizedCallbacks = Callbacks();\n          if (columnOptions.resized) {\n            calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions));\n          }\n          each(calculatedColumnOptions, function (optionName) {\n            if (isFunction(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf(\"default\")) {\n              var defaultOptionName = \"default\" + optionName.charAt(0).toUpperCase() + optionName.substr(1);\n              calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName];\n            }\n          });\n          return calculatedColumnOptions;\n        },\n        getRowCount: function () {\n          this._rowCount = this._rowCount || function (that) {\n            var rowCount = 1;\n            var bandColumnsCache = that.getBandColumnsCache();\n            var columnParentByIndex = bandColumnsCache.columnParentByIndex;\n            that._columns.forEach(function (column) {\n              var parents = getParentBandColumns(column.index, columnParentByIndex);\n              var invisibleParents = parents.filter(function (column) {\n                return !column.visible;\n              });\n              if (column.visible && !invisibleParents.length) {\n                rowCount = Math.max(rowCount, parents.length + 1);\n              }\n            });\n            return rowCount;\n          }(this);\n          return this._rowCount;\n        },\n        getRowIndex: function (columnIndex, alwaysGetRowIndex) {\n          var column = this._columns[columnIndex];\n          var bandColumnsCache = this.getBandColumnsCache();\n          return column && (alwaysGetRowIndex || column.visible && !(column.command || isDefined(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0;\n        },\n        getChildrenByBandColumn: function (bandColumnIndex, onlyVisibleDirectChildren) {\n          var bandColumnsCache = this.getBandColumnsCache();\n          var result = _getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);\n          if (onlyVisibleDirectChildren) {\n            return result.filter(function (column) {\n              return column.visible && !column.command;\n            }).sort(function (column1, column2) {\n              return column1.visibleIndex - column2.visibleIndex;\n            });\n          }\n          return result;\n        },\n        isParentBandColumn: function (columnIndex, bandColumnIndex) {\n          var result = false;\n          var column = this._columns[columnIndex];\n          var bandColumnsCache = this.getBandColumnsCache();\n          var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\n          if (parentBandColumns) {\n            each(parentBandColumns, function (_, bandColumn) {\n              if (bandColumn.index === bandColumnIndex) {\n                result = true;\n                return false;\n              }\n            });\n          }\n          return result;\n        },\n        isParentColumnVisible: function (columnIndex) {\n          var result = true;\n          var bandColumnsCache = this.getBandColumnsCache();\n          var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\n          bandColumns && each(bandColumns, function (_, bandColumn) {\n            result = result && bandColumn.visible;\n            return result;\n          });\n          return result;\n        },\n        getColumnId: function (column) {\n          if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {\n            if (isCustomCommandColumn(this, column)) {\n              return \"type:\" + column.type;\n            }\n            return \"command:\" + column.command;\n          }\n          return column.index;\n        },\n        getCustomizeTextByDataType: getCustomizeTextByDataType,\n        getHeaderContentAlignment: function (columnAlignment) {\n          var rtlEnabled = this.option(\"rtlEnabled\");\n          if (rtlEnabled) {\n            return \"left\" === columnAlignment ? \"right\" : \"left\";\n          }\n          return columnAlignment;\n        }\n      };\n      return members;\n    }())\n  }\n};","map":{"version":3,"names":["_extends","$","Callbacks","variableWrapper","compileGetter","compileSetter","isDefined","isString","isNumeric","isFunction","isObject","isPlainObject","type","each","map","getDefaultAlignment","extend","normalizeIndexes","config","orderEach","deepExtendArraySafe","errors","modules","gridCoreUtils","captionize","dateSerialization","numberLocalization","dateLocalization","messageLocalization","when","Deferred","Store","DataSource","normalizeDataSourceOptions","equalByValue","filterUtils","USER_STATE_FIELD_NAMES_15_1","USER_STATE_FIELD_NAMES","concat","IGNORE_COLUMN_OPTION_NAMES","visibleWidth","bestFitWidth","bufferedFilterValue","COMMAND_EXPAND_CLASS","MAX_SAFE_INTEGER","Number","GROUP_COMMAND_COLUMN_NAME","regExp","globalColumnId","columnsControllerModule","defaultOptions","commonColumnSettings","allowFiltering","allowHiding","allowSorting","allowEditing","encodeHtml","trueText","format","falseText","allowColumnReordering","allowColumnResizing","columnResizingMode","columnMinWidth","columnWidth","adaptColumnWidthByRatio","columns","regenerateColumnsByVisibleItems","customizeColumns","dateSerializationFormat","controllers","Controller","inherit","DEFAULT_COLUMN_OPTIONS","visible","showInColumnChooser","DATATYPE_OPERATIONS","number","string","date","datetime","COLUMN_INDEX_OPTIONS","visibleIndex","groupIndex","grouped","sortIndex","sortOrder","setFilterOperationsAsDefaultValues","column","filterOperations","defaultFilterOperations","createColumn","that","columnOptions","userStateColumnOptions","bandColumn","commonColumnOptions","dataField","setName","result","command","getCommonSettings","name","calculatedColumnOptions","_createCalculatedColumnOptions","headerId","selector","createColumnsFromOptions","columnsOptions","index","_columnsUserState","checkUserStateColumn","ownerBand","push","hasColumns","getParentBandColumns","columnIndex","columnParentByIndex","parent","unshift","_getChildrenByBandColumn","columnChildrenByIndex","recursive","children","i","length","showWhenGrouped","isBand","getColumnFullPath","bandColumnsCache","getBandColumnsCache","callbackFilter","item","isPlain","_columns","indexOf","filter","join","calculateColspan","columnID","colspan","getChildrenByBandColumn","_","getValueDataType","value","dataType","getSerializationFormat","getDateSerializationFormat","updateSerializers","options","deserializeValue","isDateType","deserializeDate","serializeValue","serializeDate","serializationFormat","parsedValue","parseFloat","isNaN","target","toString","customizeTextForBooleanDataType","e","valueText","getCustomizeTextByDataType","updateColumnIndexes","_commandColumns","updateColumnGroupIndexes","currentColumn","getColumnIndexByVisibleIndex","location","rowIndex","getGroupColumns","getChooserColumns","getVisibleColumns","col","userStateColumn","applyUserState","columnsUserState","ignoreColumnOptionNames","_ignoreColumnOptionNames","columnCountById","resultColumns","allColumnsHaveState","userStateColumnIndexes","userStateColumnIndex","applyFieldsState","fieldName","includes","defaultSelectedFilterOperation","findUserStateColumn","id","count","j","_hasUserState","initialIndex","hasAddedBands","columnUserState","added","assignColumns","updateIndexes","isSortOrderValid","resetBandColumnsCache","bandedColumns","parentBandColumns","resetColumnsCache","_previousColumns","updateColumnDataTypes","updateColumnChanges","changeType","optionName","columnChanges","_columnChanges","optionNames","changeTypes","split","fireColumnsChanged","onColumnsChanging","option","reinitOptionNames","isInitialized","_updateLockCount","component","some","_reinitAfterLookupChanges","lookup","reinit","columnsChanged","fire","updateSortOrderWhenGrouping","prevGroupIndex","columnWasGrouped","lastSortOrder","sortMode","sortedByAnotherColumn","fireOptionChanged","prevValue","fullOptionName","fullOptionPath","_skipProcessingColumnsChange","_notifyOptionChanged","columnOptionCore","notFireEvent","optionGetter","initialColumn","arguments","functionsAsIs","optionSetter","_checkColumns","getColumnByPath","defaultSetCellValue","data","path","dotCount","isCustomCommandColumn","commandColumn","getFixedPosition","rtlEnabled","fixedPosition","processExpandColumns","expandColumns","customColumnIndex","rowCount","getRowCount","rowspan","expandColumnsByType","forEach","expandColumn","apply","splice","numberToString","digitsCount","str","mergeColumns","commandColumns","needToExtend","commandColumnIndex","slice","isColumnFixing","_isColumnFixing","defaultCommandColumns","fixed","getCommandColumnIndex","reduce","columnType","allowFixing","allowReordering","isColumnFixed","_bandColumnsCache","findColumn","identifier","identifierOptionName","substr","members","_getExpandColumnOptions","width","cssClass","allowGrouping","allowResizing","_getFirstItems","dataSource","groupsCount","items","normalizeSortingInfo","group","getFirstItemsCore","childItems","collapsedItems","_endUpdateCore","init","isApplyingUserState","_isColumnsFromOptions","addCommandColumn","_dataSourceApplied","applyDataSource","_dataSource","callbackNames","columnIndexes","replace","parseInt","optionChanged","args","needUpdateRequireResize","handled","previousValue","Array","isArray","fullName","_columnOptionChanged","_updateRequireResize","callBase","columnOptionValue","columnOptionName","columnOption","_requireResize","publicMethods","forceApplying","isDataSourceLoaded","isLoaded","_dataSourceColumnsCount","columnsFromDataSource","firstItems","processedFields","isWrapped","updateColumns","isAllDataTypesDefined","reject","promise","reset","_visibleColumns","_fixedColumns","_rowCount","getUserState","isDataSourceApplied","groupingOptions","groupPanelOptions","minWidth","autoExpandGroup","autoExpandAll","allowCollapsing","allowColumnDragging","contextMenuEnabled","isColumnOptionUsed","checkSerializers","calculateCellValue","defaultCalculateCellValue","getColumns","isBandColumnsUsed","_shouldReturnVisibleColumns","_compileVisibleColumns","_compileVisibleColumnsCore","getFixedColumns","_getFixedColumnsCore","getFilteringColumns","allowHeaderFiltering","field","getColumnIndexOffset","transparentColumn","transparentColspan","notFixedColumnCount","transparentColumnIndex","lastFixedPosition","visibleColumns","prevColumn","newColumn","_getExpandColumnsCore","getExpandColumns","firstGroupColumn","isFixedFirstGroupColumn","cellTemplate","headerCellTemplate","parentIndex","_isColumnVisible","isParentColumnVisible","rowspanGroupColumns","rowspanExpandColumns","positiveIndexedColumns","negativeIndexedColumns","notGroupedColumnsCount","isFixedToEnd","columnDigitsCount","indexedColumns","firstPositiveIndexColumn","columnsByFixing","columnsByVisibleIndex","call","getDataColumns","bandColumnID","getInvisibleColumns","bandColumnIndex","hiddenColumnsByBand","getAllColumns","columnChooserColumns","sign","sort","column1","column2","caption1","caption","caption2","localeCompare","allowMoveColumn","fromVisibleIndex","toVisibleIndex","sourceLocation","targetLocation","sourceColumn","moveColumn","fromIndex","toIndex","targetGroupIndex","groupColumns","Math","max","targetColumn","isVisible","changeSortOrder","sortingOptions","sortingMode","mode","needResetSorting","getSortDataSourceParameters","useLocalSelector","sortColumns","sortItem","calculateSortValue","displayField","calculateDisplayValue","desc","sortingMethod","compare","bind","getGroupDataSourceParameters","calculateGroupValue","groupItem","isExpanded","refresh","updateNewLookupsOnly","deferreds","valueMap","update","done","_updateColumnOptions","originalCallback","calculateCallbackName","calculateCallback","context","displayValueMap","alignment","isRTL","getFormatByDataType","customizeText","defaultFilterOperation","showEditorAlways","isColumnDataTypesUpdated","lookupDataType","valueDataType","getDisplayValue","_customizeColumns","hasOwnerBand","updateSortingGrouping","sortParameters","groupParameters","filterParameters","lastLoadOptions","always","_updateChanges","sorting","grouping","filtering","parameters","equalSortParameters","dataController","getController","equalFilterParameters","getCombinedFilter","fromDataSource","isColumnsChanged","updateSortGroupParameterIndexes","indexParameterName","columnsGroupParameters","columnsSortParameters","groupingChanged","groupExpandingChanged","updateFilter","remoteFiltering","filterValue","forceIsoDateParsing","selectedFilterOperation","columnCount","clearSorting","beginUpdate","endUpdate","clearGrouping","getVisibleIndex","getVisibleIndexByColumn","visibleColumn","getVisibleColumnIndex","addColumn","deleteColumn","childIndexes","handleStateField","setUserState","state","isFilterPanelHidden","usedNames","hasEditableColumnWithoutName","duplicatedNames","_column$columns","isEditable","setCellValue","log","getter","skipDeserialization","parseValue","text","parse","formattedValue","formattedValueWithDefaultFormat","trim","calculateFilterExpression","defaultCalculateFilterExpression","createFilterExpression","userDataType","valueExpr","updateValueMap","calculateValue","displayExpr","displayValue","dataSourceOptions","paginate","load","resizedCallbacks","resized","add","defaultOptionName","charAt","toUpperCase","parents","invisibleParents","getRowIndex","alwaysGetRowIndex","onlyVisibleDirectChildren","isParentBandColumn","bandColumns","getColumnId","getHeaderContentAlignment","columnAlignment"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_controller.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.columns_controller.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport Callbacks from \"../../core/utils/callbacks\";\r\nimport variableWrapper from \"../../core/utils/variable_wrapper\";\r\nimport {\r\n    compileGetter,\r\n    compileSetter\r\n} from \"../../core/utils/data\";\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isNumeric,\r\n    isFunction,\r\n    isObject,\r\n    isPlainObject,\r\n    type\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    getDefaultAlignment\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    normalizeIndexes\r\n} from \"../../core/utils/array\";\r\nimport config from \"../../core/config\";\r\nimport {\r\n    orderEach,\r\n    deepExtendArraySafe\r\n} from \"../../core/utils/object\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    captionize\r\n} from \"../../core/utils/inflector\";\r\nimport dateSerialization from \"../../core/utils/date_serialization\";\r\nimport numberLocalization from \"../../localization/number\";\r\nimport dateLocalization from \"../../localization/date\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport Store from \"../../data/abstract_store\";\r\nimport {\r\n    DataSource\r\n} from \"../../data/data_source/data_source\";\r\nimport {\r\n    normalizeDataSourceOptions\r\n} from \"../../data/data_source/utils\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport filterUtils from \"../shared/filtering\";\r\nvar USER_STATE_FIELD_NAMES_15_1 = [\"filterValues\", \"filterType\", \"fixed\", \"fixedPosition\"];\r\nvar USER_STATE_FIELD_NAMES = [\"visibleIndex\", \"dataField\", \"name\", \"dataType\", \"width\", \"visible\", \"sortOrder\", \"lastSortOrder\", \"sortIndex\", \"groupIndex\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"added\"].concat(USER_STATE_FIELD_NAMES_15_1);\r\nvar IGNORE_COLUMN_OPTION_NAMES = {\r\n    visibleWidth: true,\r\n    bestFitWidth: true,\r\n    bufferedFilterValue: true\r\n};\r\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\r\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\r\nvar GROUP_COMMAND_COLUMN_NAME = \"groupExpand\";\r\nvar regExp = /columns\\[(\\d+)\\]\\.?/gi;\r\nvar globalColumnId = 1;\r\nexport var columnsControllerModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            commonColumnSettings: {\r\n                allowFiltering: true,\r\n                allowHiding: true,\r\n                allowSorting: true,\r\n                allowEditing: true,\r\n                encodeHtml: true,\r\n                trueText: messageLocalization.format(\"dxDataGrid-trueText\"),\r\n                falseText: messageLocalization.format(\"dxDataGrid-falseText\")\r\n            },\r\n            allowColumnReordering: false,\r\n            allowColumnResizing: false,\r\n            columnResizingMode: \"nextColumn\",\r\n            columnMinWidth: void 0,\r\n            columnWidth: void 0,\r\n            adaptColumnWidthByRatio: true,\r\n            columns: void 0,\r\n            regenerateColumnsByVisibleItems: false,\r\n            customizeColumns: null,\r\n            dateSerializationFormat: void 0\r\n        }\r\n    },\r\n    controllers: {\r\n        columns: modules.Controller.inherit(function() {\r\n            var DEFAULT_COLUMN_OPTIONS = {\r\n                visible: true,\r\n                showInColumnChooser: true\r\n            };\r\n            var DATATYPE_OPERATIONS = {\r\n                number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\r\n                string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\"],\r\n                date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\r\n                datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"]\r\n            };\r\n            var COLUMN_INDEX_OPTIONS = {\r\n                visibleIndex: true,\r\n                groupIndex: true,\r\n                grouped: true,\r\n                sortIndex: true,\r\n                sortOrder: true\r\n            };\r\n            var setFilterOperationsAsDefaultValues = function(column) {\r\n                column.filterOperations = column.defaultFilterOperations\r\n            };\r\n            var createColumn = function(that, columnOptions, userStateColumnOptions, bandColumn) {\r\n                var commonColumnOptions = {};\r\n                if (columnOptions) {\r\n                    if (isString(columnOptions)) {\r\n                        columnOptions = {\r\n                            dataField: columnOptions\r\n                        }\r\n                    }\r\n                    that.setName(columnOptions);\r\n                    var result = {};\r\n                    if (columnOptions.command) {\r\n                        result = deepExtendArraySafe(commonColumnOptions, columnOptions)\r\n                    } else {\r\n                        commonColumnOptions = that.getCommonSettings(columnOptions);\r\n                        if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {\r\n                            columnOptions = extend({}, columnOptions, {\r\n                                dataField: userStateColumnOptions.dataField\r\n                            })\r\n                        }\r\n                        var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);\r\n                        if (!columnOptions.type) {\r\n                            result = {\r\n                                headerId: \"dx-col-\".concat(globalColumnId++)\r\n                            }\r\n                        }\r\n                        result = deepExtendArraySafe(result, DEFAULT_COLUMN_OPTIONS);\r\n                        deepExtendArraySafe(result, commonColumnOptions);\r\n                        deepExtendArraySafe(result, calculatedColumnOptions);\r\n                        deepExtendArraySafe(result, columnOptions);\r\n                        deepExtendArraySafe(result, {\r\n                            selector: null\r\n                        })\r\n                    }\r\n                    if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {\r\n                        setFilterOperationsAsDefaultValues(result)\r\n                    }\r\n                    return result\r\n                }\r\n            };\r\n            var createColumnsFromOptions = function createColumnsFromOptions(that, columnsOptions, bandColumn) {\r\n                var result = [];\r\n                if (columnsOptions) {\r\n                    each(columnsOptions, (function(index, columnOptions) {\r\n                        var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index]) && that._columnsUserState[index];\r\n                        var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);\r\n                        if (column) {\r\n                            if (bandColumn) {\r\n                                column.ownerBand = bandColumn\r\n                            }\r\n                            result.push(column);\r\n                            if (column.columns) {\r\n                                result = result.concat(createColumnsFromOptions(that, column.columns, column));\r\n                                delete column.columns;\r\n                                column.hasColumns = true\r\n                            }\r\n                        }\r\n                    }))\r\n                }\r\n                return result\r\n            };\r\n            var getParentBandColumns = function(columnIndex, columnParentByIndex) {\r\n                var result = [];\r\n                var parent = columnParentByIndex[columnIndex];\r\n                while (parent) {\r\n                    result.unshift(parent);\r\n                    columnIndex = parent.index;\r\n                    parent = columnParentByIndex[columnIndex]\r\n                }\r\n                return result\r\n            };\r\n            var _getChildrenByBandColumn = function(columnIndex, columnChildrenByIndex, recursive) {\r\n                var result = [];\r\n                var children = columnChildrenByIndex[columnIndex];\r\n                if (children) {\r\n                    for (var i = 0; i < children.length; i++) {\r\n                        var column = children[i];\r\n                        if (!isDefined(column.groupIndex) || column.showWhenGrouped) {\r\n                            result.push(column);\r\n                            if (recursive && column.isBand) {\r\n                                result = result.concat(_getChildrenByBandColumn(column.index, columnChildrenByIndex, recursive))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return result\r\n            };\r\n            var getColumnFullPath = function(that, column) {\r\n                var result = [];\r\n                var columns;\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var callbackFilter = function(item) {\r\n                    return item.ownerBand === column.ownerBand\r\n                };\r\n                if (bandColumnsCache.isPlain) {\r\n                    var columnIndex = that._columns.indexOf(column);\r\n                    if (columnIndex >= 0) {\r\n                        result = [\"columns[\".concat(columnIndex, \"]\")]\r\n                    }\r\n                } else {\r\n                    columns = that._columns.filter(callbackFilter);\r\n                    while (columns.length && -1 !== columns.indexOf(column)) {\r\n                        result.unshift(\"columns[\".concat(columns.indexOf(column), \"]\"));\r\n                        column = bandColumnsCache.columnParentByIndex[column.index];\r\n                        columns = column ? that._columns.filter(callbackFilter) : []\r\n                    }\r\n                }\r\n                return result.join(\".\")\r\n            };\r\n            var calculateColspan = function calculateColspan(that, columnID) {\r\n                var colspan = 0;\r\n                var columns = that.getChildrenByBandColumn(columnID, true);\r\n                each(columns, (function(_, column) {\r\n                    if (column.isBand) {\r\n                        column.colspan = column.colspan || calculateColspan(that, column.index);\r\n                        colspan += column.colspan || 1\r\n                    } else {\r\n                        colspan += 1\r\n                    }\r\n                }));\r\n                return colspan\r\n            };\r\n            var getValueDataType = function(value) {\r\n                var dataType = type(value);\r\n                if (\"string\" !== dataType && \"boolean\" !== dataType && \"number\" !== dataType && \"date\" !== dataType && \"object\" !== dataType) {\r\n                    dataType = void 0\r\n                }\r\n                return dataType\r\n            };\r\n            var getSerializationFormat = function(dataType, value) {\r\n                switch (dataType) {\r\n                    case \"date\":\r\n                    case \"datetime\":\r\n                        return dateSerialization.getDateSerializationFormat(value);\r\n                    case \"number\":\r\n                        if (isString(value)) {\r\n                            return \"string\"\r\n                        }\r\n                        if (isNumeric(value)) {\r\n                            return null\r\n                        }\r\n                }\r\n            };\r\n            var updateSerializers = function(options, dataType) {\r\n                if (!options.deserializeValue) {\r\n                    if (gridCoreUtils.isDateType(dataType)) {\r\n                        options.deserializeValue = function(value) {\r\n                            return dateSerialization.deserializeDate(value)\r\n                        };\r\n                        options.serializeValue = function(value) {\r\n                            return isString(value) ? value : dateSerialization.serializeDate(value, this.serializationFormat)\r\n                        }\r\n                    }\r\n                    if (\"number\" === dataType) {\r\n                        options.deserializeValue = function(value) {\r\n                            var parsedValue = parseFloat(value);\r\n                            return isNaN(parsedValue) ? value : parsedValue\r\n                        };\r\n                        options.serializeValue = function(value, target) {\r\n                            if (\"filter\" === target) {\r\n                                return value\r\n                            }\r\n                            return isDefined(value) && \"string\" === this.serializationFormat ? value.toString() : value\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var customizeTextForBooleanDataType = function(e) {\r\n                if (true === e.value) {\r\n                    return this.trueText || \"true\"\r\n                } else if (false === e.value) {\r\n                    return this.falseText || \"false\"\r\n                } else {\r\n                    return e.valueText || \"\"\r\n                }\r\n            };\r\n            var getCustomizeTextByDataType = function(dataType) {\r\n                if (\"boolean\" === dataType) {\r\n                    return customizeTextForBooleanDataType\r\n                }\r\n            };\r\n            var updateColumnIndexes = function(that) {\r\n                each(that._columns, (function(index, column) {\r\n                    column.index = index\r\n                }));\r\n                each(that._columns, (function(index, column) {\r\n                    if (isObject(column.ownerBand)) {\r\n                        column.ownerBand = column.ownerBand.index\r\n                    }\r\n                }));\r\n                each(that._commandColumns, (function(index, column) {\r\n                    column.index = -(index + 1)\r\n                }))\r\n            };\r\n            var updateColumnGroupIndexes = function(that, currentColumn) {\r\n                normalizeIndexes(that._columns, \"groupIndex\", currentColumn, (function(column) {\r\n                    var grouped = column.grouped;\r\n                    delete column.grouped;\r\n                    return grouped\r\n                }))\r\n            };\r\n            var getColumnIndexByVisibleIndex = function(that, visibleIndex, location) {\r\n                var rowIndex = isObject(visibleIndex) ? visibleIndex.rowIndex : null;\r\n                var columns = \"group\" === location ? that.getGroupColumns() : \"columnChooser\" === location ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);\r\n                var column;\r\n                visibleIndex = isObject(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;\r\n                column = columns[visibleIndex];\r\n                if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                    column = that._columns.filter(col => column.type === col.type)[0] || column\r\n                }\r\n                return column && isDefined(column.index) ? column.index : -1\r\n            };\r\n\r\n            function checkUserStateColumn(column, userStateColumn) {\r\n                return column && userStateColumn && userStateColumn.name === (column.name || column.dataField) && (userStateColumn.dataField === column.dataField || column.name)\r\n            }\r\n            var applyUserState = function(that) {\r\n                var columnsUserState = that._columnsUserState;\r\n                var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];\r\n                var columns = that._columns;\r\n                var columnCountById = {};\r\n                var resultColumns = [];\r\n                var allColumnsHaveState = true;\r\n                var userStateColumnIndexes = [];\r\n                var column;\r\n                var userStateColumnIndex;\r\n                var i;\r\n\r\n                function applyFieldsState(column, userStateColumn) {\r\n                    if (!userStateColumn) {\r\n                        return\r\n                    }\r\n                    for (var index = 0; index < USER_STATE_FIELD_NAMES.length; index++) {\r\n                        var fieldName = USER_STATE_FIELD_NAMES[index];\r\n                        if (ignoreColumnOptionNames.includes(fieldName)) {\r\n                            continue\r\n                        }\r\n                        if (\"dataType\" === fieldName) {\r\n                            column[fieldName] = column[fieldName] || userStateColumn[fieldName]\r\n                        } else if (USER_STATE_FIELD_NAMES_15_1.includes(fieldName)) {\r\n                            if (fieldName in userStateColumn) {\r\n                                column[fieldName] = userStateColumn[fieldName]\r\n                            }\r\n                        } else {\r\n                            if (\"selectedFilterOperation\" === fieldName && userStateColumn[fieldName]) {\r\n                                column.defaultSelectedFilterOperation = column[fieldName] || null\r\n                            }\r\n                            column[fieldName] = userStateColumn[fieldName]\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function findUserStateColumn(columnsUserState, column) {\r\n                    var id = column.name || column.dataField;\r\n                    var count = columnCountById[id] || 0;\r\n                    for (var j = 0; j < columnsUserState.length; j++) {\r\n                        if (checkUserStateColumn(column, columnsUserState[j])) {\r\n                            if (count) {\r\n                                count--\r\n                            } else {\r\n                                columnCountById[id] = columnCountById[id] || 0;\r\n                                columnCountById[id]++;\r\n                                return j\r\n                            }\r\n                        }\r\n                    }\r\n                    return -1\r\n                }\r\n                if (columnsUserState) {\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        userStateColumnIndex = findUserStateColumn(columnsUserState, columns[i]);\r\n                        allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;\r\n                        userStateColumnIndexes.push(userStateColumnIndex)\r\n                    }\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        column = columns[i];\r\n                        userStateColumnIndex = userStateColumnIndexes[i];\r\n                        if (that._hasUserState || allColumnsHaveState) {\r\n                            applyFieldsState(column, columnsUserState[userStateColumnIndex])\r\n                        }\r\n                        if (userStateColumnIndex >= 0 && isDefined(columnsUserState[userStateColumnIndex].initialIndex)) {\r\n                            resultColumns[userStateColumnIndex] = column\r\n                        } else {\r\n                            resultColumns.push(column)\r\n                        }\r\n                    }\r\n                    var hasAddedBands = false;\r\n                    for (i = 0; i < columnsUserState.length; i++) {\r\n                        var columnUserState = columnsUserState[i];\r\n                        if (columnUserState.added && findUserStateColumn(columns, columnUserState) < 0) {\r\n                            column = createColumn(that, columnUserState.added);\r\n                            applyFieldsState(column, columnUserState);\r\n                            resultColumns.push(column);\r\n                            if (columnUserState.added.columns) {\r\n                                hasAddedBands = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (hasAddedBands) {\r\n                        updateColumnIndexes(that);\r\n                        resultColumns = createColumnsFromOptions(that, resultColumns)\r\n                    }\r\n                    assignColumns(that, resultColumns)\r\n                }\r\n            };\r\n            var updateIndexes = function(that, column) {\r\n                updateColumnIndexes(that);\r\n                updateColumnGroupIndexes(that, column);\r\n                ! function(that, currentColumn) {\r\n                    each(that._columns, (function(index, column) {\r\n                        if (isDefined(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {\r\n                            delete column.sortIndex\r\n                        }\r\n                    }));\r\n                    normalizeIndexes(that._columns, \"sortIndex\", currentColumn, (function(column) {\r\n                        return !isDefined(column.groupIndex) && isSortOrderValid(column.sortOrder)\r\n                    }))\r\n                }(that, column);\r\n                resetBandColumnsCache(that);\r\n                ! function(that, currentColumn) {\r\n                    var column;\r\n                    var result = [];\r\n                    var bandColumnsCache = that.getBandColumnsCache();\r\n                    var bandedColumns = [];\r\n                    var columns = that._columns.filter(column => !column.command);\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        column = columns[i];\r\n                        var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);\r\n                        if (parentBandColumns.length) {\r\n                            bandedColumns.push(column)\r\n                        } else {\r\n                            result.push(column)\r\n                        }\r\n                    }\r\n                    normalizeIndexes(bandedColumns, \"visibleIndex\", currentColumn);\r\n                    normalizeIndexes(result, \"visibleIndex\", currentColumn)\r\n                }(that, column)\r\n            };\r\n            var resetColumnsCache = function(that) {\r\n                that.resetColumnsCache()\r\n            };\r\n\r\n            function assignColumns(that, columns) {\r\n                that._previousColumns = that._columns;\r\n                that._columns = columns;\r\n                resetColumnsCache(that);\r\n                that.updateColumnDataTypes()\r\n            }\r\n            var updateColumnChanges = function(that, changeType, optionName, columnIndex) {\r\n                var columnChanges = that._columnChanges || {\r\n                    optionNames: {\r\n                        length: 0\r\n                    },\r\n                    changeTypes: {\r\n                        length: 0\r\n                    },\r\n                    columnIndex: columnIndex\r\n                };\r\n                optionName = optionName || \"all\";\r\n                optionName = optionName.split(\".\")[0];\r\n                var changeTypes = columnChanges.changeTypes;\r\n                if (changeType && !changeTypes[changeType]) {\r\n                    changeTypes[changeType] = true;\r\n                    changeTypes.length++\r\n                }\r\n                var optionNames = columnChanges.optionNames;\r\n                if (optionName && !optionNames[optionName]) {\r\n                    optionNames[optionName] = true;\r\n                    optionNames.length++\r\n                }\r\n                if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {\r\n                    delete columnChanges.columnIndex\r\n                }\r\n                that._columnChanges = columnChanges;\r\n                resetColumnsCache(that)\r\n            };\r\n            var fireColumnsChanged = function(that) {\r\n                var onColumnsChanging = that.option(\"onColumnsChanging\");\r\n                var columnChanges = that._columnChanges;\r\n                var reinitOptionNames = [\"dataField\", \"lookup\", \"dataType\", \"columns\"];\r\n                if (that.isInitialized() && !that._updateLockCount && columnChanges) {\r\n                    if (onColumnsChanging) {\r\n                        that._updateLockCount++;\r\n                        onColumnsChanging(extend({\r\n                            component: that.component\r\n                        }, columnChanges));\r\n                        that._updateLockCount--\r\n                    }\r\n                    that._columnChanges = void 0;\r\n                    if (options = columnChanges.optionNames, options && reinitOptionNames.some(name => options[name])) {\r\n                        that._reinitAfterLookupChanges = null === columnChanges || void 0 === columnChanges ? void 0 : columnChanges.optionNames.lookup;\r\n                        that.reinit();\r\n                        that._reinitAfterLookupChanges = void 0\r\n                    } else {\r\n                        that.columnsChanged.fire(columnChanges)\r\n                    }\r\n                }\r\n                var options\r\n            };\r\n            var updateSortOrderWhenGrouping = function(that, column, groupIndex, prevGroupIndex) {\r\n                var columnWasGrouped = prevGroupIndex >= 0;\r\n                if (groupIndex >= 0) {\r\n                    if (!columnWasGrouped) {\r\n                        column.lastSortOrder = column.sortOrder\r\n                    }\r\n                } else {\r\n                    var sortMode = that.option(\"sorting.mode\");\r\n                    var sortOrder = column.lastSortOrder;\r\n                    if (\"single\" === sortMode) {\r\n                        var sortedByAnotherColumn = that._columns.some(col => col !== column && isDefined(col.sortIndex));\r\n                        if (sortedByAnotherColumn) {\r\n                            sortOrder = void 0\r\n                        }\r\n                    }\r\n                    column.sortOrder = sortOrder\r\n                }\r\n            };\r\n            var fireOptionChanged = function(that, options) {\r\n                var value = options.value;\r\n                var optionName = options.optionName;\r\n                var prevValue = options.prevValue;\r\n                var fullOptionName = options.fullOptionName;\r\n                var fullOptionPath = \"\".concat(fullOptionName, \".\").concat(optionName);\r\n                if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {\r\n                    that._skipProcessingColumnsChange = fullOptionPath;\r\n                    that.component._notifyOptionChanged(fullOptionPath, value, prevValue);\r\n                    that._skipProcessingColumnsChange = false\r\n                }\r\n            };\r\n            var columnOptionCore = function(that, column, optionName, value, notFireEvent) {\r\n                var optionGetter = compileGetter(optionName);\r\n                var columnIndex = column.index;\r\n                var columns;\r\n                var changeType;\r\n                var initialColumn;\r\n                if (3 === arguments.length) {\r\n                    return optionGetter(column, {\r\n                        functionsAsIs: true\r\n                    })\r\n                }\r\n                var prevValue = optionGetter(column, {\r\n                    functionsAsIs: true\r\n                });\r\n                if (!equalByValue(prevValue, value)) {\r\n                    if (\"groupIndex\" === optionName || \"calculateGroupValue\" === optionName) {\r\n                        changeType = \"grouping\";\r\n                        updateSortOrderWhenGrouping(that, column, value, prevValue)\r\n                    } else if (\"sortIndex\" === optionName || \"sortOrder\" === optionName || \"calculateSortValue\" === optionName) {\r\n                        changeType = \"sorting\"\r\n                    } else {\r\n                        changeType = \"columns\"\r\n                    }\r\n                    var optionSetter = compileSetter(optionName);\r\n                    optionSetter(column, value, {\r\n                        functionsAsIs: true\r\n                    });\r\n                    var fullOptionName = getColumnFullPath(that, column);\r\n                    if (COLUMN_INDEX_OPTIONS[optionName]) {\r\n                        updateIndexes(that, column);\r\n                        value = optionGetter(column)\r\n                    }\r\n                    if (\"name\" === optionName || \"allowEditing\" === optionName) {\r\n                        that._checkColumns()\r\n                    }\r\n                    if (!isDefined(prevValue) && !isDefined(value) && 0 !== optionName.indexOf(\"buffer\")) {\r\n                        notFireEvent = true\r\n                    }\r\n                    if (!notFireEvent) {\r\n                        if (!USER_STATE_FIELD_NAMES.includes(optionName) && \"visibleWidth\" !== optionName) {\r\n                            columns = that.option(\"columns\");\r\n                            initialColumn = that.getColumnByPath(fullOptionName, columns);\r\n                            if (isString(initialColumn)) {\r\n                                initialColumn = columns[columnIndex] = {\r\n                                    dataField: initialColumn\r\n                                }\r\n                            }\r\n                            if (initialColumn && checkUserStateColumn(initialColumn, column)) {\r\n                                optionSetter(initialColumn, value, {\r\n                                    functionsAsIs: true\r\n                                })\r\n                            }\r\n                        }\r\n                        updateColumnChanges(that, changeType, optionName, columnIndex)\r\n                    } else {\r\n                        resetColumnsCache(that)\r\n                    }\r\n                    fullOptionName && fireOptionChanged(that, {\r\n                        fullOptionName: fullOptionName,\r\n                        optionName: optionName,\r\n                        value: value,\r\n                        prevValue: prevValue\r\n                    })\r\n                }\r\n            };\r\n\r\n            function isSortOrderValid(sortOrder) {\r\n                return \"asc\" === sortOrder || \"desc\" === sortOrder\r\n            }\r\n            var defaultSetCellValue = function(data, value) {\r\n                if (!this.dataField) {\r\n                    return\r\n                }\r\n                var path = this.dataField.split(\".\");\r\n                var dotCount = path.length - 1;\r\n                if (this.serializeValue) {\r\n                    value = this.serializeValue(value)\r\n                }\r\n                for (var i = 0; i < dotCount; i++) {\r\n                    var name = path[i];\r\n                    data = data[name] = data[name] || {}\r\n                }\r\n                data[path[dotCount]] = value\r\n            };\r\n            var isCustomCommandColumn = (that, commandColumn) => !!that._columns.filter(column => column.type === commandColumn.type).length;\r\n            var getFixedPosition = function(that, column) {\r\n                var rtlEnabled = that.option(\"rtlEnabled\");\r\n                if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {\r\n                    return rtlEnabled ? \"right\" : \"left\"\r\n                }\r\n                return column.fixedPosition\r\n            };\r\n            var processExpandColumns = function(columns, expandColumns, type, columnIndex) {\r\n                var customColumnIndex;\r\n                var rowCount = this.getRowCount();\r\n                var rowspan = columns[columnIndex] && columns[columnIndex].rowspan;\r\n                var expandColumnsByType = expandColumns.filter(column => column.type === type);\r\n                columns.forEach((column, index) => {\r\n                    if (column.type === type) {\r\n                        customColumnIndex = index;\r\n                        rowspan = columns[index + 1] ? columns[index + 1].rowspan : rowCount\r\n                    }\r\n                });\r\n                if (rowspan > 1) {\r\n                    expandColumnsByType = map(expandColumnsByType, (function(expandColumn) {\r\n                        return extend({}, expandColumn, {\r\n                            rowspan: rowspan\r\n                        })\r\n                    }))\r\n                }\r\n                expandColumnsByType.unshift.apply(expandColumnsByType, isDefined(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);\r\n                columns.splice.apply(columns, expandColumnsByType);\r\n                return rowspan || 1\r\n            };\r\n            var numberToString = function(number, digitsCount) {\r\n                var str = number ? number.toString() : \"0\";\r\n                while (str.length < digitsCount) {\r\n                    str = \"0\" + str\r\n                }\r\n                return str\r\n            };\r\n            var mergeColumns = (that, columns, commandColumns, needToExtend) => {\r\n                var column;\r\n                var commandColumnIndex;\r\n                var result = columns.slice().map(column => extend({}, column));\r\n                var isColumnFixing = that._isColumnFixing();\r\n                var defaultCommandColumns = commandColumns.slice().map(column => extend({\r\n                    fixed: isColumnFixing\r\n                }, column));\r\n                var getCommandColumnIndex = column => commandColumns.reduce((result, commandColumn, index) => {\r\n                    var columnType = needToExtend && column.type === GROUP_COMMAND_COLUMN_NAME ? \"expand\" : column.type;\r\n                    return commandColumn.type === columnType || commandColumn.command === column.command ? index : result\r\n                }, -1);\r\n                var callbackFilter = commandColumn => commandColumn.command !== commandColumns[commandColumnIndex].command;\r\n                for (var i = 0; i < columns.length; i++) {\r\n                    column = columns[i];\r\n                    commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;\r\n                    if (commandColumnIndex >= 0) {\r\n                        if (needToExtend) {\r\n                            result[i] = extend({\r\n                                fixed: isColumnFixing\r\n                            }, commandColumns[commandColumnIndex], column);\r\n                            if (column.type !== GROUP_COMMAND_COLUMN_NAME) {\r\n                                defaultCommandColumns = defaultCommandColumns.filter(callbackFilter)\r\n                            }\r\n                        } else {\r\n                            var columnOptions = {\r\n                                visibleIndex: column.visibleIndex,\r\n                                index: column.index,\r\n                                headerId: column.headerId,\r\n                                allowFixing: 0 === column.groupIndex,\r\n                                allowReordering: 0 === column.groupIndex,\r\n                                groupIndex: column.groupIndex\r\n                            };\r\n                            result[i] = extend({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions)\r\n                        }\r\n                    }\r\n                }\r\n                if (columns.length && needToExtend && defaultCommandColumns.length) {\r\n                    result = result.concat(defaultCommandColumns)\r\n                }\r\n                return result\r\n            };\r\n            var isColumnFixed = (that, column) => isDefined(column.fixed) || !column.type ? column.fixed : that._isColumnFixing();\r\n            var resetBandColumnsCache = that => {\r\n                that._bandColumnsCache = void 0\r\n            };\r\n            var findColumn = (columns, identifier) => {\r\n                var identifierOptionName = isString(identifier) && identifier.substr(0, identifier.indexOf(\":\"));\r\n                var column;\r\n                if (void 0 === identifier) {\r\n                    return\r\n                }\r\n                if (identifierOptionName) {\r\n                    identifier = identifier.substr(identifierOptionName.length + 1)\r\n                }\r\n                if (identifierOptionName) {\r\n                    column = columns.filter(column => \"\" + column[identifierOptionName] === identifier)[0]\r\n                } else {\r\n                    [\"index\", \"name\", \"dataField\", \"caption\"].some(optionName => {\r\n                        column = columns.filter(column => column[optionName] === identifier)[0];\r\n                        return !!column\r\n                    })\r\n                }\r\n                return column\r\n            };\r\n            var members = {\r\n                _getExpandColumnOptions: function() {\r\n                    return {\r\n                        type: \"expand\",\r\n                        command: \"expand\",\r\n                        width: \"auto\",\r\n                        cssClass: COMMAND_EXPAND_CLASS,\r\n                        allowEditing: false,\r\n                        allowGrouping: false,\r\n                        allowSorting: false,\r\n                        allowResizing: false,\r\n                        allowReordering: false,\r\n                        allowHiding: false\r\n                    }\r\n                },\r\n                _getFirstItems: function(dataSource) {\r\n                    var groupsCount;\r\n                    var items = [];\r\n                    if (dataSource && dataSource.items().length > 0) {\r\n                        groupsCount = gridCoreUtils.normalizeSortingInfo(dataSource.group()).length;\r\n                        items = function getFirstItemsCore(items, groupsCount) {\r\n                            if (!items || !groupsCount) {\r\n                                return items\r\n                            }\r\n                            for (var i = 0; i < items.length; i++) {\r\n                                var childItems = getFirstItemsCore(items[i].items || items[i].collapsedItems, groupsCount - 1);\r\n                                if (childItems && childItems.length) {\r\n                                    return childItems\r\n                                }\r\n                            }\r\n                        }(dataSource.items(), groupsCount) || []\r\n                    }\r\n                    return items\r\n                },\r\n                _endUpdateCore: function() {\r\n                    !this._skipProcessingColumnsChange && fireColumnsChanged(this)\r\n                },\r\n                init: function(isApplyingUserState) {\r\n                    var columns = this.option(\"columns\");\r\n                    this._commandColumns = this._commandColumns || [];\r\n                    this._columns = this._columns || [];\r\n                    this._isColumnsFromOptions = !!columns;\r\n                    if (this._isColumnsFromOptions) {\r\n                        assignColumns(this, columns ? createColumnsFromOptions(this, columns) : []);\r\n                        applyUserState(this)\r\n                    } else {\r\n                        assignColumns(this, this._columnsUserState ? createColumnsFromOptions(this, this._columnsUserState) : this._columns)\r\n                    }! function(that) {\r\n                        var options = that._getExpandColumnOptions();\r\n                        that.addCommandColumn(options)\r\n                    }(this);\r\n                    if (this._dataSourceApplied) {\r\n                        this.applyDataSource(this._dataSource, true, isApplyingUserState)\r\n                    } else {\r\n                        updateIndexes(this)\r\n                    }\r\n                    this._checkColumns()\r\n                },\r\n                callbackNames: function() {\r\n                    return [\"columnsChanged\"]\r\n                },\r\n                getColumnByPath: function(path, columns) {\r\n                    var column;\r\n                    var columnIndexes = [];\r\n                    path.replace(regExp, (function(_, columnIndex) {\r\n                        columnIndexes.push(parseInt(columnIndex));\r\n                        return \"\"\r\n                    }));\r\n                    if (columnIndexes.length) {\r\n                        if (columns) {\r\n                            column = columnIndexes.reduce((function(column, index) {\r\n                                return column && column.columns && column.columns[index]\r\n                            }), {\r\n                                columns: columns\r\n                            })\r\n                        } else {\r\n                            column = function(that, columnIndexes) {\r\n                                var result;\r\n                                var columns;\r\n                                var bandColumnsCache = that.getBandColumnsCache();\r\n                                var callbackFilter = function(column) {\r\n                                    var ownerBand = result ? result.index : void 0;\r\n                                    return column.ownerBand === ownerBand\r\n                                };\r\n                                if (bandColumnsCache.isPlain) {\r\n                                    result = that._columns[columnIndexes[0]]\r\n                                } else {\r\n                                    columns = that._columns.filter(callbackFilter);\r\n                                    for (var i = 0; i < columnIndexes.length; i++) {\r\n                                        result = columns[columnIndexes[i]];\r\n                                        if (result) {\r\n                                            columns = that._columns.filter(callbackFilter)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                return result\r\n                            }(this, columnIndexes)\r\n                        }\r\n                    }\r\n                    return column\r\n                },\r\n                optionChanged: function(args) {\r\n                    var needUpdateRequireResize;\r\n                    switch (args.name) {\r\n                        case \"adaptColumnWidthByRatio\":\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"dataSource\":\r\n                            if (args.value !== args.previousValue && !this.option(\"columns\") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {\r\n                                this._columns = []\r\n                            }\r\n                            break;\r\n                        case \"columns\":\r\n                            needUpdateRequireResize = this._skipProcessingColumnsChange;\r\n                            args.handled = true;\r\n                            if (!this._skipProcessingColumnsChange) {\r\n                                if (args.name === args.fullName) {\r\n                                    this._columnsUserState = null;\r\n                                    this._ignoreColumnOptionNames = null;\r\n                                    this.init()\r\n                                } else {\r\n                                    this._columnOptionChanged(args);\r\n                                    needUpdateRequireResize = true\r\n                                }\r\n                            }\r\n                            if (needUpdateRequireResize) {\r\n                                this._updateRequireResize(args)\r\n                            }\r\n                            break;\r\n                        case \"commonColumnSettings\":\r\n                        case \"columnAutoWidth\":\r\n                        case \"allowColumnResizing\":\r\n                        case \"allowColumnReordering\":\r\n                        case \"columnFixing\":\r\n                        case \"grouping\":\r\n                        case \"groupPanel\":\r\n                        case \"regenerateColumnsByVisibleItems\":\r\n                        case \"customizeColumns\":\r\n                        case \"columnHidingEnabled\":\r\n                        case \"dateSerializationFormat\":\r\n                        case \"columnResizingMode\":\r\n                        case \"columnMinWidth\":\r\n                        case \"columnWidth\":\r\n                            args.handled = true;\r\n                            var ignoreColumnOptionNames = \"columnWidth\" === args.fullName && [\"width\"];\r\n                            this.reinit(ignoreColumnOptionNames);\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            this.reinit();\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                _columnOptionChanged: function(args) {\r\n                    var columnOptionValue = {};\r\n                    var column = this.getColumnByPath(args.fullName);\r\n                    var columnOptionName = args.fullName.replace(regExp, \"\");\r\n                    if (column) {\r\n                        if (columnOptionName) {\r\n                            columnOptionValue[columnOptionName] = args.value\r\n                        } else {\r\n                            columnOptionValue = args.value\r\n                        }\r\n                        this._skipProcessingColumnsChange = args.fullName;\r\n                        this.columnOption(column.index, columnOptionValue);\r\n                        this._skipProcessingColumnsChange = false\r\n                    }\r\n                },\r\n                _updateRequireResize: function(args) {\r\n                    var component = this.component;\r\n                    if (\"width\" === args.fullName.replace(regExp, \"\") && component._updateLockCount) {\r\n                        component._requireResize = true\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"addColumn\", \"deleteColumn\", \"columnOption\", \"columnCount\", \"clearSorting\", \"clearGrouping\", \"getVisibleColumns\", \"getVisibleColumnIndex\"]\r\n                },\r\n                applyDataSource: function(dataSource, forceApplying, isApplyingUserState) {\r\n                    var isDataSourceLoaded = dataSource && dataSource.isLoaded();\r\n                    this._dataSource = dataSource;\r\n                    if (!this._dataSourceApplied || 0 === this._dataSourceColumnsCount || forceApplying || this.option(\"regenerateColumnsByVisibleItems\")) {\r\n                        if (isDataSourceLoaded) {\r\n                            if (!this._isColumnsFromOptions) {\r\n                                var columnsFromDataSource = function(that, dataSource) {\r\n                                    var firstItems = that._getFirstItems(dataSource);\r\n                                    var fieldName;\r\n                                    var processedFields = {};\r\n                                    var result = [];\r\n                                    for (var i = 0; i < firstItems.length; i++) {\r\n                                        if (firstItems[i]) {\r\n                                            for (fieldName in firstItems[i]) {\r\n                                                if (!isFunction(firstItems[i][fieldName]) || variableWrapper.isWrapped(firstItems[i][fieldName])) {\r\n                                                    processedFields[fieldName] = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    for (fieldName in processedFields) {\r\n                                        if (0 !== fieldName.indexOf(\"__\")) {\r\n                                            var column = createColumn(that, fieldName);\r\n                                            result.push(column)\r\n                                        }\r\n                                    }\r\n                                    return result\r\n                                }(this, dataSource);\r\n                                if (columnsFromDataSource.length) {\r\n                                    assignColumns(this, columnsFromDataSource);\r\n                                    this._dataSourceColumnsCount = this._columns.length;\r\n                                    applyUserState(this)\r\n                                }\r\n                            }\r\n                            return this.updateColumns(dataSource, forceApplying, isApplyingUserState)\r\n                        } else {\r\n                            this._dataSourceApplied = false;\r\n                            updateIndexes(this)\r\n                        }\r\n                    } else if (isDataSourceLoaded && !this.isAllDataTypesDefined(true) && this.updateColumnDataTypes(dataSource)) {\r\n                        updateColumnChanges(this, \"columns\");\r\n                        fireColumnsChanged(this);\r\n                        return (new Deferred).reject().promise()\r\n                    }\r\n                },\r\n                reset: function() {\r\n                    this._dataSource = null;\r\n                    this._dataSourceApplied = false;\r\n                    this._dataSourceColumnsCount = void 0;\r\n                    this.reinit()\r\n                },\r\n                resetColumnsCache: function() {\r\n                    this._visibleColumns = void 0;\r\n                    this._fixedColumns = void 0;\r\n                    this._rowCount = void 0;\r\n                    resetBandColumnsCache(this)\r\n                },\r\n                reinit: function(ignoreColumnOptionNames) {\r\n                    this._columnsUserState = this.getUserState();\r\n                    this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;\r\n                    this.init();\r\n                    if (ignoreColumnOptionNames) {\r\n                        this._ignoreColumnOptionNames = null\r\n                    }\r\n                },\r\n                isInitialized: function() {\r\n                    return !!this._columns.length || !!this.option(\"columns\")\r\n                },\r\n                isDataSourceApplied: function() {\r\n                    return this._dataSourceApplied\r\n                },\r\n                getCommonSettings: function(column) {\r\n                    var commonColumnSettings = (!column || !column.type) && this.option(\"commonColumnSettings\") || {};\r\n                    var groupingOptions = this.option(\"grouping\") || {};\r\n                    var groupPanelOptions = this.option(\"groupPanel\") || {};\r\n                    return extend({\r\n                        allowFixing: this.option(\"columnFixing.enabled\"),\r\n                        allowResizing: this.option(\"allowColumnResizing\") || void 0,\r\n                        allowReordering: this.option(\"allowColumnReordering\"),\r\n                        minWidth: this.option(\"columnMinWidth\"),\r\n                        width: this.option(\"columnWidth\"),\r\n                        autoExpandGroup: groupingOptions.autoExpandAll,\r\n                        allowCollapsing: groupingOptions.allowCollapsing,\r\n                        allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled\r\n                    }, commonColumnSettings)\r\n                },\r\n                isColumnOptionUsed: function(optionName) {\r\n                    for (var i = 0; i < this._columns.length; i++) {\r\n                        if (this._columns[i][optionName]) {\r\n                            return true\r\n                        }\r\n                    }\r\n                },\r\n                isAllDataTypesDefined: function(checkSerializers) {\r\n                    var columns = this._columns;\r\n                    if (!columns.length) {\r\n                        return false\r\n                    }\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        if (!columns[i].dataField && columns[i].calculateCellValue === columns[i].defaultCalculateCellValue) {\r\n                            continue\r\n                        }\r\n                        if (!columns[i].dataType || checkSerializers && columns[i].deserializeValue && void 0 === columns[i].serializationFormat) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return true\r\n                },\r\n                getColumns: function() {\r\n                    return this._columns\r\n                },\r\n                isBandColumnsUsed: function() {\r\n                    return this.getColumns().some((function(column) {\r\n                        return column.isBand\r\n                    }))\r\n                },\r\n                getGroupColumns: function() {\r\n                    var result = [];\r\n                    each(this._columns, (function() {\r\n                        if (isDefined(this.groupIndex)) {\r\n                            result[this.groupIndex] = this\r\n                        }\r\n                    }));\r\n                    return result\r\n                },\r\n                _shouldReturnVisibleColumns: function() {\r\n                    return true\r\n                },\r\n                _compileVisibleColumns: function(rowIndex) {\r\n                    this._visibleColumns = this._visibleColumns || this._compileVisibleColumnsCore();\r\n                    rowIndex = isDefined(rowIndex) ? rowIndex : this._visibleColumns.length - 1;\r\n                    return this._visibleColumns[rowIndex] || []\r\n                },\r\n                getVisibleColumns: function(rowIndex) {\r\n                    if (!this._shouldReturnVisibleColumns()) {\r\n                        return []\r\n                    }\r\n                    return this._compileVisibleColumns.apply(this, arguments)\r\n                },\r\n                getFixedColumns: function(rowIndex) {\r\n                    this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();\r\n                    rowIndex = isDefined(rowIndex) ? rowIndex : this._fixedColumns.length - 1;\r\n                    return this._fixedColumns[rowIndex] || []\r\n                },\r\n                getFilteringColumns: function() {\r\n                    return this.getColumns().filter(item => (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering)).map(item => {\r\n                        var field = extend(true, {}, item);\r\n                        if (!isDefined(field.dataField)) {\r\n                            field.dataField = field.name\r\n                        }\r\n                        field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;\r\n                        return field\r\n                    })\r\n                },\r\n                getColumnIndexOffset: function() {\r\n                    return 0\r\n                },\r\n                _getFixedColumnsCore: function() {\r\n                    var result = [];\r\n                    var rowCount = this.getRowCount();\r\n                    var isColumnFixing = this._isColumnFixing();\r\n                    var transparentColumn = {\r\n                        command: \"transparent\"\r\n                    };\r\n                    var transparentColspan = 0;\r\n                    var notFixedColumnCount;\r\n                    var transparentColumnIndex;\r\n                    var lastFixedPosition;\r\n                    if (isColumnFixing) {\r\n                        for (var i = 0; i <= rowCount; i++) {\r\n                            notFixedColumnCount = 0;\r\n                            lastFixedPosition = null;\r\n                            transparentColumnIndex = null;\r\n                            var visibleColumns = this.getVisibleColumns(i, true);\r\n                            for (var j = 0; j < visibleColumns.length; j++) {\r\n                                var prevColumn = visibleColumns[j - 1];\r\n                                var column = visibleColumns[j];\r\n                                if (!column.fixed) {\r\n                                    if (0 === i) {\r\n                                        if (column.isBand && column.colspan) {\r\n                                            transparentColspan += column.colspan\r\n                                        } else {\r\n                                            transparentColspan++\r\n                                        }\r\n                                    }\r\n                                    notFixedColumnCount++;\r\n                                    if (!isDefined(transparentColumnIndex)) {\r\n                                        transparentColumnIndex = j\r\n                                    }\r\n                                } else if (prevColumn && prevColumn.fixed && getFixedPosition(this, prevColumn) !== getFixedPosition(this, column)) {\r\n                                    if (!isDefined(transparentColumnIndex)) {\r\n                                        transparentColumnIndex = j\r\n                                    }\r\n                                } else {\r\n                                    lastFixedPosition = column.fixedPosition\r\n                                }\r\n                            }\r\n                            if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {\r\n                                return []\r\n                            }\r\n                            if (!isDefined(transparentColumnIndex)) {\r\n                                transparentColumnIndex = \"right\" === lastFixedPosition ? 0 : visibleColumns.length\r\n                            }\r\n                            result[i] = visibleColumns.slice(0);\r\n                            if (!transparentColumn.colspan) {\r\n                                transparentColumn.colspan = transparentColspan\r\n                            }\r\n                            result[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn)\r\n                        }\r\n                    }\r\n                    return result.map(columns => columns.map(column => {\r\n                        var newColumn = _extends({}, column);\r\n                        if (newColumn.headerId) {\r\n                            newColumn.headerId += \"-fixed\"\r\n                        }\r\n                        return newColumn\r\n                    }))\r\n                },\r\n                _isColumnFixing: function() {\r\n                    var isColumnFixing = this.option(\"columnFixing.enabled\");\r\n                    !isColumnFixing && each(this._columns, (function(_, column) {\r\n                        if (column.fixed) {\r\n                            isColumnFixing = true;\r\n                            return false\r\n                        }\r\n                    }));\r\n                    return isColumnFixing\r\n                },\r\n                _getExpandColumnsCore: function() {\r\n                    return this.getGroupColumns()\r\n                },\r\n                getExpandColumns: function() {\r\n                    var expandColumns = this._getExpandColumnsCore();\r\n                    var expandColumn;\r\n                    var firstGroupColumn = expandColumns.filter(column => 0 === column.groupIndex)[0];\r\n                    var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;\r\n                    var isColumnFixing = this._isColumnFixing();\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (expandColumns.length) {\r\n                        expandColumn = this.columnOption(\"command:expand\")\r\n                    }\r\n                    expandColumns = map(expandColumns, column => extend({}, column, {\r\n                        visibleWidth: null,\r\n                        minWidth: null,\r\n                        cellTemplate: !isDefined(column.groupIndex) ? column.cellTemplate : null,\r\n                        headerCellTemplate: null,\r\n                        fixed: !isDefined(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true,\r\n                        fixedPosition: rtlEnabled ? \"right\" : \"left\"\r\n                    }, expandColumn, {\r\n                        index: column.index,\r\n                        type: column.type || GROUP_COMMAND_COLUMN_NAME\r\n                    }));\r\n                    return expandColumns\r\n                },\r\n                getBandColumnsCache: function() {\r\n                    if (!this._bandColumnsCache) {\r\n                        var columns = this._columns;\r\n                        var columnChildrenByIndex = {};\r\n                        var columnParentByIndex = {};\r\n                        var isPlain = true;\r\n                        columns.forEach((function(column) {\r\n                            var ownerBand = column.ownerBand;\r\n                            var parentIndex = isObject(ownerBand) ? ownerBand.index : ownerBand;\r\n                            var parent = columns[parentIndex];\r\n                            if (column.hasColumns) {\r\n                                isPlain = false\r\n                            }\r\n                            if (column.colspan) {\r\n                                column.colspan = void 0\r\n                            }\r\n                            if (column.rowspan) {\r\n                                column.rowspan = void 0\r\n                            }\r\n                            if (parent) {\r\n                                columnParentByIndex[column.index] = parent\r\n                            } else {\r\n                                parentIndex = -1\r\n                            }\r\n                            columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];\r\n                            columnChildrenByIndex[parentIndex].push(column)\r\n                        }));\r\n                        this._bandColumnsCache = {\r\n                            isPlain: isPlain,\r\n                            columnChildrenByIndex: columnChildrenByIndex,\r\n                            columnParentByIndex: columnParentByIndex\r\n                        }\r\n                    }\r\n                    return this._bandColumnsCache\r\n                },\r\n                _isColumnVisible: function(column) {\r\n                    return column.visible && this.isParentColumnVisible(column.index)\r\n                },\r\n                _compileVisibleColumnsCore: function() {\r\n                    var that = this;\r\n                    var i;\r\n                    var result = [];\r\n                    var rowspanGroupColumns = 0;\r\n                    var rowspanExpandColumns = 0;\r\n                    var rowCount = that.getRowCount();\r\n                    var positiveIndexedColumns = [];\r\n                    var negativeIndexedColumns = [];\r\n                    var notGroupedColumnsCount = 0;\r\n                    var isFixedToEnd;\r\n                    var rtlEnabled = that.option(\"rtlEnabled\");\r\n                    var bandColumnsCache = that.getBandColumnsCache();\r\n                    var expandColumns = mergeColumns(that, that.getExpandColumns(), that._columns);\r\n                    var columns = mergeColumns(that, that._columns, that._commandColumns, true);\r\n                    var columnDigitsCount = function(number) {\r\n                        var i;\r\n                        for (i = 0; number > 1; i++) {\r\n                            number /= 10\r\n                        }\r\n                        return i\r\n                    }(columns.length);\r\n                    ! function(that, columns, bandColumnsCache) {\r\n                        var rowspan;\r\n                        for (var i = 0; i < columns.length; i++) {\r\n                            var column = columns[i];\r\n                            if (column.visible || column.command) {\r\n                                if (column.isBand) {\r\n                                    column.colspan = column.colspan || calculateColspan(that, column.index)\r\n                                }\r\n                                if (!column.isBand || !column.colspan) {\r\n                                    rowspan = that.getRowCount();\r\n                                    if (!column.command && (!isDefined(column.groupIndex) || column.showWhenGrouped)) {\r\n                                        rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length\r\n                                    }\r\n                                    if (rowspan > 1) {\r\n                                        column.rowspan = rowspan\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }(that, columns, bandColumnsCache);\r\n                    for (i = 0; i < rowCount; i++) {\r\n                        result[i] = [];\r\n                        negativeIndexedColumns[i] = [{}];\r\n                        positiveIndexedColumns[i] = [{}, {}, {}]\r\n                    }\r\n                    each(columns, (function() {\r\n                        var visibleIndex = this.visibleIndex;\r\n                        var indexedColumns;\r\n                        var parentBandColumns = getParentBandColumns(this.index, bandColumnsCache.columnParentByIndex);\r\n                        var visible = that._isColumnVisible(this);\r\n                        if (visible && (!isDefined(this.groupIndex) || this.showWhenGrouped)) {\r\n                            var rowIndex = parentBandColumns.length;\r\n                            if (visibleIndex < 0) {\r\n                                visibleIndex = -visibleIndex;\r\n                                indexedColumns = negativeIndexedColumns[rowIndex]\r\n                            } else {\r\n                                this.fixed = parentBandColumns.length ? parentBandColumns[0].fixed : this.fixed;\r\n                                this.fixedPosition = parentBandColumns.length ? parentBandColumns[0].fixedPosition : this.fixedPosition;\r\n                                if (this.fixed) {\r\n                                    isFixedToEnd = \"right\" === this.fixedPosition;\r\n                                    if (rtlEnabled && (!this.command || isCustomCommandColumn(that, this))) {\r\n                                        isFixedToEnd = !isFixedToEnd\r\n                                    }\r\n                                    if (isFixedToEnd) {\r\n                                        indexedColumns = positiveIndexedColumns[rowIndex][2]\r\n                                    } else {\r\n                                        indexedColumns = positiveIndexedColumns[rowIndex][0]\r\n                                    }\r\n                                } else {\r\n                                    indexedColumns = positiveIndexedColumns[rowIndex][1]\r\n                                }\r\n                            }\r\n                            if (parentBandColumns.length) {\r\n                                visibleIndex = numberToString(visibleIndex, columnDigitsCount);\r\n                                for (i = parentBandColumns.length - 1; i >= 0; i--) {\r\n                                    visibleIndex = numberToString(parentBandColumns[i].visibleIndex, columnDigitsCount) + visibleIndex\r\n                                }\r\n                            }\r\n                            indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];\r\n                            indexedColumns[visibleIndex].push(this);\r\n                            notGroupedColumnsCount++\r\n                        }\r\n                    }));\r\n                    each(result, (function(rowIndex) {\r\n                        orderEach(negativeIndexedColumns[rowIndex], (function(_, columns) {\r\n                            result[rowIndex].unshift.apply(result[rowIndex], columns)\r\n                        }));\r\n                        var firstPositiveIndexColumn = result[rowIndex].length;\r\n                        each(positiveIndexedColumns[rowIndex], (function(index, columnsByFixing) {\r\n                            orderEach(columnsByFixing, (function(_, columnsByVisibleIndex) {\r\n                                result[rowIndex].push.apply(result[rowIndex], columnsByVisibleIndex)\r\n                            }))\r\n                        }));\r\n                        if (rowspanExpandColumns < rowIndex + 1) {\r\n                            rowspanExpandColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, \"detailExpand\", firstPositiveIndexColumn)\r\n                        }\r\n                        if (rowspanGroupColumns < rowIndex + 1) {\r\n                            rowspanGroupColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn)\r\n                        }\r\n                    }));\r\n                    result.push(function getDataColumns(columns, rowIndex, bandColumnID) {\r\n                        var result = [];\r\n                        rowIndex = rowIndex || 0;\r\n                        columns[rowIndex] && each(columns[rowIndex], (function(_, column) {\r\n                            if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                                if (!column.isBand || !column.colspan) {\r\n                                    if (!column.command || rowIndex < 1) {\r\n                                        result.push(column)\r\n                                    }\r\n                                } else {\r\n                                    result.push.apply(result, getDataColumns(columns, rowIndex + 1, column.index))\r\n                                }\r\n                            }\r\n                        }));\r\n                        return result\r\n                    }(result));\r\n                    if (!notGroupedColumnsCount && that._columns.length) {\r\n                        result[rowCount].push({\r\n                            command: \"empty\"\r\n                        })\r\n                    }\r\n                    return result\r\n                },\r\n                getInvisibleColumns: function(columns, bandColumnIndex) {\r\n                    var that = this;\r\n                    var result = [];\r\n                    var hiddenColumnsByBand;\r\n                    columns = columns || that._columns;\r\n                    each(columns, (function(_, column) {\r\n                        if (column.ownerBand !== bandColumnIndex) {\r\n                            return\r\n                        }\r\n                        if (column.isBand) {\r\n                            if (!column.visible) {\r\n                                hiddenColumnsByBand = that.getChildrenByBandColumn(column.index)\r\n                            } else {\r\n                                hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index)\r\n                            }\r\n                            if (hiddenColumnsByBand.length) {\r\n                                result.push(column);\r\n                                result = result.concat(hiddenColumnsByBand)\r\n                            }\r\n                            return\r\n                        }\r\n                        if (!column.visible) {\r\n                            result.push(column)\r\n                        }\r\n                    }));\r\n                    return result\r\n                },\r\n                getChooserColumns: function(getAllColumns) {\r\n                    var columns = getAllColumns ? this.getColumns() : this.getInvisibleColumns();\r\n                    var columnChooserColumns = columns.filter(column => column.showInColumnChooser);\r\n                    var sortOrder = this.option(\"columnChooser.sortOrder\");\r\n                    return ((columns, sortOrder) => {\r\n                        if (\"asc\" !== sortOrder && \"desc\" !== sortOrder) {\r\n                            return columns\r\n                        }\r\n                        var sign = \"asc\" === sortOrder ? 1 : -1;\r\n                        columns.sort((function(column1, column2) {\r\n                            var caption1 = column1.caption || \"\";\r\n                            var caption2 = column2.caption || \"\";\r\n                            return sign * caption1.localeCompare(caption2)\r\n                        }));\r\n                        return columns\r\n                    })(columnChooserColumns, sortOrder)\r\n                },\r\n                allowMoveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var columnIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);\r\n                    var sourceColumn = this._columns[columnIndex];\r\n                    if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {\r\n                        if (sourceLocation === targetLocation) {\r\n                            if (\"columnChooser\" === sourceLocation) {\r\n                                return false\r\n                            }\r\n                            fromVisibleIndex = isObject(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;\r\n                            toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\r\n                            return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex\r\n                        } else if (\"group\" === sourceLocation && \"columnChooser\" !== targetLocation || \"group\" === targetLocation) {\r\n                            return sourceColumn && sourceColumn.allowGrouping\r\n                        } else if (\"columnChooser\" === sourceLocation || \"columnChooser\" === targetLocation) {\r\n                            return sourceColumn && sourceColumn.allowHiding\r\n                        }\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                moveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var options = {};\r\n                    var prevGroupIndex;\r\n                    var fromIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);\r\n                    var toIndex = getColumnIndexByVisibleIndex(this, toVisibleIndex, targetLocation);\r\n                    var targetGroupIndex;\r\n                    if (fromIndex >= 0) {\r\n                        var column = this._columns[fromIndex];\r\n                        toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\r\n                        targetGroupIndex = toIndex >= 0 ? this._columns[toIndex].groupIndex : -1;\r\n                        if (isDefined(column.groupIndex) && \"group\" === sourceLocation) {\r\n                            if (targetGroupIndex > column.groupIndex) {\r\n                                targetGroupIndex--\r\n                            }\r\n                            if (\"group\" !== targetLocation) {\r\n                                options.groupIndex = void 0\r\n                            } else {\r\n                                prevGroupIndex = column.groupIndex;\r\n                                delete column.groupIndex;\r\n                                updateColumnGroupIndexes(this)\r\n                            }\r\n                        }\r\n                        if (\"group\" === targetLocation) {\r\n                            options.groupIndex = function(that, column, groupIndex) {\r\n                                var groupColumns = that.getGroupColumns();\r\n                                var i;\r\n                                if (groupIndex >= 0) {\r\n                                    for (i = 0; i < groupColumns.length; i++) {\r\n                                        if (groupColumns[i].groupIndex >= groupIndex) {\r\n                                            groupColumns[i].groupIndex++\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    groupIndex = 0;\r\n                                    for (i = 0; i < groupColumns.length; i++) {\r\n                                        groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1)\r\n                                    }\r\n                                }\r\n                                return groupIndex\r\n                            }(this, 0, targetGroupIndex);\r\n                            column.groupIndex = prevGroupIndex\r\n                        } else if (toVisibleIndex >= 0) {\r\n                            var targetColumn = this._columns[toIndex];\r\n                            if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {\r\n                                options.visibleIndex = MAX_SAFE_INTEGER\r\n                            } else if (isColumnFixed(this, column) ^ isColumnFixed(this, targetColumn)) {\r\n                                options.visibleIndex = MAX_SAFE_INTEGER\r\n                            } else {\r\n                                options.visibleIndex = targetColumn.visibleIndex\r\n                            }\r\n                        }\r\n                        var isVisible = \"columnChooser\" !== targetLocation;\r\n                        if (column.visible !== isVisible) {\r\n                            options.visible = isVisible\r\n                        }\r\n                        this.columnOption(column.index, options)\r\n                    }\r\n                },\r\n                changeSortOrder: function(columnIndex, sortOrder) {\r\n                    var options = {};\r\n                    var sortingOptions = this.option(\"sorting\");\r\n                    var sortingMode = sortingOptions && sortingOptions.mode;\r\n                    var needResetSorting = \"single\" === sortingMode || !sortOrder;\r\n                    var allowSorting = \"single\" === sortingMode || \"multiple\" === sortingMode;\r\n                    var column = this._columns[columnIndex];\r\n                    if (allowSorting && column && column.allowSorting) {\r\n                        if (needResetSorting && !isDefined(column.groupIndex)) {\r\n                            each(this._columns, (function(index) {\r\n                                if (index !== columnIndex && this.sortOrder) {\r\n                                    if (!isDefined(this.groupIndex)) {\r\n                                        delete this.sortOrder\r\n                                    }\r\n                                    delete this.sortIndex\r\n                                }\r\n                            }))\r\n                        }\r\n                        if (isSortOrderValid(sortOrder)) {\r\n                            if (column.sortOrder !== sortOrder) {\r\n                                options.sortOrder = sortOrder\r\n                            }\r\n                        } else if (\"none\" === sortOrder) {\r\n                            if (column.sortOrder) {\r\n                                options.sortIndex = void 0;\r\n                                options.sortOrder = void 0\r\n                            }\r\n                        } else {\r\n                            ! function(column) {\r\n                                if (\"ctrl\" === sortOrder) {\r\n                                    if (!(\"sortOrder\" in column && \"sortIndex\" in column)) {\r\n                                        return false\r\n                                    }\r\n                                    options.sortOrder = void 0;\r\n                                    options.sortIndex = void 0\r\n                                } else if (isDefined(column.groupIndex) || isDefined(column.sortIndex)) {\r\n                                    options.sortOrder = \"desc\" === column.sortOrder ? \"asc\" : \"desc\"\r\n                                } else {\r\n                                    options.sortOrder = \"asc\"\r\n                                }\r\n                                return true\r\n                            }(column)\r\n                        }\r\n                    }\r\n                    this.columnOption(column.index, options)\r\n                },\r\n                getSortDataSourceParameters: function(useLocalSelector) {\r\n                    var sortColumns = [];\r\n                    var sort = [];\r\n                    each(this._columns, (function() {\r\n                        if ((this.dataField || this.selector || this.calculateCellValue) && isDefined(this.sortIndex) && !isDefined(this.groupIndex)) {\r\n                            sortColumns[this.sortIndex] = this\r\n                        }\r\n                    }));\r\n                    each(sortColumns, (function() {\r\n                        var sortOrder = this && this.sortOrder;\r\n                        if (isSortOrderValid(sortOrder)) {\r\n                            var sortItem = {\r\n                                selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,\r\n                                desc: \"desc\" === this.sortOrder\r\n                            };\r\n                            if (this.sortingMethod) {\r\n                                sortItem.compare = this.sortingMethod.bind(this)\r\n                            }\r\n                            sort.push(sortItem)\r\n                        }\r\n                    }));\r\n                    return sort.length > 0 ? sort : null\r\n                },\r\n                getGroupDataSourceParameters: function(useLocalSelector) {\r\n                    var group = [];\r\n                    each(this.getGroupColumns(), (function() {\r\n                        var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;\r\n                        if (selector) {\r\n                            var groupItem = {\r\n                                selector: selector,\r\n                                desc: \"desc\" === this.sortOrder,\r\n                                isExpanded: !!this.autoExpandGroup\r\n                            };\r\n                            if (this.sortingMethod) {\r\n                                groupItem.compare = this.sortingMethod.bind(this)\r\n                            }\r\n                            group.push(groupItem)\r\n                        }\r\n                    }));\r\n                    return group.length > 0 ? group : null\r\n                },\r\n                refresh: function(updateNewLookupsOnly) {\r\n                    var deferreds = [];\r\n                    each(this._columns, (function() {\r\n                        var lookup = this.lookup;\r\n                        if (lookup && !this.calculateDisplayValue) {\r\n                            if (updateNewLookupsOnly && lookup.valueMap) {\r\n                                return\r\n                            }\r\n                            if (lookup.update) {\r\n                                deferreds.push(lookup.update())\r\n                            }\r\n                        }\r\n                    }));\r\n                    return when.apply($, deferreds).done(resetColumnsCache.bind(null, this))\r\n                },\r\n                _updateColumnOptions: function(column, columnIndex) {\r\n                    column.selector = column.selector || function(data) {\r\n                        return column.calculateCellValue(data)\r\n                    };\r\n                    if (this._reinitAfterLookupChanges && this._previousColumns) {\r\n                        column.selector.columnIndex = columnIndex;\r\n                        column.selector.originalCallback = this._previousColumns[columnIndex].selector.originalCallback\r\n                    } else {\r\n                        column.selector.columnIndex = columnIndex;\r\n                        column.selector.originalCallback = column.selector\r\n                    }\r\n                    each([\"calculateSortValue\", \"calculateGroupValue\", \"calculateDisplayValue\"], (function(_, calculateCallbackName) {\r\n                        var calculateCallback = column[calculateCallbackName];\r\n                        if (isFunction(calculateCallback)) {\r\n                            if (!calculateCallback.originalCallback) {\r\n                                var context = {\r\n                                    column: column\r\n                                };\r\n                                column[calculateCallbackName] = function(data) {\r\n                                    return calculateCallback.call(context.column, data)\r\n                                };\r\n                                column[calculateCallbackName].originalCallback = calculateCallback;\r\n                                column[calculateCallbackName].columnIndex = columnIndex;\r\n                                column[calculateCallbackName].context = context\r\n                            } else {\r\n                                column[calculateCallbackName].context.column = column\r\n                            }\r\n                        }\r\n                    }));\r\n                    if (isString(column.calculateDisplayValue)) {\r\n                        column.displayField = column.calculateDisplayValue;\r\n                        column.calculateDisplayValue = compileGetter(column.displayField)\r\n                    }\r\n                    if (column.calculateDisplayValue) {\r\n                        column.displayValueMap = column.displayValueMap || {}\r\n                    }\r\n                    updateSerializers(column, column.dataType);\r\n                    var lookup = column.lookup;\r\n                    if (lookup) {\r\n                        updateSerializers(lookup, lookup.dataType)\r\n                    }\r\n                    var dataType = lookup ? lookup.dataType : column.dataType;\r\n                    if (dataType) {\r\n                        column.alignment = column.alignment || function(dataType, isRTL) {\r\n                            switch (dataType) {\r\n                                case \"number\":\r\n                                    return \"right\";\r\n                                case \"boolean\":\r\n                                    return \"center\";\r\n                                default:\r\n                                    return getDefaultAlignment(isRTL)\r\n                            }\r\n                        }(dataType, this.option(\"rtlEnabled\"));\r\n                        column.format = column.format || gridCoreUtils.getFormatByDataType(dataType);\r\n                        column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);\r\n                        column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];\r\n                        if (!isDefined(column.filterOperations)) {\r\n                            setFilterOperationsAsDefaultValues(column)\r\n                        }\r\n                        column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || \"=\";\r\n                        column.showEditorAlways = isDefined(column.showEditorAlways) ? column.showEditorAlways : \"boolean\" === dataType && !column.cellTemplate && !column.lookup\r\n                    }\r\n                },\r\n                updateColumnDataTypes: function(dataSource) {\r\n                    var that = this;\r\n                    var dateSerializationFormat = that.option(\"dateSerializationFormat\");\r\n                    var firstItems = that._getFirstItems(dataSource);\r\n                    var isColumnDataTypesUpdated = false;\r\n                    each(that._columns, (function(index, column) {\r\n                        var i;\r\n                        var value;\r\n                        var dataType;\r\n                        var lookupDataType;\r\n                        var valueDataType;\r\n                        var lookup = column.lookup;\r\n                        if (gridCoreUtils.isDateType(column.dataType) && void 0 === column.serializationFormat) {\r\n                            column.serializationFormat = dateSerializationFormat\r\n                        }\r\n                        if (lookup && gridCoreUtils.isDateType(lookup.dataType) && void 0 === column.serializationFormat) {\r\n                            lookup.serializationFormat = dateSerializationFormat\r\n                        }\r\n                        if (column.calculateCellValue && firstItems.length) {\r\n                            if (!column.dataType || lookup && !lookup.dataType) {\r\n                                for (i = 0; i < firstItems.length; i++) {\r\n                                    value = column.calculateCellValue(firstItems[i]);\r\n                                    if (!column.dataType) {\r\n                                        valueDataType = getValueDataType(value);\r\n                                        dataType = dataType || valueDataType;\r\n                                        if (dataType && valueDataType && dataType !== valueDataType) {\r\n                                            dataType = \"string\"\r\n                                        }\r\n                                    }\r\n                                    if (lookup && !lookup.dataType) {\r\n                                        valueDataType = getValueDataType(gridCoreUtils.getDisplayValue(column, value, firstItems[i]));\r\n                                        lookupDataType = lookupDataType || valueDataType;\r\n                                        if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {\r\n                                            lookupDataType = \"string\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (dataType || lookupDataType) {\r\n                                    if (dataType) {\r\n                                        column.dataType = dataType\r\n                                    }\r\n                                    if (lookup && lookupDataType) {\r\n                                        lookup.dataType = lookupDataType\r\n                                    }\r\n                                    isColumnDataTypesUpdated = true\r\n                                }\r\n                            }\r\n                            if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {\r\n                                for (i = 0; i < firstItems.length; i++) {\r\n                                    value = column.calculateCellValue(firstItems[i], true);\r\n                                    if (void 0 === column.serializationFormat) {\r\n                                        column.serializationFormat = getSerializationFormat(column.dataType, value)\r\n                                    }\r\n                                    if (lookup && void 0 === lookup.serializationFormat) {\r\n                                        lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value, true))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        that._updateColumnOptions(column, index)\r\n                    }));\r\n                    return isColumnDataTypesUpdated\r\n                },\r\n                _customizeColumns: function(columns) {\r\n                    var customizeColumns = this.option(\"customizeColumns\");\r\n                    if (customizeColumns) {\r\n                        var hasOwnerBand = columns.some((function(column) {\r\n                            return isObject(column.ownerBand)\r\n                        }));\r\n                        if (hasOwnerBand) {\r\n                            updateIndexes(this)\r\n                        }\r\n                        customizeColumns(columns);\r\n                        assignColumns(this, createColumnsFromOptions(this, columns))\r\n                    }\r\n                },\r\n                updateColumns: function(dataSource, forceApplying, isApplyingUserState) {\r\n                    if (!forceApplying) {\r\n                        this.updateSortingGrouping(dataSource)\r\n                    }\r\n                    if (!dataSource || dataSource.isLoaded()) {\r\n                        var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();\r\n                        var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();\r\n                        var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;\r\n                        if (!isApplyingUserState) {\r\n                            this._customizeColumns(this._columns)\r\n                        }\r\n                        updateIndexes(this);\r\n                        var columns = this._columns;\r\n                        return when(this.refresh(true)).always(() => {\r\n                            if (this._columns !== columns) {\r\n                                return\r\n                            }\r\n                            this._updateChanges(dataSource, {\r\n                                sorting: sortParameters,\r\n                                grouping: groupParameters,\r\n                                filtering: filterParameters\r\n                            });\r\n                            fireColumnsChanged(this)\r\n                        })\r\n                    }\r\n                },\r\n                _updateChanges: function(dataSource, parameters) {\r\n                    if (dataSource) {\r\n                        this.updateColumnDataTypes(dataSource);\r\n                        this._dataSourceApplied = true\r\n                    }\r\n                    if (!gridCoreUtils.equalSortParameters(parameters.sorting, this.getSortDataSourceParameters())) {\r\n                        updateColumnChanges(this, \"sorting\")\r\n                    }\r\n                    if (!gridCoreUtils.equalSortParameters(parameters.grouping, this.getGroupDataSourceParameters())) {\r\n                        updateColumnChanges(this, \"grouping\")\r\n                    }\r\n                    var dataController = this.getController(\"data\");\r\n                    if (dataController && !gridCoreUtils.equalFilterParameters(parameters.filtering, dataController.getCombinedFilter())) {\r\n                        updateColumnChanges(this, \"filtering\")\r\n                    }\r\n                    updateColumnChanges(this, \"columns\")\r\n                },\r\n                updateSortingGrouping: function(dataSource, fromDataSource) {\r\n                    var that = this;\r\n                    var sortParameters;\r\n                    var isColumnsChanged;\r\n                    var updateSortGroupParameterIndexes = function(columns, sortParameters, indexParameterName) {\r\n                        each(columns, (function(index, column) {\r\n                            delete column[indexParameterName];\r\n                            if (sortParameters) {\r\n                                for (var i = 0; i < sortParameters.length; i++) {\r\n                                    var selector = sortParameters[i].selector;\r\n                                    var isExpanded = sortParameters[i].isExpanded;\r\n                                    if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue || selector === column.calculateDisplayValue) {\r\n                                        if (fromDataSource) {\r\n                                            column.sortOrder = \"sortOrder\" in column ? column.sortOrder : sortParameters[i].desc ? \"desc\" : \"asc\"\r\n                                        } else {\r\n                                            column.sortOrder = column.sortOrder || (sortParameters[i].desc ? \"desc\" : \"asc\")\r\n                                        }\r\n                                        if (void 0 !== isExpanded) {\r\n                                            column.autoExpandGroup = isExpanded\r\n                                        }\r\n                                        column[indexParameterName] = i;\r\n                                        break\r\n                                    }\r\n                                }\r\n                            }\r\n                        }))\r\n                    };\r\n                    if (dataSource) {\r\n                        sortParameters = gridCoreUtils.normalizeSortingInfo(dataSource.sort());\r\n                        var groupParameters = gridCoreUtils.normalizeSortingInfo(dataSource.group());\r\n                        var columnsGroupParameters = that.getGroupDataSourceParameters();\r\n                        var columnsSortParameters = that.getSortDataSourceParameters();\r\n                        var groupingChanged = !gridCoreUtils.equalSortParameters(groupParameters, columnsGroupParameters, true);\r\n                        var groupExpandingChanged = !groupingChanged && !gridCoreUtils.equalSortParameters(groupParameters, columnsGroupParameters);\r\n                        if (!that._columns.length) {\r\n                            each(groupParameters, (function(index, group) {\r\n                                that._columns.push(group.selector)\r\n                            }));\r\n                            each(sortParameters, (function(index, sort) {\r\n                                if (!isFunction(sort.selector)) {\r\n                                    that._columns.push(sort.selector)\r\n                                }\r\n                            }));\r\n                            assignColumns(that, createColumnsFromOptions(that, that._columns))\r\n                        }\r\n                        if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && (groupingChanged || groupExpandingChanged)) {\r\n                            updateSortGroupParameterIndexes(that._columns, groupParameters, \"groupIndex\");\r\n                            if (fromDataSource) {\r\n                                groupingChanged && updateColumnChanges(that, \"grouping\");\r\n                                groupExpandingChanged && updateColumnChanges(that, \"groupExpanding\");\r\n                                isColumnsChanged = true\r\n                            }\r\n                        }\r\n                        if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !gridCoreUtils.equalSortParameters(sortParameters, columnsSortParameters)) {\r\n                            updateSortGroupParameterIndexes(that._columns, sortParameters, \"sortIndex\");\r\n                            if (fromDataSource) {\r\n                                updateColumnChanges(that, \"sorting\");\r\n                                isColumnsChanged = true\r\n                            }\r\n                        }\r\n                        if (isColumnsChanged) {\r\n                            fireColumnsChanged(that)\r\n                        }\r\n                    }\r\n                },\r\n                updateFilter: function(filter, remoteFiltering, columnIndex, filterValue) {\r\n                    if (!Array.isArray(filter)) {\r\n                        return filter\r\n                    }\r\n                    filter = extend([], filter);\r\n                    columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;\r\n                    filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;\r\n                    if (isString(filter[0]) && \"!\" !== filter[0]) {\r\n                        var column = this.columnOption(filter[0]);\r\n                        if (remoteFiltering) {\r\n                            if (config().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {\r\n                                filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], \"filter\")\r\n                            }\r\n                        } else if (column && column.selector) {\r\n                            filter[0] = column.selector;\r\n                            filter[0].columnIndex = column.index\r\n                        }\r\n                    } else if (isFunction(filter[0])) {\r\n                        filter[0].columnIndex = columnIndex;\r\n                        filter[0].filterValue = filterValue;\r\n                        filter[0].selectedFilterOperation = filter.selectedFilterOperation\r\n                    }\r\n                    for (var i = 0; i < filter.length; i++) {\r\n                        filter[i] = this.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue)\r\n                    }\r\n                    return filter\r\n                },\r\n                columnCount: function() {\r\n                    return this._columns ? this._columns.length : 0\r\n                },\r\n                columnOption: function(identifier, option, value, notFireEvent) {\r\n                    var that = this;\r\n                    var columns = that._columns.concat(that._commandColumns);\r\n                    var column = findColumn(columns, identifier);\r\n                    if (column) {\r\n                        if (1 === arguments.length) {\r\n                            return extend({}, column)\r\n                        }\r\n                        if (isString(option)) {\r\n                            if (2 === arguments.length) {\r\n                                return columnOptionCore(that, column, option)\r\n                            } else {\r\n                                columnOptionCore(that, column, option, value, notFireEvent)\r\n                            }\r\n                        } else if (isObject(option)) {\r\n                            each(option, (function(optionName, value) {\r\n                                columnOptionCore(that, column, optionName, value, notFireEvent)\r\n                            }))\r\n                        }\r\n                        fireColumnsChanged(that)\r\n                    }\r\n                },\r\n                clearSorting: function() {\r\n                    var columnCount = this.columnCount();\r\n                    this.beginUpdate();\r\n                    for (var i = 0; i < columnCount; i++) {\r\n                        this.columnOption(i, \"sortOrder\", void 0);\r\n                        delete findColumn(this._columns, i).sortOrder\r\n                    }\r\n                    this.endUpdate()\r\n                },\r\n                clearGrouping: function() {\r\n                    var columnCount = this.columnCount();\r\n                    this.beginUpdate();\r\n                    for (var i = 0; i < columnCount; i++) {\r\n                        this.columnOption(i, \"groupIndex\", void 0)\r\n                    }\r\n                    this.endUpdate()\r\n                },\r\n                getVisibleIndex: function(index, rowIndex) {\r\n                    var columns = this.getVisibleColumns(rowIndex);\r\n                    for (var i = columns.length - 1; i >= 0; i--) {\r\n                        if (columns[i].index === index) {\r\n                            return i\r\n                        }\r\n                    }\r\n                    return -1\r\n                },\r\n                getVisibleIndexByColumn: function(column, rowIndex) {\r\n                    var visibleColumns = this.getVisibleColumns(rowIndex);\r\n                    var visibleColumn = visibleColumns.filter(col => col.index === column.index && col.command === column.command)[0];\r\n                    return visibleColumns.indexOf(visibleColumn)\r\n                },\r\n                getVisibleColumnIndex: function(id, rowIndex) {\r\n                    var index = this.columnOption(id, \"index\");\r\n                    return this.getVisibleIndex(index, rowIndex)\r\n                },\r\n                addColumn: function(options) {\r\n                    var column = createColumn(this, options);\r\n                    var index = this._columns.length;\r\n                    this._columns.push(column);\r\n                    if (column.isBand) {\r\n                        this._columns = createColumnsFromOptions(this, this._columns);\r\n                        column = this._columns[index]\r\n                    }\r\n                    column.added = options;\r\n                    updateIndexes(this, column);\r\n                    this.updateColumns(this._dataSource);\r\n                    this._checkColumns()\r\n                },\r\n                deleteColumn: function(id) {\r\n                    var column = this.columnOption(id);\r\n                    if (column && column.index >= 0) {\r\n                        columns = this._columns, void columns.forEach(column => {\r\n                            if (isDefined(column.ownerBand)) {\r\n                                column.ownerBand = columns[column.ownerBand]\r\n                            }\r\n                        });\r\n                        this._columns.splice(column.index, 1);\r\n                        if (column.isBand) {\r\n                            var childIndexes = this.getChildrenByBandColumn(column.index).map(column => column.index);\r\n                            this._columns = this._columns.filter(column => childIndexes.indexOf(column.index) < 0)\r\n                        }\r\n                        updateIndexes(this);\r\n                        this.updateColumns(this._dataSource)\r\n                    }\r\n                    var columns\r\n                },\r\n                addCommandColumn: function(options) {\r\n                    var commandColumn = this._commandColumns.filter(column => column.command === options.command)[0];\r\n                    if (!commandColumn) {\r\n                        commandColumn = options;\r\n                        this._commandColumns.push(commandColumn)\r\n                    }\r\n                },\r\n                getUserState: function() {\r\n                    var columns = this._columns;\r\n                    var result = [];\r\n                    var i;\r\n\r\n                    function handleStateField(index, value) {\r\n                        if (void 0 !== columns[i][value]) {\r\n                            result[i][value] = columns[i][value]\r\n                        }\r\n                    }\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        result[i] = {};\r\n                        each(USER_STATE_FIELD_NAMES, handleStateField)\r\n                    }\r\n                    return result\r\n                },\r\n                setName: function(column) {\r\n                    column.name = column.name || column.dataField || column.type\r\n                },\r\n                setUserState: function(state) {\r\n                    var dataSource = this._dataSource;\r\n                    var ignoreColumnOptionNames = this.option(\"stateStoring.ignoreColumnOptionNames\");\r\n                    null === state || void 0 === state ? void 0 : state.forEach(this.setName);\r\n                    if (!ignoreColumnOptionNames) {\r\n                        ignoreColumnOptionNames = [];\r\n                        var commonColumnSettings = this.getCommonSettings();\r\n                        if (!this.option(\"columnChooser.enabled\")) {\r\n                            ignoreColumnOptionNames.push(\"visible\")\r\n                        }\r\n                        if (\"none\" === this.option(\"sorting.mode\")) {\r\n                            ignoreColumnOptionNames.push(\"sortIndex\", \"sortOrder\")\r\n                        }\r\n                        if (!commonColumnSettings.allowGrouping) {\r\n                            ignoreColumnOptionNames.push(\"groupIndex\")\r\n                        }\r\n                        if (!commonColumnSettings.allowFixing) {\r\n                            ignoreColumnOptionNames.push(\"fixed\", \"fixedPosition\")\r\n                        }\r\n                        if (!commonColumnSettings.allowResizing) {\r\n                            ignoreColumnOptionNames.push(\"width\", \"visibleWidth\")\r\n                        }\r\n                        var isFilterPanelHidden = !this.option(\"filterPanel.visible\");\r\n                        if (!this.option(\"filterRow.visible\") && isFilterPanelHidden) {\r\n                            ignoreColumnOptionNames.push(\"filterValue\", \"selectedFilterOperation\")\r\n                        }\r\n                        if (!this.option(\"headerFilter.visible\") && isFilterPanelHidden) {\r\n                            ignoreColumnOptionNames.push(\"filterValues\", \"filterType\")\r\n                        }\r\n                    }\r\n                    this._columnsUserState = state;\r\n                    this._ignoreColumnOptionNames = ignoreColumnOptionNames;\r\n                    this._hasUserState = !!state;\r\n                    updateColumnChanges(this, \"filtering\");\r\n                    this.init(true);\r\n                    if (dataSource) {\r\n                        dataSource.sort(this.getSortDataSourceParameters());\r\n                        dataSource.group(this.getGroupDataSourceParameters())\r\n                    }\r\n                },\r\n                _checkColumns: function() {\r\n                    var usedNames = {};\r\n                    var hasEditableColumnWithoutName = false;\r\n                    var duplicatedNames = [];\r\n                    this._columns.forEach(column => {\r\n                        var _column$columns;\r\n                        var name = column.name;\r\n                        var isBand = null === (_column$columns = column.columns) || void 0 === _column$columns ? void 0 : _column$columns.length;\r\n                        var isEditable = column.allowEditing && (column.dataField || column.setCellValue) && !isBand;\r\n                        if (name) {\r\n                            if (usedNames[name]) {\r\n                                duplicatedNames.push('\"'.concat(name, '\"'))\r\n                            }\r\n                            usedNames[name] = true\r\n                        } else if (isEditable) {\r\n                            hasEditableColumnWithoutName = true\r\n                        }\r\n                    });\r\n                    if (duplicatedNames.length) {\r\n                        errors.log(\"E1059\", duplicatedNames.join(\", \"))\r\n                    }\r\n                    if (hasEditableColumnWithoutName) {\r\n                        errors.log(\"E1060\")\r\n                    }\r\n                },\r\n                _createCalculatedColumnOptions: function(columnOptions, bandColumn) {\r\n                    var calculatedColumnOptions = {};\r\n                    var dataField = columnOptions.dataField;\r\n                    if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {\r\n                        calculatedColumnOptions.isBand = true;\r\n                        dataField = null\r\n                    }\r\n                    if (dataField) {\r\n                        if (isString(dataField)) {\r\n                            var getter = compileGetter(dataField);\r\n                            calculatedColumnOptions = {\r\n                                caption: captionize(dataField),\r\n                                calculateCellValue: function(data, skipDeserialization) {\r\n                                    var value = getter(data);\r\n                                    return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value\r\n                                },\r\n                                setCellValue: defaultSetCellValue,\r\n                                parseValue: function(text) {\r\n                                    var result;\r\n                                    var parsedValue;\r\n                                    if (\"number\" === this.dataType) {\r\n                                        if (isString(text) && this.format) {\r\n                                            result = function(text, format) {\r\n                                                var parsedValue = numberLocalization.parse(text);\r\n                                                if (isNumeric(parsedValue)) {\r\n                                                    var formattedValue = numberLocalization.format(parsedValue, format);\r\n                                                    var formattedValueWithDefaultFormat = numberLocalization.format(parsedValue, \"decimal\");\r\n                                                    if (formattedValue === text || formattedValueWithDefaultFormat === text) {\r\n                                                        return parsedValue\r\n                                                    }\r\n                                                }\r\n                                            }(text.trim(), this.format)\r\n                                        } else if (isDefined(text) && isNumeric(text)) {\r\n                                            result = Number(text)\r\n                                        }\r\n                                    } else if (\"boolean\" === this.dataType) {\r\n                                        if (text === this.trueText) {\r\n                                            result = true\r\n                                        } else if (text === this.falseText) {\r\n                                            result = false\r\n                                        }\r\n                                    } else if (gridCoreUtils.isDateType(this.dataType)) {\r\n                                        parsedValue = dateLocalization.parse(text, this.format);\r\n                                        if (parsedValue) {\r\n                                            result = parsedValue\r\n                                        }\r\n                                    } else {\r\n                                        result = text\r\n                                    }\r\n                                    return result\r\n                                }\r\n                            }\r\n                        }\r\n                        calculatedColumnOptions.allowFiltering = true\r\n                    } else {\r\n                        calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression\r\n                    }\r\n                    calculatedColumnOptions.calculateFilterExpression = function() {\r\n                        return filterUtils.defaultCalculateFilterExpression.apply(this, arguments)\r\n                    };\r\n                    calculatedColumnOptions.defaultFilterOperation = \"=\";\r\n                    calculatedColumnOptions.createFilterExpression = function(filterValue, selectedFilterOperation) {\r\n                        var result;\r\n                        if (this.calculateFilterExpression) {\r\n                            result = this.calculateFilterExpression.apply(this, arguments)\r\n                        }\r\n                        if (isFunction(result)) {\r\n                            result = [result, \"=\", true]\r\n                        }\r\n                        if (result) {\r\n                            result.columnIndex = this.index;\r\n                            result.filterValue = filterValue;\r\n                            result.selectedFilterOperation = selectedFilterOperation\r\n                        }\r\n                        return result\r\n                    };\r\n                    if (!dataField || !isString(dataField)) {\r\n                        extend(true, calculatedColumnOptions, {\r\n                            allowSorting: false,\r\n                            allowGrouping: false,\r\n                            calculateCellValue: function() {\r\n                                return null\r\n                            }\r\n                        })\r\n                    }\r\n                    if (bandColumn) {\r\n                        calculatedColumnOptions.allowFixing = false\r\n                    }\r\n                    if (columnOptions.dataType) {\r\n                        calculatedColumnOptions.userDataType = columnOptions.dataType\r\n                    }\r\n                    if (columnOptions.selectedFilterOperation && !(\"defaultSelectedFilterOperation\" in calculatedColumnOptions)) {\r\n                        calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation\r\n                    }\r\n                    if (columnOptions.lookup) {\r\n                        calculatedColumnOptions.lookup = {\r\n                            calculateCellValue: function(value, skipDeserialization) {\r\n                                if (this.valueExpr) {\r\n                                    value = this.valueMap && this.valueMap[value]\r\n                                }\r\n                                return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value\r\n                            },\r\n                            updateValueMap: function() {\r\n                                this.valueMap = {};\r\n                                if (this.items) {\r\n                                    var calculateValue = compileGetter(this.valueExpr);\r\n                                    var calculateDisplayValue = compileGetter(this.displayExpr);\r\n                                    for (var i = 0; i < this.items.length; i++) {\r\n                                        var item = this.items[i];\r\n                                        var displayValue = calculateDisplayValue(item);\r\n                                        this.valueMap[calculateValue(item)] = displayValue;\r\n                                        this.dataType = this.dataType || getValueDataType(displayValue)\r\n                                    }\r\n                                }\r\n                            },\r\n                            update: function() {\r\n                                var that = this;\r\n                                var dataSource = that.dataSource;\r\n                                if (dataSource) {\r\n                                    if (isFunction(dataSource) && !variableWrapper.isWrapped(dataSource)) {\r\n                                        dataSource = dataSource({})\r\n                                    }\r\n                                    if (isPlainObject(dataSource) || dataSource instanceof Store || Array.isArray(dataSource)) {\r\n                                        if (that.valueExpr) {\r\n                                            var dataSourceOptions = normalizeDataSourceOptions(dataSource);\r\n                                            dataSourceOptions.paginate = false;\r\n                                            dataSource = new DataSource(dataSourceOptions);\r\n                                            return dataSource.load().done((function(data) {\r\n                                                that.items = data;\r\n                                                that.updateValueMap && that.updateValueMap()\r\n                                            }))\r\n                                        }\r\n                                    } else {\r\n                                        errors.log(\"E1016\")\r\n                                    }\r\n                                } else {\r\n                                    that.updateValueMap && that.updateValueMap()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    calculatedColumnOptions.resizedCallbacks = Callbacks();\r\n                    if (columnOptions.resized) {\r\n                        calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions))\r\n                    }\r\n                    each(calculatedColumnOptions, (function(optionName) {\r\n                        if (isFunction(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf(\"default\")) {\r\n                            var defaultOptionName = \"default\" + optionName.charAt(0).toUpperCase() + optionName.substr(1);\r\n                            calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName]\r\n                        }\r\n                    }));\r\n                    return calculatedColumnOptions\r\n                },\r\n                getRowCount: function() {\r\n                    this._rowCount = this._rowCount || function(that) {\r\n                        var rowCount = 1;\r\n                        var bandColumnsCache = that.getBandColumnsCache();\r\n                        var columnParentByIndex = bandColumnsCache.columnParentByIndex;\r\n                        that._columns.forEach((function(column) {\r\n                            var parents = getParentBandColumns(column.index, columnParentByIndex);\r\n                            var invisibleParents = parents.filter((function(column) {\r\n                                return !column.visible\r\n                            }));\r\n                            if (column.visible && !invisibleParents.length) {\r\n                                rowCount = Math.max(rowCount, parents.length + 1)\r\n                            }\r\n                        }));\r\n                        return rowCount\r\n                    }(this);\r\n                    return this._rowCount\r\n                },\r\n                getRowIndex: function(columnIndex, alwaysGetRowIndex) {\r\n                    var column = this._columns[columnIndex];\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    return column && (alwaysGetRowIndex || column.visible && !(column.command || isDefined(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0\r\n                },\r\n                getChildrenByBandColumn: function(bandColumnIndex, onlyVisibleDirectChildren) {\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var result = _getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);\r\n                    if (onlyVisibleDirectChildren) {\r\n                        return result.filter((function(column) {\r\n                            return column.visible && !column.command\r\n                        })).sort((function(column1, column2) {\r\n                            return column1.visibleIndex - column2.visibleIndex\r\n                        }))\r\n                    }\r\n                    return result\r\n                },\r\n                isParentBandColumn: function(columnIndex, bandColumnIndex) {\r\n                    var result = false;\r\n                    var column = this._columns[columnIndex];\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\r\n                    if (parentBandColumns) {\r\n                        each(parentBandColumns, (function(_, bandColumn) {\r\n                            if (bandColumn.index === bandColumnIndex) {\r\n                                result = true;\r\n                                return false\r\n                            }\r\n                        }))\r\n                    }\r\n                    return result\r\n                },\r\n                isParentColumnVisible: function(columnIndex) {\r\n                    var result = true;\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\r\n                    bandColumns && each(bandColumns, (function(_, bandColumn) {\r\n                        result = result && bandColumn.visible;\r\n                        return result\r\n                    }));\r\n                    return result\r\n                },\r\n                getColumnId: function(column) {\r\n                    if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                        if (isCustomCommandColumn(this, column)) {\r\n                            return \"type:\" + column.type\r\n                        }\r\n                        return \"command:\" + column.command\r\n                    }\r\n                    return column.index\r\n                },\r\n                getCustomizeTextByDataType: getCustomizeTextByDataType,\r\n                getHeaderContentAlignment: function(columnAlignment) {\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (rtlEnabled) {\r\n                        return \"left\" === columnAlignment ? \"right\" : \"left\"\r\n                    }\r\n                    return columnAlignment\r\n                }\r\n            };\r\n            return members\r\n        }())\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}