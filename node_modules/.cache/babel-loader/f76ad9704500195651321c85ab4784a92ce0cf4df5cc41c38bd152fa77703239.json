{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/data_grid/grouping/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { registerKeyboardAction } from \"../../../../ui/grid_core/ui.grid_core.accessibility\";\nimport { getHeight } from \"../../../../core/utils/size\";\nimport $ from \"../../../../core/renderer\";\nimport messageLocalization from \"../../../../localization/message\";\nimport { isDefined, isString } from \"../../../../core/utils/type\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport devices from \"../../../../core/devices\";\nimport { when, Deferred } from \"../../../../core/utils/deferred\";\nimport { setTabIndex, restoreFocus } from \"../../../../ui/shared/accessibility\";\nimport dataSourceAdapter from \"../module_data_source_adapter\";\nimport { GroupingHelper as CollapsedGroupingHelper } from \"./module_collapsed\";\nimport { GroupingHelper as ExpandedGroupingHelper } from \"./module_expanded\";\nimport gridCore from \"../module_core\";\nconst DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\";\nconst DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\";\nconst DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\nconst DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\";\nconst DATAGRID_GROUP_PANEL_CONTAINER_CLASS = \"dx-toolbar-item\";\nconst DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\nconst DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\";\nconst HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nconst GroupingDataSourceAdapterExtender = {\n  init() {\n    this.callBase.apply(this, arguments);\n    this._initGroupingHelper();\n  },\n  _initGroupingHelper(options) {\n    const grouping = this._grouping;\n    const isAutoExpandAll = this.option(\"grouping.autoExpandAll\");\n    const isFocusedRowEnabled = this.option(\"focusedRowEnabled\");\n    const remoteOperations = options ? options.remoteOperations : this.remoteOperations();\n    const isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\n    if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\n      if (!grouping || grouping instanceof CollapsedGroupingHelper) {\n        this._grouping = new ExpandedGroupingHelper(this);\n      }\n    } else if (!grouping || grouping instanceof ExpandedGroupingHelper) {\n      this._grouping = new CollapsedGroupingHelper(this);\n    }\n  },\n  totalItemsCount() {\n    const totalCount = this.callBase();\n    return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount;\n  },\n  itemsCount() {\n    return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments);\n  },\n  allowCollapseAll() {\n    return this._grouping.allowCollapseAll();\n  },\n  isGroupItemCountable(item) {\n    return this._grouping.isGroupItemCountable(item);\n  },\n  isRowExpanded(key) {\n    const groupInfo = this._grouping.findGroupInfo(key);\n    return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll();\n  },\n  collapseAll(groupIndex) {\n    return this._collapseExpandAll(groupIndex, false);\n  },\n  expandAll(groupIndex) {\n    return this._collapseExpandAll(groupIndex, true);\n  },\n  _collapseExpandAll(groupIndex, isExpand) {\n    const that = this;\n    const dataSource = that._dataSource;\n    const group = dataSource.group();\n    const groups = gridCore.normalizeSortingInfo(group || []);\n    if (groups.length) {\n      for (let i = 0; i < groups.length; i++) {\n        if (void 0 === groupIndex || groupIndex === i) {\n          groups[i].isExpanded = isExpand;\n        } else if (group && group[i]) {\n          groups[i].isExpanded = group[i].isExpanded;\n        }\n      }\n      dataSource.group(groups);\n      that._grouping.foreachGroups((groupInfo, parents) => {\n        if (void 0 === groupIndex || groupIndex === parents.length - 1) {\n          groupInfo.isExpanded = isExpand;\n        }\n      }, false, true);\n      that.resetPagesCache();\n    }\n    return true;\n  },\n  refresh() {\n    this.callBase.apply(this, arguments);\n    return this._grouping.refresh.apply(this._grouping, arguments);\n  },\n  changeRowExpand(path) {\n    const that = this;\n    const dataSource = that._dataSource;\n    if (dataSource.group()) {\n      dataSource.beginLoading();\n      if (that._lastLoadOptions) {\n        that._lastLoadOptions.groupExpand = true;\n      }\n      return that._changeRowExpandCore(path).always(() => {\n        dataSource.endLoading();\n      });\n    }\n  },\n  _changeRowExpandCore(path) {\n    return this._grouping.changeRowExpand(path);\n  },\n  getGroupsInfo() {\n    return this._grouping._groupsInfo;\n  },\n  _hasGroupLevelsExpandState(group, isExpanded) {\n    if (group && Array.isArray(group)) {\n      for (let i = 0; i < group.length; i++) {\n        if (group[i].isExpanded === isExpanded) {\n          return true;\n        }\n      }\n    }\n  },\n  _customizeRemoteOperations(options, operationTypes) {\n    const {\n      remoteOperations: remoteOperations\n    } = options;\n    if (options.storeLoadOptions.group) {\n      if (remoteOperations.grouping && !options.isCustomLoading) {\n        if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\n          remoteOperations.paging = false;\n        }\n      }\n      if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\n        remoteOperations.paging = false;\n      }\n    } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\n      this.resetCache();\n    }\n    this.callBase.apply(this, arguments);\n  },\n  _handleDataLoading(options) {\n    this.callBase(options);\n    this._initGroupingHelper(options);\n    return this._grouping.handleDataLoading(options);\n  },\n  _handleDataLoaded(options) {\n    return this._grouping.handleDataLoaded(options, this.callBase.bind(this));\n  },\n  _handleDataLoadedCore(options) {\n    return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this));\n  }\n};\ndataSourceAdapter.extend(GroupingDataSourceAdapterExtender);\nconst GroupingDataControllerExtender = {\n  init() {\n    this.callBase();\n    this.createAction(\"onRowExpanding\");\n    this.createAction(\"onRowExpanded\");\n    this.createAction(\"onRowCollapsing\");\n    this.createAction(\"onRowCollapsed\");\n  },\n  _beforeProcessItems(items) {\n    const groupColumns = this._columnsController.getGroupColumns();\n    items = this.callBase(items);\n    if (items.length && groupColumns.length) {\n      items = this._processGroupItems(items, groupColumns.length);\n    }\n    return items;\n  },\n  _processItem(item, options) {\n    if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\n      item = this._processGroupItem(item, options);\n      options.dataIndex = 0;\n    } else {\n      item = this.callBase.apply(this, arguments);\n    }\n    return item;\n  },\n  _processGroupItem: item => item,\n  _processGroupItems(items, groupsCount, options) {\n    const that = this;\n    const groupedColumns = that._columnsController.getGroupColumns();\n    const column = groupedColumns[groupedColumns.length - groupsCount];\n    if (!options) {\n      const scrollingMode = that.option(\"scrolling.mode\");\n      options = {\n        collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\n        resultItems: [],\n        path: [],\n        values: []\n      };\n    }\n    const {\n      resultItems: resultItems\n    } = options;\n    if (options.data) {\n      if (options.collectContinuationItems || !options.data.isContinuation) {\n        resultItems.push({\n          rowType: \"group\",\n          data: options.data,\n          groupIndex: options.path.length - 1,\n          isExpanded: !!options.data.items,\n          key: options.path.slice(0),\n          values: options.values.slice(0)\n        });\n      }\n    }\n    if (items) {\n      if (0 === groupsCount) {\n        resultItems.push.apply(resultItems, items);\n      } else {\n        for (let i = 0; i < items.length; i++) {\n          const item = items[i];\n          if (item && \"items\" in item) {\n            options.data = item;\n            options.path.push(item.key);\n            options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\n            that._processGroupItems(item.items, groupsCount - 1, options);\n            options.data = void 0;\n            options.path.pop();\n            options.values.pop();\n          } else {\n            resultItems.push(item);\n          }\n        }\n      }\n    }\n    return resultItems;\n  },\n  publicMethods() {\n    return this.callBase().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"]);\n  },\n  collapseAll(groupIndex) {\n    const dataSource = this._dataSource;\n    if (dataSource && dataSource.collapseAll(groupIndex)) {\n      dataSource.pageIndex(0);\n      dataSource.reload();\n    }\n  },\n  expandAll(groupIndex) {\n    const dataSource = this._dataSource;\n    if (dataSource && dataSource.expandAll(groupIndex)) {\n      dataSource.pageIndex(0);\n      dataSource.reload();\n    }\n  },\n  changeRowExpand(key) {\n    const that = this;\n    const expanded = that.isRowExpanded(key);\n    const args = {\n      key: key,\n      expanded: expanded\n    };\n    that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\n    if (!args.cancel) {\n      return when(that._changeRowExpandCore(key)).done(() => {\n        args.expanded = !expanded;\n        that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args);\n      });\n    }\n    return new Deferred().resolve();\n  },\n  _changeRowExpandCore(key) {\n    const that = this;\n    const dataSource = this._dataSource;\n    const d = new Deferred();\n    if (!dataSource) {\n      d.resolve();\n    } else {\n      when(dataSource.changeRowExpand(key)).done(() => {\n        that.load().done(d.resolve).fail(d.reject);\n      }).fail(d.reject);\n    }\n    return d;\n  },\n  isRowExpanded(key) {\n    const dataSource = this._dataSource;\n    return dataSource && dataSource.isRowExpanded(key);\n  },\n  expandRow(key) {\n    if (!this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n    return new Deferred().resolve();\n  },\n  collapseRow(key) {\n    if (this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n    return new Deferred().resolve();\n  },\n  optionChanged(args) {\n    if (\"grouping\" === args.name) {\n      args.name = \"dataSource\";\n    }\n    this.callBase(args);\n  }\n};\nconst onGroupingMenuItemClick = function (column, params) {\n  const columnsController = this._columnsController;\n  switch (params.itemData.value) {\n    case \"group\":\n      {\n        const groups = columnsController._dataSource.group() || [];\n        columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\n        break;\n      }\n    case \"ungroup\":\n      columnsController.columnOption(column.dataField, \"groupIndex\", -1);\n      break;\n    case \"ungroupAll\":\n      this.component.clearGrouping();\n  }\n};\nexport const GroupingHeaderPanelExtender = {\n  _getToolbarItems() {\n    const items = this.callBase();\n    return this._appendGroupingItem(items);\n  },\n  _appendGroupingItem(items) {\n    if (this._isGroupPanelVisible()) {\n      let isRendered = false;\n      const toolbarItem = {\n        template: () => {\n          const $groupPanel = $(\"<div>\").addClass(\"dx-datagrid-group-panel\");\n          this._updateGroupPanelContent($groupPanel);\n          registerKeyboardAction(\"groupPanel\", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));\n          return $groupPanel;\n        },\n        name: \"groupPanel\",\n        onItemRendered: () => {\n          isRendered && this.renderCompleted.fire();\n          isRendered = true;\n        },\n        location: \"before\",\n        locateInMenu: \"never\",\n        sortIndex: 1\n      };\n      items.push(toolbarItem);\n      this.updateToolbarDimensions();\n    }\n    return items;\n  },\n  _handleActionKeyDown(args) {\n    const {\n      event: event\n    } = args;\n    const $target = $(event.target);\n    const groupColumnIndex = $target.closest(\".dx-group-panel-item\").index();\n    const column = this._columnsController.getGroupColumns()[groupColumnIndex];\n    const columnIndex = column && column.index;\n    if ($target.is(\".dx-header-filter\")) {\n      this.getController(\"headerFilter\").showHeaderFilterMenu(columnIndex, true);\n    } else {\n      this._processGroupItemAction(columnIndex);\n    }\n    event.preventDefault();\n  },\n  _isGroupPanelVisible() {\n    const groupPanelOptions = this.option(\"groupPanel\");\n    let isVisible;\n    if (groupPanelOptions) {\n      isVisible = groupPanelOptions.visible;\n      if (\"auto\" === isVisible) {\n        isVisible = \"desktop\" === devices.current().deviceType;\n      }\n    }\n    return isVisible;\n  },\n  _renderGroupPanelItems($groupPanel, groupColumns) {\n    const that = this;\n    $groupPanel.empty();\n    each(groupColumns, (index, groupColumn) => {\n      that._createGroupPanelItem($groupPanel, groupColumn);\n    });\n    restoreFocus(this);\n  },\n  _createGroupPanelItem($rootElement, groupColumn) {\n    const $groupPanelItem = $(\"<div>\").addClass(groupColumn.cssClass).addClass(\"dx-group-panel-item\").data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\n    setTabIndex(this, $groupPanelItem);\n    return $groupPanelItem;\n  },\n  _columnOptionChanged(e) {\n    if (!this._requireReady && !gridCore.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\n      const $toolbarElement = this.element();\n      const $groupPanel = $toolbarElement && $toolbarElement.find(\".dx-datagrid-group-panel\");\n      if ($groupPanel && $groupPanel.length) {\n        this._updateGroupPanelContent($groupPanel);\n        this.updateToolbarDimensions();\n        this.renderCompleted.fire();\n      }\n    }\n    this.callBase();\n  },\n  _updateGroupPanelContent($groupPanel) {\n    const groupColumns = this.getController(\"columns\").getGroupColumns();\n    const groupPanelOptions = this.option(\"groupPanel\");\n    this._renderGroupPanelItems($groupPanel, groupColumns);\n    if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\n      $(\"<div>\").addClass(\"dx-group-panel-message\").text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\n      $groupPanel.closest(\".dx-toolbar-item\").addClass(\"dx-toolbar-label\");\n      $groupPanel.closest(\".dx-toolbar-label\").css(\"maxWidth\", \"none\");\n    }\n  },\n  allowDragging(column) {\n    const groupPanelOptions = this.option(\"groupPanel\");\n    return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping;\n  },\n  getColumnElements() {\n    const $element = this.element();\n    return $element && $element.find(\".dx-group-panel-item\");\n  },\n  getColumns() {\n    return this.getController(\"columns\").getGroupColumns();\n  },\n  getBoundingRect() {\n    const $element = this.element();\n    if ($element && $element.find(\".dx-datagrid-group-panel\").length) {\n      const offset = $element.offset();\n      return {\n        top: offset.top,\n        bottom: offset.top + getHeight($element)\n      };\n    }\n    return null;\n  },\n  getName: () => \"group\",\n  getContextMenuItems(options) {\n    const that = this;\n    const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n    const $groupedColumnElement = $(options.targetElement).closest(\".dx-group-panel-item\");\n    let items;\n    if ($groupedColumnElement.length) {\n      options.column = $groupedColumnElement.data(\"columnData\");\n    }\n    if (contextMenuEnabled && options.column) {\n      const {\n        column: column\n      } = options;\n      const isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;\n      if (isGroupingAllowed) {\n        const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\n        const groupingTexts = that.option(\"grouping.texts\");\n        const onItemClick = onGroupingMenuItemClick.bind(that, column);\n        items = [{\n          text: groupingTexts.ungroup,\n          value: \"ungroup\",\n          disabled: !isColumnGrouped,\n          onItemClick: onItemClick\n        }, {\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        }];\n      }\n    }\n    return items;\n  },\n  isVisible() {\n    return this.callBase() || this._isGroupPanelVisible();\n  },\n  optionChanged(args) {\n    if (\"groupPanel\" === args.name) {\n      this._invalidate();\n      args.handled = true;\n    } else {\n      this.callBase(args);\n    }\n  }\n};\nconst GroupingRowsViewExtender = {\n  getContextMenuItems(options) {\n    const that = this;\n    const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n    let items;\n    if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\n      const columnsController = that._columnsController;\n      const column = columnsController.columnOption(\"groupIndex:\" + options.row.groupIndex);\n      if (column && column.allowGrouping) {\n        const groupingTexts = that.option(\"grouping.texts\");\n        const onItemClick = onGroupingMenuItemClick.bind(that, column);\n        items = [];\n        items.push({\n          text: groupingTexts.ungroup,\n          value: \"ungroup\",\n          onItemClick: onItemClick\n        }, {\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        });\n      }\n    }\n    return items;\n  },\n  _rowClick(e) {\n    const that = this;\n    const expandMode = that.option(\"grouping.expandMode\");\n    const scrollingMode = that.option(\"scrolling.mode\");\n    const isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && $(e.event.target).closest(\".dx-group-row\").length;\n    const isExpandButtonClicked = $(e.event.target).closest(\".dx-datagrid-expand\").length;\n    if (isGroupRowStateChanged || isExpandButtonClicked) {\n      that._changeGroupRowState(e);\n    }\n    that.callBase(e);\n  },\n  _changeGroupRowState(e) {\n    const dataController = this.getController(\"data\");\n    const row = dataController.items()[e.rowIndex];\n    const allowCollapsing = this._columnsController.columnOption(\"groupIndex:\" + row.groupIndex, \"allowCollapsing\");\n    if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\n      dataController.changeRowExpand(row.key, true);\n      e.event.preventDefault();\n      e.handled = true;\n    }\n  }\n};\nconst columnHeadersViewExtender = {\n  getContextMenuItems(options) {\n    const that = this;\n    const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n    let items = that.callBase(options);\n    if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n      const {\n        column: column\n      } = options;\n      if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {\n        const groupingTexts = that.option(\"grouping.texts\");\n        const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\n        const onItemClick = onGroupingMenuItemClick.bind(that, column);\n        items = items || [];\n        items.push({\n          text: groupingTexts.groupByThisColumn,\n          value: \"group\",\n          beginGroup: true,\n          disabled: isColumnGrouped,\n          onItemClick: onItemClick\n        });\n        if (column.showWhenGrouped) {\n          items.push({\n            text: groupingTexts.ungroup,\n            value: \"ungroup\",\n            disabled: !isColumnGrouped,\n            onItemClick: onItemClick\n          });\n        }\n        items.push({\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        });\n      }\n    }\n    return items;\n  }\n};\ngridCore.registerModule(\"grouping\", {\n  defaultOptions: () => ({\n    grouping: {\n      autoExpandAll: true,\n      allowCollapsing: true,\n      contextMenuEnabled: false,\n      expandMode: \"buttonClick\",\n      texts: {\n        groupContinuesMessage: messageLocalization.format(\"dxDataGrid-groupContinuesMessage\"),\n        groupContinuedMessage: messageLocalization.format(\"dxDataGrid-groupContinuedMessage\"),\n        groupByThisColumn: messageLocalization.format(\"dxDataGrid-groupHeaderText\"),\n        ungroup: messageLocalization.format(\"dxDataGrid-ungroupHeaderText\"),\n        ungroupAll: messageLocalization.format(\"dxDataGrid-ungroupAllText\")\n      }\n    },\n    groupPanel: {\n      visible: false,\n      emptyPanelText: messageLocalization.format(\"dxDataGrid-groupPanelEmptyText\"),\n      allowColumnDragging: true\n    }\n  }),\n  extenders: {\n    controllers: {\n      data: GroupingDataControllerExtender,\n      columns: {\n        _getExpandColumnOptions() {\n          const options = this.callBase.apply(this, arguments);\n          options.cellTemplate = gridCore.getExpandCellTemplate();\n          return options;\n        }\n      },\n      editing: {\n        _isProcessedItem: item => isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")\n      }\n    },\n    views: {\n      headerPanel: GroupingHeaderPanelExtender,\n      rowsView: GroupingRowsViewExtender,\n      columnHeadersView: columnHeadersViewExtender\n    }\n  }\n});","map":{"version":3,"names":["registerKeyboardAction","getHeight","$","messageLocalization","isDefined","isString","each","devices","when","Deferred","setTabIndex","restoreFocus","dataSourceAdapter","GroupingHelper","CollapsedGroupingHelper","ExpandedGroupingHelper","gridCore","DATAGRID_GROUP_PANEL_CLASS","DATAGRID_GROUP_PANEL_MESSAGE_CLASS","DATAGRID_GROUP_PANEL_ITEM_CLASS","DATAGRID_GROUP_PANEL_LABEL_CLASS","DATAGRID_GROUP_PANEL_CONTAINER_CLASS","DATAGRID_EXPAND_CLASS","DATAGRID_GROUP_ROW_CLASS","HEADER_FILTER_CLASS_SELECTOR","GroupingDataSourceAdapterExtender","init","callBase","apply","arguments","_initGroupingHelper","options","grouping","_grouping","isAutoExpandAll","option","isFocusedRowEnabled","remoteOperations","isODataRemoteOperations","filtering","sorting","paging","totalItemsCount","totalCount","_dataSource","group","requireTotalCount","totalCountCorrection","itemsCount","allowCollapseAll","isGroupItemCountable","item","isRowExpanded","key","groupInfo","findGroupInfo","isExpanded","collapseAll","groupIndex","_collapseExpandAll","expandAll","isExpand","that","dataSource","groups","normalizeSortingInfo","length","i","foreachGroups","parents","resetPagesCache","refresh","changeRowExpand","path","beginLoading","_lastLoadOptions","groupExpand","_changeRowExpandCore","always","endLoading","getGroupsInfo","_groupsInfo","_hasGroupLevelsExpandState","Array","isArray","_customizeRemoteOperations","operationTypes","storeLoadOptions","isCustomLoading","groupPaging","resetCache","_handleDataLoading","handleDataLoading","_handleDataLoaded","handleDataLoaded","bind","_handleDataLoadedCore","handleDataLoadedCore","extend","GroupingDataControllerExtender","createAction","_beforeProcessItems","items","groupColumns","_columnsController","getGroupColumns","_processGroupItems","_processItem","rowType","indexOf","_processGroupItem","dataIndex","groupsCount","groupedColumns","column","scrollingMode","collectContinuationItems","resultItems","values","data","isContinuation","push","slice","deserializeValue","calculateDisplayValue","pop","publicMethods","concat","pageIndex","reload","expanded","args","executeAction","cancel","done","resolve","d","load","fail","reject","expandRow","collapseRow","optionChanged","name","onGroupingMenuItemClick","params","columnsController","itemData","value","columnOption","dataField","component","clearGrouping","GroupingHeaderPanelExtender","_getToolbarItems","_appendGroupingItem","_isGroupPanelVisible","isRendered","toolbarItem","template","$groupPanel","addClass","_updateGroupPanelContent","_handleActionKeyDown","onItemRendered","renderCompleted","fire","location","locateInMenu","sortIndex","updateToolbarDimensions","event","$target","target","groupColumnIndex","closest","index","columnIndex","is","getController","showHeaderFilterMenu","_processGroupItemAction","preventDefault","groupPanelOptions","isVisible","visible","current","deviceType","_renderGroupPanelItems","empty","groupColumn","_createGroupPanelItem","$rootElement","$groupPanelItem","cssClass","appendTo","text","caption","_columnOptionChanged","e","_requireReady","checkChanges","optionNames","$toolbarElement","element","find","allowColumnDragging","emptyPanelText","css","allowDragging","allowGrouping","getColumnElements","$element","getColumns","getBoundingRect","offset","top","bottom","getName","getContextMenuItems","contextMenuEnabled","$groupedColumnElement","targetElement","isGroupingAllowed","isColumnGrouped","groupingTexts","onItemClick","ungroup","disabled","ungroupAll","_invalidate","handled","GroupingRowsViewExtender","row","_rowClick","expandMode","isGroupRowStateChanged","isExpandButtonClicked","_changeGroupRowState","dataController","rowIndex","allowCollapsing","columnHeadersViewExtender","command","groupByThisColumn","beginGroup","showWhenGrouped","registerModule","defaultOptions","autoExpandAll","texts","groupContinuesMessage","format","groupContinuedMessage","groupPanel","extenders","controllers","columns","_getExpandColumnOptions","cellTemplate","getExpandCellTemplate","editing","_isProcessedItem","views","headerPanel","rowsView","columnHeadersView"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/__internal/grids/data_grid/grouping/module.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/data_grid/grouping/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    registerKeyboardAction\r\n} from \"../../../../ui/grid_core/ui.grid_core.accessibility\";\r\nimport {\r\n    getHeight\r\n} from \"../../../../core/utils/size\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport messageLocalization from \"../../../../localization/message\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport devices from \"../../../../core/devices\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    setTabIndex,\r\n    restoreFocus\r\n} from \"../../../../ui/shared/accessibility\";\r\nimport dataSourceAdapter from \"../module_data_source_adapter\";\r\nimport {\r\n    GroupingHelper as CollapsedGroupingHelper\r\n} from \"./module_collapsed\";\r\nimport {\r\n    GroupingHelper as ExpandedGroupingHelper\r\n} from \"./module_expanded\";\r\nimport gridCore from \"../module_core\";\r\nconst DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\";\r\nconst DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\";\r\nconst DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\r\nconst DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\";\r\nconst DATAGRID_GROUP_PANEL_CONTAINER_CLASS = \"dx-toolbar-item\";\r\nconst DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\r\nconst DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\";\r\nconst HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\r\nconst GroupingDataSourceAdapterExtender = {\r\n    init() {\r\n        this.callBase.apply(this, arguments);\r\n        this._initGroupingHelper()\r\n    },\r\n    _initGroupingHelper(options) {\r\n        const grouping = this._grouping;\r\n        const isAutoExpandAll = this.option(\"grouping.autoExpandAll\");\r\n        const isFocusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n        const remoteOperations = options ? options.remoteOperations : this.remoteOperations();\r\n        const isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\r\n        if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\r\n            if (!grouping || grouping instanceof CollapsedGroupingHelper) {\r\n                this._grouping = new ExpandedGroupingHelper(this)\r\n            }\r\n        } else if (!grouping || grouping instanceof ExpandedGroupingHelper) {\r\n            this._grouping = new CollapsedGroupingHelper(this)\r\n        }\r\n    },\r\n    totalItemsCount() {\r\n        const totalCount = this.callBase();\r\n        return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount\r\n    },\r\n    itemsCount() {\r\n        return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments)\r\n    },\r\n    allowCollapseAll() {\r\n        return this._grouping.allowCollapseAll()\r\n    },\r\n    isGroupItemCountable(item) {\r\n        return this._grouping.isGroupItemCountable(item)\r\n    },\r\n    isRowExpanded(key) {\r\n        const groupInfo = this._grouping.findGroupInfo(key);\r\n        return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll()\r\n    },\r\n    collapseAll(groupIndex) {\r\n        return this._collapseExpandAll(groupIndex, false)\r\n    },\r\n    expandAll(groupIndex) {\r\n        return this._collapseExpandAll(groupIndex, true)\r\n    },\r\n    _collapseExpandAll(groupIndex, isExpand) {\r\n        const that = this;\r\n        const dataSource = that._dataSource;\r\n        const group = dataSource.group();\r\n        const groups = gridCore.normalizeSortingInfo(group || []);\r\n        if (groups.length) {\r\n            for (let i = 0; i < groups.length; i++) {\r\n                if (void 0 === groupIndex || groupIndex === i) {\r\n                    groups[i].isExpanded = isExpand\r\n                } else if (group && group[i]) {\r\n                    groups[i].isExpanded = group[i].isExpanded\r\n                }\r\n            }\r\n            dataSource.group(groups);\r\n            that._grouping.foreachGroups((groupInfo, parents) => {\r\n                if (void 0 === groupIndex || groupIndex === parents.length - 1) {\r\n                    groupInfo.isExpanded = isExpand\r\n                }\r\n            }, false, true);\r\n            that.resetPagesCache()\r\n        }\r\n        return true\r\n    },\r\n    refresh() {\r\n        this.callBase.apply(this, arguments);\r\n        return this._grouping.refresh.apply(this._grouping, arguments)\r\n    },\r\n    changeRowExpand(path) {\r\n        const that = this;\r\n        const dataSource = that._dataSource;\r\n        if (dataSource.group()) {\r\n            dataSource.beginLoading();\r\n            if (that._lastLoadOptions) {\r\n                that._lastLoadOptions.groupExpand = true\r\n            }\r\n            return that._changeRowExpandCore(path).always(() => {\r\n                dataSource.endLoading()\r\n            })\r\n        }\r\n    },\r\n    _changeRowExpandCore(path) {\r\n        return this._grouping.changeRowExpand(path)\r\n    },\r\n    getGroupsInfo() {\r\n        return this._grouping._groupsInfo\r\n    },\r\n    _hasGroupLevelsExpandState(group, isExpanded) {\r\n        if (group && Array.isArray(group)) {\r\n            for (let i = 0; i < group.length; i++) {\r\n                if (group[i].isExpanded === isExpanded) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _customizeRemoteOperations(options, operationTypes) {\r\n        const {\r\n            remoteOperations: remoteOperations\r\n        } = options;\r\n        if (options.storeLoadOptions.group) {\r\n            if (remoteOperations.grouping && !options.isCustomLoading) {\r\n                if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\r\n                    remoteOperations.paging = false\r\n                }\r\n            }\r\n            if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\r\n                remoteOperations.paging = false\r\n            }\r\n        } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\r\n            this.resetCache()\r\n        }\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _handleDataLoading(options) {\r\n        this.callBase(options);\r\n        this._initGroupingHelper(options);\r\n        return this._grouping.handleDataLoading(options)\r\n    },\r\n    _handleDataLoaded(options) {\r\n        return this._grouping.handleDataLoaded(options, this.callBase.bind(this))\r\n    },\r\n    _handleDataLoadedCore(options) {\r\n        return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this))\r\n    }\r\n};\r\ndataSourceAdapter.extend(GroupingDataSourceAdapterExtender);\r\nconst GroupingDataControllerExtender = {\r\n    init() {\r\n        this.callBase();\r\n        this.createAction(\"onRowExpanding\");\r\n        this.createAction(\"onRowExpanded\");\r\n        this.createAction(\"onRowCollapsing\");\r\n        this.createAction(\"onRowCollapsed\")\r\n    },\r\n    _beforeProcessItems(items) {\r\n        const groupColumns = this._columnsController.getGroupColumns();\r\n        items = this.callBase(items);\r\n        if (items.length && groupColumns.length) {\r\n            items = this._processGroupItems(items, groupColumns.length)\r\n        }\r\n        return items\r\n    },\r\n    _processItem(item, options) {\r\n        if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\r\n            item = this._processGroupItem(item, options);\r\n            options.dataIndex = 0\r\n        } else {\r\n            item = this.callBase.apply(this, arguments)\r\n        }\r\n        return item\r\n    },\r\n    _processGroupItem: item => item,\r\n    _processGroupItems(items, groupsCount, options) {\r\n        const that = this;\r\n        const groupedColumns = that._columnsController.getGroupColumns();\r\n        const column = groupedColumns[groupedColumns.length - groupsCount];\r\n        if (!options) {\r\n            const scrollingMode = that.option(\"scrolling.mode\");\r\n            options = {\r\n                collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\r\n                resultItems: [],\r\n                path: [],\r\n                values: []\r\n            }\r\n        }\r\n        const {\r\n            resultItems: resultItems\r\n        } = options;\r\n        if (options.data) {\r\n            if (options.collectContinuationItems || !options.data.isContinuation) {\r\n                resultItems.push({\r\n                    rowType: \"group\",\r\n                    data: options.data,\r\n                    groupIndex: options.path.length - 1,\r\n                    isExpanded: !!options.data.items,\r\n                    key: options.path.slice(0),\r\n                    values: options.values.slice(0)\r\n                })\r\n            }\r\n        }\r\n        if (items) {\r\n            if (0 === groupsCount) {\r\n                resultItems.push.apply(resultItems, items)\r\n            } else {\r\n                for (let i = 0; i < items.length; i++) {\r\n                    const item = items[i];\r\n                    if (item && \"items\" in item) {\r\n                        options.data = item;\r\n                        options.path.push(item.key);\r\n                        options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\r\n                        that._processGroupItems(item.items, groupsCount - 1, options);\r\n                        options.data = void 0;\r\n                        options.path.pop();\r\n                        options.values.pop()\r\n                    } else {\r\n                        resultItems.push(item)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return resultItems\r\n    },\r\n    publicMethods() {\r\n        return this.callBase().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"])\r\n    },\r\n    collapseAll(groupIndex) {\r\n        const dataSource = this._dataSource;\r\n        if (dataSource && dataSource.collapseAll(groupIndex)) {\r\n            dataSource.pageIndex(0);\r\n            dataSource.reload()\r\n        }\r\n    },\r\n    expandAll(groupIndex) {\r\n        const dataSource = this._dataSource;\r\n        if (dataSource && dataSource.expandAll(groupIndex)) {\r\n            dataSource.pageIndex(0);\r\n            dataSource.reload()\r\n        }\r\n    },\r\n    changeRowExpand(key) {\r\n        const that = this;\r\n        const expanded = that.isRowExpanded(key);\r\n        const args = {\r\n            key: key,\r\n            expanded: expanded\r\n        };\r\n        that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\r\n        if (!args.cancel) {\r\n            return when(that._changeRowExpandCore(key)).done(() => {\r\n                args.expanded = !expanded;\r\n                that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args)\r\n            })\r\n        }\r\n        return (new Deferred).resolve()\r\n    },\r\n    _changeRowExpandCore(key) {\r\n        const that = this;\r\n        const dataSource = this._dataSource;\r\n        const d = new Deferred;\r\n        if (!dataSource) {\r\n            d.resolve()\r\n        } else {\r\n            when(dataSource.changeRowExpand(key)).done(() => {\r\n                that.load().done(d.resolve).fail(d.reject)\r\n            }).fail(d.reject)\r\n        }\r\n        return d\r\n    },\r\n    isRowExpanded(key) {\r\n        const dataSource = this._dataSource;\r\n        return dataSource && dataSource.isRowExpanded(key)\r\n    },\r\n    expandRow(key) {\r\n        if (!this.isRowExpanded(key)) {\r\n            return this.changeRowExpand(key)\r\n        }\r\n        return (new Deferred).resolve()\r\n    },\r\n    collapseRow(key) {\r\n        if (this.isRowExpanded(key)) {\r\n            return this.changeRowExpand(key)\r\n        }\r\n        return (new Deferred).resolve()\r\n    },\r\n    optionChanged(args) {\r\n        if (\"grouping\" === args.name) {\r\n            args.name = \"dataSource\"\r\n        }\r\n        this.callBase(args)\r\n    }\r\n};\r\nconst onGroupingMenuItemClick = function(column, params) {\r\n    const columnsController = this._columnsController;\r\n    switch (params.itemData.value) {\r\n        case \"group\": {\r\n            const groups = columnsController._dataSource.group() || [];\r\n            columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\r\n            break\r\n        }\r\n        case \"ungroup\":\r\n            columnsController.columnOption(column.dataField, \"groupIndex\", -1);\r\n            break;\r\n        case \"ungroupAll\":\r\n            this.component.clearGrouping()\r\n    }\r\n};\r\nexport const GroupingHeaderPanelExtender = {\r\n    _getToolbarItems() {\r\n        const items = this.callBase();\r\n        return this._appendGroupingItem(items)\r\n    },\r\n    _appendGroupingItem(items) {\r\n        if (this._isGroupPanelVisible()) {\r\n            let isRendered = false;\r\n            const toolbarItem = {\r\n                template: () => {\r\n                    const $groupPanel = $(\"<div>\").addClass(\"dx-datagrid-group-panel\");\r\n                    this._updateGroupPanelContent($groupPanel);\r\n                    registerKeyboardAction(\"groupPanel\", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));\r\n                    return $groupPanel\r\n                },\r\n                name: \"groupPanel\",\r\n                onItemRendered: () => {\r\n                    isRendered && this.renderCompleted.fire();\r\n                    isRendered = true\r\n                },\r\n                location: \"before\",\r\n                locateInMenu: \"never\",\r\n                sortIndex: 1\r\n            };\r\n            items.push(toolbarItem);\r\n            this.updateToolbarDimensions()\r\n        }\r\n        return items\r\n    },\r\n    _handleActionKeyDown(args) {\r\n        const {\r\n            event: event\r\n        } = args;\r\n        const $target = $(event.target);\r\n        const groupColumnIndex = $target.closest(\".dx-group-panel-item\").index();\r\n        const column = this._columnsController.getGroupColumns()[groupColumnIndex];\r\n        const columnIndex = column && column.index;\r\n        if ($target.is(\".dx-header-filter\")) {\r\n            this.getController(\"headerFilter\").showHeaderFilterMenu(columnIndex, true)\r\n        } else {\r\n            this._processGroupItemAction(columnIndex)\r\n        }\r\n        event.preventDefault()\r\n    },\r\n    _isGroupPanelVisible() {\r\n        const groupPanelOptions = this.option(\"groupPanel\");\r\n        let isVisible;\r\n        if (groupPanelOptions) {\r\n            isVisible = groupPanelOptions.visible;\r\n            if (\"auto\" === isVisible) {\r\n                isVisible = \"desktop\" === devices.current().deviceType\r\n            }\r\n        }\r\n        return isVisible\r\n    },\r\n    _renderGroupPanelItems($groupPanel, groupColumns) {\r\n        const that = this;\r\n        $groupPanel.empty();\r\n        each(groupColumns, (index, groupColumn) => {\r\n            that._createGroupPanelItem($groupPanel, groupColumn)\r\n        });\r\n        restoreFocus(this)\r\n    },\r\n    _createGroupPanelItem($rootElement, groupColumn) {\r\n        const $groupPanelItem = $(\"<div>\").addClass(groupColumn.cssClass).addClass(\"dx-group-panel-item\").data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\r\n        setTabIndex(this, $groupPanelItem);\r\n        return $groupPanelItem\r\n    },\r\n    _columnOptionChanged(e) {\r\n        if (!this._requireReady && !gridCore.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\r\n            const $toolbarElement = this.element();\r\n            const $groupPanel = $toolbarElement && $toolbarElement.find(\".dx-datagrid-group-panel\");\r\n            if ($groupPanel && $groupPanel.length) {\r\n                this._updateGroupPanelContent($groupPanel);\r\n                this.updateToolbarDimensions();\r\n                this.renderCompleted.fire()\r\n            }\r\n        }\r\n        this.callBase()\r\n    },\r\n    _updateGroupPanelContent($groupPanel) {\r\n        const groupColumns = this.getController(\"columns\").getGroupColumns();\r\n        const groupPanelOptions = this.option(\"groupPanel\");\r\n        this._renderGroupPanelItems($groupPanel, groupColumns);\r\n        if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\r\n            $(\"<div>\").addClass(\"dx-group-panel-message\").text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\r\n            $groupPanel.closest(\".dx-toolbar-item\").addClass(\"dx-toolbar-label\");\r\n            $groupPanel.closest(\".dx-toolbar-label\").css(\"maxWidth\", \"none\")\r\n        }\r\n    },\r\n    allowDragging(column) {\r\n        const groupPanelOptions = this.option(\"groupPanel\");\r\n        return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping\r\n    },\r\n    getColumnElements() {\r\n        const $element = this.element();\r\n        return $element && $element.find(\".dx-group-panel-item\")\r\n    },\r\n    getColumns() {\r\n        return this.getController(\"columns\").getGroupColumns()\r\n    },\r\n    getBoundingRect() {\r\n        const $element = this.element();\r\n        if ($element && $element.find(\".dx-datagrid-group-panel\").length) {\r\n            const offset = $element.offset();\r\n            return {\r\n                top: offset.top,\r\n                bottom: offset.top + getHeight($element)\r\n            }\r\n        }\r\n        return null\r\n    },\r\n    getName: () => \"group\",\r\n    getContextMenuItems(options) {\r\n        const that = this;\r\n        const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\r\n        const $groupedColumnElement = $(options.targetElement).closest(\".dx-group-panel-item\");\r\n        let items;\r\n        if ($groupedColumnElement.length) {\r\n            options.column = $groupedColumnElement.data(\"columnData\")\r\n        }\r\n        if (contextMenuEnabled && options.column) {\r\n            const {\r\n                column: column\r\n            } = options;\r\n            const isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;\r\n            if (isGroupingAllowed) {\r\n                const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\r\n                const groupingTexts = that.option(\"grouping.texts\");\r\n                const onItemClick = onGroupingMenuItemClick.bind(that, column);\r\n                items = [{\r\n                    text: groupingTexts.ungroup,\r\n                    value: \"ungroup\",\r\n                    disabled: !isColumnGrouped,\r\n                    onItemClick: onItemClick\r\n                }, {\r\n                    text: groupingTexts.ungroupAll,\r\n                    value: \"ungroupAll\",\r\n                    onItemClick: onItemClick\r\n                }]\r\n            }\r\n        }\r\n        return items\r\n    },\r\n    isVisible() {\r\n        return this.callBase() || this._isGroupPanelVisible()\r\n    },\r\n    optionChanged(args) {\r\n        if (\"groupPanel\" === args.name) {\r\n            this._invalidate();\r\n            args.handled = true\r\n        } else {\r\n            this.callBase(args)\r\n        }\r\n    }\r\n};\r\nconst GroupingRowsViewExtender = {\r\n    getContextMenuItems(options) {\r\n        const that = this;\r\n        const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\r\n        let items;\r\n        if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\r\n            const columnsController = that._columnsController;\r\n            const column = columnsController.columnOption(\"groupIndex:\" + options.row.groupIndex);\r\n            if (column && column.allowGrouping) {\r\n                const groupingTexts = that.option(\"grouping.texts\");\r\n                const onItemClick = onGroupingMenuItemClick.bind(that, column);\r\n                items = [];\r\n                items.push({\r\n                    text: groupingTexts.ungroup,\r\n                    value: \"ungroup\",\r\n                    onItemClick: onItemClick\r\n                }, {\r\n                    text: groupingTexts.ungroupAll,\r\n                    value: \"ungroupAll\",\r\n                    onItemClick: onItemClick\r\n                })\r\n            }\r\n        }\r\n        return items\r\n    },\r\n    _rowClick(e) {\r\n        const that = this;\r\n        const expandMode = that.option(\"grouping.expandMode\");\r\n        const scrollingMode = that.option(\"scrolling.mode\");\r\n        const isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && $(e.event.target).closest(\".dx-group-row\").length;\r\n        const isExpandButtonClicked = $(e.event.target).closest(\".dx-datagrid-expand\").length;\r\n        if (isGroupRowStateChanged || isExpandButtonClicked) {\r\n            that._changeGroupRowState(e)\r\n        }\r\n        that.callBase(e)\r\n    },\r\n    _changeGroupRowState(e) {\r\n        const dataController = this.getController(\"data\");\r\n        const row = dataController.items()[e.rowIndex];\r\n        const allowCollapsing = this._columnsController.columnOption(\"groupIndex:\" + row.groupIndex, \"allowCollapsing\");\r\n        if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\r\n            dataController.changeRowExpand(row.key, true);\r\n            e.event.preventDefault();\r\n            e.handled = true\r\n        }\r\n    }\r\n};\r\nconst columnHeadersViewExtender = {\r\n    getContextMenuItems(options) {\r\n        const that = this;\r\n        const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\r\n        let items = that.callBase(options);\r\n        if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\r\n            const {\r\n                column: column\r\n            } = options;\r\n            if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {\r\n                const groupingTexts = that.option(\"grouping.texts\");\r\n                const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\r\n                const onItemClick = onGroupingMenuItemClick.bind(that, column);\r\n                items = items || [];\r\n                items.push({\r\n                    text: groupingTexts.groupByThisColumn,\r\n                    value: \"group\",\r\n                    beginGroup: true,\r\n                    disabled: isColumnGrouped,\r\n                    onItemClick: onItemClick\r\n                });\r\n                if (column.showWhenGrouped) {\r\n                    items.push({\r\n                        text: groupingTexts.ungroup,\r\n                        value: \"ungroup\",\r\n                        disabled: !isColumnGrouped,\r\n                        onItemClick: onItemClick\r\n                    })\r\n                }\r\n                items.push({\r\n                    text: groupingTexts.ungroupAll,\r\n                    value: \"ungroupAll\",\r\n                    onItemClick: onItemClick\r\n                })\r\n            }\r\n        }\r\n        return items\r\n    }\r\n};\r\ngridCore.registerModule(\"grouping\", {\r\n    defaultOptions: () => ({\r\n        grouping: {\r\n            autoExpandAll: true,\r\n            allowCollapsing: true,\r\n            contextMenuEnabled: false,\r\n            expandMode: \"buttonClick\",\r\n            texts: {\r\n                groupContinuesMessage: messageLocalization.format(\"dxDataGrid-groupContinuesMessage\"),\r\n                groupContinuedMessage: messageLocalization.format(\"dxDataGrid-groupContinuedMessage\"),\r\n                groupByThisColumn: messageLocalization.format(\"dxDataGrid-groupHeaderText\"),\r\n                ungroup: messageLocalization.format(\"dxDataGrid-ungroupHeaderText\"),\r\n                ungroupAll: messageLocalization.format(\"dxDataGrid-ungroupAllText\")\r\n            }\r\n        },\r\n        groupPanel: {\r\n            visible: false,\r\n            emptyPanelText: messageLocalization.format(\"dxDataGrid-groupPanelEmptyText\"),\r\n            allowColumnDragging: true\r\n        }\r\n    }),\r\n    extenders: {\r\n        controllers: {\r\n            data: GroupingDataControllerExtender,\r\n            columns: {\r\n                _getExpandColumnOptions() {\r\n                    const options = this.callBase.apply(this, arguments);\r\n                    options.cellTemplate = gridCore.getExpandCellTemplate();\r\n                    return options\r\n                }\r\n            },\r\n            editing: {\r\n                _isProcessedItem: item => isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")\r\n            }\r\n        },\r\n        views: {\r\n            headerPanel: GroupingHeaderPanelExtender,\r\n            rowsView: GroupingRowsViewExtender,\r\n            columnHeadersView: columnHeadersViewExtender\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}