{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport { resetActiveElement } from \"../../core/utils/dom\";\nimport { isDefined, isObject, isFunction, isEmptyObject } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport modules from \"./ui.grid_core.modules\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointerEvents from \"../../events/pointer\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { confirm } from \"../dialog\";\nimport messageLocalization from \"../../localization/message\";\nimport devices from \"../../core/devices\";\nimport { when, Deferred, fromPromise } from \"../../core/utils/deferred\";\nimport { equalByValue, noop } from \"../../core/utils/common\";\nimport * as iconUtils from \"../../core/utils/icon\";\nimport { EDITOR_CELL_CLASS, ROW_CLASS, EDIT_FORM_CLASS, DATA_EDIT_DATA_INSERT_TYPE, DATA_EDIT_DATA_REMOVE_TYPE, EDITING_POPUP_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, TARGET_COMPONENT_NAME, EDITORS_INPUT_SELECTOR, FOCUSABLE_ELEMENT_SELECTOR, EDIT_MODE_ROW, EDIT_MODES, ROW_BASED_MODES, FIRST_NEW_ROW_POSITION, LAST_NEW_ROW_POSITION, PAGE_BOTTOM_NEW_ROW_POSITION, PAGE_TOP_NEW_ROW_POSITION, VIEWPORT_BOTTOM_NEW_ROW_POSITION, VIEWPORT_TOP_NEW_ROW_POSITION } from \"./ui.grid_core.editing_constants\";\nimport { deepExtendArraySafe } from \"../../core/utils/object\";\nvar READONLY_CLASS = \"readonly\";\nvar LINK_CLASS = \"dx-link\";\nvar ROW_SELECTED = \"dx-selection\";\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar ROW_MODIFIED = \"dx-row-modified\";\nvar CELL_MODIFIED = \"dx-cell-modified\";\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\nvar DEFAULT_START_EDIT_ACTION = \"click\";\nvar EDIT_LINK_CLASS = {\n  save: \"dx-link-save\",\n  cancel: \"dx-link-cancel\",\n  edit: \"dx-link-edit\",\n  undelete: \"dx-link-undelete\",\n  delete: \"dx-link-delete\",\n  add: \"dx-link-add\"\n};\nvar EDIT_ICON_CLASS = {\n  save: \"save\",\n  cancel: \"revert\",\n  edit: \"edit\",\n  undelete: \"revert\",\n  delete: \"trash\",\n  add: \"add\"\n};\nvar METHOD_NAMES = {\n  edit: \"editRow\",\n  delete: \"deleteRow\",\n  undelete: \"undeleteRow\",\n  save: \"saveEditData\",\n  cancel: \"cancelEditData\",\n  add: \"addRowByRowIndex\"\n};\nvar ACTION_OPTION_NAMES = {\n  add: \"allowAdding\",\n  edit: \"allowUpdating\",\n  delete: \"allowDeleting\"\n};\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\nvar createFailureHandler = function (deferred) {\n  return function (arg) {\n    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\n    deferred.reject(error);\n  };\n};\nvar isEditingCell = function (isEditRow, cellOptions) {\n  return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing;\n};\nvar isEditingOrShowEditorAlwaysDataCell = function (isEditRow, cellOptions) {\n  var isCommandCell = !!cellOptions.column.command;\n  var isEditing = isEditingCell(isEditRow, cellOptions);\n  var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\n  return \"data\" === cellOptions.rowType && isEditorCell;\n};\nvar EditingController = modules.ViewController.inherit(function () {\n  var getButtonIndex = (buttons, name) => {\n    var result = -1;\n    buttons.some((button, index) => {\n      if (getButtonName(button) === name) {\n        result = index;\n        return true;\n      }\n    });\n    return result;\n  };\n  function getButtonName(button) {\n    return isObject(button) ? button.name : button;\n  }\n  var members = {\n    init: function () {\n      this._columnsController = this.getController(\"columns\");\n      this._dataController = this.getController(\"data\");\n      this._rowsView = this.getView(\"rowsView\");\n      this._lastOperation = null;\n      this._changes = [];\n      if (this._deferreds) {\n        this._deferreds.forEach(d => d.reject(\"cancel\"));\n      }\n      this._deferreds = [];\n      if (!this._dataChangedHandler) {\n        this._dataChangedHandler = this._handleDataChanged.bind(this);\n        this._dataController.changed.add(this._dataChangedHandler);\n      }\n      if (!this._saveEditorHandler) {\n        this.createAction(\"onInitNewRow\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserting\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserted\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditingStart\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdating\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdated\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceling\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceled\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n      }\n      this._updateEditColumn();\n      this._updateEditButtons();\n      if (!this._internalState) {\n        this._internalState = [];\n      }\n      this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\n      this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true;\n    },\n    getEditMode: function () {\n      var editMode = this.option(\"editing.mode\");\n      if (-1 !== EDIT_MODES.indexOf(editMode)) {\n        return editMode;\n      }\n      return EDIT_MODE_ROW;\n    },\n    _getDefaultEditorTemplate: function () {\n      return (container, options) => {\n        var $editor = $(\"<div>\").appendTo(container);\n        this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\n          value: options.value,\n          setValue: options.setValue,\n          row: options.row,\n          parentType: \"dataRow\",\n          width: null,\n          readOnly: !options.setValue,\n          isOnForm: options.isOnForm,\n          id: options.id\n        }));\n      };\n    },\n    _getNewRowPosition: function () {\n      var newRowPosition = this.option(\"editing.newRowPosition\");\n      var scrollingMode = this.option(\"scrolling.mode\");\n      if (\"virtual\" === scrollingMode) {\n        switch (newRowPosition) {\n          case PAGE_TOP_NEW_ROW_POSITION:\n            return VIEWPORT_TOP_NEW_ROW_POSITION;\n          case PAGE_BOTTOM_NEW_ROW_POSITION:\n            return VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n          default:\n            return newRowPosition;\n        }\n      }\n      return newRowPosition;\n    },\n    getChanges: function () {\n      return this.option(EDITING_CHANGES_OPTION_NAME);\n    },\n    getInsertRowCount: function () {\n      var changes = this.option(EDITING_CHANGES_OPTION_NAME);\n      return changes.filter(change => \"insert\" === change.type).length;\n    },\n    resetChanges: function () {\n      var changes = this.getChanges();\n      var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\n      if (needReset) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, []);\n      }\n    },\n    _getInternalData: function (key) {\n      return this._internalState.filter(item => equalByValue(item.key, key))[0];\n    },\n    _addInternalData: function (params) {\n      var internalData = this._getInternalData(params.key);\n      if (internalData) {\n        return extend(internalData, params);\n      }\n      this._internalState.push(params);\n      return params;\n    },\n    _getOldData: function (key) {\n      var _this$_getInternalDat;\n      return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData;\n    },\n    getUpdatedData: function (data) {\n      var key = this._dataController.keyOf(data);\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      if (changes[editIndex]) {\n        return createObjectWithChanges(data, changes[editIndex].data);\n      }\n      return data;\n    },\n    getInsertedData: function () {\n      return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data);\n    },\n    getRemovedData: function () {\n      return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key));\n    },\n    _fireDataErrorOccurred: function (arg) {\n      if (\"cancel\" === arg) {\n        return;\n      }\n      var $popupContent = this.getPopupContent();\n      this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n    },\n    _needToCloseEditableCell: noop,\n    _closeEditItem: noop,\n    _handleDataChanged: noop,\n    _isDefaultButtonVisible: function (button, options) {\n      var result = true;\n      switch (button.name) {\n        case \"delete\":\n          result = this.allowDeleting(options);\n          break;\n        case \"undelete\":\n          result = false;\n      }\n      return result;\n    },\n    _isButtonVisible: function (button, options) {\n      var visible = button.visible;\n      if (!isDefined(visible)) {\n        return this._isDefaultButtonVisible(button, options);\n      }\n      return isFunction(visible) ? visible.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : visible;\n    },\n    _isButtonDisabled: function (button, options) {\n      var disabled = button.disabled;\n      return isFunction(disabled) ? disabled.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : !!disabled;\n    },\n    _getButtonConfig: function (button, options) {\n      var config = isObject(button) ? button : {};\n      var buttonName = getButtonName(button);\n      var editingTexts = (options => {\n        var editingTexts = options.component.option(\"editing.texts\") || {};\n        return {\n          save: editingTexts.saveRowChanges,\n          cancel: editingTexts.cancelRowChanges,\n          edit: editingTexts.editRow,\n          undelete: editingTexts.undeleteRow,\n          delete: editingTexts.deleteRow,\n          add: editingTexts.addRowToNode\n        };\n      })(options);\n      var methodName = METHOD_NAMES[buttonName];\n      var editingOptions = this.option(\"editing\");\n      var actionName = ACTION_OPTION_NAMES[buttonName];\n      var allowAction = actionName ? editingOptions[actionName] : true;\n      return extend({\n        name: buttonName,\n        text: editingTexts[buttonName],\n        cssClass: EDIT_LINK_CLASS[buttonName]\n      }, {\n        onClick: methodName && (e => {\n          var event = e.event;\n          event.stopPropagation();\n          event.preventDefault();\n          setTimeout(() => {\n            options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex);\n          });\n        })\n      }, config);\n    },\n    _getEditingButtons: function (options) {\n      var buttonIndex;\n      var haveCustomButtons = !!options.column.buttons;\n      var buttons = (options.column.buttons || []).slice();\n      if (haveCustomButtons) {\n        buttonIndex = getButtonIndex(buttons, \"edit\");\n        if (buttonIndex >= 0) {\n          if (getButtonIndex(buttons, \"save\") < 0) {\n            buttons.splice(buttonIndex + 1, 0, \"save\");\n          }\n          if (getButtonIndex(buttons, \"cancel\") < 0) {\n            buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n          }\n        }\n        buttonIndex = getButtonIndex(buttons, \"delete\");\n        if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"undelete\");\n        }\n      } else {\n        buttons = BUTTON_NAMES.slice();\n      }\n      return buttons.map(button => this._getButtonConfig(button, options));\n    },\n    _renderEditingButtons: function ($container, buttons, options, change) {\n      buttons.forEach(button => {\n        if (this._isButtonVisible(button, options)) {\n          this._createButton($container, button, options, change);\n        }\n      });\n    },\n    _getEditCommandCellTemplate: function () {\n      return (container, options, change) => {\n        var $container = $(container);\n        if (\"data\" === options.rowType) {\n          var buttons = this._getEditingButtons(options);\n          this._renderEditingButtons($container, buttons, options, change);\n          options.watch && options.watch(() => buttons.map(button => ({\n            visible: this._isButtonVisible(button, options),\n            disabled: this._isButtonDisabled(button, options)\n          })), () => {\n            $container.empty();\n            this._renderEditingButtons($container, buttons, options);\n          });\n        } else {\n          gridCoreUtils.setEmptyText($container);\n        }\n      };\n    },\n    isRowBasedEditMode: function () {\n      var editMode = this.getEditMode();\n      return -1 !== ROW_BASED_MODES.indexOf(editMode);\n    },\n    getFirstEditableColumnIndex: function () {\n      var columnsController = this.getController(\"columns\");\n      var columnIndex;\n      var visibleColumns = columnsController.getVisibleColumns();\n      each(visibleColumns, function (index, column) {\n        if (column.allowEditing) {\n          columnIndex = index;\n          return false;\n        }\n      });\n      return columnIndex;\n    },\n    getFirstEditableCellInRow: function (rowIndex) {\n      var rowsView = this.getView(\"rowsView\");\n      return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex());\n    },\n    getFocusedCellInRow: function (rowIndex) {\n      return this.getFirstEditableCellInRow(rowIndex);\n    },\n    getIndexByKey: function (key, items) {\n      return gridCoreUtils.getIndexByKey(key, items);\n    },\n    hasChanges: function (rowIndex) {\n      var changes = this.getChanges();\n      var result = false;\n      for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\n        if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\n          result = true;\n          break;\n        }\n      }\n      return result;\n    },\n    dispose: function () {\n      this.callBase();\n      clearTimeout(this._inputFocusTimeoutID);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n    },\n    _silentOption: function (name, value) {\n      if (\"editing.changes\" === name) {\n        this._changes = deepExtendArraySafe([], value);\n      }\n      this.callBase.apply(this, arguments);\n    },\n    optionChanged: function (args) {\n      if (\"editing\" === args.name) {\n        var fullName = args.fullName;\n        if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\n          this._handleEditRowKeyChange(args);\n        } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\n          var isEqual = equalByValue(args.value, this._changes, -1);\n          if (!isEqual) {\n            this._changes = deepExtendArraySafe([], args.value);\n            this._handleChangesChange(args);\n          }\n        } else if (!args.handled) {\n          this._columnsController.reinit();\n          this.init();\n          this.resetChanges();\n          this._resetEditColumnName();\n          this._resetEditRowKey();\n        }\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    _handleEditRowKeyChange: function (args) {\n      var rowIndex = this._dataController.getRowIndexByKey(args.value);\n      var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n      var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n      if (isDefined(args.value)) {\n        if (args.value !== args.previousValue) {\n          this._editRowFromOptionChanged(rowIndex, oldRowIndex);\n        }\n      } else {\n        this.cancelEditData();\n      }\n    },\n    _handleChangesChange: function (args) {\n      var dataController = this._dataController;\n      var changes = args.value;\n      if (!args.value.length && !args.previousValue.length) {\n        return;\n      }\n      changes.forEach(change => {\n        if (\"insert\" === change.type) {\n          this._addInsertInfo(change);\n        } else {\n          var _items$rowIndex;\n          var items = dataController.items();\n          var rowIndex = dataController.getRowIndexByKey(change.key);\n          this._addInternalData({\n            key: change.key,\n            oldData: null === (_items$rowIndex = items[rowIndex]) || void 0 === _items$rowIndex ? void 0 : _items$rowIndex.data\n          });\n        }\n      });\n      dataController.updateItems({\n        repaintChangesOnly: true,\n        isLiveUpdate: false,\n        isOptionChanged: true\n      });\n    },\n    publicMethods: function () {\n      return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n    },\n    refresh: function () {\n      if (!isDefined(this._pageIndex)) {\n        return;\n      }\n      this._refreshCore.apply(this, arguments);\n    },\n    _refreshCore: noop,\n    isEditing: function () {\n      var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n      return isEditRowKeyDefined;\n    },\n    isEditRow: function () {\n      return false;\n    },\n    _setEditRowKey: function (value, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value);\n      } else {\n        this.option(EDITING_EDITROWKEY_OPTION_NAME, value);\n      }\n      if (this._refocusEditCell) {\n        this._refocusEditCell = false;\n        this._focusEditingCell();\n      }\n    },\n    _setEditRowKeyByIndex: function (rowIndex, silent) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n      if (void 0 === key) {\n        this._dataController.fireError(\"E1043\");\n        return;\n      }\n      this._setEditRowKey(key, silent);\n    },\n    getEditRowIndex: function () {\n      return this._getVisibleEditRowIndex();\n    },\n    getEditFormRowIndex: function () {\n      return -1;\n    },\n    isEditRowByIndex(rowIndex) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n      var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\n      if (isKeyEqual) {\n        return this._getVisibleEditRowIndex() === rowIndex;\n      }\n      return isKeyEqual;\n    },\n    isEditCell: function (visibleRowIndex, columnIndex) {\n      return this.isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex;\n    },\n    getPopupContent: noop,\n    _isProcessedItem: function (item) {\n      return false;\n    },\n    _getInsertRowIndex: function (items, change, isProcessedItems) {\n      var result = -1;\n      var dataController = this._dataController;\n      var key = this._getInsertAfterOrBeforeKey(change);\n      if (!isDefined(key) && 0 === items.length) {\n        result = 0;\n      } else if (isDefined(key)) {\n        items.some((item, index) => {\n          var isProcessedItem = isProcessedItems || this._isProcessedItem(item);\n          if (isObject(item)) {\n            if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\n              if (equalByValue(item.key, key)) {\n                result = index;\n              }\n            } else if (equalByValue(dataController.keyOf(item), key)) {\n              result = index;\n            }\n          }\n          if (result >= 0) {\n            var nextItem = items[result + 1];\n            if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\n              return;\n            }\n            if (isDefined(change.insertAfterKey)) {\n              result += 1;\n            }\n            return true;\n          }\n        });\n      }\n      return result;\n    },\n    _generateNewItem: function (key) {\n      var _this$_getInternalDat2;\n      var item = {\n        key: key\n      };\n      var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\n      if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\n        item[INSERT_INDEX] = insertInfo[INSERT_INDEX];\n      }\n      return item;\n    },\n    _getLoadedRowIndex: function (items, change, isProcessedItems) {\n      var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\n      var dataController = this._dataController;\n      if (loadedRowIndex < 0) {\n        var newRowPosition = this._getNewRowPosition();\n        var pageIndex = dataController.pageIndex();\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n        if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\n          loadedRowIndex = 0;\n        } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController.isLastPageLoaded()) {\n          loadedRowIndex = items.length;\n        }\n      }\n      return loadedRowIndex;\n    },\n    processItems: function (items, e) {\n      var changeType = e.changeType;\n      this.update(changeType);\n      var changes = this.getChanges();\n      changes.forEach(change => {\n        var _this$_getInternalDat3;\n        var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\n        if (!isInsert) {\n          return;\n        }\n        var key = change.key;\n        var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\n        if (!isDefined(key) || !isDefined(insertInfo)) {\n          insertInfo = this._addInsertInfo(change);\n          key = insertInfo.key;\n        }\n        var loadedRowIndex = this._getLoadedRowIndex(items, change);\n        var item = this._generateNewItem(key);\n        if (loadedRowIndex >= 0) {\n          items.splice(loadedRowIndex, 0, item);\n        }\n      });\n      return items;\n    },\n    processDataItem: function (item, options, generateDataValues) {\n      var columns = options.visibleColumns;\n      var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      item.isEditing = false;\n      if (editIndex >= 0) {\n        this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues);\n      }\n    },\n    _processDataItemCore: function (item, change, key, columns, generateDataValues) {\n      var {\n        data: data,\n        type: type\n      } = change;\n      switch (type) {\n        case DATA_EDIT_DATA_INSERT_TYPE:\n          item.isNewRow = true;\n          item.key = key;\n          item.data = data;\n          break;\n        case DATA_EDIT_DATA_UPDATE_TYPE:\n          item.modified = true;\n          item.oldData = item.data;\n          item.data = createObjectWithChanges(item.data, data);\n          item.modifiedValues = generateDataValues(data, columns, true);\n          break;\n        case DATA_EDIT_DATA_REMOVE_TYPE:\n          item.removed = true;\n      }\n    },\n    _initNewRow: function (options) {\n      this.executeAction(\"onInitNewRow\", options);\n      if (options.promise) {\n        var deferred = new Deferred();\n        when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n        return deferred;\n      }\n    },\n    _createInsertInfo: function () {\n      var insertInfo = {};\n      insertInfo[INSERT_INDEX] = this._getInsertIndex();\n      return insertInfo;\n    },\n    _addInsertInfo: function (change, parentKey) {\n      var _this$_getInternalDat4;\n      var insertInfo;\n      var {\n        key: key\n      } = change;\n      if (!isDefined(key)) {\n        key = String(new Guid());\n        change.key = key;\n      }\n      insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\n      if (!isDefined(insertInfo)) {\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n        insertInfo = this._createInsertInfo();\n        if (!isDefined(insertAfterOrBeforeKey)) {\n          this._setInsertAfterOrBeforeKey(change, parentKey);\n        }\n      }\n      this._addInternalData({\n        insertInfo: insertInfo,\n        key: key\n      });\n      return {\n        insertInfo: insertInfo,\n        key: key\n      };\n    },\n    _setInsertAfterOrBeforeKey: function (change, parentKey) {\n      var dataController = this._dataController;\n      var allItems = dataController.items(true);\n      var rowsView = this.getView(\"rowsView\");\n      var newRowPosition = this._getNewRowPosition();\n      switch (newRowPosition) {\n        case FIRST_NEW_ROW_POSITION:\n        case LAST_NEW_ROW_POSITION:\n          break;\n        case PAGE_TOP_NEW_ROW_POSITION:\n        case PAGE_BOTTOM_NEW_ROW_POSITION:\n          if (allItems.length) {\n            var itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;\n            change[0 === itemIndex ? \"insertBeforeKey\" : \"insertAfterKey\"] = allItems[itemIndex].key;\n          }\n          break;\n        default:\n          var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n          var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\n          var row = dataController.getVisibleRows()[visibleItemIndex];\n          if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n            visibleItemIndex++;\n          }\n          var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\n          if (isDefined(insertKey)) {\n            change.insertBeforeKey = insertKey;\n          }\n      }\n    },\n    _getInsertIndex: function () {\n      var maxInsertIndex = 0;\n      this.getChanges().forEach(editItem => {\n        var _this$_getInternalDat5;\n        var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\n        if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\n          maxInsertIndex = insertInfo[INSERT_INDEX];\n        }\n      });\n      return maxInsertIndex + 1;\n    },\n    _getInsertAfterOrBeforeKey: function (insertChange) {\n      var _insertChange$insertA;\n      return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey;\n    },\n    _getPageIndexToInsertRow: function () {\n      var newRowPosition = this._getNewRowPosition();\n      var dataController = this._dataController;\n      var pageIndex = dataController.pageIndex();\n      var lastPageIndex = dataController.pageCount() - 1;\n      if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\n        return 0;\n      } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\n        return lastPageIndex;\n      }\n      return -1;\n    },\n    addRow: function (parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n      if (!store) {\n        dataController.fireError(\"E1052\", this.component.NAME);\n        return new Deferred().reject();\n      }\n      return this._addRow(parentKey);\n    },\n    _addRow: function (parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n      var key = store && store.key();\n      var param = {\n        data: {}\n      };\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n      var deferred = new Deferred();\n      this.refresh({\n        allowCancelEditing: true\n      });\n      if (!this._allowRowAdding()) {\n        when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        return deferred.promise();\n      }\n      if (!key) {\n        param.data.__KEY__ = String(new Guid());\n      }\n      when(this._initNewRow(param, parentKey)).done(() => {\n        if (this._allowRowAdding()) {\n          when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        } else {\n          deferred.reject(\"cancel\");\n        }\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _allowRowAdding: function () {\n      var insertIndex = this._getInsertIndex();\n      if (insertIndex > 1) {\n        return false;\n      }\n      return true;\n    },\n    _addRowCore: function (data, parentKey, initialOldEditRowIndex) {\n      var change = {\n        data: data,\n        type: DATA_EDIT_DATA_INSERT_TYPE\n      };\n      var editRowIndex = this._getVisibleEditRowIndex();\n      var insertInfo = this._addInsertInfo(change, parentKey);\n      var key = insertInfo.key;\n      this._setEditRowKey(key, true);\n      this._addChange(change);\n      return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex);\n    },\n    _navigateToNewRow: function (oldEditRowIndex, change, editRowIndex) {\n      var _editRowIndex, _change;\n      var d = new Deferred();\n      var dataController = this._dataController;\n      var focusController = this.getController(\"focus\");\n      editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;\n      change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(c => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];\n      if (!change) {\n        return d.reject(\"cancel\").promise();\n      }\n      var pageIndexToInsertRow = this._getPageIndexToInsertRow();\n      var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\n      var navigateToRowByKey = key => {\n        when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {\n          rowIndex = dataController.getRowIndexByKey(change.key);\n          d.resolve();\n        });\n      };\n      var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n      if (pageIndexToInsertRow >= 0) {\n        dataController.pageIndex(pageIndexToInsertRow).done(() => {\n          navigateToRowByKey(change.key);\n        }).fail(d.reject);\n      } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\n        navigateToRowByKey(insertAfterOrBeforeKey);\n      } else {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\n        });\n        rowIndex = dataController.getRowIndexByKey(change.key);\n        if (rowIndex < 0) {\n          navigateToRowByKey(change.key);\n        } else {\n          d.resolve();\n        }\n      }\n      d.done(() => {\n        var _this$_rowsView;\n        null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.waitAsyncTemplates(true).done(() => {\n          this._showAddedRow(rowIndex);\n          this._afterInsertRow(change.key);\n        });\n      });\n      return d.promise();\n    },\n    _showAddedRow: function (rowIndex) {\n      this._focusFirstEditableCellInRow(rowIndex);\n    },\n    _beforeFocusElementInRow: noop,\n    _focusFirstEditableCellInRow: function (rowIndex) {\n      var dataController = this._dataController;\n      var key = dataController.getKeyByRowIndex(rowIndex);\n      var $firstCell = this.getFirstEditableCellInRow(rowIndex);\n      this._editCellInProgress = true;\n      this._delayedInputFocus($firstCell, () => {\n        rowIndex = dataController.getRowIndexByKey(key);\n        this._editCellInProgress = false;\n        this._beforeFocusElementInRow(rowIndex);\n      });\n    },\n    _isEditingStart: function (options) {\n      this.executeAction(\"onEditingStart\", options);\n      return options.cancel;\n    },\n    _beforeUpdateItems: noop,\n    _getVisibleEditColumnIndex: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n      if (!isDefined(editColumnName)) {\n        return -1;\n      }\n      return this._columnsController.getVisibleColumnIndex(editColumnName);\n    },\n    _setEditColumnNameByIndex: function (index, silent) {\n      var _visibleColumns$index;\n      var visibleColumns = this._columnsController.getVisibleColumns();\n      this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent);\n    },\n    _setEditColumnName: function (name, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      } else {\n        this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      }\n    },\n    _resetEditColumnName: function () {\n      this._setEditColumnName(null, true);\n    },\n    _getEditColumn: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n      return this._getColumnByName(editColumnName);\n    },\n    _getColumnByName: function (name) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n      var editColumn;\n      isDefined(name) && visibleColumns.some(column => {\n        if (column.name === name) {\n          editColumn = column;\n          return true;\n        }\n      });\n      return editColumn;\n    },\n    _getVisibleEditRowIndex: function (columnName) {\n      var dataController = this._dataController;\n      var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n      var rowIndex = dataController.getRowIndexByKey(editRowKey);\n      if (-1 === rowIndex) {\n        return rowIndex;\n      }\n      return rowIndex + this._getEditRowIndexCorrection(columnName);\n    },\n    _getEditRowIndexCorrection: function (columnName) {\n      var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\n      var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\n      return isColumnHidden ? 1 : 0;\n    },\n    _resetEditRowKey: function () {\n      this._setEditRowKey(null, true);\n    },\n    _resetEditIndices: function () {\n      this._resetEditColumnName();\n      this._resetEditRowKey();\n    },\n    editRow: function (rowIndex) {\n      var _item$oldData;\n      var dataController = this._dataController;\n      var items = dataController.items();\n      var item = items[rowIndex];\n      var params = {\n        data: item && item.data,\n        cancel: false\n      };\n      var oldRowIndex = this._getVisibleEditRowIndex();\n      if (!item) {\n        return;\n      }\n      if (rowIndex === oldRowIndex) {\n        return true;\n      }\n      if (void 0 === item.key) {\n        this._dataController.fireError(\"E1043\");\n        return;\n      }\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n      if (this._isEditingStart(params)) {\n        return;\n      }\n      this.resetChanges();\n      this.init();\n      this._resetEditColumnName();\n      this._pageIndex = dataController.pageIndex();\n      this._addInternalData({\n        key: item.key,\n        oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\n      });\n      this._setEditRowKey(item.key);\n    },\n    _editRowFromOptionChanged: function (rowIndex, oldRowIndex) {\n      var rowIndices = [oldRowIndex, rowIndex];\n      this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\n      this._editRowFromOptionChangedCore(rowIndices, rowIndex);\n    },\n    _editRowFromOptionChangedCore: function (rowIndices, rowIndex, preventRendering) {\n      this._needFocusEditor = true;\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: rowIndices,\n        cancel: preventRendering\n      });\n    },\n    _focusEditorIfNeed: noop,\n    _showEditPopup: noop,\n    _repaintEditPopup: noop,\n    _getEditPopupHiddenHandler: function () {\n      return e => {\n        if (this.isEditing()) {\n          this.cancelEditData();\n        }\n      };\n    },\n    _getPopupEditFormTemplate: noop,\n    _getSaveButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.saveRowChanges\"),\n        onClick: this.saveEditData.bind(this)\n      };\n    },\n    _getCancelButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.cancelRowChanges\"),\n        onClick: this.cancelEditData.bind(this)\n      };\n    },\n    _removeInternalData: function (key) {\n      var internalData = this._getInternalData(key);\n      var index = this._internalState.indexOf(internalData);\n      if (index > -1) {\n        this._internalState.splice(index, 1);\n      }\n    },\n    _updateInsertAfterOrBeforeKeys: function (changes, index) {\n      var removeChange = changes[index];\n      changes.forEach(change => {\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n        if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\n          change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange);\n        }\n      });\n    },\n    _removeChange: function (index) {\n      if (index >= 0) {\n        var changes = [...this.getChanges()];\n        var key = changes[index].key;\n        this._removeInternalData(key);\n        this._updateInsertAfterOrBeforeKeys(changes, index);\n        changes.splice(index, 1);\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n        if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\n          this._resetEditIndices();\n        }\n      }\n    },\n    executeOperation: function (deferred, func) {\n      this._lastOperation && this._lastOperation.reject();\n      this._lastOperation = deferred;\n      this.waitForDeferredOperations().done(() => {\n        if (\"rejected\" === deferred.state()) {\n          return;\n        }\n        func();\n        this._lastOperation = null;\n      }).fail(() => {\n        deferred.reject();\n        this._lastOperation = null;\n      });\n    },\n    waitForDeferredOperations: function () {\n      return when(...this._deferreds);\n    },\n    _processCanceledEditingCell: noop,\n    _repaintEditCell: function (column, oldColumn, oldEditRowIndex) {\n      this._needFocusEditor = true;\n      if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n        this._editCellInProgress = true;\n        this.getController(\"editorFactory\").loseFocus();\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\n        });\n      } else if (column !== oldColumn) {\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: []\n        });\n      }\n    },\n    _delayedInputFocus: function ($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n      var inputFocus = () => {\n        if (beforeFocusCallback) {\n          beforeFocusCallback();\n        }\n        if ($cell) {\n          var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n          gridCoreUtils.focusAndSelectElement(this, $focusableElement);\n        }\n        this._beforeFocusCallback = null;\n      };\n      if (devices.real().ios || devices.real().android) {\n        inputFocus();\n      } else {\n        if (this._beforeFocusCallback) {\n          this._beforeFocusCallback();\n        }\n        clearTimeout(this._inputFocusTimeoutID);\n        if (callBeforeFocusCallbackAlways) {\n          this._beforeFocusCallback = beforeFocusCallback;\n        }\n        this._inputFocusTimeoutID = setTimeout(inputFocus);\n      }\n    },\n    _focusEditingCell: function (beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n      var rowsView = this.getView(\"rowsView\");\n      var editColumnIndex = this._getVisibleEditColumnIndex();\n      $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n      if ($editCell) {\n        this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n      }\n    },\n    deleteRow: function (rowIndex) {\n      this._checkAndDeleteRow(rowIndex);\n    },\n    _checkAndDeleteRow: function (rowIndex) {\n      var editingOptions = this.option(\"editing\");\n      var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\n      var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\n      var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\n      var item = this._dataController.items()[rowIndex];\n      var allowDeleting = !this.isEditing() || item.isNewRow;\n      if (item && allowDeleting) {\n        if (!confirmDelete || !confirmDeleteMessage) {\n          this._deleteRowCore(rowIndex);\n        } else {\n          var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\n          var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n          confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\n            if (confirmResult) {\n              this._deleteRowCore(rowIndex);\n            }\n          });\n        }\n      }\n    },\n    _deleteRowCore: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n      var key = item && item.key;\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n      this.refresh();\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      if (editIndex >= 0) {\n        if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n          this._removeChange(editIndex);\n        } else {\n          this._addChange({\n            key: key,\n            type: DATA_EDIT_DATA_REMOVE_TYPE\n          });\n        }\n      } else {\n        this._addChange({\n          key: key,\n          oldData: item.data,\n          type: DATA_EDIT_DATA_REMOVE_TYPE\n        });\n      }\n      return this._afterDeleteRow(rowIndex, oldEditRowIndex);\n    },\n    _afterDeleteRow: function (rowIndex, oldEditRowIndex) {\n      return this.saveEditData();\n    },\n    undeleteRow: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n      var key = item && item.key;\n      var changes = this.getChanges();\n      if (item) {\n        var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n        if (editIndex >= 0) {\n          var {\n            data: data\n          } = changes[editIndex];\n          if (isEmptyObject(data)) {\n            this._removeChange(editIndex);\n          } else {\n            this._addChange({\n              key: key,\n              type: DATA_EDIT_DATA_UPDATE_TYPE\n            });\n          }\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: [oldEditRowIndex, rowIndex]\n          });\n        }\n      }\n    },\n    _fireOnSaving: function () {\n      var onSavingParams = {\n        cancel: false,\n        promise: null,\n        changes: [...this.getChanges()]\n      };\n      this.executeAction(\"onSaving\", onSavingParams);\n      var d = new Deferred();\n      when(fromPromise(onSavingParams.promise)).done(() => {\n        d.resolve(onSavingParams);\n      }).fail(arg => {\n        createFailureHandler(d);\n        this._fireDataErrorOccurred(arg);\n        d.resolve({\n          cancel: true\n        });\n      });\n      return d;\n    },\n    _executeEditingAction: function (actionName, params, func) {\n      if (this.component._disposed) {\n        return null;\n      }\n      var deferred = new Deferred();\n      this.executeAction(actionName, params);\n      when(fromPromise(params.cancel)).done(function (cancel) {\n        if (cancel) {\n          setTimeout(function () {\n            deferred.resolve(\"cancel\");\n          });\n        } else {\n          func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n        }\n      }).fail(createFailureHandler(deferred));\n      return deferred;\n    },\n    _processChanges: function (deferreds, results, dataChanges, changes) {\n      var store = this._dataController.store();\n      each(changes, (index, change) => {\n        var oldData = this._getOldData(change.key);\n        var {\n          data: data,\n          type: type\n        } = change;\n        var changeCopy = _extends({}, change);\n        var deferred;\n        var params;\n        if (this._beforeSaveEditData(change, index)) {\n          return;\n        }\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            params = {\n              data: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowRemoving\", params, function () {\n              return store.remove(change.key).done(function (key) {\n                dataChanges.push({\n                  type: \"remove\",\n                  key: key\n                });\n              });\n            });\n            break;\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            params = {\n              data: data,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowInserting\", params, function () {\n              return store.insert(params.data).done(function (data, key) {\n                if (isDefined(key)) {\n                  changeCopy.key = key;\n                }\n                if (data && isObject(data) && data !== params.data) {\n                  changeCopy.data = data;\n                }\n                dataChanges.push({\n                  type: \"insert\",\n                  data: data,\n                  index: 0\n                });\n              });\n            });\n            break;\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            params = {\n              newData: data,\n              oldData: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowUpdating\", params, function () {\n              return store.update(change.key, params.newData).done(function (data, key) {\n                if (data && isObject(data) && data !== params.newData) {\n                  changeCopy.data = data;\n                }\n                dataChanges.push({\n                  type: \"update\",\n                  key: key,\n                  data: data\n                });\n              });\n            });\n        }\n        changes[index] = changeCopy;\n        if (deferred) {\n          var doneDeferred = new Deferred();\n          deferred.always(function (data) {\n            results.push({\n              key: change.key,\n              result: data\n            });\n          }).always(doneDeferred.resolve);\n          deferreds.push(doneDeferred.promise());\n        }\n      });\n    },\n    _processRemoveIfError: function (changes, editIndex) {\n      var change = changes[editIndex];\n      if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\n        if (editIndex >= 0) {\n          changes.splice(editIndex, 1);\n        }\n      }\n      return true;\n    },\n    _processRemove: function (changes, editIndex, cancel) {\n      var change = changes[editIndex];\n      if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n        return this._processRemoveCore(changes, editIndex, !cancel || !change);\n      }\n    },\n    _processRemoveCore: function (changes, editIndex) {\n      if (editIndex >= 0) {\n        changes.splice(editIndex, 1);\n      }\n      return true;\n    },\n    _processSaveEditDataResult: function (results) {\n      var hasSavedData = false;\n      var changes = [...this.getChanges()];\n      var changesLength = changes.length;\n      for (var i = 0; i < results.length; i++) {\n        var arg = results[i].result;\n        var cancel = \"cancel\" === arg;\n        var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\n        var change = changes[editIndex];\n        var isError = arg && arg instanceof Error;\n        if (isError) {\n          if (change) {\n            this._addInternalData({\n              key: change.key,\n              error: arg\n            });\n          }\n          this._fireDataErrorOccurred(arg);\n          if (this._processRemoveIfError(changes, editIndex)) {\n            break;\n          }\n        } else if (this._processRemove(changes, editIndex, cancel)) {\n          hasSavedData = !cancel;\n        }\n      }\n      if (changes.length < changesLength) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n      }\n      return hasSavedData;\n    },\n    _fireSaveEditDataEvents: function (changes) {\n      each(changes, (_, _ref) => {\n        var {\n          data: data,\n          key: key,\n          type: type\n        } = _ref;\n        var internalData = this._addInternalData({\n          key: key\n        });\n        var params = {\n          key: key,\n          data: data\n        };\n        if (internalData.error) {\n          params.error = internalData.error;\n        }\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            this.executeAction(\"onRowRemoved\", extend({}, params, {\n              data: internalData.oldData\n            }));\n            break;\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            this.executeAction(\"onRowInserted\", params);\n            break;\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            this.executeAction(\"onRowUpdated\", params);\n        }\n      });\n      this.executeAction(\"onSaved\", {\n        changes: changes\n      });\n    },\n    saveEditData: function () {\n      var deferred = new Deferred();\n      this.waitForDeferredOperations().done(() => {\n        if (this.isSaving()) {\n          this._resolveAfterSave(deferred);\n          return;\n        }\n        when(this._beforeSaveEditData()).done(cancel => {\n          if (cancel) {\n            this._resolveAfterSave(deferred, {\n              cancel: cancel\n            });\n            return;\n          }\n          this._saving = true;\n          this._saveEditDataInner().always(() => {\n            this._saving = false;\n            if (this._refocusEditCell) {\n              this._focusEditingCell();\n            }\n          }).done(deferred.resolve).fail(deferred.reject);\n        }).fail(deferred.reject);\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _resolveAfterSave: function (deferred) {\n      var {\n        cancel: cancel,\n        error: error\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      when(this._afterSaveEditData(cancel)).done(function () {\n        deferred.resolve(error);\n      }).fail(deferred.reject);\n    },\n    _saveEditDataInner: function () {\n      var result = new Deferred();\n      var results = [];\n      var deferreds = [];\n      var dataChanges = [];\n      var dataSource = this._dataController.dataSource();\n      when(this._fireOnSaving()).done(_ref2 => {\n        var {\n          cancel: cancel,\n          changes: changes\n        } = _ref2;\n        if (cancel) {\n          return result.resolve().promise();\n        }\n        this._processChanges(deferreds, results, dataChanges, changes);\n        if (deferreds.length) {\n          this._refocusEditCell = true;\n          null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\n          when(...deferreds).done(() => {\n            if (this._processSaveEditDataResult(results)) {\n              this._endSaving(dataChanges, changes, result);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n              result.resolve();\n            }\n          }).fail(error => {\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n            result.resolve(error);\n          });\n          return result.always(() => {\n            this._refocusEditCell = true;\n          }).promise();\n        }\n        this._cancelSaving(result);\n      }).fail(result.reject);\n      return result.promise();\n    },\n    _beforeEndSaving: function (changes) {\n      this._resetEditIndices();\n    },\n    _endSaving: function (dataChanges, changes, deferred) {\n      var dataSource = this._dataController.dataSource();\n      this._beforeEndSaving(changes);\n      null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n      this._refreshDataAfterSave(dataChanges, changes, deferred);\n    },\n    _cancelSaving: function (result) {\n      this.executeAction(\"onSaved\", {\n        changes: []\n      });\n      this._resolveAfterSave(result);\n    },\n    _refreshDataAfterSave: function (dataChanges, changes, deferred) {\n      var dataController = this._dataController;\n      var refreshMode = this.option(\"editing.refreshMode\");\n      var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n      if (!isFullRefresh) {\n        dataController.push(dataChanges);\n      }\n      when(dataController.refresh({\n        selection: isFullRefresh,\n        reload: isFullRefresh,\n        load: \"reshape\" === refreshMode,\n        changesOnly: this.option(\"repaintChangesOnly\")\n      })).always(() => {\n        this._fireSaveEditDataEvents(changes);\n      }).done(() => {\n        this._resolveAfterSave(deferred);\n      }).fail(error => {\n        this._resolveAfterSave(deferred, {\n          error: error\n        });\n      });\n    },\n    isSaving: function () {\n      return this._saving;\n    },\n    _updateEditColumn: function () {\n      var isEditColumnVisible = this._isEditColumnVisible();\n      var useIcons = this.option(\"editing.useIcons\");\n      var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\n      this._columnsController.addCommandColumn({\n        type: \"buttons\",\n        command: \"edit\",\n        visible: isEditColumnVisible,\n        cssClass: cssClass,\n        width: \"auto\",\n        alignment: \"center\",\n        cellTemplate: this._getEditCommandCellTemplate(),\n        fixedPosition: \"right\"\n      });\n      this._columnsController.columnOption(\"command:edit\", {\n        visible: isEditColumnVisible,\n        cssClass: cssClass\n      });\n    },\n    _isEditColumnVisible: function () {\n      var editingOptions = this.option(\"editing\");\n      return editingOptions.allowDeleting;\n    },\n    _isEditButtonDisabled: function () {\n      var hasChanges = this.hasChanges();\n      var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\n      return !(isEditRowDefined || hasChanges);\n    },\n    _updateEditButtons: function () {\n      var headerPanel = this.getView(\"headerPanel\");\n      var isButtonDisabled = this._isEditButtonDisabled();\n      if (headerPanel) {\n        headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\n        headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled);\n      }\n    },\n    _applyModified: function ($element) {\n      $element && $element.addClass(CELL_MODIFIED);\n    },\n    _beforeCloseEditCellInBatchMode: noop,\n    cancelEditData: function () {\n      var changes = this.getChanges();\n      var params = {\n        cancel: false,\n        changes: changes\n      };\n      this.executeAction(\"onEditCanceling\", params);\n      if (!params.cancel) {\n        this._cancelEditDataCore();\n        this.executeAction(\"onEditCanceled\", {\n          changes: changes\n        });\n      }\n    },\n    _cancelEditDataCore: function () {\n      var rowIndex = this._getVisibleEditRowIndex();\n      this._beforeCancelEditData();\n      this.init();\n      this.resetChanges();\n      this._resetEditColumnName();\n      this._resetEditRowKey();\n      this._afterCancelEditData(rowIndex);\n    },\n    _afterCancelEditData: function (rowIndex) {\n      var dataController = this._dataController;\n      dataController.updateItems({\n        repaintChangesOnly: this.option(\"repaintChangesOnly\")\n      });\n    },\n    _hideEditPopup: noop,\n    hasEditData: function () {\n      return this.hasChanges();\n    },\n    update: function (changeType) {\n      var dataController = this._dataController;\n      if (dataController && this._pageIndex !== dataController.pageIndex()) {\n        if (\"refresh\" === changeType) {\n          this.refresh({\n            isPageChanged: true\n          });\n        }\n        this._pageIndex = dataController.pageIndex();\n      }\n      this._updateEditButtons();\n    },\n    _getRowIndicesForCascadeUpdating: function (row, skipCurrentRow) {\n      return skipCurrentRow ? [] : [row.rowIndex];\n    },\n    addDeferred: function (deferred) {\n      if (this._deferreds.indexOf(deferred) < 0) {\n        this._deferreds.push(deferred);\n        deferred.always(() => {\n          var index = this._deferreds.indexOf(deferred);\n          if (index >= 0) {\n            this._deferreds.splice(index, 1);\n          }\n        });\n      }\n    },\n    _prepareChange: function (options, value, text) {\n      var _options$row;\n      var newData = {};\n      var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\n      var rowKey = options.key;\n      var deferred = new Deferred();\n      if (void 0 !== rowKey) {\n        options.value = value;\n        var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\n        setCellValueResult.done(function () {\n          deferred.resolve({\n            data: newData,\n            key: rowKey,\n            oldData: oldData,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n        if (isDefined(text) && options.column.displayValueMap) {\n          options.column.displayValueMap[value] = text;\n        }\n        this._updateRowValues(options);\n        this.addDeferred(deferred);\n      }\n      return deferred;\n    },\n    _updateRowValues: function (options) {\n      if (options.values) {\n        var dataController = this._dataController;\n        var rowIndex = dataController.getRowIndexByKey(options.key);\n        var row = dataController.getVisibleRows()[rowIndex];\n        if (row) {\n          options.row.values = row.values;\n          options.values = row.values;\n        }\n        options.values[options.columnIndex] = options.value;\n      }\n    },\n    updateFieldValue: function (options, value, text, forceUpdateRow) {\n      var rowKey = options.key;\n      var deferred = new Deferred();\n      if (void 0 === rowKey) {\n        this._dataController.fireError(\"E1043\");\n      }\n      if (options.column.setCellValue) {\n        this._prepareChange(options, value, text).done(params => {\n          when(this._applyChange(options, params, forceUpdateRow)).always(() => {\n            deferred.resolve();\n          });\n        });\n      } else {\n        deferred.resolve();\n      }\n      return deferred.promise();\n    },\n    _focusPreviousEditingCellIfNeed: function (options) {\n      if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\n        this._focusEditingCell();\n        this._updateEditRow(options.row, true);\n        return true;\n      }\n    },\n    _needUpdateRow: function (column) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n      if (!column) {\n        column = this._getEditColumn();\n      }\n      var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\n      var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\n      return isCustomSetCellValue || isCustomCalculateCellValue;\n    },\n    _applyChange: function (options, params, forceUpdateRow) {\n      var changeOptions = _extends({}, options, {\n        forceUpdateRow: forceUpdateRow\n      });\n      this._addChange(params, changeOptions);\n      this._updateEditButtons();\n      return this._applyChangeCore(options, changeOptions.forceUpdateRow);\n    },\n    _applyChangeCore: function (options, forceUpdateRow) {\n      var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n      var row = options.row;\n      if (row) {\n        if (forceUpdateRow || isCustomSetCellValue) {\n          this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n        } else if (row.update) {\n          row.update();\n        }\n      }\n    },\n    _updateEditRowCore: function (row, skipCurrentRow, isCustomSetCellValue) {\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n      });\n    },\n    _updateEditRow: function (row, forceUpdateRow, isCustomSetCellValue) {\n      if (forceUpdateRow) {\n        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n      } else {\n        this._updateRowWithDelay(row, isCustomSetCellValue);\n      }\n    },\n    _updateRowImmediately: function (row, forceUpdateRow, isCustomSetCellValue) {\n      this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\n      this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n      if (!forceUpdateRow) {\n        this._focusEditingCell();\n      }\n    },\n    _updateRowWithDelay: function (row, isCustomSetCellValue) {\n      var deferred = new Deferred();\n      this.addDeferred(deferred);\n      setTimeout(() => {\n        var _this$_editForm;\n        var elementContainer = (null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.element()) || this.component.$element().get(0);\n        var $focusedElement = $(domAdapter.getActiveElement(elementContainer));\n        var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\n        var focusedElement = $focusedElement.get(0);\n        var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n        this._updateEditRowCore(row, false, isCustomSetCellValue);\n        this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n        if (columnIndex >= 0) {\n          var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\n          this._delayedInputFocus($focusedItem, () => {\n            setTimeout(() => {\n              var _this$component$$elem;\n              focusedElement = domAdapter.getActiveElement(null === (_this$component$$elem = this.component.$element()) || void 0 === _this$component$$elem ? void 0 : _this$component$$elem.get(0));\n              if (selectionRange.selectionStart >= 0) {\n                gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n              }\n            });\n          });\n        }\n        deferred.resolve();\n      });\n    },\n    _validateEditFormAfterUpdate: noop,\n    _addChange: function (changeParams, options) {\n      var _this$getChanges;\n      var row = null === options || void 0 === options ? void 0 : options.row;\n      var changes = [...this.getChanges()];\n      var index = gridCoreUtils.getIndexByKey(changeParams.key, changes);\n      if (index < 0) {\n        index = changes.length;\n        this._addInternalData({\n          key: changeParams.key,\n          oldData: changeParams.oldData\n        });\n        delete changeParams.oldData;\n        changes.push(changeParams);\n      }\n      var change = _extends({}, changes[index]);\n      if (change) {\n        if (changeParams.data) {\n          change.data = createObjectWithChanges(change.data, changeParams.data);\n        }\n        if ((!change.type || !changeParams.data) && changeParams.type) {\n          change.type = changeParams.type;\n        }\n        if (row) {\n          row.oldData = this._getOldData(row.key);\n          row.data = createObjectWithChanges(row.data, changeParams.data);\n        }\n      }\n      changes[index] = change;\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n      if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {\n        options.forceUpdateRow = true;\n      }\n      return change;\n    },\n    _getFormEditItemTemplate: function (cellOptions, column) {\n      return column.editCellTemplate || this._getDefaultEditorTemplate();\n    },\n    getColumnTemplate: function (options) {\n      var column = options.column;\n      var rowIndex = options.row && options.row.rowIndex;\n      var template;\n      var isRowMode = this.isRowBasedEditMode();\n      var isRowEditing = this.isEditRow(rowIndex);\n      var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\n      var editingStartOptions;\n      if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n        var allowUpdating = this.allowUpdating(options);\n        if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\n          if (column.showEditorAlways && !isRowMode) {\n            editingStartOptions = {\n              cancel: false,\n              key: options.row.isNewRow ? void 0 : options.row.key,\n              data: options.row.data,\n              column: column\n            };\n            this._isEditingStart(editingStartOptions);\n          }\n          if (!editingStartOptions || !editingStartOptions.cancel) {\n            options.setValue = (value, text) => {\n              this.updateFieldValue(options, value, text);\n            };\n          }\n        }\n        template = column.editCellTemplate || this._getDefaultEditorTemplate();\n      } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n        template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options);\n      }\n      return template;\n    },\n    _createButton: function ($container, button, options, change) {\n      var icon = EDIT_ICON_CLASS[button.name];\n      var useIcons = this.option(\"editing.useIcons\");\n      var useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\n      var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n      if (button.template && useLegacyColumnButtonTemplate) {\n        this._rowsView.renderTemplate($container, button.template, options, true);\n      } else {\n        if (button.template) {\n          $button = $(\"<span>\").addClass(button.cssClass);\n        } else if (useIcons && icon || button.icon) {\n          icon = button.icon || icon;\n          var iconType = iconUtils.getImageSourceType(icon);\n          if (\"image\" === iconType || \"svg\" === iconType) {\n            $button = iconUtils.getImageContainer(icon).addClass(button.cssClass);\n          } else {\n            $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text);\n          }\n          $button.addClass(\"dx-link-icon\");\n          $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n          var localizationName = this.getButtonLocalizationNames()[button.name];\n          localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName));\n        } else {\n          $button.text(button.text);\n        }\n        if (isDefined(button.hint)) {\n          $button.attr(\"title\", button.hint);\n        }\n        if (this._isButtonDisabled(button, options)) {\n          $button.addClass(\"dx-state-disabled\");\n        } else if (!button.template || button.onClick) {\n          eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction(function (e) {\n            var _button$onClick;\n            null === (_button$onClick = button.onClick) || void 0 === _button$onClick ? void 0 : _button$onClick.call(button, extend({}, e, {\n              row: options.row,\n              column: options.column\n            }));\n            e.event.preventDefault();\n            e.event.stopPropagation();\n          }));\n        }\n        $container.append($button, \"&nbsp;\");\n        if (button.template) {\n          this._rowsView.renderTemplate($button, button.template, _extends({}, options, {\n            column: void 0\n          }), true, change);\n        }\n      }\n    },\n    getButtonLocalizationNames: () => ({\n      edit: \"dxDataGrid-editingEditRow\",\n      save: \"dxDataGrid-editingSaveRowChanges\",\n      delete: \"dxDataGrid-editingDeleteRow\",\n      undelete: \"dxDataGrid-editingUndeleteRow\",\n      cancel: \"dxDataGrid-editingCancelRowChanges\"\n    }),\n    prepareButtonItem: function (headerPanel, name, methodName, sortIndex) {\n      var editingTexts = this.option(\"editing.texts\") || {};\n      var titleButtonTextByClassNames = {\n        revert: editingTexts.cancelAllChanges,\n        save: editingTexts.saveAllChanges,\n        addRow: editingTexts.addRow\n      };\n      var className = {\n        revert: \"cancel\",\n        save: \"save\",\n        addRow: \"addrow\"\n      }[name];\n      var hintText = titleButtonTextByClassNames[name];\n      var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\n      return {\n        widget: \"dxButton\",\n        options: {\n          onInitialized: e => {\n            $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + this.addWidgetPrefix(className) + \"-button\"));\n          },\n          icon: \"edit-button-\" + className,\n          disabled: isButtonDisabled,\n          onClick: () => {\n            setTimeout(() => {\n              this[methodName]();\n            });\n          },\n          text: hintText,\n          hint: hintText\n        },\n        showText: \"inMenu\",\n        name: name + \"Button\",\n        location: \"after\",\n        locateInMenu: \"auto\",\n        sortIndex: sortIndex\n      };\n    },\n    prepareEditButtons: function (headerPanel) {\n      var editingOptions = this.option(\"editing\") || {};\n      var buttonItems = [];\n      if (editingOptions.allowAdding) {\n        buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20));\n      }\n      return buttonItems;\n    },\n    highlightDataCell: function ($cell, params) {\n      this.shouldHighlightCell(params) && $cell.addClass(CELL_MODIFIED);\n    },\n    _afterInsertRow: noop,\n    _beforeSaveEditData: function (change) {\n      if (change && !isDefined(change.key) && isDefined(change.type)) {\n        return true;\n      }\n    },\n    _afterSaveEditData: noop,\n    _beforeCancelEditData: noop,\n    _allowEditAction: function (actionName, options) {\n      var allowEditAction = this.option(\"editing.\" + actionName);\n      if (isFunction(allowEditAction)) {\n        allowEditAction = allowEditAction({\n          component: this.component,\n          row: options.row\n        });\n      }\n      return allowEditAction;\n    },\n    allowUpdating: function (options, eventName) {\n      var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\n      var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\n      return needCallback && this._allowEditAction(\"allowUpdating\", options);\n    },\n    allowDeleting: function (options) {\n      return this._allowEditAction(\"allowDeleting\", options);\n    },\n    isCellModified: function (parameters) {\n      var columnIndex = parameters.columnIndex;\n      var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\n      return !!modifiedValues && void 0 !== modifiedValues[columnIndex];\n    },\n    isNewRowInEditMode: function () {\n      var visibleEditRowIndex = this._getVisibleEditRowIndex();\n      var rows = this._dataController.items();\n      return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false;\n    },\n    shouldHighlightCell: function (parameters) {\n      var cellModified = this.isCellModified(parameters);\n      return cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing);\n    }\n  };\n  return members;\n}());\nexport var editingModule = {\n  defaultOptions: function () {\n    return {\n      editing: {\n        mode: \"row\",\n        refreshMode: \"full\",\n        newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\n        allowAdding: false,\n        allowUpdating: false,\n        allowDeleting: false,\n        useIcons: false,\n        selectTextOnEditStart: false,\n        confirmDelete: true,\n        texts: {\n          editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\n          saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\n          saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\n          cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\n          cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\n          addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\n          deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\n          undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\n          confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n          confirmDeleteTitle: \"\"\n        },\n        form: {\n          colCount: 2\n        },\n        popup: {},\n        startEditAction: \"click\",\n        editRowKey: null,\n        editColumnName: null,\n        changes: []\n      },\n      useLegacyColumnButtonTemplate: false\n    };\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          this._editingController = this.getController(\"editing\");\n          this.callBase();\n        },\n        reload: function (full, repaintChangesOnly) {\n          !repaintChangesOnly && this._editingController.refresh();\n          return this.callBase.apply(this, arguments);\n        },\n        repaintRows: function () {\n          if (this.getController(\"editing\").isSaving()) {\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function (items) {\n          var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n          var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\n          var editItem = items[editRowIndex];\n          if (editItem) {\n            var _this$_updateEditItem;\n            editItem.isEditing = true;\n            null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem);\n          }\n        },\n        _updateItemsCore: function (change) {\n          this.callBase(change);\n          this._updateEditRow(this.items(true));\n        },\n        _applyChangeUpdate: function (change) {\n          this._updateEditRow(change.items);\n          this.callBase(change);\n        },\n        _applyChangesOnly: function (change) {\n          this._updateEditRow(change.items);\n          this.callBase(change);\n        },\n        _processItems: function (items, change) {\n          items = this._editingController.processItems(items, change);\n          return this.callBase(items, change);\n        },\n        _processDataItem: function (dataItem, options) {\n          this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n          return this.callBase(dataItem, options);\n        },\n        _processItem: function (item, options) {\n          item = this.callBase(item, options);\n          if (item.isNewRow) {\n            options.dataIndex--;\n            delete item.dataIndex;\n          }\n          return item;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, rowIndex, isLiveUpdate) {\n          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var cell = oldRow.cells && oldRow.cells[columnIndex];\n          var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\n          if (isLiveUpdate && isEditing) {\n            return false;\n          }\n          if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\n            return true;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        needToRefreshOnDataSourceChange: function (args) {\n          var editingController = this.getController(\"editing\");\n          var isParasiteChange = Array.isArray(args.value) && args.value === args.previousValue && editingController.isSaving();\n          return !isParasiteChange;\n        },\n        _handleDataSourceChange(args) {\n          var result = this.callBase(args);\n          var changes = this.option(\"editing.changes\");\n          var dataSource = args.value;\n          if (Array.isArray(dataSource) && changes.length) {\n            var dataSourceKeys = dataSource.map(item => this.keyOf(item));\n            var newChanges = changes.filter(change => \"insert\" === change.type || dataSourceKeys.some(key => equalByValue(change.key, key)));\n            if (newChanges.length !== changes.length) {\n              this.option(\"editing.changes\", newChanges);\n            }\n            var editRowKey = this.option(\"editing.editRowKey\");\n            var isEditNewItem = newChanges.some(change => \"insert\" === change.type && equalByValue(editRowKey, change.key));\n            if (!isEditNewItem && dataSourceKeys.every(key => !equalByValue(editRowKey, key))) {\n              this.option(\"editing.editRowKey\", null);\n            }\n          }\n          return result;\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        init: function () {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n        },\n        getCellIndex: function ($cell, rowIndex) {\n          if (!$cell.is(\"td\") && rowIndex >= 0) {\n            var $cellElements = this.getCellElements(rowIndex);\n            var cellIndex = -1;\n            each($cellElements, function (index, cellElement) {\n              if ($(cellElement).find($cell).length) {\n                cellIndex = index;\n              }\n            });\n            return cellIndex;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        publicMethods: function () {\n          return this.callBase().concat([\"cellValue\"]);\n        },\n        _getCellTemplate: function (options) {\n          var template = this._editingController.getColumnTemplate(options);\n          return template || this.callBase(options);\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n          if (row) {\n            var isRowRemoved = !!row.removed;\n            var isRowInserted = !!row.isNewRow;\n            var isRowModified = !!row.modified;\n            isRowInserted && $row.addClass(ROW_INSERTED);\n            isRowModified && $row.addClass(ROW_MODIFIED);\n            if (isRowInserted || isRowRemoved) {\n              $row.removeClass(ROW_SELECTED);\n            }\n          }\n          return $row;\n        },\n        _getColumnIndexByElement: function ($element) {\n          var $tableElement = $element.closest(\"table\");\n          var $tableElements = this.getTableElements();\n          while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n            $element = $tableElement.closest(\"td\");\n            $tableElement = $element.closest(\"table\");\n          }\n          return this._getColumnIndexByElementCore($element);\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\n          return this.getCellIndex($targetElement);\n        },\n        _editCellByClick: function (e, eventName) {\n          var editingController = this._editingController;\n          var $targetElement = $(e.event.target);\n          var columnIndex = this._getColumnIndexByElement($targetElement);\n          var row = this._dataController.items()[e.rowIndex];\n          var allowUpdating = editingController.allowUpdating({\n            row: row\n          }, eventName) || row && row.isNewRow;\n          var column = this._columnsController.getVisibleColumns()[columnIndex];\n          var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\n          var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\n          var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\n          var isShowEditorAlways = column && column.showEditorAlways;\n          if (isEditedCell) {\n            return true;\n          }\n          if (\"down\" === eventName) {\n            if (devices.real().ios || devices.real().android) {\n              resetActiveElement();\n            }\n            return isShowEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);\n          }\n          if (\"click\" === eventName && \"dblClick\" === startEditAction) {\n            var withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;\n            editingController.closeEditCell(false, withoutSaveEditData);\n          }\n          if (allowEditing && eventName === startEditAction) {\n            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n          }\n        },\n        _rowPointerDown: function (e) {\n          this._pointerDownTimeout = setTimeout(() => {\n            this._editCellByClick(e, \"down\");\n          });\n        },\n        _rowClick: function (e) {\n          var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n          e.event[TARGET_COMPONENT_NAME] = this.component;\n          if (!this._editCellByClick(e, \"click\") && !isEditForm) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _rowDblClick: function (e) {\n          if (!this._editCellByClick(e, \"dblClick\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cellPrepared: function ($cell, parameters) {\n          var _parameters$column;\n          var editingController = this._editingController;\n          var isCommandCell = !!parameters.column.command;\n          var isEditableCell = parameters.setValue;\n          var isEditRow = editingController.isEditRow(parameters.rowIndex);\n          var isEditing = isEditingCell(isEditRow, parameters);\n          if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\n            var alignment = parameters.column.alignment;\n            $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n            if (alignment) {\n              $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n            }\n          }\n          if (isEditing) {\n            this._editCellPrepared($cell);\n          }\n          var hasTemplate = !!(null !== (_parameters$column = parameters.column) && void 0 !== _parameters$column && _parameters$column.cellTemplate);\n          if (parameters.column && !isCommandCell && (!hasTemplate || editingController.shouldHighlightCell(parameters))) {\n            editingController.highlightDataCell($cell, parameters);\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _editCellPrepared: noop,\n        _formItemPrepared: noop,\n        _getCellOptions: function (options) {\n          var cellOptions = this.callBase(options);\n          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n          return cellOptions;\n        },\n        _createCell: function (options) {\n          var $cell = this.callBase(options);\n          var isEditRow = this._editingController.isEditRow(options.rowIndex);\n          isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\n          return $cell;\n        },\n        cellValue: function (rowIndex, columnIdentifier, value, text) {\n          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n          if (cellOptions) {\n            if (void 0 === value) {\n              return cellOptions.value;\n            } else {\n              this._editingController.updateFieldValue(cellOptions, value, text, true);\n            }\n          }\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._pointerDownTimeout);\n        },\n        _renderCore: function () {\n          this.callBase.apply(this, arguments);\n          return this.waitAsyncTemplates(true).done(() => {\n            this._editingController._focusEditorIfNeed();\n          });\n        }\n      },\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\n          return editButtonItems.concat(items);\n        },\n        optionChanged: function (args) {\n          var fullName = args.fullName;\n          switch (args.name) {\n            case \"editing\":\n              var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\n              var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\n              shouldInvalidate && this._invalidate();\n              this.callBase(args);\n              break;\n            case \"useLegacyColumnButtonTemplate\":\n              args.handled = true;\n              break;\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var editingOptions = this.getController(\"editing\").option(\"editing\");\n          return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["_extends","$","domAdapter","eventsEngine","Guid","resetActiveElement","isDefined","isObject","isFunction","isEmptyObject","each","extend","modules","name","clickEventName","pointerEvents","gridCoreUtils","createObjectWithChanges","addNamespace","confirm","messageLocalization","devices","when","Deferred","fromPromise","equalByValue","noop","iconUtils","EDITOR_CELL_CLASS","ROW_CLASS","EDIT_FORM_CLASS","DATA_EDIT_DATA_INSERT_TYPE","DATA_EDIT_DATA_REMOVE_TYPE","EDITING_POPUP_OPTION_NAME","EDITING_EDITROWKEY_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","TARGET_COMPONENT_NAME","EDITORS_INPUT_SELECTOR","FOCUSABLE_ELEMENT_SELECTOR","EDIT_MODE_ROW","EDIT_MODES","ROW_BASED_MODES","FIRST_NEW_ROW_POSITION","LAST_NEW_ROW_POSITION","PAGE_BOTTOM_NEW_ROW_POSITION","PAGE_TOP_NEW_ROW_POSITION","VIEWPORT_BOTTOM_NEW_ROW_POSITION","VIEWPORT_TOP_NEW_ROW_POSITION","deepExtendArraySafe","READONLY_CLASS","LINK_CLASS","ROW_SELECTED","EDIT_BUTTON_CLASS","COMMAND_EDIT_CLASS","COMMAND_EDIT_WITH_ICONS_CLASS","INSERT_INDEX","ROW_INSERTED","ROW_MODIFIED","CELL_MODIFIED","EDITING_NAMESPACE","CELL_FOCUS_DISABLED_CLASS","DATA_EDIT_DATA_UPDATE_TYPE","DEFAULT_START_EDIT_ACTION","EDIT_LINK_CLASS","save","cancel","edit","undelete","delete","add","EDIT_ICON_CLASS","METHOD_NAMES","ACTION_OPTION_NAMES","BUTTON_NAMES","EDITING_CHANGES_OPTION_NAME","createFailureHandler","deferred","arg","error","Error","String","reject","isEditingCell","isEditRow","cellOptions","isEditing","column","allowEditing","isEditingOrShowEditorAlwaysDataCell","isCommandCell","command","isEditorCell","showEditorAlways","rowType","EditingController","ViewController","inherit","getButtonIndex","buttons","result","some","button","index","getButtonName","members","init","_columnsController","getController","_dataController","_rowsView","getView","_lastOperation","_changes","_deferreds","forEach","d","_dataChangedHandler","_handleDataChanged","bind","changed","_saveEditorHandler","createAction","excludeValidators","_updateEditColumn","_updateEditButtons","_internalState","component","_optionsByReference","getEditMode","editMode","option","indexOf","_getDefaultEditorTemplate","container","options","$editor","appendTo","createEditor","value","setValue","row","parentType","width","readOnly","isOnForm","id","_getNewRowPosition","newRowPosition","scrollingMode","getChanges","getInsertRowCount","changes","filter","change","type","length","resetChanges","needReset","_silentOption","_getInternalData","key","item","_addInternalData","params","internalData","push","_getOldData","_this$_getInternalDat","oldData","getUpdatedData","data","keyOf","editIndex","getIndexByKey","getInsertedData","map","getRemovedData","_fireDataErrorOccurred","$popupContent","getPopupContent","dataErrorOccurred","fire","_needToCloseEditableCell","_closeEditItem","_isDefaultButtonVisible","allowDeleting","_isButtonVisible","visible","call","_isButtonDisabled","disabled","_getButtonConfig","config","buttonName","editingTexts","saveRowChanges","cancelRowChanges","editRow","undeleteRow","deleteRow","addRowToNode","methodName","editingOptions","actionName","allowAction","text","cssClass","onClick","e","event","stopPropagation","preventDefault","setTimeout","rowIndex","_getEditingButtons","buttonIndex","haveCustomButtons","slice","splice","_renderEditingButtons","$container","_createButton","_getEditCommandCellTemplate","watch","empty","setEmptyText","isRowBasedEditMode","getFirstEditableColumnIndex","columnsController","columnIndex","visibleColumns","getVisibleColumns","getFirstEditableCellInRow","rowsView","_getCellElement","getFocusedCellInRow","items","hasChanges","i","getRowIndexByKey","dispose","callBase","clearTimeout","_inputFocusTimeoutID","off","getDocument","up","_pointerUpEditorHandler","down","_pointerDownEditorHandler","apply","arguments","optionChanged","args","fullName","_handleEditRowKeyChange","isEqual","_handleChangesChange","handled","reinit","_resetEditColumnName","_resetEditRowKey","oldRowIndexCorrection","_getEditRowIndexCorrection","oldRowIndex","previousValue","_editRowFromOptionChanged","cancelEditData","dataController","_addInsertInfo","_items$rowIndex","updateItems","repaintChangesOnly","isLiveUpdate","isOptionChanged","publicMethods","refresh","_pageIndex","_refreshCore","isEditRowKeyDefined","_setEditRowKey","silent","_refocusEditCell","_focusEditingCell","_setEditRowKeyByIndex","getKeyByRowIndex","fireError","getEditRowIndex","_getVisibleEditRowIndex","getEditFormRowIndex","isEditRowByIndex","isKeyEqual","isEditCell","visibleRowIndex","_getVisibleEditColumnIndex","_isProcessedItem","_getInsertRowIndex","isProcessedItems","_getInsertAfterOrBeforeKey","isProcessedItem","nextItem","insertAfterKey","_generateNewItem","_this$_getInternalDat2","insertInfo","_getLoadedRowIndex","loadedRowIndex","pageIndex","insertAfterOrBeforeKey","isLastPageLoaded","processItems","changeType","update","_this$_getInternalDat3","isInsert","processDataItem","generateDataValues","columns","_processDataItemCore","isNewRow","modified","modifiedValues","removed","_initNewRow","executeAction","promise","done","resolve","fail","_createInsertInfo","_getInsertIndex","parentKey","_this$_getInternalDat4","_setInsertAfterOrBeforeKey","allItems","itemIndex","isViewportBottom","visibleItemIndex","getBottomVisibleItemIndex","getTopVisibleItemIndex","getVisibleRows","insertKey","insertBeforeKey","maxInsertIndex","editItem","_this$_getInternalDat5","insertChange","_insertChange$insertA","_getPageIndexToInsertRow","lastPageIndex","pageCount","addRow","store","NAME","_addRow","param","oldEditRowIndex","allowCancelEditing","_allowRowAdding","_navigateToNewRow","__KEY__","_addRowCore","insertIndex","initialOldEditRowIndex","editRowIndex","_addChange","_editRowIndex","_change","focusController","c","pageIndexToInsertRow","navigateToRowByKey","navigateToRow","rowIndices","_this$_rowsView","waitAsyncTemplates","_showAddedRow","_afterInsertRow","_focusFirstEditableCellInRow","_beforeFocusElementInRow","$firstCell","_editCellInProgress","_delayedInputFocus","_isEditingStart","_beforeUpdateItems","editColumnName","getVisibleColumnIndex","_setEditColumnNameByIndex","_visibleColumns$index","_setEditColumnName","_getEditColumn","_getColumnByName","editColumn","columnName","editRowKey","isColumnHidden","visibleWidth","_resetEditIndices","_item$oldData","_editRowFromOptionChangedCore","preventRendering","_needFocusEditor","_focusEditorIfNeed","_showEditPopup","_repaintEditPopup","_getEditPopupHiddenHandler","_getPopupEditFormTemplate","_getSaveButtonConfig","saveEditData","_getCancelButtonConfig","_removeInternalData","_updateInsertAfterOrBeforeKeys","removeChange","_removeChange","executeOperation","func","waitForDeferredOperations","state","_processCanceledEditingCell","_repaintEditCell","oldColumn","loseFocus","$cell","beforeFocusCallback","callBeforeFocusCallbackAlways","inputFocus","$focusableElement","find","first","focusAndSelectElement","_beforeFocusCallback","real","ios","android","$editCell","editColumnIndex","_checkAndDeleteRow","texts","confirmDelete","confirmDeleteMessage","_deleteRowCore","confirmDeleteTitle","showDialogTitle","confirmResult","_afterDeleteRow","_fireOnSaving","onSavingParams","_executeEditingAction","_disposed","_processChanges","deferreds","results","dataChanges","changeCopy","_beforeSaveEditData","remove","insert","newData","doneDeferred","always","_processRemoveIfError","_processRemove","_processRemoveCore","_processSaveEditDataResult","hasSavedData","changesLength","isError","_fireSaveEditDataEvents","_","_ref","isSaving","_resolveAfterSave","_saving","_saveEditDataInner","_afterSaveEditData","dataSource","_ref2","beginLoading","_endSaving","endLoading","_cancelSaving","_beforeEndSaving","_refreshDataAfterSave","refreshMode","isFullRefresh","selection","reload","load","changesOnly","isEditColumnVisible","_isEditColumnVisible","useIcons","addCommandColumn","alignment","cellTemplate","fixedPosition","columnOption","_isEditButtonDisabled","isEditRowDefined","headerPanel","isButtonDisabled","setToolbarItemDisabled","_applyModified","$element","addClass","_beforeCloseEditCellInBatchMode","_cancelEditDataCore","_beforeCancelEditData","_afterCancelEditData","_hideEditPopup","hasEditData","isPageChanged","_getRowIndicesForCascadeUpdating","skipCurrentRow","addDeferred","_prepareChange","_options$row","rowKey","setCellValueResult","setCellValue","displayValueMap","_updateRowValues","values","updateFieldValue","forceUpdateRow","_applyChange","_focusPreviousEditingCellIfNeed","_updateEditRow","_needUpdateRow","isCustomSetCellValue","defaultSetCellValue","isCustomCalculateCellValue","visibleColumn","calculateCellValue","defaultCalculateCellValue","changeOptions","_applyChangeCore","_updateEditRowCore","_updateRowImmediately","_updateRowWithDelay","_validateEditFormAfterUpdate","_this$_editForm","elementContainer","_editForm","element","get","$focusedElement","getActiveElement","getCellIndex","focusedElement","selectionRange","getSelectionRange","$focusedItem","_this$component$$elem","selectionStart","setSelectionRange","changeParams","_this$getChanges","_getFormEditItemTemplate","editCellTemplate","getColumnTemplate","template","isRowMode","isRowEditing","isCellEditing","editingStartOptions","allowUpdating","getEditFormTemplate","icon","useLegacyColumnButtonTemplate","$button","attr","renderTemplate","iconType","getImageSourceType","getImageContainer","localizationName","getButtonLocalizationNames","format","hint","on","_button$onClick","append","prepareButtonItem","sortIndex","titleButtonTextByClassNames","revert","cancelAllChanges","saveAllChanges","className","hintText","widget","onInitialized","_getToolbarButtonClass","addWidgetPrefix","showText","location","locateInMenu","prepareEditButtons","buttonItems","allowAdding","highlightDataCell","shouldHighlightCell","_allowEditAction","allowEditAction","eventName","startEditAction","needCallback","isCellModified","parameters","isNewRowInEditMode","visibleEditRowIndex","rows","cellModified","editingModule","defaultOptions","editing","mode","selectTextOnEditStart","form","colCount","popup","controllers","extenders","_editingController","full","repaintRows","_this$_updateEditItem","_updateEditItem","_updateItemsCore","_applyChangeUpdate","_applyChangesOnly","_processItems","_processDataItem","dataItem","_processItem","dataIndex","_getChangedColumnIndices","oldItem","newItem","_isCellChanged","oldRow","newRow","editingController","cell","cells","needToRefreshOnDataSourceChange","isParasiteChange","Array","isArray","_handleDataSourceChange","dataSourceKeys","newChanges","isEditNewItem","every","views","is","$cellElements","getCellElements","cellIndex","cellElement","concat","_getCellTemplate","_createRow","$row","isRowRemoved","isRowInserted","isRowModified","removeClass","_getColumnIndexByElement","$tableElement","closest","$tableElements","getTableElements","_getColumnIndexByElementCore","$targetElement","_editCellByClick","target","isEditedCell","isShowEditorAlways","editCell","withoutSaveEditData","closeEditCell","_rowPointerDown","_pointerDownTimeout","_rowClick","isEditForm","rowElement","hasClass","_rowDblClick","_cellPrepared","_parameters$column","isEditableCell","toggleClass","css","_editCellPrepared","hasTemplate","_formItemPrepared","_getCellOptions","_createCell","cellValue","columnIdentifier","getCellOptions","_renderCore","_getToolbarItems","editButtonItems","excludedOptions","shouldInvalidate","optionName","_invalidate","isVisible"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    resetActiveElement\r\n} from \"../../core/utils/dom\";\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isFunction,\r\n    isEmptyObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    confirm\r\n} from \"../dialog\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport devices from \"../../core/devices\";\r\nimport {\r\n    when,\r\n    Deferred,\r\n    fromPromise\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    equalByValue,\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport * as iconUtils from \"../../core/utils/icon\";\r\nimport {\r\n    EDITOR_CELL_CLASS,\r\n    ROW_CLASS,\r\n    EDIT_FORM_CLASS,\r\n    DATA_EDIT_DATA_INSERT_TYPE,\r\n    DATA_EDIT_DATA_REMOVE_TYPE,\r\n    EDITING_POPUP_OPTION_NAME,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITING_EDITCOLUMNNAME_OPTION_NAME,\r\n    TARGET_COMPONENT_NAME,\r\n    EDITORS_INPUT_SELECTOR,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    EDIT_MODE_ROW,\r\n    EDIT_MODES,\r\n    ROW_BASED_MODES,\r\n    FIRST_NEW_ROW_POSITION,\r\n    LAST_NEW_ROW_POSITION,\r\n    PAGE_BOTTOM_NEW_ROW_POSITION,\r\n    PAGE_TOP_NEW_ROW_POSITION,\r\n    VIEWPORT_BOTTOM_NEW_ROW_POSITION,\r\n    VIEWPORT_TOP_NEW_ROW_POSITION\r\n} from \"./ui.grid_core.editing_constants\";\r\nimport {\r\n    deepExtendArraySafe\r\n} from \"../../core/utils/object\";\r\nvar READONLY_CLASS = \"readonly\";\r\nvar LINK_CLASS = \"dx-link\";\r\nvar ROW_SELECTED = \"dx-selection\";\r\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\r\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar ROW_INSERTED = \"dx-row-inserted\";\r\nvar ROW_MODIFIED = \"dx-row-modified\";\r\nvar CELL_MODIFIED = \"dx-cell-modified\";\r\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\r\nvar DEFAULT_START_EDIT_ACTION = \"click\";\r\nvar EDIT_LINK_CLASS = {\r\n    save: \"dx-link-save\",\r\n    cancel: \"dx-link-cancel\",\r\n    edit: \"dx-link-edit\",\r\n    undelete: \"dx-link-undelete\",\r\n    delete: \"dx-link-delete\",\r\n    add: \"dx-link-add\"\r\n};\r\nvar EDIT_ICON_CLASS = {\r\n    save: \"save\",\r\n    cancel: \"revert\",\r\n    edit: \"edit\",\r\n    undelete: \"revert\",\r\n    delete: \"trash\",\r\n    add: \"add\"\r\n};\r\nvar METHOD_NAMES = {\r\n    edit: \"editRow\",\r\n    delete: \"deleteRow\",\r\n    undelete: \"undeleteRow\",\r\n    save: \"saveEditData\",\r\n    cancel: \"cancelEditData\",\r\n    add: \"addRowByRowIndex\"\r\n};\r\nvar ACTION_OPTION_NAMES = {\r\n    add: \"allowAdding\",\r\n    edit: \"allowUpdating\",\r\n    delete: \"allowDeleting\"\r\n};\r\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\r\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\r\nvar createFailureHandler = function(deferred) {\r\n    return function(arg) {\r\n        var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\r\n        deferred.reject(error)\r\n    }\r\n};\r\nvar isEditingCell = function(isEditRow, cellOptions) {\r\n    return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing\r\n};\r\nvar isEditingOrShowEditorAlwaysDataCell = function(isEditRow, cellOptions) {\r\n    var isCommandCell = !!cellOptions.column.command;\r\n    var isEditing = isEditingCell(isEditRow, cellOptions);\r\n    var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\r\n    return \"data\" === cellOptions.rowType && isEditorCell\r\n};\r\nvar EditingController = modules.ViewController.inherit(function() {\r\n    var getButtonIndex = (buttons, name) => {\r\n        var result = -1;\r\n        buttons.some((button, index) => {\r\n            if (getButtonName(button) === name) {\r\n                result = index;\r\n                return true\r\n            }\r\n        });\r\n        return result\r\n    };\r\n\r\n    function getButtonName(button) {\r\n        return isObject(button) ? button.name : button\r\n    }\r\n    var members = {\r\n        init: function() {\r\n            this._columnsController = this.getController(\"columns\");\r\n            this._dataController = this.getController(\"data\");\r\n            this._rowsView = this.getView(\"rowsView\");\r\n            this._lastOperation = null;\r\n            this._changes = [];\r\n            if (this._deferreds) {\r\n                this._deferreds.forEach(d => d.reject(\"cancel\"))\r\n            }\r\n            this._deferreds = [];\r\n            if (!this._dataChangedHandler) {\r\n                this._dataChangedHandler = this._handleDataChanged.bind(this);\r\n                this._dataController.changed.add(this._dataChangedHandler)\r\n            }\r\n            if (!this._saveEditorHandler) {\r\n                this.createAction(\"onInitNewRow\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserting\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserted\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditingStart\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdating\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdated\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceling\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceled\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                })\r\n            }\r\n            this._updateEditColumn();\r\n            this._updateEditButtons();\r\n            if (!this._internalState) {\r\n                this._internalState = []\r\n            }\r\n            this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\r\n            this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true\r\n        },\r\n        getEditMode: function() {\r\n            var editMode = this.option(\"editing.mode\");\r\n            if (-1 !== EDIT_MODES.indexOf(editMode)) {\r\n                return editMode\r\n            }\r\n            return EDIT_MODE_ROW\r\n        },\r\n        _getDefaultEditorTemplate: function() {\r\n            return (container, options) => {\r\n                var $editor = $(\"<div>\").appendTo(container);\r\n                this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\r\n                    value: options.value,\r\n                    setValue: options.setValue,\r\n                    row: options.row,\r\n                    parentType: \"dataRow\",\r\n                    width: null,\r\n                    readOnly: !options.setValue,\r\n                    isOnForm: options.isOnForm,\r\n                    id: options.id\r\n                }))\r\n            }\r\n        },\r\n        _getNewRowPosition: function() {\r\n            var newRowPosition = this.option(\"editing.newRowPosition\");\r\n            var scrollingMode = this.option(\"scrolling.mode\");\r\n            if (\"virtual\" === scrollingMode) {\r\n                switch (newRowPosition) {\r\n                    case PAGE_TOP_NEW_ROW_POSITION:\r\n                        return VIEWPORT_TOP_NEW_ROW_POSITION;\r\n                    case PAGE_BOTTOM_NEW_ROW_POSITION:\r\n                        return VIEWPORT_BOTTOM_NEW_ROW_POSITION;\r\n                    default:\r\n                        return newRowPosition\r\n                }\r\n            }\r\n            return newRowPosition\r\n        },\r\n        getChanges: function() {\r\n            return this.option(EDITING_CHANGES_OPTION_NAME)\r\n        },\r\n        getInsertRowCount: function() {\r\n            var changes = this.option(EDITING_CHANGES_OPTION_NAME);\r\n            return changes.filter(change => \"insert\" === change.type).length\r\n        },\r\n        resetChanges: function() {\r\n            var changes = this.getChanges();\r\n            var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\r\n            if (needReset) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, [])\r\n            }\r\n        },\r\n        _getInternalData: function(key) {\r\n            return this._internalState.filter(item => equalByValue(item.key, key))[0]\r\n        },\r\n        _addInternalData: function(params) {\r\n            var internalData = this._getInternalData(params.key);\r\n            if (internalData) {\r\n                return extend(internalData, params)\r\n            }\r\n            this._internalState.push(params);\r\n            return params\r\n        },\r\n        _getOldData: function(key) {\r\n            var _this$_getInternalDat;\r\n            return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData\r\n        },\r\n        getUpdatedData: function(data) {\r\n            var key = this._dataController.keyOf(data);\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (changes[editIndex]) {\r\n                return createObjectWithChanges(data, changes[editIndex].data)\r\n            }\r\n            return data\r\n        },\r\n        getInsertedData: function() {\r\n            return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data)\r\n        },\r\n        getRemovedData: function() {\r\n            return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key))\r\n        },\r\n        _fireDataErrorOccurred: function(arg) {\r\n            if (\"cancel\" === arg) {\r\n                return\r\n            }\r\n            var $popupContent = this.getPopupContent();\r\n            this._dataController.dataErrorOccurred.fire(arg, $popupContent)\r\n        },\r\n        _needToCloseEditableCell: noop,\r\n        _closeEditItem: noop,\r\n        _handleDataChanged: noop,\r\n        _isDefaultButtonVisible: function(button, options) {\r\n            var result = true;\r\n            switch (button.name) {\r\n                case \"delete\":\r\n                    result = this.allowDeleting(options);\r\n                    break;\r\n                case \"undelete\":\r\n                    result = false\r\n            }\r\n            return result\r\n        },\r\n        _isButtonVisible: function(button, options) {\r\n            var visible = button.visible;\r\n            if (!isDefined(visible)) {\r\n                return this._isDefaultButtonVisible(button, options)\r\n            }\r\n            return isFunction(visible) ? visible.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : visible\r\n        },\r\n        _isButtonDisabled: function(button, options) {\r\n            var disabled = button.disabled;\r\n            return isFunction(disabled) ? disabled.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : !!disabled\r\n        },\r\n        _getButtonConfig: function(button, options) {\r\n            var config = isObject(button) ? button : {};\r\n            var buttonName = getButtonName(button);\r\n            var editingTexts = (options => {\r\n                var editingTexts = options.component.option(\"editing.texts\") || {};\r\n                return {\r\n                    save: editingTexts.saveRowChanges,\r\n                    cancel: editingTexts.cancelRowChanges,\r\n                    edit: editingTexts.editRow,\r\n                    undelete: editingTexts.undeleteRow,\r\n                    delete: editingTexts.deleteRow,\r\n                    add: editingTexts.addRowToNode\r\n                }\r\n            })(options);\r\n            var methodName = METHOD_NAMES[buttonName];\r\n            var editingOptions = this.option(\"editing\");\r\n            var actionName = ACTION_OPTION_NAMES[buttonName];\r\n            var allowAction = actionName ? editingOptions[actionName] : true;\r\n            return extend({\r\n                name: buttonName,\r\n                text: editingTexts[buttonName],\r\n                cssClass: EDIT_LINK_CLASS[buttonName]\r\n            }, {\r\n                onClick: methodName && (e => {\r\n                    var event = e.event;\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    setTimeout(() => {\r\n                        options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex)\r\n                    })\r\n                })\r\n            }, config)\r\n        },\r\n        _getEditingButtons: function(options) {\r\n            var buttonIndex;\r\n            var haveCustomButtons = !!options.column.buttons;\r\n            var buttons = (options.column.buttons || []).slice();\r\n            if (haveCustomButtons) {\r\n                buttonIndex = getButtonIndex(buttons, \"edit\");\r\n                if (buttonIndex >= 0) {\r\n                    if (getButtonIndex(buttons, \"save\") < 0) {\r\n                        buttons.splice(buttonIndex + 1, 0, \"save\")\r\n                    }\r\n                    if (getButtonIndex(buttons, \"cancel\") < 0) {\r\n                        buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\")\r\n                    }\r\n                }\r\n                buttonIndex = getButtonIndex(buttons, \"delete\");\r\n                if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\r\n                    buttons.splice(buttonIndex + 1, 0, \"undelete\")\r\n                }\r\n            } else {\r\n                buttons = BUTTON_NAMES.slice()\r\n            }\r\n            return buttons.map(button => this._getButtonConfig(button, options))\r\n        },\r\n        _renderEditingButtons: function($container, buttons, options, change) {\r\n            buttons.forEach(button => {\r\n                if (this._isButtonVisible(button, options)) {\r\n                    this._createButton($container, button, options, change)\r\n                }\r\n            })\r\n        },\r\n        _getEditCommandCellTemplate: function() {\r\n            return (container, options, change) => {\r\n                var $container = $(container);\r\n                if (\"data\" === options.rowType) {\r\n                    var buttons = this._getEditingButtons(options);\r\n                    this._renderEditingButtons($container, buttons, options, change);\r\n                    options.watch && options.watch(() => buttons.map(button => ({\r\n                        visible: this._isButtonVisible(button, options),\r\n                        disabled: this._isButtonDisabled(button, options)\r\n                    })), () => {\r\n                        $container.empty();\r\n                        this._renderEditingButtons($container, buttons, options)\r\n                    })\r\n                } else {\r\n                    gridCoreUtils.setEmptyText($container)\r\n                }\r\n            }\r\n        },\r\n        isRowBasedEditMode: function() {\r\n            var editMode = this.getEditMode();\r\n            return -1 !== ROW_BASED_MODES.indexOf(editMode)\r\n        },\r\n        getFirstEditableColumnIndex: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var columnIndex;\r\n            var visibleColumns = columnsController.getVisibleColumns();\r\n            each(visibleColumns, (function(index, column) {\r\n                if (column.allowEditing) {\r\n                    columnIndex = index;\r\n                    return false\r\n                }\r\n            }));\r\n            return columnIndex\r\n        },\r\n        getFirstEditableCellInRow: function(rowIndex) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex())\r\n        },\r\n        getFocusedCellInRow: function(rowIndex) {\r\n            return this.getFirstEditableCellInRow(rowIndex)\r\n        },\r\n        getIndexByKey: function(key, items) {\r\n            return gridCoreUtils.getIndexByKey(key, items)\r\n        },\r\n        hasChanges: function(rowIndex) {\r\n            var changes = this.getChanges();\r\n            var result = false;\r\n            for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\r\n                if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\r\n                    result = true;\r\n                    break\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        dispose: function() {\r\n            this.callBase();\r\n            clearTimeout(this._inputFocusTimeoutID);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n        },\r\n        _silentOption: function(name, value) {\r\n            if (\"editing.changes\" === name) {\r\n                this._changes = deepExtendArraySafe([], value)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"editing\" === args.name) {\r\n                var fullName = args.fullName;\r\n                if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\r\n                    this._handleEditRowKeyChange(args)\r\n                } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\r\n                    var isEqual = equalByValue(args.value, this._changes, -1);\r\n                    if (!isEqual) {\r\n                        this._changes = deepExtendArraySafe([], args.value);\r\n                        this._handleChangesChange(args)\r\n                    }\r\n                } else if (!args.handled) {\r\n                    this._columnsController.reinit();\r\n                    this.init();\r\n                    this.resetChanges();\r\n                    this._resetEditColumnName();\r\n                    this._resetEditRowKey()\r\n                }\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        },\r\n        _handleEditRowKeyChange: function(args) {\r\n            var rowIndex = this._dataController.getRowIndexByKey(args.value);\r\n            var oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n            if (isDefined(args.value)) {\r\n                if (args.value !== args.previousValue) {\r\n                    this._editRowFromOptionChanged(rowIndex, oldRowIndex)\r\n                }\r\n            } else {\r\n                this.cancelEditData()\r\n            }\r\n        },\r\n        _handleChangesChange: function(args) {\r\n            var dataController = this._dataController;\r\n            var changes = args.value;\r\n            if (!args.value.length && !args.previousValue.length) {\r\n                return\r\n            }\r\n            changes.forEach(change => {\r\n                if (\"insert\" === change.type) {\r\n                    this._addInsertInfo(change)\r\n                } else {\r\n                    var _items$rowIndex;\r\n                    var items = dataController.items();\r\n                    var rowIndex = dataController.getRowIndexByKey(change.key);\r\n                    this._addInternalData({\r\n                        key: change.key,\r\n                        oldData: null === (_items$rowIndex = items[rowIndex]) || void 0 === _items$rowIndex ? void 0 : _items$rowIndex.data\r\n                    })\r\n                }\r\n            });\r\n            dataController.updateItems({\r\n                repaintChangesOnly: true,\r\n                isLiveUpdate: false,\r\n                isOptionChanged: true\r\n            })\r\n        },\r\n        publicMethods: function() {\r\n            return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"]\r\n        },\r\n        refresh: function() {\r\n            if (!isDefined(this._pageIndex)) {\r\n                return\r\n            }\r\n            this._refreshCore.apply(this, arguments)\r\n        },\r\n        _refreshCore: noop,\r\n        isEditing: function() {\r\n            var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n            return isEditRowKeyDefined\r\n        },\r\n        isEditRow: function() {\r\n            return false\r\n        },\r\n        _setEditRowKey: function(value, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            } else {\r\n                this.option(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            }\r\n            if (this._refocusEditCell) {\r\n                this._refocusEditCell = false;\r\n                this._focusEditingCell()\r\n            }\r\n        },\r\n        _setEditRowKeyByIndex: function(rowIndex, silent) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            if (void 0 === key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            this._setEditRowKey(key, silent)\r\n        },\r\n        getEditRowIndex: function() {\r\n            return this._getVisibleEditRowIndex()\r\n        },\r\n        getEditFormRowIndex: function() {\r\n            return -1\r\n        },\r\n        isEditRowByIndex(rowIndex) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\r\n            if (isKeyEqual) {\r\n                return this._getVisibleEditRowIndex() === rowIndex\r\n            }\r\n            return isKeyEqual\r\n        },\r\n        isEditCell: function(visibleRowIndex, columnIndex) {\r\n            return this.isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex\r\n        },\r\n        getPopupContent: noop,\r\n        _isProcessedItem: function(item) {\r\n            return false\r\n        },\r\n        _getInsertRowIndex: function(items, change, isProcessedItems) {\r\n            var result = -1;\r\n            var dataController = this._dataController;\r\n            var key = this._getInsertAfterOrBeforeKey(change);\r\n            if (!isDefined(key) && 0 === items.length) {\r\n                result = 0\r\n            } else if (isDefined(key)) {\r\n                items.some((item, index) => {\r\n                    var isProcessedItem = isProcessedItems || this._isProcessedItem(item);\r\n                    if (isObject(item)) {\r\n                        if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\r\n                            if (equalByValue(item.key, key)) {\r\n                                result = index\r\n                            }\r\n                        } else if (equalByValue(dataController.keyOf(item), key)) {\r\n                            result = index\r\n                        }\r\n                    }\r\n                    if (result >= 0) {\r\n                        var nextItem = items[result + 1];\r\n                        if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\r\n                            return\r\n                        }\r\n                        if (isDefined(change.insertAfterKey)) {\r\n                            result += 1\r\n                        }\r\n                        return true\r\n                    }\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        _generateNewItem: function(key) {\r\n            var _this$_getInternalDat2;\r\n            var item = {\r\n                key: key\r\n            };\r\n            var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\r\n            if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\r\n                item[INSERT_INDEX] = insertInfo[INSERT_INDEX]\r\n            }\r\n            return item\r\n        },\r\n        _getLoadedRowIndex: function(items, change, isProcessedItems) {\r\n            var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\r\n            var dataController = this._dataController;\r\n            if (loadedRowIndex < 0) {\r\n                var newRowPosition = this._getNewRowPosition();\r\n                var pageIndex = dataController.pageIndex();\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\r\n                    loadedRowIndex = 0\r\n                } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController.isLastPageLoaded()) {\r\n                    loadedRowIndex = items.length\r\n                }\r\n            }\r\n            return loadedRowIndex\r\n        },\r\n        processItems: function(items, e) {\r\n            var changeType = e.changeType;\r\n            this.update(changeType);\r\n            var changes = this.getChanges();\r\n            changes.forEach(change => {\r\n                var _this$_getInternalDat3;\r\n                var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\r\n                if (!isInsert) {\r\n                    return\r\n                }\r\n                var key = change.key;\r\n                var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\r\n                if (!isDefined(key) || !isDefined(insertInfo)) {\r\n                    insertInfo = this._addInsertInfo(change);\r\n                    key = insertInfo.key\r\n                }\r\n                var loadedRowIndex = this._getLoadedRowIndex(items, change);\r\n                var item = this._generateNewItem(key);\r\n                if (loadedRowIndex >= 0) {\r\n                    items.splice(loadedRowIndex, 0, item)\r\n                }\r\n            });\r\n            return items\r\n        },\r\n        processDataItem: function(item, options, generateDataValues) {\r\n            var columns = options.visibleColumns;\r\n            var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            item.isEditing = false;\r\n            if (editIndex >= 0) {\r\n                this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues)\r\n            }\r\n        },\r\n        _processDataItemCore: function(item, change, key, columns, generateDataValues) {\r\n            var {\r\n                data: data,\r\n                type: type\r\n            } = change;\r\n            switch (type) {\r\n                case DATA_EDIT_DATA_INSERT_TYPE:\r\n                    item.isNewRow = true;\r\n                    item.key = key;\r\n                    item.data = data;\r\n                    break;\r\n                case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                    item.modified = true;\r\n                    item.oldData = item.data;\r\n                    item.data = createObjectWithChanges(item.data, data);\r\n                    item.modifiedValues = generateDataValues(data, columns, true);\r\n                    break;\r\n                case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                    item.removed = true\r\n            }\r\n        },\r\n        _initNewRow: function(options) {\r\n            this.executeAction(\"onInitNewRow\", options);\r\n            if (options.promise) {\r\n                var deferred = new Deferred;\r\n                when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                return deferred\r\n            }\r\n        },\r\n        _createInsertInfo: function() {\r\n            var insertInfo = {};\r\n            insertInfo[INSERT_INDEX] = this._getInsertIndex();\r\n            return insertInfo\r\n        },\r\n        _addInsertInfo: function(change, parentKey) {\r\n            var _this$_getInternalDat4;\r\n            var insertInfo;\r\n            var {\r\n                key: key\r\n            } = change;\r\n            if (!isDefined(key)) {\r\n                key = String(new Guid);\r\n                change.key = key\r\n            }\r\n            insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\r\n            if (!isDefined(insertInfo)) {\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                insertInfo = this._createInsertInfo();\r\n                if (!isDefined(insertAfterOrBeforeKey)) {\r\n                    this._setInsertAfterOrBeforeKey(change, parentKey)\r\n                }\r\n            }\r\n            this._addInternalData({\r\n                insertInfo: insertInfo,\r\n                key: key\r\n            });\r\n            return {\r\n                insertInfo: insertInfo,\r\n                key: key\r\n            }\r\n        },\r\n        _setInsertAfterOrBeforeKey: function(change, parentKey) {\r\n            var dataController = this._dataController;\r\n            var allItems = dataController.items(true);\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var newRowPosition = this._getNewRowPosition();\r\n            switch (newRowPosition) {\r\n                case FIRST_NEW_ROW_POSITION:\r\n                case LAST_NEW_ROW_POSITION:\r\n                    break;\r\n                case PAGE_TOP_NEW_ROW_POSITION:\r\n                case PAGE_BOTTOM_NEW_ROW_POSITION:\r\n                    if (allItems.length) {\r\n                        var itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;\r\n                        change[0 === itemIndex ? \"insertBeforeKey\" : \"insertAfterKey\"] = allItems[itemIndex].key\r\n                    }\r\n                    break;\r\n                default:\r\n                    var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\r\n                    var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\r\n                    var row = dataController.getVisibleRows()[visibleItemIndex];\r\n                    if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\r\n                        visibleItemIndex++\r\n                    }\r\n                    var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\r\n                    if (isDefined(insertKey)) {\r\n                        change.insertBeforeKey = insertKey\r\n                    }\r\n            }\r\n        },\r\n        _getInsertIndex: function() {\r\n            var maxInsertIndex = 0;\r\n            this.getChanges().forEach(editItem => {\r\n                var _this$_getInternalDat5;\r\n                var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\r\n                if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\r\n                    maxInsertIndex = insertInfo[INSERT_INDEX]\r\n                }\r\n            });\r\n            return maxInsertIndex + 1\r\n        },\r\n        _getInsertAfterOrBeforeKey: function(insertChange) {\r\n            var _insertChange$insertA;\r\n            return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey\r\n        },\r\n        _getPageIndexToInsertRow: function() {\r\n            var newRowPosition = this._getNewRowPosition();\r\n            var dataController = this._dataController;\r\n            var pageIndex = dataController.pageIndex();\r\n            var lastPageIndex = dataController.pageCount() - 1;\r\n            if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\r\n                return 0\r\n            } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\r\n                return lastPageIndex\r\n            }\r\n            return -1\r\n        },\r\n        addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            if (!store) {\r\n                dataController.fireError(\"E1052\", this.component.NAME);\r\n                return (new Deferred).reject()\r\n            }\r\n            return this._addRow(parentKey)\r\n        },\r\n        _addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            var key = store && store.key();\r\n            var param = {\r\n                data: {}\r\n            };\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var deferred = new Deferred;\r\n            this.refresh({\r\n                allowCancelEditing: true\r\n            });\r\n            if (!this._allowRowAdding()) {\r\n                when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\r\n                return deferred.promise()\r\n            }\r\n            if (!key) {\r\n                param.data.__KEY__ = String(new Guid)\r\n            }\r\n            when(this._initNewRow(param, parentKey)).done(() => {\r\n                if (this._allowRowAdding()) {\r\n                    when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject)\r\n                } else {\r\n                    deferred.reject(\"cancel\")\r\n                }\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _allowRowAdding: function() {\r\n            var insertIndex = this._getInsertIndex();\r\n            if (insertIndex > 1) {\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n        _addRowCore: function(data, parentKey, initialOldEditRowIndex) {\r\n            var change = {\r\n                data: data,\r\n                type: DATA_EDIT_DATA_INSERT_TYPE\r\n            };\r\n            var editRowIndex = this._getVisibleEditRowIndex();\r\n            var insertInfo = this._addInsertInfo(change, parentKey);\r\n            var key = insertInfo.key;\r\n            this._setEditRowKey(key, true);\r\n            this._addChange(change);\r\n            return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex)\r\n        },\r\n        _navigateToNewRow: function(oldEditRowIndex, change, editRowIndex) {\r\n            var _editRowIndex, _change;\r\n            var d = new Deferred;\r\n            var dataController = this._dataController;\r\n            var focusController = this.getController(\"focus\");\r\n            editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;\r\n            change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(c => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];\r\n            if (!change) {\r\n                return d.reject(\"cancel\").promise()\r\n            }\r\n            var pageIndexToInsertRow = this._getPageIndexToInsertRow();\r\n            var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\r\n            var navigateToRowByKey = key => {\r\n                when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {\r\n                    rowIndex = dataController.getRowIndexByKey(change.key);\r\n                    d.resolve()\r\n                })\r\n            };\r\n            var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n            if (pageIndexToInsertRow >= 0) {\r\n                dataController.pageIndex(pageIndexToInsertRow).done(() => {\r\n                    navigateToRowByKey(change.key)\r\n                }).fail(d.reject)\r\n            } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\r\n                navigateToRowByKey(insertAfterOrBeforeKey)\r\n            } else {\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\r\n                });\r\n                rowIndex = dataController.getRowIndexByKey(change.key);\r\n                if (rowIndex < 0) {\r\n                    navigateToRowByKey(change.key)\r\n                } else {\r\n                    d.resolve()\r\n                }\r\n            }\r\n            d.done(() => {\r\n                var _this$_rowsView;\r\n                null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.waitAsyncTemplates(true).done(() => {\r\n                    this._showAddedRow(rowIndex);\r\n                    this._afterInsertRow(change.key)\r\n                })\r\n            });\r\n            return d.promise()\r\n        },\r\n        _showAddedRow: function(rowIndex) {\r\n            this._focusFirstEditableCellInRow(rowIndex)\r\n        },\r\n        _beforeFocusElementInRow: noop,\r\n        _focusFirstEditableCellInRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var key = dataController.getKeyByRowIndex(rowIndex);\r\n            var $firstCell = this.getFirstEditableCellInRow(rowIndex);\r\n            this._editCellInProgress = true;\r\n            this._delayedInputFocus($firstCell, () => {\r\n                rowIndex = dataController.getRowIndexByKey(key);\r\n                this._editCellInProgress = false;\r\n                this._beforeFocusElementInRow(rowIndex)\r\n            })\r\n        },\r\n        _isEditingStart: function(options) {\r\n            this.executeAction(\"onEditingStart\", options);\r\n            return options.cancel\r\n        },\r\n        _beforeUpdateItems: noop,\r\n        _getVisibleEditColumnIndex: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            if (!isDefined(editColumnName)) {\r\n                return -1\r\n            }\r\n            return this._columnsController.getVisibleColumnIndex(editColumnName)\r\n        },\r\n        _setEditColumnNameByIndex: function(index, silent) {\r\n            var _visibleColumns$index;\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent)\r\n        },\r\n        _setEditColumnName: function(name, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            } else {\r\n                this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            }\r\n        },\r\n        _resetEditColumnName: function() {\r\n            this._setEditColumnName(null, true)\r\n        },\r\n        _getEditColumn: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            return this._getColumnByName(editColumnName)\r\n        },\r\n        _getColumnByName: function(name) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            var editColumn;\r\n            isDefined(name) && visibleColumns.some(column => {\r\n                if (column.name === name) {\r\n                    editColumn = column;\r\n                    return true\r\n                }\r\n            });\r\n            return editColumn\r\n        },\r\n        _getVisibleEditRowIndex: function(columnName) {\r\n            var dataController = this._dataController;\r\n            var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n            var rowIndex = dataController.getRowIndexByKey(editRowKey);\r\n            if (-1 === rowIndex) {\r\n                return rowIndex\r\n            }\r\n            return rowIndex + this._getEditRowIndexCorrection(columnName)\r\n        },\r\n        _getEditRowIndexCorrection: function(columnName) {\r\n            var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\r\n            var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\r\n            return isColumnHidden ? 1 : 0\r\n        },\r\n        _resetEditRowKey: function() {\r\n            this._setEditRowKey(null, true)\r\n        },\r\n        _resetEditIndices: function() {\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey()\r\n        },\r\n        editRow: function(rowIndex) {\r\n            var _item$oldData;\r\n            var dataController = this._dataController;\r\n            var items = dataController.items();\r\n            var item = items[rowIndex];\r\n            var params = {\r\n                data: item && item.data,\r\n                cancel: false\r\n            };\r\n            var oldRowIndex = this._getVisibleEditRowIndex();\r\n            if (!item) {\r\n                return\r\n            }\r\n            if (rowIndex === oldRowIndex) {\r\n                return true\r\n            }\r\n            if (void 0 === item.key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            if (!item.isNewRow) {\r\n                params.key = item.key\r\n            }\r\n            if (this._isEditingStart(params)) {\r\n                return\r\n            }\r\n            this.resetChanges();\r\n            this.init();\r\n            this._resetEditColumnName();\r\n            this._pageIndex = dataController.pageIndex();\r\n            this._addInternalData({\r\n                key: item.key,\r\n                oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\r\n            });\r\n            this._setEditRowKey(item.key)\r\n        },\r\n        _editRowFromOptionChanged: function(rowIndex, oldRowIndex) {\r\n            var rowIndices = [oldRowIndex, rowIndex];\r\n            this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\r\n            this._editRowFromOptionChangedCore(rowIndices, rowIndex)\r\n        },\r\n        _editRowFromOptionChangedCore: function(rowIndices, rowIndex, preventRendering) {\r\n            this._needFocusEditor = true;\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: rowIndices,\r\n                cancel: preventRendering\r\n            })\r\n        },\r\n        _focusEditorIfNeed: noop,\r\n        _showEditPopup: noop,\r\n        _repaintEditPopup: noop,\r\n        _getEditPopupHiddenHandler: function() {\r\n            return e => {\r\n                if (this.isEditing()) {\r\n                    this.cancelEditData()\r\n                }\r\n            }\r\n        },\r\n        _getPopupEditFormTemplate: noop,\r\n        _getSaveButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.saveRowChanges\"),\r\n                onClick: this.saveEditData.bind(this)\r\n            }\r\n        },\r\n        _getCancelButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.cancelRowChanges\"),\r\n                onClick: this.cancelEditData.bind(this)\r\n            }\r\n        },\r\n        _removeInternalData: function(key) {\r\n            var internalData = this._getInternalData(key);\r\n            var index = this._internalState.indexOf(internalData);\r\n            if (index > -1) {\r\n                this._internalState.splice(index, 1)\r\n            }\r\n        },\r\n        _updateInsertAfterOrBeforeKeys: function(changes, index) {\r\n            var removeChange = changes[index];\r\n            changes.forEach(change => {\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\r\n                    change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange)\r\n                }\r\n            })\r\n        },\r\n        _removeChange: function(index) {\r\n            if (index >= 0) {\r\n                var changes = [...this.getChanges()];\r\n                var key = changes[index].key;\r\n                this._removeInternalData(key);\r\n                this._updateInsertAfterOrBeforeKeys(changes, index);\r\n                changes.splice(index, 1);\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n                if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\r\n                    this._resetEditIndices()\r\n                }\r\n            }\r\n        },\r\n        executeOperation: function(deferred, func) {\r\n            this._lastOperation && this._lastOperation.reject();\r\n            this._lastOperation = deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (\"rejected\" === deferred.state()) {\r\n                    return\r\n                }\r\n                func();\r\n                this._lastOperation = null\r\n            }).fail(() => {\r\n                deferred.reject();\r\n                this._lastOperation = null\r\n            })\r\n        },\r\n        waitForDeferredOperations: function() {\r\n            return when(...this._deferreds)\r\n        },\r\n        _processCanceledEditingCell: noop,\r\n        _repaintEditCell: function(column, oldColumn, oldEditRowIndex) {\r\n            this._needFocusEditor = true;\r\n            if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\r\n                this._editCellInProgress = true;\r\n                this.getController(\"editorFactory\").loseFocus();\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\r\n                })\r\n            } else if (column !== oldColumn) {\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: []\r\n                })\r\n            }\r\n        },\r\n        _delayedInputFocus: function($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\r\n            var inputFocus = () => {\r\n                if (beforeFocusCallback) {\r\n                    beforeFocusCallback()\r\n                }\r\n                if ($cell) {\r\n                    var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\r\n                    gridCoreUtils.focusAndSelectElement(this, $focusableElement)\r\n                }\r\n                this._beforeFocusCallback = null\r\n            };\r\n            if (devices.real().ios || devices.real().android) {\r\n                inputFocus()\r\n            } else {\r\n                if (this._beforeFocusCallback) {\r\n                    this._beforeFocusCallback()\r\n                }\r\n                clearTimeout(this._inputFocusTimeoutID);\r\n                if (callBeforeFocusCallbackAlways) {\r\n                    this._beforeFocusCallback = beforeFocusCallback\r\n                }\r\n                this._inputFocusTimeoutID = setTimeout(inputFocus)\r\n            }\r\n        },\r\n        _focusEditingCell: function(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var editColumnIndex = this._getVisibleEditColumnIndex();\r\n            $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n            if ($editCell) {\r\n                this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways)\r\n            }\r\n        },\r\n        deleteRow: function(rowIndex) {\r\n            this._checkAndDeleteRow(rowIndex)\r\n        },\r\n        _checkAndDeleteRow: function(rowIndex) {\r\n            var editingOptions = this.option(\"editing\");\r\n            var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\r\n            var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\r\n            var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\r\n            var item = this._dataController.items()[rowIndex];\r\n            var allowDeleting = !this.isEditing() || item.isNewRow;\r\n            if (item && allowDeleting) {\r\n                if (!confirmDelete || !confirmDeleteMessage) {\r\n                    this._deleteRowCore(rowIndex)\r\n                } else {\r\n                    var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\r\n                    var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\r\n                    confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\r\n                        if (confirmResult) {\r\n                            this._deleteRowCore(rowIndex)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _deleteRowCore: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var key = item && item.key;\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            this.refresh();\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (editIndex >= 0) {\r\n                if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                    this._removeChange(editIndex)\r\n                } else {\r\n                    this._addChange({\r\n                        key: key,\r\n                        type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                    })\r\n                }\r\n            } else {\r\n                this._addChange({\r\n                    key: key,\r\n                    oldData: item.data,\r\n                    type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                })\r\n            }\r\n            return this._afterDeleteRow(rowIndex, oldEditRowIndex)\r\n        },\r\n        _afterDeleteRow: function(rowIndex, oldEditRowIndex) {\r\n            return this.saveEditData()\r\n        },\r\n        undeleteRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var key = item && item.key;\r\n            var changes = this.getChanges();\r\n            if (item) {\r\n                var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n                if (editIndex >= 0) {\r\n                    var {\r\n                        data: data\r\n                    } = changes[editIndex];\r\n                    if (isEmptyObject(data)) {\r\n                        this._removeChange(editIndex)\r\n                    } else {\r\n                        this._addChange({\r\n                            key: key,\r\n                            type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                        })\r\n                    }\r\n                    dataController.updateItems({\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldEditRowIndex, rowIndex]\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _fireOnSaving: function() {\r\n            var onSavingParams = {\r\n                cancel: false,\r\n                promise: null,\r\n                changes: [...this.getChanges()]\r\n            };\r\n            this.executeAction(\"onSaving\", onSavingParams);\r\n            var d = new Deferred;\r\n            when(fromPromise(onSavingParams.promise)).done(() => {\r\n                d.resolve(onSavingParams)\r\n            }).fail(arg => {\r\n                createFailureHandler(d);\r\n                this._fireDataErrorOccurred(arg);\r\n                d.resolve({\r\n                    cancel: true\r\n                })\r\n            });\r\n            return d\r\n        },\r\n        _executeEditingAction: function(actionName, params, func) {\r\n            if (this.component._disposed) {\r\n                return null\r\n            }\r\n            var deferred = new Deferred;\r\n            this.executeAction(actionName, params);\r\n            when(fromPromise(params.cancel)).done((function(cancel) {\r\n                if (cancel) {\r\n                    setTimeout((function() {\r\n                        deferred.resolve(\"cancel\")\r\n                    }))\r\n                } else {\r\n                    func(params).done(deferred.resolve).fail(createFailureHandler(deferred))\r\n                }\r\n            })).fail(createFailureHandler(deferred));\r\n            return deferred\r\n        },\r\n        _processChanges: function(deferreds, results, dataChanges, changes) {\r\n            var store = this._dataController.store();\r\n            each(changes, (index, change) => {\r\n                var oldData = this._getOldData(change.key);\r\n                var {\r\n                    data: data,\r\n                    type: type\r\n                } = change;\r\n                var changeCopy = _extends({}, change);\r\n                var deferred;\r\n                var params;\r\n                if (this._beforeSaveEditData(change, index)) {\r\n                    return\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        params = {\r\n                            data: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowRemoving\", params, (function() {\r\n                            return store.remove(change.key).done((function(key) {\r\n                                dataChanges.push({\r\n                                    type: \"remove\",\r\n                                    key: key\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        params = {\r\n                            data: data,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowInserting\", params, (function() {\r\n                            return store.insert(params.data).done((function(data, key) {\r\n                                if (isDefined(key)) {\r\n                                    changeCopy.key = key\r\n                                }\r\n                                if (data && isObject(data) && data !== params.data) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"insert\",\r\n                                    data: data,\r\n                                    index: 0\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        params = {\r\n                            newData: data,\r\n                            oldData: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowUpdating\", params, (function() {\r\n                            return store.update(change.key, params.newData).done((function(data, key) {\r\n                                if (data && isObject(data) && data !== params.newData) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"update\",\r\n                                    key: key,\r\n                                    data: data\r\n                                })\r\n                            }))\r\n                        }))\r\n                }\r\n                changes[index] = changeCopy;\r\n                if (deferred) {\r\n                    var doneDeferred = new Deferred;\r\n                    deferred.always((function(data) {\r\n                        results.push({\r\n                            key: change.key,\r\n                            result: data\r\n                        })\r\n                    })).always(doneDeferred.resolve);\r\n                    deferreds.push(doneDeferred.promise())\r\n                }\r\n            })\r\n        },\r\n        _processRemoveIfError: function(changes, editIndex) {\r\n            var change = changes[editIndex];\r\n            if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                if (editIndex >= 0) {\r\n                    changes.splice(editIndex, 1)\r\n                }\r\n            }\r\n            return true\r\n        },\r\n        _processRemove: function(changes, editIndex, cancel) {\r\n            var change = changes[editIndex];\r\n            if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                return this._processRemoveCore(changes, editIndex, !cancel || !change)\r\n            }\r\n        },\r\n        _processRemoveCore: function(changes, editIndex) {\r\n            if (editIndex >= 0) {\r\n                changes.splice(editIndex, 1)\r\n            }\r\n            return true\r\n        },\r\n        _processSaveEditDataResult: function(results) {\r\n            var hasSavedData = false;\r\n            var changes = [...this.getChanges()];\r\n            var changesLength = changes.length;\r\n            for (var i = 0; i < results.length; i++) {\r\n                var arg = results[i].result;\r\n                var cancel = \"cancel\" === arg;\r\n                var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\r\n                var change = changes[editIndex];\r\n                var isError = arg && arg instanceof Error;\r\n                if (isError) {\r\n                    if (change) {\r\n                        this._addInternalData({\r\n                            key: change.key,\r\n                            error: arg\r\n                        })\r\n                    }\r\n                    this._fireDataErrorOccurred(arg);\r\n                    if (this._processRemoveIfError(changes, editIndex)) {\r\n                        break\r\n                    }\r\n                } else if (this._processRemove(changes, editIndex, cancel)) {\r\n                    hasSavedData = !cancel\r\n                }\r\n            }\r\n            if (changes.length < changesLength) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes)\r\n            }\r\n            return hasSavedData\r\n        },\r\n        _fireSaveEditDataEvents: function(changes) {\r\n            each(changes, (_, _ref) => {\r\n                var {\r\n                    data: data,\r\n                    key: key,\r\n                    type: type\r\n                } = _ref;\r\n                var internalData = this._addInternalData({\r\n                    key: key\r\n                });\r\n                var params = {\r\n                    key: key,\r\n                    data: data\r\n                };\r\n                if (internalData.error) {\r\n                    params.error = internalData.error\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        this.executeAction(\"onRowRemoved\", extend({}, params, {\r\n                            data: internalData.oldData\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        this.executeAction(\"onRowInserted\", params);\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        this.executeAction(\"onRowUpdated\", params)\r\n                }\r\n            });\r\n            this.executeAction(\"onSaved\", {\r\n                changes: changes\r\n            })\r\n        },\r\n        saveEditData: function() {\r\n            var deferred = new Deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (this.isSaving()) {\r\n                    this._resolveAfterSave(deferred);\r\n                    return\r\n                }\r\n                when(this._beforeSaveEditData()).done(cancel => {\r\n                    if (cancel) {\r\n                        this._resolveAfterSave(deferred, {\r\n                            cancel: cancel\r\n                        });\r\n                        return\r\n                    }\r\n                    this._saving = true;\r\n                    this._saveEditDataInner().always(() => {\r\n                        this._saving = false;\r\n                        if (this._refocusEditCell) {\r\n                            this._focusEditingCell()\r\n                        }\r\n                    }).done(deferred.resolve).fail(deferred.reject)\r\n                }).fail(deferred.reject)\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _resolveAfterSave: function(deferred) {\r\n            var {\r\n                cancel: cancel,\r\n                error: error\r\n            } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\r\n            when(this._afterSaveEditData(cancel)).done((function() {\r\n                deferred.resolve(error)\r\n            })).fail(deferred.reject)\r\n        },\r\n        _saveEditDataInner: function() {\r\n            var result = new Deferred;\r\n            var results = [];\r\n            var deferreds = [];\r\n            var dataChanges = [];\r\n            var dataSource = this._dataController.dataSource();\r\n            when(this._fireOnSaving()).done(_ref2 => {\r\n                var {\r\n                    cancel: cancel,\r\n                    changes: changes\r\n                } = _ref2;\r\n                if (cancel) {\r\n                    return result.resolve().promise()\r\n                }\r\n                this._processChanges(deferreds, results, dataChanges, changes);\r\n                if (deferreds.length) {\r\n                    this._refocusEditCell = true;\r\n                    null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\r\n                    when(...deferreds).done(() => {\r\n                        if (this._processSaveEditDataResult(results)) {\r\n                            this._endSaving(dataChanges, changes, result)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                            result.resolve()\r\n                        }\r\n                    }).fail(error => {\r\n                        null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                        result.resolve(error)\r\n                    });\r\n                    return result.always(() => {\r\n                        this._refocusEditCell = true\r\n                    }).promise()\r\n                }\r\n                this._cancelSaving(result)\r\n            }).fail(result.reject);\r\n            return result.promise()\r\n        },\r\n        _beforeEndSaving: function(changes) {\r\n            this._resetEditIndices()\r\n        },\r\n        _endSaving: function(dataChanges, changes, deferred) {\r\n            var dataSource = this._dataController.dataSource();\r\n            this._beforeEndSaving(changes);\r\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n            this._refreshDataAfterSave(dataChanges, changes, deferred)\r\n        },\r\n        _cancelSaving: function(result) {\r\n            this.executeAction(\"onSaved\", {\r\n                changes: []\r\n            });\r\n            this._resolveAfterSave(result)\r\n        },\r\n        _refreshDataAfterSave: function(dataChanges, changes, deferred) {\r\n            var dataController = this._dataController;\r\n            var refreshMode = this.option(\"editing.refreshMode\");\r\n            var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\r\n            if (!isFullRefresh) {\r\n                dataController.push(dataChanges)\r\n            }\r\n            when(dataController.refresh({\r\n                selection: isFullRefresh,\r\n                reload: isFullRefresh,\r\n                load: \"reshape\" === refreshMode,\r\n                changesOnly: this.option(\"repaintChangesOnly\")\r\n            })).always(() => {\r\n                this._fireSaveEditDataEvents(changes)\r\n            }).done(() => {\r\n                this._resolveAfterSave(deferred)\r\n            }).fail(error => {\r\n                this._resolveAfterSave(deferred, {\r\n                    error: error\r\n                })\r\n            })\r\n        },\r\n        isSaving: function() {\r\n            return this._saving\r\n        },\r\n        _updateEditColumn: function() {\r\n            var isEditColumnVisible = this._isEditColumnVisible();\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\r\n            this._columnsController.addCommandColumn({\r\n                type: \"buttons\",\r\n                command: \"edit\",\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass,\r\n                width: \"auto\",\r\n                alignment: \"center\",\r\n                cellTemplate: this._getEditCommandCellTemplate(),\r\n                fixedPosition: \"right\"\r\n            });\r\n            this._columnsController.columnOption(\"command:edit\", {\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass\r\n            })\r\n        },\r\n        _isEditColumnVisible: function() {\r\n            var editingOptions = this.option(\"editing\");\r\n            return editingOptions.allowDeleting\r\n        },\r\n        _isEditButtonDisabled: function() {\r\n            var hasChanges = this.hasChanges();\r\n            var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\r\n            return !(isEditRowDefined || hasChanges)\r\n        },\r\n        _updateEditButtons: function() {\r\n            var headerPanel = this.getView(\"headerPanel\");\r\n            var isButtonDisabled = this._isEditButtonDisabled();\r\n            if (headerPanel) {\r\n                headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\r\n                headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled)\r\n            }\r\n        },\r\n        _applyModified: function($element) {\r\n            $element && $element.addClass(CELL_MODIFIED)\r\n        },\r\n        _beforeCloseEditCellInBatchMode: noop,\r\n        cancelEditData: function() {\r\n            var changes = this.getChanges();\r\n            var params = {\r\n                cancel: false,\r\n                changes: changes\r\n            };\r\n            this.executeAction(\"onEditCanceling\", params);\r\n            if (!params.cancel) {\r\n                this._cancelEditDataCore();\r\n                this.executeAction(\"onEditCanceled\", {\r\n                    changes: changes\r\n                })\r\n            }\r\n        },\r\n        _cancelEditDataCore: function() {\r\n            var rowIndex = this._getVisibleEditRowIndex();\r\n            this._beforeCancelEditData();\r\n            this.init();\r\n            this.resetChanges();\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey();\r\n            this._afterCancelEditData(rowIndex)\r\n        },\r\n        _afterCancelEditData: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            dataController.updateItems({\r\n                repaintChangesOnly: this.option(\"repaintChangesOnly\")\r\n            })\r\n        },\r\n        _hideEditPopup: noop,\r\n        hasEditData: function() {\r\n            return this.hasChanges()\r\n        },\r\n        update: function(changeType) {\r\n            var dataController = this._dataController;\r\n            if (dataController && this._pageIndex !== dataController.pageIndex()) {\r\n                if (\"refresh\" === changeType) {\r\n                    this.refresh({\r\n                        isPageChanged: true\r\n                    })\r\n                }\r\n                this._pageIndex = dataController.pageIndex()\r\n            }\r\n            this._updateEditButtons()\r\n        },\r\n        _getRowIndicesForCascadeUpdating: function(row, skipCurrentRow) {\r\n            return skipCurrentRow ? [] : [row.rowIndex]\r\n        },\r\n        addDeferred: function(deferred) {\r\n            if (this._deferreds.indexOf(deferred) < 0) {\r\n                this._deferreds.push(deferred);\r\n                deferred.always(() => {\r\n                    var index = this._deferreds.indexOf(deferred);\r\n                    if (index >= 0) {\r\n                        this._deferreds.splice(index, 1)\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        _prepareChange: function(options, value, text) {\r\n            var _options$row;\r\n            var newData = {};\r\n            var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 !== rowKey) {\r\n                options.value = value;\r\n                var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\r\n                setCellValueResult.done((function() {\r\n                    deferred.resolve({\r\n                        data: newData,\r\n                        key: rowKey,\r\n                        oldData: oldData,\r\n                        type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                    })\r\n                })).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                if (isDefined(text) && options.column.displayValueMap) {\r\n                    options.column.displayValueMap[value] = text\r\n                }\r\n                this._updateRowValues(options);\r\n                this.addDeferred(deferred)\r\n            }\r\n            return deferred\r\n        },\r\n        _updateRowValues: function(options) {\r\n            if (options.values) {\r\n                var dataController = this._dataController;\r\n                var rowIndex = dataController.getRowIndexByKey(options.key);\r\n                var row = dataController.getVisibleRows()[rowIndex];\r\n                if (row) {\r\n                    options.row.values = row.values;\r\n                    options.values = row.values\r\n                }\r\n                options.values[options.columnIndex] = options.value\r\n            }\r\n        },\r\n        updateFieldValue: function(options, value, text, forceUpdateRow) {\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 === rowKey) {\r\n                this._dataController.fireError(\"E1043\")\r\n            }\r\n            if (options.column.setCellValue) {\r\n                this._prepareChange(options, value, text).done(params => {\r\n                    when(this._applyChange(options, params, forceUpdateRow)).always(() => {\r\n                        deferred.resolve()\r\n                    })\r\n                })\r\n            } else {\r\n                deferred.resolve()\r\n            }\r\n            return deferred.promise()\r\n        },\r\n        _focusPreviousEditingCellIfNeed: function(options) {\r\n            if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\r\n                this._focusEditingCell();\r\n                this._updateEditRow(options.row, true);\r\n                return true\r\n            }\r\n        },\r\n        _needUpdateRow: function(column) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            if (!column) {\r\n                column = this._getEditColumn()\r\n            }\r\n            var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\r\n            var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\r\n            return isCustomSetCellValue || isCustomCalculateCellValue\r\n        },\r\n        _applyChange: function(options, params, forceUpdateRow) {\r\n            var changeOptions = _extends({}, options, {\r\n                forceUpdateRow: forceUpdateRow\r\n            });\r\n            this._addChange(params, changeOptions);\r\n            this._updateEditButtons();\r\n            return this._applyChangeCore(options, changeOptions.forceUpdateRow)\r\n        },\r\n        _applyChangeCore: function(options, forceUpdateRow) {\r\n            var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n            var row = options.row;\r\n            if (row) {\r\n                if (forceUpdateRow || isCustomSetCellValue) {\r\n                    this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)\r\n                } else if (row.update) {\r\n                    row.update()\r\n                }\r\n            }\r\n        },\r\n        _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\r\n            })\r\n        },\r\n        _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            if (forceUpdateRow) {\r\n                this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n            } else {\r\n                this._updateRowWithDelay(row, isCustomSetCellValue)\r\n            }\r\n        },\r\n        _updateRowImmediately: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\r\n            this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n            if (!forceUpdateRow) {\r\n                this._focusEditingCell()\r\n            }\r\n        },\r\n        _updateRowWithDelay: function(row, isCustomSetCellValue) {\r\n            var deferred = new Deferred;\r\n            this.addDeferred(deferred);\r\n            setTimeout(() => {\r\n                var _this$_editForm;\r\n                var elementContainer = (null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.element()) || this.component.$element().get(0);\r\n                var $focusedElement = $(domAdapter.getActiveElement(elementContainer));\r\n                var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\r\n                var focusedElement = $focusedElement.get(0);\r\n                var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\r\n                this._updateEditRowCore(row, false, isCustomSetCellValue);\r\n                this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n                if (columnIndex >= 0) {\r\n                    var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\r\n                    this._delayedInputFocus($focusedItem, () => {\r\n                        setTimeout(() => {\r\n                            var _this$component$$elem;\r\n                            focusedElement = domAdapter.getActiveElement(null === (_this$component$$elem = this.component.$element()) || void 0 === _this$component$$elem ? void 0 : _this$component$$elem.get(0));\r\n                            if (selectionRange.selectionStart >= 0) {\r\n                                gridCoreUtils.setSelectionRange(focusedElement, selectionRange)\r\n                            }\r\n                        })\r\n                    })\r\n                }\r\n                deferred.resolve()\r\n            })\r\n        },\r\n        _validateEditFormAfterUpdate: noop,\r\n        _addChange: function(changeParams, options) {\r\n            var _this$getChanges;\r\n            var row = null === options || void 0 === options ? void 0 : options.row;\r\n            var changes = [...this.getChanges()];\r\n            var index = gridCoreUtils.getIndexByKey(changeParams.key, changes);\r\n            if (index < 0) {\r\n                index = changes.length;\r\n                this._addInternalData({\r\n                    key: changeParams.key,\r\n                    oldData: changeParams.oldData\r\n                });\r\n                delete changeParams.oldData;\r\n                changes.push(changeParams)\r\n            }\r\n            var change = _extends({}, changes[index]);\r\n            if (change) {\r\n                if (changeParams.data) {\r\n                    change.data = createObjectWithChanges(change.data, changeParams.data)\r\n                }\r\n                if ((!change.type || !changeParams.data) && changeParams.type) {\r\n                    change.type = changeParams.type\r\n                }\r\n                if (row) {\r\n                    row.oldData = this._getOldData(row.key);\r\n                    row.data = createObjectWithChanges(row.data, changeParams.data)\r\n                }\r\n            }\r\n            changes[index] = change;\r\n            this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n            if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {\r\n                options.forceUpdateRow = true\r\n            }\r\n            return change\r\n        },\r\n        _getFormEditItemTemplate: function(cellOptions, column) {\r\n            return column.editCellTemplate || this._getDefaultEditorTemplate()\r\n        },\r\n        getColumnTemplate: function(options) {\r\n            var column = options.column;\r\n            var rowIndex = options.row && options.row.rowIndex;\r\n            var template;\r\n            var isRowMode = this.isRowBasedEditMode();\r\n            var isRowEditing = this.isEditRow(rowIndex);\r\n            var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\r\n            var editingStartOptions;\r\n            if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\r\n                var allowUpdating = this.allowUpdating(options);\r\n                if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\r\n                    if (column.showEditorAlways && !isRowMode) {\r\n                        editingStartOptions = {\r\n                            cancel: false,\r\n                            key: options.row.isNewRow ? void 0 : options.row.key,\r\n                            data: options.row.data,\r\n                            column: column\r\n                        };\r\n                        this._isEditingStart(editingStartOptions)\r\n                    }\r\n                    if (!editingStartOptions || !editingStartOptions.cancel) {\r\n                        options.setValue = (value, text) => {\r\n                            this.updateFieldValue(options, value, text)\r\n                        }\r\n                    }\r\n                }\r\n                template = column.editCellTemplate || this._getDefaultEditorTemplate()\r\n            } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\r\n                template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options)\r\n            }\r\n            return template\r\n        },\r\n        _createButton: function($container, button, options, change) {\r\n            var icon = EDIT_ICON_CLASS[button.name];\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\r\n            var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\r\n            if (button.template && useLegacyColumnButtonTemplate) {\r\n                this._rowsView.renderTemplate($container, button.template, options, true)\r\n            } else {\r\n                if (button.template) {\r\n                    $button = $(\"<span>\").addClass(button.cssClass)\r\n                } else if (useIcons && icon || button.icon) {\r\n                    icon = button.icon || icon;\r\n                    var iconType = iconUtils.getImageSourceType(icon);\r\n                    if (\"image\" === iconType || \"svg\" === iconType) {\r\n                        $button = iconUtils.getImageContainer(icon).addClass(button.cssClass)\r\n                    } else {\r\n                        $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text)\r\n                    }\r\n                    $button.addClass(\"dx-link-icon\");\r\n                    $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\r\n                    var localizationName = this.getButtonLocalizationNames()[button.name];\r\n                    localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName))\r\n                } else {\r\n                    $button.text(button.text)\r\n                }\r\n                if (isDefined(button.hint)) {\r\n                    $button.attr(\"title\", button.hint)\r\n                }\r\n                if (this._isButtonDisabled(button, options)) {\r\n                    $button.addClass(\"dx-state-disabled\")\r\n                } else if (!button.template || button.onClick) {\r\n                    eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction((function(e) {\r\n                        var _button$onClick;\r\n                        null === (_button$onClick = button.onClick) || void 0 === _button$onClick ? void 0 : _button$onClick.call(button, extend({}, e, {\r\n                            row: options.row,\r\n                            column: options.column\r\n                        }));\r\n                        e.event.preventDefault();\r\n                        e.event.stopPropagation()\r\n                    })))\r\n                }\r\n                $container.append($button, \"&nbsp;\");\r\n                if (button.template) {\r\n                    this._rowsView.renderTemplate($button, button.template, _extends({}, options, {\r\n                        column: void 0\r\n                    }), true, change)\r\n                }\r\n            }\r\n        },\r\n        getButtonLocalizationNames: () => ({\r\n            edit: \"dxDataGrid-editingEditRow\",\r\n            save: \"dxDataGrid-editingSaveRowChanges\",\r\n            delete: \"dxDataGrid-editingDeleteRow\",\r\n            undelete: \"dxDataGrid-editingUndeleteRow\",\r\n            cancel: \"dxDataGrid-editingCancelRowChanges\"\r\n        }),\r\n        prepareButtonItem: function(headerPanel, name, methodName, sortIndex) {\r\n            var editingTexts = this.option(\"editing.texts\") || {};\r\n            var titleButtonTextByClassNames = {\r\n                revert: editingTexts.cancelAllChanges,\r\n                save: editingTexts.saveAllChanges,\r\n                addRow: editingTexts.addRow\r\n            };\r\n            var className = {\r\n                revert: \"cancel\",\r\n                save: \"save\",\r\n                addRow: \"addrow\"\r\n            } [name];\r\n            var hintText = titleButtonTextByClassNames[name];\r\n            var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\r\n            return {\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    onInitialized: e => {\r\n                        $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + this.addWidgetPrefix(className) + \"-button\"))\r\n                    },\r\n                    icon: \"edit-button-\" + className,\r\n                    disabled: isButtonDisabled,\r\n                    onClick: () => {\r\n                        setTimeout(() => {\r\n                            this[methodName]()\r\n                        })\r\n                    },\r\n                    text: hintText,\r\n                    hint: hintText\r\n                },\r\n                showText: \"inMenu\",\r\n                name: name + \"Button\",\r\n                location: \"after\",\r\n                locateInMenu: \"auto\",\r\n                sortIndex: sortIndex\r\n            }\r\n        },\r\n        prepareEditButtons: function(headerPanel) {\r\n            var editingOptions = this.option(\"editing\") || {};\r\n            var buttonItems = [];\r\n            if (editingOptions.allowAdding) {\r\n                buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20))\r\n            }\r\n            return buttonItems\r\n        },\r\n        highlightDataCell: function($cell, params) {\r\n            this.shouldHighlightCell(params) && $cell.addClass(CELL_MODIFIED)\r\n        },\r\n        _afterInsertRow: noop,\r\n        _beforeSaveEditData: function(change) {\r\n            if (change && !isDefined(change.key) && isDefined(change.type)) {\r\n                return true\r\n            }\r\n        },\r\n        _afterSaveEditData: noop,\r\n        _beforeCancelEditData: noop,\r\n        _allowEditAction: function(actionName, options) {\r\n            var allowEditAction = this.option(\"editing.\" + actionName);\r\n            if (isFunction(allowEditAction)) {\r\n                allowEditAction = allowEditAction({\r\n                    component: this.component,\r\n                    row: options.row\r\n                })\r\n            }\r\n            return allowEditAction\r\n        },\r\n        allowUpdating: function(options, eventName) {\r\n            var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\r\n            var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\r\n            return needCallback && this._allowEditAction(\"allowUpdating\", options)\r\n        },\r\n        allowDeleting: function(options) {\r\n            return this._allowEditAction(\"allowDeleting\", options)\r\n        },\r\n        isCellModified: function(parameters) {\r\n            var columnIndex = parameters.columnIndex;\r\n            var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\r\n            return !!modifiedValues && void 0 !== modifiedValues[columnIndex]\r\n        },\r\n        isNewRowInEditMode: function() {\r\n            var visibleEditRowIndex = this._getVisibleEditRowIndex();\r\n            var rows = this._dataController.items();\r\n            return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false\r\n        },\r\n        shouldHighlightCell: function(parameters) {\r\n            var cellModified = this.isCellModified(parameters);\r\n            return cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing)\r\n        }\r\n    };\r\n    return members\r\n}());\r\nexport var editingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                mode: \"row\",\r\n                refreshMode: \"full\",\r\n                newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\r\n                allowAdding: false,\r\n                allowUpdating: false,\r\n                allowDeleting: false,\r\n                useIcons: false,\r\n                selectTextOnEditStart: false,\r\n                confirmDelete: true,\r\n                texts: {\r\n                    editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\r\n                    saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\r\n                    saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\r\n                    cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\r\n                    cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\r\n                    addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\r\n                    deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\r\n                    undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\r\n                    confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\r\n                    confirmDeleteTitle: \"\"\r\n                },\r\n                form: {\r\n                    colCount: 2\r\n                },\r\n                popup: {},\r\n                startEditAction: \"click\",\r\n                editRowKey: null,\r\n                editColumnName: null,\r\n                changes: []\r\n            },\r\n            useLegacyColumnButtonTemplate: false\r\n        }\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this.callBase()\r\n                },\r\n                reload: function(full, repaintChangesOnly) {\r\n                    !repaintChangesOnly && this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function() {\r\n                    if (this.getController(\"editing\").isSaving()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(items) {\r\n                    var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n                    var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\r\n                    var editItem = items[editRowIndex];\r\n                    if (editItem) {\r\n                        var _this$_updateEditItem;\r\n                        editItem.isEditing = true;\r\n                        null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem)\r\n                    }\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateEditRow(this.items(true))\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _processItems: function(items, change) {\r\n                    items = this._editingController.processItems(items, change);\r\n                    return this.callBase(items, change)\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    this._editingController.processDataItem(dataItem, options, this.generateDataValues);\r\n                    return this.callBase(dataItem, options)\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this.callBase(item, options);\r\n                    if (item.isNewRow) {\r\n                        options.dataIndex--;\r\n                        delete item.dataIndex\r\n                    }\r\n                    return item\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n                    if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var cell = oldRow.cells && oldRow.cells[columnIndex];\r\n                    var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\r\n                    if (isLiveUpdate && isEditing) {\r\n                        return false\r\n                    }\r\n                    if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                needToRefreshOnDataSourceChange: function(args) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var isParasiteChange = Array.isArray(args.value) && args.value === args.previousValue && editingController.isSaving();\r\n                    return !isParasiteChange\r\n                },\r\n                _handleDataSourceChange(args) {\r\n                    var result = this.callBase(args);\r\n                    var changes = this.option(\"editing.changes\");\r\n                    var dataSource = args.value;\r\n                    if (Array.isArray(dataSource) && changes.length) {\r\n                        var dataSourceKeys = dataSource.map(item => this.keyOf(item));\r\n                        var newChanges = changes.filter(change => \"insert\" === change.type || dataSourceKeys.some(key => equalByValue(change.key, key)));\r\n                        if (newChanges.length !== changes.length) {\r\n                            this.option(\"editing.changes\", newChanges)\r\n                        }\r\n                        var editRowKey = this.option(\"editing.editRowKey\");\r\n                        var isEditNewItem = newChanges.some(change => \"insert\" === change.type && equalByValue(editRowKey, change.key));\r\n                        if (!isEditNewItem && dataSourceKeys.every(key => !equalByValue(editRowKey, key))) {\r\n                            this.option(\"editing.editRowKey\", null)\r\n                        }\r\n                    }\r\n                    return result\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._editingController = this.getController(\"editing\")\r\n                },\r\n                getCellIndex: function($cell, rowIndex) {\r\n                    if (!$cell.is(\"td\") && rowIndex >= 0) {\r\n                        var $cellElements = this.getCellElements(rowIndex);\r\n                        var cellIndex = -1;\r\n                        each($cellElements, (function(index, cellElement) {\r\n                            if ($(cellElement).find($cell).length) {\r\n                                cellIndex = index\r\n                            }\r\n                        }));\r\n                        return cellIndex\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                publicMethods: function() {\r\n                    return this.callBase().concat([\"cellValue\"])\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    var template = this._editingController.getColumnTemplate(options);\r\n                    return template || this.callBase(options)\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var isRowRemoved = !!row.removed;\r\n                        var isRowInserted = !!row.isNewRow;\r\n                        var isRowModified = !!row.modified;\r\n                        isRowInserted && $row.addClass(ROW_INSERTED);\r\n                        isRowModified && $row.addClass(ROW_MODIFIED);\r\n                        if (isRowInserted || isRowRemoved) {\r\n                            $row.removeClass(ROW_SELECTED)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _getColumnIndexByElement: function($element) {\r\n                    var $tableElement = $element.closest(\"table\");\r\n                    var $tableElements = this.getTableElements();\r\n                    while ($tableElement.length && !$tableElements.filter($tableElement).length) {\r\n                        $element = $tableElement.closest(\"td\");\r\n                        $tableElement = $element.closest(\"table\")\r\n                    }\r\n                    return this._getColumnIndexByElementCore($element)\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\r\n                    return this.getCellIndex($targetElement)\r\n                },\r\n                _editCellByClick: function(e, eventName) {\r\n                    var editingController = this._editingController;\r\n                    var $targetElement = $(e.event.target);\r\n                    var columnIndex = this._getColumnIndexByElement($targetElement);\r\n                    var row = this._dataController.items()[e.rowIndex];\r\n                    var allowUpdating = editingController.allowUpdating({\r\n                        row: row\r\n                    }, eventName) || row && row.isNewRow;\r\n                    var column = this._columnsController.getVisibleColumns()[columnIndex];\r\n                    var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\r\n                    var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\r\n                    var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\r\n                    var isShowEditorAlways = column && column.showEditorAlways;\r\n                    if (isEditedCell) {\r\n                        return true\r\n                    }\r\n                    if (\"down\" === eventName) {\r\n                        if (devices.real().ios || devices.real().android) {\r\n                            resetActiveElement()\r\n                        }\r\n                        return isShowEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex)\r\n                    }\r\n                    if (\"click\" === eventName && \"dblClick\" === startEditAction) {\r\n                        var withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;\r\n                        editingController.closeEditCell(false, withoutSaveEditData)\r\n                    }\r\n                    if (allowEditing && eventName === startEditAction) {\r\n                        return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex)\r\n                    }\r\n                },\r\n                _rowPointerDown: function(e) {\r\n                    this._pointerDownTimeout = setTimeout(() => {\r\n                        this._editCellByClick(e, \"down\")\r\n                    })\r\n                },\r\n                _rowClick: function(e) {\r\n                    var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\r\n                    e.event[TARGET_COMPONENT_NAME] = this.component;\r\n                    if (!this._editCellByClick(e, \"click\") && !isEditForm) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    if (!this._editCellByClick(e, \"dblClick\")) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    var _parameters$column;\r\n                    var editingController = this._editingController;\r\n                    var isCommandCell = !!parameters.column.command;\r\n                    var isEditableCell = parameters.setValue;\r\n                    var isEditRow = editingController.isEditRow(parameters.rowIndex);\r\n                    var isEditing = isEditingCell(isEditRow, parameters);\r\n                    if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\r\n                        var alignment = parameters.column.alignment;\r\n                        $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\r\n                        if (alignment) {\r\n                            $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment)\r\n                        }\r\n                    }\r\n                    if (isEditing) {\r\n                        this._editCellPrepared($cell)\r\n                    }\r\n                    var hasTemplate = !!(null !== (_parameters$column = parameters.column) && void 0 !== _parameters$column && _parameters$column.cellTemplate);\r\n                    if (parameters.column && !isCommandCell && (!hasTemplate || editingController.shouldHighlightCell(parameters))) {\r\n                        editingController.highlightDataCell($cell, parameters)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _editCellPrepared: noop,\r\n                _formItemPrepared: noop,\r\n                _getCellOptions: function(options) {\r\n                    var cellOptions = this.callBase(options);\r\n                    cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\r\n                    return cellOptions\r\n                },\r\n                _createCell: function(options) {\r\n                    var $cell = this.callBase(options);\r\n                    var isEditRow = this._editingController.isEditRow(options.rowIndex);\r\n                    isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\r\n                    return $cell\r\n                },\r\n                cellValue: function(rowIndex, columnIdentifier, value, text) {\r\n                    var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\r\n                    if (cellOptions) {\r\n                        if (void 0 === value) {\r\n                            return cellOptions.value\r\n                        } else {\r\n                            this._editingController.updateFieldValue(cellOptions, value, text, true)\r\n                        }\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._pointerDownTimeout)\r\n                },\r\n                _renderCore: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    return this.waitAsyncTemplates(true).done(() => {\r\n                        this._editingController._focusEditorIfNeed()\r\n                    })\r\n                }\r\n            },\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\r\n                    return editButtonItems.concat(items)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    switch (args.name) {\r\n                        case \"editing\":\r\n                            var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\r\n                            var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\r\n                            shouldInvalidate && this._invalidate();\r\n                            this.callBase(args);\r\n                            break;\r\n                        case \"useLegacyColumnButtonTemplate\":\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var editingOptions = this.getController(\"editing\").option(\"editing\");\r\n                    return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,CAAC,MAAM,qBAAqB;AACnC,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,YAAY,MAAM,iCAAiC;AAC1D,OAAOC,IAAI,MAAM,iBAAiB;AAClC,SACIC,kBAAkB,QACf,sBAAsB;AAC7B,SACIC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,aAAa,QACV,uBAAuB;AAC9B,SACIC,IAAI,QACD,2BAA2B;AAClC,SACIC,MAAM,QACH,yBAAyB;AAChC,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,SACIC,IAAI,IAAIC,cAAc,QACnB,oBAAoB;AAC3B,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,aAAa,MAAM,sBAAsB;AAChD,SACIC,uBAAuB,QACpB,wBAAwB;AAC/B,SACIC,YAAY,QACT,0BAA0B;AACjC,SACIC,OAAO,QACJ,WAAW;AAClB,OAAOC,mBAAmB,MAAM,4BAA4B;AAC5D,OAAOC,OAAO,MAAM,oBAAoB;AACxC,SACIC,IAAI,EACJC,QAAQ,EACRC,WAAW,QACR,2BAA2B;AAClC,SACIC,YAAY,EACZC,IAAI,QACD,yBAAyB;AAChC,OAAO,KAAKC,SAAS,MAAM,uBAAuB;AAClD,SACIC,iBAAiB,EACjBC,SAAS,EACTC,eAAe,EACfC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,yBAAyB,EACzBC,8BAA8B,EAC9BC,kCAAkC,EAClCC,qBAAqB,EACrBC,sBAAsB,EACtBC,0BAA0B,EAC1BC,aAAa,EACbC,UAAU,EACVC,eAAe,EACfC,sBAAsB,EACtBC,qBAAqB,EACrBC,4BAA4B,EAC5BC,yBAAyB,EACzBC,gCAAgC,EAChCC,6BAA6B,QAC1B,kCAAkC;AACzC,SACIC,mBAAmB,QAChB,yBAAyB;AAChC,IAAIC,cAAc,GAAG,UAAU;AAC/B,IAAIC,UAAU,GAAG,SAAS;AAC1B,IAAIC,YAAY,GAAG,cAAc;AACjC,IAAIC,iBAAiB,GAAG,gBAAgB;AACxC,IAAIC,kBAAkB,GAAG,iBAAiB;AAC1C,IAAIC,6BAA6B,GAAGD,kBAAkB,GAAG,aAAa;AACtE,IAAIE,YAAY,GAAG,qBAAqB;AACxC,IAAIC,YAAY,GAAG,iBAAiB;AACpC,IAAIC,YAAY,GAAG,iBAAiB;AACpC,IAAIC,aAAa,GAAG,kBAAkB;AACtC,IAAIC,iBAAiB,GAAG,mBAAmB;AAC3C,IAAIC,yBAAyB,GAAG,wBAAwB;AACxD,IAAIC,0BAA0B,GAAG,QAAQ;AACzC,IAAIC,yBAAyB,GAAG,OAAO;AACvC,IAAIC,eAAe,GAAG;EAClBC,IAAI,EAAE,cAAc;EACpBC,MAAM,EAAE,gBAAgB;EACxBC,IAAI,EAAE,cAAc;EACpBC,QAAQ,EAAE,kBAAkB;EAC5BC,MAAM,EAAE,gBAAgB;EACxBC,GAAG,EAAE;AACT,CAAC;AACD,IAAIC,eAAe,GAAG;EAClBN,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,QAAQ;EAClBC,MAAM,EAAE,OAAO;EACfC,GAAG,EAAE;AACT,CAAC;AACD,IAAIE,YAAY,GAAG;EACfL,IAAI,EAAE,SAAS;EACfE,MAAM,EAAE,WAAW;EACnBD,QAAQ,EAAE,aAAa;EACvBH,IAAI,EAAE,cAAc;EACpBC,MAAM,EAAE,gBAAgB;EACxBI,GAAG,EAAE;AACT,CAAC;AACD,IAAIG,mBAAmB,GAAG;EACtBH,GAAG,EAAE,aAAa;EAClBH,IAAI,EAAE,eAAe;EACrBE,MAAM,EAAE;AACZ,CAAC;AACD,IAAIK,YAAY,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC;AACnE,IAAIC,2BAA2B,GAAG,iBAAiB;AACnD,IAAIC,oBAAoB,GAAG,SAAAA,CAASC,QAAQ,EAAE;EAC1C,OAAO,UAASC,GAAG,EAAE;IACjB,IAAIC,KAAK,GAAGD,GAAG,YAAYE,KAAK,GAAGF,GAAG,GAAG,IAAIE,KAAK,CAACF,GAAG,IAAIG,MAAM,CAACH,GAAG,CAAC,IAAI,eAAe,CAAC;IACzFD,QAAQ,CAACK,MAAM,CAACH,KAAK,CAAC;EAC1B,CAAC;AACL,CAAC;AACD,IAAII,aAAa,GAAG,SAAAA,CAASC,SAAS,EAAEC,WAAW,EAAE;EACjD,OAAOA,WAAW,CAACC,SAAS,IAAIF,SAAS,IAAIC,WAAW,CAACE,MAAM,CAACC,YAAY;AAChF,CAAC;AACD,IAAIC,mCAAmC,GAAG,SAAAA,CAASL,SAAS,EAAEC,WAAW,EAAE;EACvE,IAAIK,aAAa,GAAG,CAAC,CAACL,WAAW,CAACE,MAAM,CAACI,OAAO;EAChD,IAAIL,SAAS,GAAGH,aAAa,CAACC,SAAS,EAAEC,WAAW,CAAC;EACrD,IAAIO,YAAY,GAAG,CAACF,aAAa,KAAKJ,SAAS,IAAID,WAAW,CAACE,MAAM,CAACM,gBAAgB,CAAC;EACvF,OAAO,MAAM,KAAKR,WAAW,CAACS,OAAO,IAAIF,YAAY;AACzD,CAAC;AACD,IAAIG,iBAAiB,GAAGlF,OAAO,CAACmF,cAAc,CAACC,OAAO,CAAC,YAAW;EAC9D,IAAIC,cAAc,GAAGA,CAACC,OAAO,EAAErF,IAAI,KAAK;IACpC,IAAIsF,MAAM,GAAG,CAAC,CAAC;IACfD,OAAO,CAACE,IAAI,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MAC5B,IAAIC,aAAa,CAACF,MAAM,CAAC,KAAKxF,IAAI,EAAE;QAChCsF,MAAM,GAAGG,KAAK;QACd,OAAO,IAAI;MACf;IACJ,CAAC,CAAC;IACF,OAAOH,MAAM;EACjB,CAAC;EAED,SAASI,aAAaA,CAACF,MAAM,EAAE;IAC3B,OAAO9F,QAAQ,CAAC8F,MAAM,CAAC,GAAGA,MAAM,CAACxF,IAAI,GAAGwF,MAAM;EAClD;EACA,IAAIG,OAAO,GAAG;IACVC,IAAI,EAAE,SAAAA,CAAA,EAAW;MACb,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,SAAS,CAAC;MACvD,IAAI,CAACC,eAAe,GAAG,IAAI,CAACD,aAAa,CAAC,MAAM,CAAC;MACjD,IAAI,CAACE,SAAS,GAAG,IAAI,CAACC,OAAO,CAAC,UAAU,CAAC;MACzC,IAAI,CAACC,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACC,QAAQ,GAAG,EAAE;MAClB,IAAI,IAAI,CAACC,UAAU,EAAE;QACjB,IAAI,CAACA,UAAU,CAACC,OAAO,CAACC,CAAC,IAAIA,CAAC,CAAClC,MAAM,CAAC,QAAQ,CAAC,CAAC;MACpD;MACA,IAAI,CAACgC,UAAU,GAAG,EAAE;MACpB,IAAI,CAAC,IAAI,CAACG,mBAAmB,EAAE;QAC3B,IAAI,CAACA,mBAAmB,GAAG,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAAC;QAC7D,IAAI,CAACV,eAAe,CAACW,OAAO,CAAClD,GAAG,CAAC,IAAI,CAAC+C,mBAAmB,CAAC;MAC9D;MACA,IAAI,CAAC,IAAI,CAACI,kBAAkB,EAAE;QAC1B,IAAI,CAACC,YAAY,CAAC,cAAc,EAAE;UAC9BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,gBAAgB,EAAE;UAChCC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,eAAe,EAAE;UAC/BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,gBAAgB,EAAE;UAChCC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,eAAe,EAAE;UAC/BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,cAAc,EAAE;UAC9BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,eAAe,EAAE;UAC/BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,cAAc,EAAE;UAC9BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,SAAS,EAAE;UACzBC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,UAAU,EAAE;UAC1BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,iBAAiB,EAAE;UACjCC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;QACF,IAAI,CAACD,YAAY,CAAC,gBAAgB,EAAE;UAChCC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;QAC9C,CAAC,CAAC;MACN;MACA,IAAI,CAACC,iBAAiB,CAAC,CAAC;MACxB,IAAI,CAACC,kBAAkB,CAAC,CAAC;MACzB,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE;QACtB,IAAI,CAACA,cAAc,GAAG,EAAE;MAC5B;MACA,IAAI,CAACC,SAAS,CAACC,mBAAmB,CAAC7F,8BAA8B,CAAC,GAAG,IAAI;MACzE,IAAI,CAAC4F,SAAS,CAACC,mBAAmB,CAACrD,2BAA2B,CAAC,GAAG,IAAI;IAC1E,CAAC;IACDsD,WAAW,EAAE,SAAAA,CAAA,EAAW;MACpB,IAAIC,QAAQ,GAAG,IAAI,CAACC,MAAM,CAAC,cAAc,CAAC;MAC1C,IAAI,CAAC,CAAC,KAAK1F,UAAU,CAAC2F,OAAO,CAACF,QAAQ,CAAC,EAAE;QACrC,OAAOA,QAAQ;MACnB;MACA,OAAO1F,aAAa;IACxB,CAAC;IACD6F,yBAAyB,EAAE,SAAAA,CAAA,EAAW;MAClC,OAAO,CAACC,SAAS,EAAEC,OAAO,KAAK;QAC3B,IAAIC,OAAO,GAAGtI,CAAC,CAAC,OAAO,CAAC,CAACuI,QAAQ,CAACH,SAAS,CAAC;QAC5C,IAAI,CAAC1B,aAAa,CAAC,eAAe,CAAC,CAAC8B,YAAY,CAACF,OAAO,EAAE5H,MAAM,CAAC,CAAC,CAAC,EAAE2H,OAAO,CAAChD,MAAM,EAAE;UACjFoD,KAAK,EAAEJ,OAAO,CAACI,KAAK;UACpBC,QAAQ,EAAEL,OAAO,CAACK,QAAQ;UAC1BC,GAAG,EAAEN,OAAO,CAACM,GAAG;UAChBC,UAAU,EAAE,SAAS;UACrBC,KAAK,EAAE,IAAI;UACXC,QAAQ,EAAE,CAACT,OAAO,CAACK,QAAQ;UAC3BK,QAAQ,EAAEV,OAAO,CAACU,QAAQ;UAC1BC,EAAE,EAAEX,OAAO,CAACW;QAChB,CAAC,CAAC,CAAC;MACP,CAAC;IACL,CAAC;IACDC,kBAAkB,EAAE,SAAAA,CAAA,EAAW;MAC3B,IAAIC,cAAc,GAAG,IAAI,CAACjB,MAAM,CAAC,wBAAwB,CAAC;MAC1D,IAAIkB,aAAa,GAAG,IAAI,CAAClB,MAAM,CAAC,gBAAgB,CAAC;MACjD,IAAI,SAAS,KAAKkB,aAAa,EAAE;QAC7B,QAAQD,cAAc;UAClB,KAAKtG,yBAAyB;YAC1B,OAAOE,6BAA6B;UACxC,KAAKH,4BAA4B;YAC7B,OAAOE,gCAAgC;UAC3C;YACI,OAAOqG,cAAc;QAC7B;MACJ;MACA,OAAOA,cAAc;IACzB,CAAC;IACDE,UAAU,EAAE,SAAAA,CAAA,EAAW;MACnB,OAAO,IAAI,CAACnB,MAAM,CAACxD,2BAA2B,CAAC;IACnD,CAAC;IACD4E,iBAAiB,EAAE,SAAAA,CAAA,EAAW;MAC1B,IAAIC,OAAO,GAAG,IAAI,CAACrB,MAAM,CAACxD,2BAA2B,CAAC;MACtD,OAAO6E,OAAO,CAACC,MAAM,CAACC,MAAM,IAAI,QAAQ,KAAKA,MAAM,CAACC,IAAI,CAAC,CAACC,MAAM;IACpE,CAAC;IACDC,YAAY,EAAE,SAAAA,CAAA,EAAW;MACrB,IAAIL,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;MAC/B,IAAIQ,SAAS,GAAG,IAAI,KAAKN,OAAO,IAAI,KAAK,CAAC,KAAKA,OAAO,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACI,MAAM;MAChF,IAAIE,SAAS,EAAE;QACX,IAAI,CAACC,aAAa,CAACpF,2BAA2B,EAAE,EAAE,CAAC;MACvD;IACJ,CAAC;IACDqF,gBAAgB,EAAE,SAAAA,CAASC,GAAG,EAAE;MAC5B,OAAO,IAAI,CAACnC,cAAc,CAAC2B,MAAM,CAACS,IAAI,IAAIxI,YAAY,CAACwI,IAAI,CAACD,GAAG,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;IACDE,gBAAgB,EAAE,SAAAA,CAASC,MAAM,EAAE;MAC/B,IAAIC,YAAY,GAAG,IAAI,CAACL,gBAAgB,CAACI,MAAM,CAACH,GAAG,CAAC;MACpD,IAAII,YAAY,EAAE;QACd,OAAOzJ,MAAM,CAACyJ,YAAY,EAAED,MAAM,CAAC;MACvC;MACA,IAAI,CAACtC,cAAc,CAACwC,IAAI,CAACF,MAAM,CAAC;MAChC,OAAOA,MAAM;IACjB,CAAC;IACDG,WAAW,EAAE,SAAAA,CAASN,GAAG,EAAE;MACvB,IAAIO,qBAAqB;MACzB,OAAO,IAAI,MAAMA,qBAAqB,GAAG,IAAI,CAACR,gBAAgB,CAACC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKO,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACC,OAAO;IACrJ,CAAC;IACDC,cAAc,EAAE,SAAAA,CAASC,IAAI,EAAE;MAC3B,IAAIV,GAAG,GAAG,IAAI,CAACpD,eAAe,CAAC+D,KAAK,CAACD,IAAI,CAAC;MAC1C,IAAInB,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;MAC/B,IAAIuB,SAAS,GAAG5J,aAAa,CAAC6J,aAAa,CAACb,GAAG,EAAET,OAAO,CAAC;MACzD,IAAIA,OAAO,CAACqB,SAAS,CAAC,EAAE;QACpB,OAAO3J,uBAAuB,CAACyJ,IAAI,EAAEnB,OAAO,CAACqB,SAAS,CAAC,CAACF,IAAI,CAAC;MACjE;MACA,OAAOA,IAAI;IACf,CAAC;IACDI,eAAe,EAAE,SAAAA,CAAA,EAAW;MACxB,OAAO,IAAI,CAACzB,UAAU,CAAC,CAAC,CAACG,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACiB,IAAI,IAAIjB,MAAM,CAACC,IAAI,KAAK3H,0BAA0B,CAAC,CAACgJ,GAAG,CAACtB,MAAM,IAAIA,MAAM,CAACiB,IAAI,CAAC;IACnI,CAAC;IACDM,cAAc,EAAE,SAAAA,CAAA,EAAW;MACvB,OAAO,IAAI,CAAC3B,UAAU,CAAC,CAAC,CAACG,MAAM,CAACC,MAAM,IAAI,IAAI,CAACa,WAAW,CAACb,MAAM,CAACO,GAAG,CAAC,IAAIP,MAAM,CAACC,IAAI,KAAK1H,0BAA0B,CAAC,CAAC+I,GAAG,CAACtB,MAAM,IAAI,IAAI,CAACa,WAAW,CAACb,MAAM,CAACO,GAAG,CAAC,CAAC;IACrK,CAAC;IACDiB,sBAAsB,EAAE,SAAAA,CAASpG,GAAG,EAAE;MAClC,IAAI,QAAQ,KAAKA,GAAG,EAAE;QAClB;MACJ;MACA,IAAIqG,aAAa,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;MAC1C,IAAI,CAACvE,eAAe,CAACwE,iBAAiB,CAACC,IAAI,CAACxG,GAAG,EAAEqG,aAAa,CAAC;IACnE,CAAC;IACDI,wBAAwB,EAAE5J,IAAI;IAC9B6J,cAAc,EAAE7J,IAAI;IACpB2F,kBAAkB,EAAE3F,IAAI;IACxB8J,uBAAuB,EAAE,SAAAA,CAASnF,MAAM,EAAEiC,OAAO,EAAE;MAC/C,IAAInC,MAAM,GAAG,IAAI;MACjB,QAAQE,MAAM,CAACxF,IAAI;QACf,KAAK,QAAQ;UACTsF,MAAM,GAAG,IAAI,CAACsF,aAAa,CAACnD,OAAO,CAAC;UACpC;QACJ,KAAK,UAAU;UACXnC,MAAM,GAAG,KAAK;MACtB;MACA,OAAOA,MAAM;IACjB,CAAC;IACDuF,gBAAgB,EAAE,SAAAA,CAASrF,MAAM,EAAEiC,OAAO,EAAE;MACxC,IAAIqD,OAAO,GAAGtF,MAAM,CAACsF,OAAO;MAC5B,IAAI,CAACrL,SAAS,CAACqL,OAAO,CAAC,EAAE;QACrB,OAAO,IAAI,CAACH,uBAAuB,CAACnF,MAAM,EAAEiC,OAAO,CAAC;MACxD;MACA,OAAO9H,UAAU,CAACmL,OAAO,CAAC,GAAGA,OAAO,CAACC,IAAI,CAACvF,MAAM,EAAE;QAC9CyB,SAAS,EAAEQ,OAAO,CAACR,SAAS;QAC5Bc,GAAG,EAAEN,OAAO,CAACM,GAAG;QAChBtD,MAAM,EAAEgD,OAAO,CAAChD;MACpB,CAAC,CAAC,GAAGqG,OAAO;IAChB,CAAC;IACDE,iBAAiB,EAAE,SAAAA,CAASxF,MAAM,EAAEiC,OAAO,EAAE;MACzC,IAAIwD,QAAQ,GAAGzF,MAAM,CAACyF,QAAQ;MAC9B,OAAOtL,UAAU,CAACsL,QAAQ,CAAC,GAAGA,QAAQ,CAACF,IAAI,CAACvF,MAAM,EAAE;QAChDyB,SAAS,EAAEQ,OAAO,CAACR,SAAS;QAC5Bc,GAAG,EAAEN,OAAO,CAACM,GAAG;QAChBtD,MAAM,EAAEgD,OAAO,CAAChD;MACpB,CAAC,CAAC,GAAG,CAAC,CAACwG,QAAQ;IACnB,CAAC;IACDC,gBAAgB,EAAE,SAAAA,CAAS1F,MAAM,EAAEiC,OAAO,EAAE;MACxC,IAAI0D,MAAM,GAAGzL,QAAQ,CAAC8F,MAAM,CAAC,GAAGA,MAAM,GAAG,CAAC,CAAC;MAC3C,IAAI4F,UAAU,GAAG1F,aAAa,CAACF,MAAM,CAAC;MACtC,IAAI6F,YAAY,GAAG,CAAC5D,OAAO,IAAI;QAC3B,IAAI4D,YAAY,GAAG5D,OAAO,CAACR,SAAS,CAACI,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAClE,OAAO;UACHlE,IAAI,EAAEkI,YAAY,CAACC,cAAc;UACjClI,MAAM,EAAEiI,YAAY,CAACE,gBAAgB;UACrClI,IAAI,EAAEgI,YAAY,CAACG,OAAO;UAC1BlI,QAAQ,EAAE+H,YAAY,CAACI,WAAW;UAClClI,MAAM,EAAE8H,YAAY,CAACK,SAAS;UAC9BlI,GAAG,EAAE6H,YAAY,CAACM;QACtB,CAAC;MACL,CAAC,EAAElE,OAAO,CAAC;MACX,IAAImE,UAAU,GAAGlI,YAAY,CAAC0H,UAAU,CAAC;MACzC,IAAIS,cAAc,GAAG,IAAI,CAACxE,MAAM,CAAC,SAAS,CAAC;MAC3C,IAAIyE,UAAU,GAAGnI,mBAAmB,CAACyH,UAAU,CAAC;MAChD,IAAIW,WAAW,GAAGD,UAAU,GAAGD,cAAc,CAACC,UAAU,CAAC,GAAG,IAAI;MAChE,OAAOhM,MAAM,CAAC;QACVE,IAAI,EAAEoL,UAAU;QAChBY,IAAI,EAAEX,YAAY,CAACD,UAAU,CAAC;QAC9Ba,QAAQ,EAAE/I,eAAe,CAACkI,UAAU;MACxC,CAAC,EAAE;QACCc,OAAO,EAAEN,UAAU,KAAKO,CAAC,IAAI;UACzB,IAAIC,KAAK,GAAGD,CAAC,CAACC,KAAK;UACnBA,KAAK,CAACC,eAAe,CAAC,CAAC;UACvBD,KAAK,CAACE,cAAc,CAAC,CAAC;UACtBC,UAAU,CAAC,MAAM;YACb9E,OAAO,CAACM,GAAG,IAAIgE,WAAW,IAAI,IAAI,CAACH,UAAU,CAAC,IAAI,IAAI,CAACA,UAAU,CAAC,CAACnE,OAAO,CAACM,GAAG,CAACyE,QAAQ,CAAC;UAC5F,CAAC,CAAC;QACN,CAAC;MACL,CAAC,EAAErB,MAAM,CAAC;IACd,CAAC;IACDsB,kBAAkB,EAAE,SAAAA,CAAShF,OAAO,EAAE;MAClC,IAAIiF,WAAW;MACf,IAAIC,iBAAiB,GAAG,CAAC,CAAClF,OAAO,CAAChD,MAAM,CAACY,OAAO;MAChD,IAAIA,OAAO,GAAG,CAACoC,OAAO,CAAChD,MAAM,CAACY,OAAO,IAAI,EAAE,EAAEuH,KAAK,CAAC,CAAC;MACpD,IAAID,iBAAiB,EAAE;QACnBD,WAAW,GAAGtH,cAAc,CAACC,OAAO,EAAE,MAAM,CAAC;QAC7C,IAAIqH,WAAW,IAAI,CAAC,EAAE;UAClB,IAAItH,cAAc,CAACC,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE;YACrCA,OAAO,CAACwH,MAAM,CAACH,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC;UAC9C;UACA,IAAItH,cAAc,CAACC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE;YACvCA,OAAO,CAACwH,MAAM,CAACzH,cAAc,CAACC,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC;UACpE;QACJ;QACAqH,WAAW,GAAGtH,cAAc,CAACC,OAAO,EAAE,QAAQ,CAAC;QAC/C,IAAIqH,WAAW,IAAI,CAAC,IAAItH,cAAc,CAACC,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE;UAC7DA,OAAO,CAACwH,MAAM,CAACH,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC;QAClD;MACJ,CAAC,MAAM;QACHrH,OAAO,GAAGzB,YAAY,CAACgJ,KAAK,CAAC,CAAC;MAClC;MACA,OAAOvH,OAAO,CAAC6E,GAAG,CAAC1E,MAAM,IAAI,IAAI,CAAC0F,gBAAgB,CAAC1F,MAAM,EAAEiC,OAAO,CAAC,CAAC;IACxE,CAAC;IACDqF,qBAAqB,EAAE,SAAAA,CAASC,UAAU,EAAE1H,OAAO,EAAEoC,OAAO,EAAEmB,MAAM,EAAE;MAClEvD,OAAO,CAACgB,OAAO,CAACb,MAAM,IAAI;QACtB,IAAI,IAAI,CAACqF,gBAAgB,CAACrF,MAAM,EAAEiC,OAAO,CAAC,EAAE;UACxC,IAAI,CAACuF,aAAa,CAACD,UAAU,EAAEvH,MAAM,EAAEiC,OAAO,EAAEmB,MAAM,CAAC;QAC3D;MACJ,CAAC,CAAC;IACN,CAAC;IACDqE,2BAA2B,EAAE,SAAAA,CAAA,EAAW;MACpC,OAAO,CAACzF,SAAS,EAAEC,OAAO,EAAEmB,MAAM,KAAK;QACnC,IAAImE,UAAU,GAAG3N,CAAC,CAACoI,SAAS,CAAC;QAC7B,IAAI,MAAM,KAAKC,OAAO,CAACzC,OAAO,EAAE;UAC5B,IAAIK,OAAO,GAAG,IAAI,CAACoH,kBAAkB,CAAChF,OAAO,CAAC;UAC9C,IAAI,CAACqF,qBAAqB,CAACC,UAAU,EAAE1H,OAAO,EAAEoC,OAAO,EAAEmB,MAAM,CAAC;UAChEnB,OAAO,CAACyF,KAAK,IAAIzF,OAAO,CAACyF,KAAK,CAAC,MAAM7H,OAAO,CAAC6E,GAAG,CAAC1E,MAAM,KAAK;YACxDsF,OAAO,EAAE,IAAI,CAACD,gBAAgB,CAACrF,MAAM,EAAEiC,OAAO,CAAC;YAC/CwD,QAAQ,EAAE,IAAI,CAACD,iBAAiB,CAACxF,MAAM,EAAEiC,OAAO;UACpD,CAAC,CAAC,CAAC,EAAE,MAAM;YACPsF,UAAU,CAACI,KAAK,CAAC,CAAC;YAClB,IAAI,CAACL,qBAAqB,CAACC,UAAU,EAAE1H,OAAO,EAAEoC,OAAO,CAAC;UAC5D,CAAC,CAAC;QACN,CAAC,MAAM;UACHtH,aAAa,CAACiN,YAAY,CAACL,UAAU,CAAC;QAC1C;MACJ,CAAC;IACL,CAAC;IACDM,kBAAkB,EAAE,SAAAA,CAAA,EAAW;MAC3B,IAAIjG,QAAQ,GAAG,IAAI,CAACD,WAAW,CAAC,CAAC;MACjC,OAAO,CAAC,CAAC,KAAKvF,eAAe,CAAC0F,OAAO,CAACF,QAAQ,CAAC;IACnD,CAAC;IACDkG,2BAA2B,EAAE,SAAAA,CAAA,EAAW;MACpC,IAAIC,iBAAiB,GAAG,IAAI,CAACzH,aAAa,CAAC,SAAS,CAAC;MACrD,IAAI0H,WAAW;MACf,IAAIC,cAAc,GAAGF,iBAAiB,CAACG,iBAAiB,CAAC,CAAC;MAC1D7N,IAAI,CAAC4N,cAAc,EAAG,UAAShI,KAAK,EAAEhB,MAAM,EAAE;QAC1C,IAAIA,MAAM,CAACC,YAAY,EAAE;UACrB8I,WAAW,GAAG/H,KAAK;UACnB,OAAO,KAAK;QAChB;MACJ,CAAE,CAAC;MACH,OAAO+H,WAAW;IACtB,CAAC;IACDG,yBAAyB,EAAE,SAAAA,CAASnB,QAAQ,EAAE;MAC1C,IAAIoB,QAAQ,GAAG,IAAI,CAAC3H,OAAO,CAAC,UAAU,CAAC;MACvC,OAAO2H,QAAQ,IAAIA,QAAQ,CAACC,eAAe,CAACrB,QAAQ,GAAGA,QAAQ,GAAG,CAAC,EAAE,IAAI,CAACc,2BAA2B,CAAC,CAAC,CAAC;IAC5G,CAAC;IACDQ,mBAAmB,EAAE,SAAAA,CAAStB,QAAQ,EAAE;MACpC,OAAO,IAAI,CAACmB,yBAAyB,CAACnB,QAAQ,CAAC;IACnD,CAAC;IACDxC,aAAa,EAAE,SAAAA,CAASb,GAAG,EAAE4E,KAAK,EAAE;MAChC,OAAO5N,aAAa,CAAC6J,aAAa,CAACb,GAAG,EAAE4E,KAAK,CAAC;IAClD,CAAC;IACDC,UAAU,EAAE,SAAAA,CAASxB,QAAQ,EAAE;MAC3B,IAAI9D,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;MAC/B,IAAIlD,MAAM,GAAG,KAAK;MAClB,KAAK,IAAI2I,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,KAAKvF,OAAO,IAAI,KAAK,CAAC,KAAKA,OAAO,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACI,MAAM,CAAC,EAAEmF,CAAC,EAAE,EAAE;QACzF,IAAIvF,OAAO,CAACuF,CAAC,CAAC,CAACpF,IAAI,KAAK,CAACpJ,SAAS,CAAC+M,QAAQ,CAAC,IAAI,IAAI,CAACzG,eAAe,CAACmI,gBAAgB,CAACxF,OAAO,CAACuF,CAAC,CAAC,CAAC9E,GAAG,CAAC,KAAKqD,QAAQ,CAAC,EAAE;UACjHlH,MAAM,GAAG,IAAI;UACb;QACJ;MACJ;MACA,OAAOA,MAAM;IACjB,CAAC;IACD6I,OAAO,EAAE,SAAAA,CAAA,EAAW;MAChB,IAAI,CAACC,QAAQ,CAAC,CAAC;MACfC,YAAY,CAAC,IAAI,CAACC,oBAAoB,CAAC;MACvChP,YAAY,CAACiP,GAAG,CAAClP,UAAU,CAACmP,WAAW,CAAC,CAAC,EAAEtO,aAAa,CAACuO,EAAE,EAAE,IAAI,CAACC,uBAAuB,CAAC;MAC1FpP,YAAY,CAACiP,GAAG,CAAClP,UAAU,CAACmP,WAAW,CAAC,CAAC,EAAEtO,aAAa,CAACyO,IAAI,EAAE,IAAI,CAACC,yBAAyB,CAAC;MAC9FtP,YAAY,CAACiP,GAAG,CAAClP,UAAU,CAACmP,WAAW,CAAC,CAAC,EAAEvO,cAAc,EAAE,IAAI,CAAC0G,kBAAkB,CAAC;IACvF,CAAC;IACDsC,aAAa,EAAE,SAAAA,CAASjJ,IAAI,EAAE6H,KAAK,EAAE;MACjC,IAAI,iBAAiB,KAAK7H,IAAI,EAAE;QAC5B,IAAI,CAACmG,QAAQ,GAAGhE,mBAAmB,CAAC,EAAE,EAAE0F,KAAK,CAAC;MAClD;MACA,IAAI,CAACuG,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACxC,CAAC;IACDC,aAAa,EAAE,SAAAA,CAASC,IAAI,EAAE;MAC1B,IAAI,SAAS,KAAKA,IAAI,CAAChP,IAAI,EAAE;QACzB,IAAIiP,QAAQ,GAAGD,IAAI,CAACC,QAAQ;QAC5B,IAAIA,QAAQ,KAAK5N,8BAA8B,EAAE;UAC7C,IAAI,CAAC6N,uBAAuB,CAACF,IAAI,CAAC;QACtC,CAAC,MAAM,IAAIC,QAAQ,KAAKpL,2BAA2B,EAAE;UACjD,IAAIsL,OAAO,GAAGvO,YAAY,CAACoO,IAAI,CAACnH,KAAK,EAAE,IAAI,CAAC1B,QAAQ,EAAE,CAAC,CAAC,CAAC;UACzD,IAAI,CAACgJ,OAAO,EAAE;YACV,IAAI,CAAChJ,QAAQ,GAAGhE,mBAAmB,CAAC,EAAE,EAAE6M,IAAI,CAACnH,KAAK,CAAC;YACnD,IAAI,CAACuH,oBAAoB,CAACJ,IAAI,CAAC;UACnC;QACJ,CAAC,MAAM,IAAI,CAACA,IAAI,CAACK,OAAO,EAAE;UACtB,IAAI,CAACxJ,kBAAkB,CAACyJ,MAAM,CAAC,CAAC;UAChC,IAAI,CAAC1J,IAAI,CAAC,CAAC;UACX,IAAI,CAACmD,YAAY,CAAC,CAAC;UACnB,IAAI,CAACwG,oBAAoB,CAAC,CAAC;UAC3B,IAAI,CAACC,gBAAgB,CAAC,CAAC;QAC3B;QACAR,IAAI,CAACK,OAAO,GAAG,IAAI;MACvB,CAAC,MAAM;QACH,IAAI,CAACjB,QAAQ,CAACY,IAAI,CAAC;MACvB;IACJ,CAAC;IACDE,uBAAuB,EAAE,SAAAA,CAASF,IAAI,EAAE;MACpC,IAAIxC,QAAQ,GAAG,IAAI,CAACzG,eAAe,CAACmI,gBAAgB,CAACc,IAAI,CAACnH,KAAK,CAAC;MAChE,IAAI4H,qBAAqB,GAAG,IAAI,CAACC,0BAA0B,CAAC,CAAC;MAC7D,IAAIC,WAAW,GAAG,IAAI,CAAC5J,eAAe,CAACmI,gBAAgB,CAACc,IAAI,CAACY,aAAa,CAAC,GAAGH,qBAAqB;MACnG,IAAIhQ,SAAS,CAACuP,IAAI,CAACnH,KAAK,CAAC,EAAE;QACvB,IAAImH,IAAI,CAACnH,KAAK,KAAKmH,IAAI,CAACY,aAAa,EAAE;UACnC,IAAI,CAACC,yBAAyB,CAACrD,QAAQ,EAAEmD,WAAW,CAAC;QACzD;MACJ,CAAC,MAAM;QACH,IAAI,CAACG,cAAc,CAAC,CAAC;MACzB;IACJ,CAAC;IACDV,oBAAoB,EAAE,SAAAA,CAASJ,IAAI,EAAE;MACjC,IAAIe,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAI2C,OAAO,GAAGsG,IAAI,CAACnH,KAAK;MACxB,IAAI,CAACmH,IAAI,CAACnH,KAAK,CAACiB,MAAM,IAAI,CAACkG,IAAI,CAACY,aAAa,CAAC9G,MAAM,EAAE;QAClD;MACJ;MACAJ,OAAO,CAACrC,OAAO,CAACuC,MAAM,IAAI;QACtB,IAAI,QAAQ,KAAKA,MAAM,CAACC,IAAI,EAAE;UAC1B,IAAI,CAACmH,cAAc,CAACpH,MAAM,CAAC;QAC/B,CAAC,MAAM;UACH,IAAIqH,eAAe;UACnB,IAAIlC,KAAK,GAAGgC,cAAc,CAAChC,KAAK,CAAC,CAAC;UAClC,IAAIvB,QAAQ,GAAGuD,cAAc,CAAC7B,gBAAgB,CAACtF,MAAM,CAACO,GAAG,CAAC;UAC1D,IAAI,CAACE,gBAAgB,CAAC;YAClBF,GAAG,EAAEP,MAAM,CAACO,GAAG;YACfQ,OAAO,EAAE,IAAI,MAAMsG,eAAe,GAAGlC,KAAK,CAACvB,QAAQ,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKyD,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACpG;UACnH,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;MACFkG,cAAc,CAACG,WAAW,CAAC;QACvBC,kBAAkB,EAAE,IAAI;QACxBC,YAAY,EAAE,KAAK;QACnBC,eAAe,EAAE;MACrB,CAAC,CAAC;IACN,CAAC;IACDC,aAAa,EAAE,SAAAA,CAAA,EAAW;MACtB,OAAO,CAAC,QAAQ,EAAE,WAAW,EAAE,aAAa,EAAE,SAAS,EAAE,cAAc,EAAE,gBAAgB,EAAE,aAAa,CAAC;IAC7G,CAAC;IACDC,OAAO,EAAE,SAAAA,CAAA,EAAW;MAChB,IAAI,CAAC9Q,SAAS,CAAC,IAAI,CAAC+Q,UAAU,CAAC,EAAE;QAC7B;MACJ;MACA,IAAI,CAACC,YAAY,CAAC5B,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAC5C,CAAC;IACD2B,YAAY,EAAE5P,IAAI;IAClB2D,SAAS,EAAE,SAAAA,CAAA,EAAW;MAClB,IAAIkM,mBAAmB,GAAGjR,SAAS,CAAC,IAAI,CAAC4H,MAAM,CAAChG,8BAA8B,CAAC,CAAC;MAChF,OAAOqP,mBAAmB;IAC9B,CAAC;IACDpM,SAAS,EAAE,SAAAA,CAAA,EAAW;MAClB,OAAO,KAAK;IAChB,CAAC;IACDqM,cAAc,EAAE,SAAAA,CAAS9I,KAAK,EAAE+I,MAAM,EAAE;MACpC,IAAIA,MAAM,EAAE;QACR,IAAI,CAAC3H,aAAa,CAAC5H,8BAA8B,EAAEwG,KAAK,CAAC;MAC7D,CAAC,MAAM;QACH,IAAI,CAACR,MAAM,CAAChG,8BAA8B,EAAEwG,KAAK,CAAC;MACtD;MACA,IAAI,IAAI,CAACgJ,gBAAgB,EAAE;QACvB,IAAI,CAACA,gBAAgB,GAAG,KAAK;QAC7B,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAC5B;IACJ,CAAC;IACDC,qBAAqB,EAAE,SAAAA,CAASvE,QAAQ,EAAEoE,MAAM,EAAE;MAC9C,IAAIzH,GAAG,GAAG,IAAI,CAACpD,eAAe,CAACiL,gBAAgB,CAACxE,QAAQ,CAAC;MACzD,IAAI,KAAK,CAAC,KAAKrD,GAAG,EAAE;QAChB,IAAI,CAACpD,eAAe,CAACkL,SAAS,CAAC,OAAO,CAAC;QACvC;MACJ;MACA,IAAI,CAACN,cAAc,CAACxH,GAAG,EAAEyH,MAAM,CAAC;IACpC,CAAC;IACDM,eAAe,EAAE,SAAAA,CAAA,EAAW;MACxB,OAAO,IAAI,CAACC,uBAAuB,CAAC,CAAC;IACzC,CAAC;IACDC,mBAAmB,EAAE,SAAAA,CAAA,EAAW;MAC5B,OAAO,CAAC,CAAC;IACb,CAAC;IACDC,gBAAgBA,CAAC7E,QAAQ,EAAE;MACvB,IAAIrD,GAAG,GAAG,IAAI,CAACpD,eAAe,CAACiL,gBAAgB,CAACxE,QAAQ,CAAC;MACzD,IAAI8E,UAAU,GAAG7R,SAAS,CAAC0J,GAAG,CAAC,IAAIvI,YAAY,CAAC,IAAI,CAACyG,MAAM,CAAChG,8BAA8B,CAAC,EAAE8H,GAAG,CAAC;MACjG,IAAImI,UAAU,EAAE;QACZ,OAAO,IAAI,CAACH,uBAAuB,CAAC,CAAC,KAAK3E,QAAQ;MACtD;MACA,OAAO8E,UAAU;IACrB,CAAC;IACDC,UAAU,EAAE,SAAAA,CAASC,eAAe,EAAEhE,WAAW,EAAE;MAC/C,OAAO,IAAI,CAAC6D,gBAAgB,CAACG,eAAe,CAAC,IAAI,IAAI,CAACC,0BAA0B,CAAC,CAAC,KAAKjE,WAAW;IACtG,CAAC;IACDlD,eAAe,EAAEzJ,IAAI;IACrB6Q,gBAAgB,EAAE,SAAAA,CAAStI,IAAI,EAAE;MAC7B,OAAO,KAAK;IAChB,CAAC;IACDuI,kBAAkB,EAAE,SAAAA,CAAS5D,KAAK,EAAEnF,MAAM,EAAEgJ,gBAAgB,EAAE;MAC1D,IAAItM,MAAM,GAAG,CAAC,CAAC;MACf,IAAIyK,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIoD,GAAG,GAAG,IAAI,CAAC0I,0BAA0B,CAACjJ,MAAM,CAAC;MACjD,IAAI,CAACnJ,SAAS,CAAC0J,GAAG,CAAC,IAAI,CAAC,KAAK4E,KAAK,CAACjF,MAAM,EAAE;QACvCxD,MAAM,GAAG,CAAC;MACd,CAAC,MAAM,IAAI7F,SAAS,CAAC0J,GAAG,CAAC,EAAE;QACvB4E,KAAK,CAACxI,IAAI,CAAC,CAAC6D,IAAI,EAAE3D,KAAK,KAAK;UACxB,IAAIqM,eAAe,GAAGF,gBAAgB,IAAI,IAAI,CAACF,gBAAgB,CAACtI,IAAI,CAAC;UACrE,IAAI1J,QAAQ,CAAC0J,IAAI,CAAC,EAAE;YAChB,IAAI0I,eAAe,IAAIrS,SAAS,CAAC2J,IAAI,CAAC1G,YAAY,CAAC,CAAC,EAAE;cAClD,IAAI9B,YAAY,CAACwI,IAAI,CAACD,GAAG,EAAEA,GAAG,CAAC,EAAE;gBAC7B7D,MAAM,GAAGG,KAAK;cAClB;YACJ,CAAC,MAAM,IAAI7E,YAAY,CAACmP,cAAc,CAACjG,KAAK,CAACV,IAAI,CAAC,EAAED,GAAG,CAAC,EAAE;cACtD7D,MAAM,GAAGG,KAAK;YAClB;UACJ;UACA,IAAIH,MAAM,IAAI,CAAC,EAAE;YACb,IAAIyM,QAAQ,GAAGhE,KAAK,CAACzI,MAAM,GAAG,CAAC,CAAC;YAChC,IAAIyM,QAAQ,KAAK,QAAQ,KAAKA,QAAQ,CAAC/M,OAAO,IAAI,gBAAgB,KAAK+M,QAAQ,CAAC/M,OAAO,CAAC,IAAIvF,SAAS,CAACmJ,MAAM,CAACoJ,cAAc,CAAC,EAAE;cAC1H;YACJ;YACA,IAAIvS,SAAS,CAACmJ,MAAM,CAACoJ,cAAc,CAAC,EAAE;cAClC1M,MAAM,IAAI,CAAC;YACf;YACA,OAAO,IAAI;UACf;QACJ,CAAC,CAAC;MACN;MACA,OAAOA,MAAM;IACjB,CAAC;IACD2M,gBAAgB,EAAE,SAAAA,CAAS9I,GAAG,EAAE;MAC5B,IAAI+I,sBAAsB;MAC1B,IAAI9I,IAAI,GAAG;QACPD,GAAG,EAAEA;MACT,CAAC;MACD,IAAIgJ,UAAU,GAAG,IAAI,MAAMD,sBAAsB,GAAG,IAAI,CAAChJ,gBAAgB,CAACC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK+I,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACC,UAAU;MACjK,IAAI,IAAI,KAAKA,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,IAAIA,UAAU,CAACzP,YAAY,CAAC,EAAE;QAC1E0G,IAAI,CAAC1G,YAAY,CAAC,GAAGyP,UAAU,CAACzP,YAAY,CAAC;MACjD;MACA,OAAO0G,IAAI;IACf,CAAC;IACDgJ,kBAAkB,EAAE,SAAAA,CAASrE,KAAK,EAAEnF,MAAM,EAAEgJ,gBAAgB,EAAE;MAC1D,IAAIS,cAAc,GAAG,IAAI,CAACV,kBAAkB,CAAC5D,KAAK,EAAEnF,MAAM,EAAEgJ,gBAAgB,CAAC;MAC7E,IAAI7B,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIsM,cAAc,GAAG,CAAC,EAAE;QACpB,IAAI/J,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAAC,CAAC;QAC9C,IAAIiK,SAAS,GAAGvC,cAAc,CAACuC,SAAS,CAAC,CAAC;QAC1C,IAAIC,sBAAsB,GAAG,IAAI,CAACV,0BAA0B,CAACjJ,MAAM,CAAC;QACpE,IAAIN,cAAc,KAAKxG,qBAAqB,IAAI,CAAC,KAAKwQ,SAAS,IAAI,CAAC7S,SAAS,CAAC8S,sBAAsB,CAAC,EAAE;UACnGF,cAAc,GAAG,CAAC;QACtB,CAAC,MAAM,IAAI/J,cAAc,KAAKxG,qBAAqB,IAAIiO,cAAc,CAACyC,gBAAgB,CAAC,CAAC,EAAE;UACtFH,cAAc,GAAGtE,KAAK,CAACjF,MAAM;QACjC;MACJ;MACA,OAAOuJ,cAAc;IACzB,CAAC;IACDI,YAAY,EAAE,SAAAA,CAAS1E,KAAK,EAAE5B,CAAC,EAAE;MAC7B,IAAIuG,UAAU,GAAGvG,CAAC,CAACuG,UAAU;MAC7B,IAAI,CAACC,MAAM,CAACD,UAAU,CAAC;MACvB,IAAIhK,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;MAC/BE,OAAO,CAACrC,OAAO,CAACuC,MAAM,IAAI;QACtB,IAAIgK,sBAAsB;QAC1B,IAAIC,QAAQ,GAAGjK,MAAM,CAACC,IAAI,KAAK3H,0BAA0B;QACzD,IAAI,CAAC2R,QAAQ,EAAE;UACX;QACJ;QACA,IAAI1J,GAAG,GAAGP,MAAM,CAACO,GAAG;QACpB,IAAIgJ,UAAU,GAAG,IAAI,MAAMS,sBAAsB,GAAG,IAAI,CAAC1J,gBAAgB,CAACC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKyJ,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACT,UAAU;QACjK,IAAI,CAAC1S,SAAS,CAAC0J,GAAG,CAAC,IAAI,CAAC1J,SAAS,CAAC0S,UAAU,CAAC,EAAE;UAC3CA,UAAU,GAAG,IAAI,CAACnC,cAAc,CAACpH,MAAM,CAAC;UACxCO,GAAG,GAAGgJ,UAAU,CAAChJ,GAAG;QACxB;QACA,IAAIkJ,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAACrE,KAAK,EAAEnF,MAAM,CAAC;QAC3D,IAAIQ,IAAI,GAAG,IAAI,CAAC6I,gBAAgB,CAAC9I,GAAG,CAAC;QACrC,IAAIkJ,cAAc,IAAI,CAAC,EAAE;UACrBtE,KAAK,CAAClB,MAAM,CAACwF,cAAc,EAAE,CAAC,EAAEjJ,IAAI,CAAC;QACzC;MACJ,CAAC,CAAC;MACF,OAAO2E,KAAK;IAChB,CAAC;IACD+E,eAAe,EAAE,SAAAA,CAAS1J,IAAI,EAAE3B,OAAO,EAAEsL,kBAAkB,EAAE;MACzD,IAAIC,OAAO,GAAGvL,OAAO,CAACgG,cAAc;MACpC,IAAItE,GAAG,GAAGC,IAAI,CAACS,IAAI,CAACnH,YAAY,CAAC,GAAG0G,IAAI,CAACS,IAAI,CAACV,GAAG,GAAGC,IAAI,CAACD,GAAG;MAC5D,IAAIT,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;MAC/B,IAAIuB,SAAS,GAAG5J,aAAa,CAAC6J,aAAa,CAACb,GAAG,EAAET,OAAO,CAAC;MACzDU,IAAI,CAAC5E,SAAS,GAAG,KAAK;MACtB,IAAIuF,SAAS,IAAI,CAAC,EAAE;QAChB,IAAI,CAACkJ,oBAAoB,CAAC7J,IAAI,EAAEV,OAAO,CAACqB,SAAS,CAAC,EAAEZ,GAAG,EAAE6J,OAAO,EAAED,kBAAkB,CAAC;MACzF;IACJ,CAAC;IACDE,oBAAoB,EAAE,SAAAA,CAAS7J,IAAI,EAAER,MAAM,EAAEO,GAAG,EAAE6J,OAAO,EAAED,kBAAkB,EAAE;MAC3E,IAAI;QACAlJ,IAAI,EAAEA,IAAI;QACVhB,IAAI,EAAEA;MACV,CAAC,GAAGD,MAAM;MACV,QAAQC,IAAI;QACR,KAAK3H,0BAA0B;UAC3BkI,IAAI,CAAC8J,QAAQ,GAAG,IAAI;UACpB9J,IAAI,CAACD,GAAG,GAAGA,GAAG;UACdC,IAAI,CAACS,IAAI,GAAGA,IAAI;UAChB;QACJ,KAAK7G,0BAA0B;UAC3BoG,IAAI,CAAC+J,QAAQ,GAAG,IAAI;UACpB/J,IAAI,CAACO,OAAO,GAAGP,IAAI,CAACS,IAAI;UACxBT,IAAI,CAACS,IAAI,GAAGzJ,uBAAuB,CAACgJ,IAAI,CAACS,IAAI,EAAEA,IAAI,CAAC;UACpDT,IAAI,CAACgK,cAAc,GAAGL,kBAAkB,CAAClJ,IAAI,EAAEmJ,OAAO,EAAE,IAAI,CAAC;UAC7D;QACJ,KAAK7R,0BAA0B;UAC3BiI,IAAI,CAACiK,OAAO,GAAG,IAAI;MAC3B;IACJ,CAAC;IACDC,WAAW,EAAE,SAAAA,CAAS7L,OAAO,EAAE;MAC3B,IAAI,CAAC8L,aAAa,CAAC,cAAc,EAAE9L,OAAO,CAAC;MAC3C,IAAIA,OAAO,CAAC+L,OAAO,EAAE;QACjB,IAAIzP,QAAQ,GAAG,IAAIrD,QAAQ,CAAD,CAAC;QAC3BD,IAAI,CAACE,WAAW,CAAC8G,OAAO,CAAC+L,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC1P,QAAQ,CAAC2P,OAAO,CAAC,CAACC,IAAI,CAAC7P,oBAAoB,CAACC,QAAQ,CAAC,CAAC,CAAC4P,IAAI,CAAC3P,GAAG,IAAI,IAAI,CAACoG,sBAAsB,CAACpG,GAAG,CAAC,CAAC;QAC5I,OAAOD,QAAQ;MACnB;IACJ,CAAC;IACD6P,iBAAiB,EAAE,SAAAA,CAAA,EAAW;MAC1B,IAAIzB,UAAU,GAAG,CAAC,CAAC;MACnBA,UAAU,CAACzP,YAAY,CAAC,GAAG,IAAI,CAACmR,eAAe,CAAC,CAAC;MACjD,OAAO1B,UAAU;IACrB,CAAC;IACDnC,cAAc,EAAE,SAAAA,CAASpH,MAAM,EAAEkL,SAAS,EAAE;MACxC,IAAIC,sBAAsB;MAC1B,IAAI5B,UAAU;MACd,IAAI;QACAhJ,GAAG,EAAEA;MACT,CAAC,GAAGP,MAAM;MACV,IAAI,CAACnJ,SAAS,CAAC0J,GAAG,CAAC,EAAE;QACjBA,GAAG,GAAGhF,MAAM,CAAC,IAAI5E,IAAI,CAAD,CAAC,CAAC;QACtBqJ,MAAM,CAACO,GAAG,GAAGA,GAAG;MACpB;MACAgJ,UAAU,GAAG,IAAI,MAAM4B,sBAAsB,GAAG,IAAI,CAAC7K,gBAAgB,CAACC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK4K,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAAC5B,UAAU;MAC7J,IAAI,CAAC1S,SAAS,CAAC0S,UAAU,CAAC,EAAE;QACxB,IAAII,sBAAsB,GAAG,IAAI,CAACV,0BAA0B,CAACjJ,MAAM,CAAC;QACpEuJ,UAAU,GAAG,IAAI,CAACyB,iBAAiB,CAAC,CAAC;QACrC,IAAI,CAACnU,SAAS,CAAC8S,sBAAsB,CAAC,EAAE;UACpC,IAAI,CAACyB,0BAA0B,CAACpL,MAAM,EAAEkL,SAAS,CAAC;QACtD;MACJ;MACA,IAAI,CAACzK,gBAAgB,CAAC;QAClB8I,UAAU,EAAEA,UAAU;QACtBhJ,GAAG,EAAEA;MACT,CAAC,CAAC;MACF,OAAO;QACHgJ,UAAU,EAAEA,UAAU;QACtBhJ,GAAG,EAAEA;MACT,CAAC;IACL,CAAC;IACD6K,0BAA0B,EAAE,SAAAA,CAASpL,MAAM,EAAEkL,SAAS,EAAE;MACpD,IAAI/D,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIkO,QAAQ,GAAGlE,cAAc,CAAChC,KAAK,CAAC,IAAI,CAAC;MACzC,IAAIH,QAAQ,GAAG,IAAI,CAAC3H,OAAO,CAAC,UAAU,CAAC;MACvC,IAAIqC,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAAC,CAAC;MAC9C,QAAQC,cAAc;QAClB,KAAKzG,sBAAsB;QAC3B,KAAKC,qBAAqB;UACtB;QACJ,KAAKE,yBAAyB;QAC9B,KAAKD,4BAA4B;UAC7B,IAAIkS,QAAQ,CAACnL,MAAM,EAAE;YACjB,IAAIoL,SAAS,GAAG5L,cAAc,KAAKtG,yBAAyB,GAAG,CAAC,GAAGiS,QAAQ,CAACnL,MAAM,GAAG,CAAC;YACtFF,MAAM,CAAC,CAAC,KAAKsL,SAAS,GAAG,iBAAiB,GAAG,gBAAgB,CAAC,GAAGD,QAAQ,CAACC,SAAS,CAAC,CAAC/K,GAAG;UAC5F;UACA;QACJ;UACI,IAAIgL,gBAAgB,GAAG7L,cAAc,KAAKrG,gCAAgC;UAC1E,IAAImS,gBAAgB,GAAGD,gBAAgB,GAAG,IAAI,KAAKvG,QAAQ,IAAI,KAAK,CAAC,KAAKA,QAAQ,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACyG,yBAAyB,CAAC,CAAC,GAAG,IAAI,KAAKzG,QAAQ,IAAI,KAAK,CAAC,KAAKA,QAAQ,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAAC0G,sBAAsB,CAAC,CAAC;UAC1N,IAAIvM,GAAG,GAAGgI,cAAc,CAACwE,cAAc,CAAC,CAAC,CAACH,gBAAgB,CAAC;UAC3D,IAAIrM,GAAG,KAAK,CAACA,GAAG,CAACvD,SAAS,IAAI,QAAQ,KAAKuD,GAAG,CAAC/C,OAAO,IAAI,gBAAgB,KAAK+C,GAAG,CAAC/C,OAAO,CAAC,EAAE;YACzFoP,gBAAgB,EAAE;UACtB;UACA,IAAII,SAAS,GAAGzE,cAAc,CAACiB,gBAAgB,CAACoD,gBAAgB,CAAC;UACjE,IAAI3U,SAAS,CAAC+U,SAAS,CAAC,EAAE;YACtB5L,MAAM,CAAC6L,eAAe,GAAGD,SAAS;UACtC;MACR;IACJ,CAAC;IACDX,eAAe,EAAE,SAAAA,CAAA,EAAW;MACxB,IAAIa,cAAc,GAAG,CAAC;MACtB,IAAI,CAAClM,UAAU,CAAC,CAAC,CAACnC,OAAO,CAACsO,QAAQ,IAAI;QAClC,IAAIC,sBAAsB;QAC1B,IAAIzC,UAAU,GAAG,IAAI,MAAMyC,sBAAsB,GAAG,IAAI,CAAC1L,gBAAgB,CAACyL,QAAQ,CAACxL,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKyL,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACzC,UAAU;QAC1K,IAAI1S,SAAS,CAAC0S,UAAU,CAAC,IAAIwC,QAAQ,CAAC9L,IAAI,KAAK3H,0BAA0B,IAAIiR,UAAU,CAACzP,YAAY,CAAC,GAAGgS,cAAc,EAAE;UACpHA,cAAc,GAAGvC,UAAU,CAACzP,YAAY,CAAC;QAC7C;MACJ,CAAC,CAAC;MACF,OAAOgS,cAAc,GAAG,CAAC;IAC7B,CAAC;IACD7C,0BAA0B,EAAE,SAAAA,CAASgD,YAAY,EAAE;MAC/C,IAAIC,qBAAqB;MACzB,OAAO,IAAI,MAAMA,qBAAqB,GAAGD,YAAY,CAAC7C,cAAc,CAAC,IAAI,KAAK,CAAC,KAAK8C,qBAAqB,GAAGA,qBAAqB,GAAGD,YAAY,CAACJ,eAAe;IACpK,CAAC;IACDM,wBAAwB,EAAE,SAAAA,CAAA,EAAW;MACjC,IAAIzM,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAAC,CAAC;MAC9C,IAAI0H,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIuM,SAAS,GAAGvC,cAAc,CAACuC,SAAS,CAAC,CAAC;MAC1C,IAAI0C,aAAa,GAAGjF,cAAc,CAACkF,SAAS,CAAC,CAAC,GAAG,CAAC;MAClD,IAAI3M,cAAc,KAAKzG,sBAAsB,IAAI,CAAC,KAAKyQ,SAAS,EAAE;QAC9D,OAAO,CAAC;MACZ,CAAC,MAAM,IAAIhK,cAAc,KAAKxG,qBAAqB,IAAIwQ,SAAS,KAAK0C,aAAa,EAAE;QAChF,OAAOA,aAAa;MACxB;MACA,OAAO,CAAC,CAAC;IACb,CAAC;IACDE,MAAM,EAAE,SAAAA,CAASpB,SAAS,EAAE;MACxB,IAAI/D,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIoP,KAAK,GAAGpF,cAAc,CAACoF,KAAK,CAAC,CAAC;MAClC,IAAI,CAACA,KAAK,EAAE;QACRpF,cAAc,CAACkB,SAAS,CAAC,OAAO,EAAE,IAAI,CAAChK,SAAS,CAACmO,IAAI,CAAC;QACtD,OAAQ,IAAI1U,QAAQ,CAAD,CAAC,CAAE0D,MAAM,CAAC,CAAC;MAClC;MACA,OAAO,IAAI,CAACiR,OAAO,CAACvB,SAAS,CAAC;IAClC,CAAC;IACDuB,OAAO,EAAE,SAAAA,CAASvB,SAAS,EAAE;MACzB,IAAI/D,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIoP,KAAK,GAAGpF,cAAc,CAACoF,KAAK,CAAC,CAAC;MAClC,IAAIhM,GAAG,GAAGgM,KAAK,IAAIA,KAAK,CAAChM,GAAG,CAAC,CAAC;MAC9B,IAAImM,KAAK,GAAG;QACRzL,IAAI,EAAE,CAAC;MACX,CAAC;MACD,IAAI0L,eAAe,GAAG,IAAI,CAACpE,uBAAuB,CAAC,CAAC;MACpD,IAAIpN,QAAQ,GAAG,IAAIrD,QAAQ,CAAD,CAAC;MAC3B,IAAI,CAAC6P,OAAO,CAAC;QACTiF,kBAAkB,EAAE;MACxB,CAAC,CAAC;MACF,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,CAAC,EAAE;QACzBhV,IAAI,CAAC,IAAI,CAACiV,iBAAiB,CAACH,eAAe,CAAC,CAAC,CAAC9B,IAAI,CAAC1P,QAAQ,CAAC2P,OAAO,CAAC,CAACC,IAAI,CAAC5P,QAAQ,CAACK,MAAM,CAAC;QAC1F,OAAOL,QAAQ,CAACyP,OAAO,CAAC,CAAC;MAC7B;MACA,IAAI,CAACrK,GAAG,EAAE;QACNmM,KAAK,CAACzL,IAAI,CAAC8L,OAAO,GAAGxR,MAAM,CAAC,IAAI5E,IAAI,CAAD,CAAC,CAAC;MACzC;MACAkB,IAAI,CAAC,IAAI,CAAC6S,WAAW,CAACgC,KAAK,EAAExB,SAAS,CAAC,CAAC,CAACL,IAAI,CAAC,MAAM;QAChD,IAAI,IAAI,CAACgC,eAAe,CAAC,CAAC,EAAE;UACxBhV,IAAI,CAAC,IAAI,CAACmV,WAAW,CAACN,KAAK,CAACzL,IAAI,EAAEiK,SAAS,EAAEyB,eAAe,CAAC,CAAC,CAAC9B,IAAI,CAAC1P,QAAQ,CAAC2P,OAAO,CAAC,CAACC,IAAI,CAAC5P,QAAQ,CAACK,MAAM,CAAC;QAC/G,CAAC,MAAM;UACHL,QAAQ,CAACK,MAAM,CAAC,QAAQ,CAAC;QAC7B;MACJ,CAAC,CAAC,CAACuP,IAAI,CAAC5P,QAAQ,CAACK,MAAM,CAAC;MACxB,OAAOL,QAAQ,CAACyP,OAAO,CAAC,CAAC;IAC7B,CAAC;IACDiC,eAAe,EAAE,SAAAA,CAAA,EAAW;MACxB,IAAII,WAAW,GAAG,IAAI,CAAChC,eAAe,CAAC,CAAC;MACxC,IAAIgC,WAAW,GAAG,CAAC,EAAE;QACjB,OAAO,KAAK;MAChB;MACA,OAAO,IAAI;IACf,CAAC;IACDD,WAAW,EAAE,SAAAA,CAAS/L,IAAI,EAAEiK,SAAS,EAAEgC,sBAAsB,EAAE;MAC3D,IAAIlN,MAAM,GAAG;QACTiB,IAAI,EAAEA,IAAI;QACVhB,IAAI,EAAE3H;MACV,CAAC;MACD,IAAI6U,YAAY,GAAG,IAAI,CAAC5E,uBAAuB,CAAC,CAAC;MACjD,IAAIgB,UAAU,GAAG,IAAI,CAACnC,cAAc,CAACpH,MAAM,EAAEkL,SAAS,CAAC;MACvD,IAAI3K,GAAG,GAAGgJ,UAAU,CAAChJ,GAAG;MACxB,IAAI,CAACwH,cAAc,CAACxH,GAAG,EAAE,IAAI,CAAC;MAC9B,IAAI,CAAC6M,UAAU,CAACpN,MAAM,CAAC;MACvB,OAAO,IAAI,CAAC8M,iBAAiB,CAACI,sBAAsB,EAAElN,MAAM,EAAEmN,YAAY,CAAC;IAC/E,CAAC;IACDL,iBAAiB,EAAE,SAAAA,CAASH,eAAe,EAAE3M,MAAM,EAAEmN,YAAY,EAAE;MAC/D,IAAIE,aAAa,EAAEC,OAAO;MAC1B,IAAI5P,CAAC,GAAG,IAAI5F,QAAQ,CAAD,CAAC;MACpB,IAAIqP,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIoQ,eAAe,GAAG,IAAI,CAACrQ,aAAa,CAAC,OAAO,CAAC;MACjDiQ,YAAY,GAAG,IAAI,MAAME,aAAa,GAAGF,YAAY,CAAC,IAAI,KAAK,CAAC,KAAKE,aAAa,GAAGA,aAAa,GAAG,CAAC,CAAC;MACvGrN,MAAM,GAAG,IAAI,MAAMsN,OAAO,GAAGtN,MAAM,CAAC,IAAI,KAAK,CAAC,KAAKsN,OAAO,GAAGA,OAAO,GAAG,IAAI,CAAC1N,UAAU,CAAC,CAAC,CAACG,MAAM,CAACyN,CAAC,IAAIA,CAAC,CAACvN,IAAI,KAAK3H,0BAA0B,CAAC,CAAC,CAAC,CAAC;MAC9I,IAAI,CAAC0H,MAAM,EAAE;QACT,OAAOtC,CAAC,CAAClC,MAAM,CAAC,QAAQ,CAAC,CAACoP,OAAO,CAAC,CAAC;MACvC;MACA,IAAI6C,oBAAoB,GAAG,IAAI,CAACtB,wBAAwB,CAAC,CAAC;MAC1D,IAAIvI,QAAQ,GAAG,IAAI,CAAC4F,kBAAkB,CAACrC,cAAc,CAAChC,KAAK,CAAC,CAAC,EAAEnF,MAAM,EAAE,IAAI,CAAC;MAC5E,IAAI0N,kBAAkB,GAAGnN,GAAG,IAAI;QAC5B1I,IAAI,CAAC,IAAI,KAAK0V,eAAe,IAAI,KAAK,CAAC,KAAKA,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACI,aAAa,CAACpN,GAAG,CAAC,CAAC,CAACsK,IAAI,CAAC,MAAM;UAClHjH,QAAQ,GAAGuD,cAAc,CAAC7B,gBAAgB,CAACtF,MAAM,CAACO,GAAG,CAAC;UACtD7C,CAAC,CAACoN,OAAO,CAAC,CAAC;QACf,CAAC,CAAC;MACN,CAAC;MACD,IAAInB,sBAAsB,GAAG,IAAI,CAACV,0BAA0B,CAACjJ,MAAM,CAAC;MACpE,IAAIyN,oBAAoB,IAAI,CAAC,EAAE;QAC3BtG,cAAc,CAACuC,SAAS,CAAC+D,oBAAoB,CAAC,CAAC5C,IAAI,CAAC,MAAM;UACtD6C,kBAAkB,CAAC1N,MAAM,CAACO,GAAG,CAAC;QAClC,CAAC,CAAC,CAACwK,IAAI,CAACrN,CAAC,CAAClC,MAAM,CAAC;MACrB,CAAC,MAAM,IAAIoI,QAAQ,GAAG,CAAC,IAAI/M,SAAS,CAAC8S,sBAAsB,CAAC,EAAE;QAC1D+D,kBAAkB,CAAC/D,sBAAsB,CAAC;MAC9C,CAAC,MAAM;QACHxC,cAAc,CAACG,WAAW,CAAC;UACvBwC,UAAU,EAAE,QAAQ;UACpB8D,UAAU,EAAE,CAACjB,eAAe,EAAEQ,YAAY,EAAEvJ,QAAQ;QACxD,CAAC,CAAC;QACFA,QAAQ,GAAGuD,cAAc,CAAC7B,gBAAgB,CAACtF,MAAM,CAACO,GAAG,CAAC;QACtD,IAAIqD,QAAQ,GAAG,CAAC,EAAE;UACd8J,kBAAkB,CAAC1N,MAAM,CAACO,GAAG,CAAC;QAClC,CAAC,MAAM;UACH7C,CAAC,CAACoN,OAAO,CAAC,CAAC;QACf;MACJ;MACApN,CAAC,CAACmN,IAAI,CAAC,MAAM;QACT,IAAIgD,eAAe;QACnB,IAAI,MAAMA,eAAe,GAAG,IAAI,CAACzQ,SAAS,CAAC,IAAI,KAAK,CAAC,KAAKyQ,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACC,kBAAkB,CAAC,IAAI,CAAC,CAACjD,IAAI,CAAC,MAAM;UACrI,IAAI,CAACkD,aAAa,CAACnK,QAAQ,CAAC;UAC5B,IAAI,CAACoK,eAAe,CAAChO,MAAM,CAACO,GAAG,CAAC;QACpC,CAAC,CAAC;MACN,CAAC,CAAC;MACF,OAAO7C,CAAC,CAACkN,OAAO,CAAC,CAAC;IACtB,CAAC;IACDmD,aAAa,EAAE,SAAAA,CAASnK,QAAQ,EAAE;MAC9B,IAAI,CAACqK,4BAA4B,CAACrK,QAAQ,CAAC;IAC/C,CAAC;IACDsK,wBAAwB,EAAEjW,IAAI;IAC9BgW,4BAA4B,EAAE,SAAAA,CAASrK,QAAQ,EAAE;MAC7C,IAAIuD,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIoD,GAAG,GAAG4G,cAAc,CAACiB,gBAAgB,CAACxE,QAAQ,CAAC;MACnD,IAAIuK,UAAU,GAAG,IAAI,CAACpJ,yBAAyB,CAACnB,QAAQ,CAAC;MACzD,IAAI,CAACwK,mBAAmB,GAAG,IAAI;MAC/B,IAAI,CAACC,kBAAkB,CAACF,UAAU,EAAE,MAAM;QACtCvK,QAAQ,GAAGuD,cAAc,CAAC7B,gBAAgB,CAAC/E,GAAG,CAAC;QAC/C,IAAI,CAAC6N,mBAAmB,GAAG,KAAK;QAChC,IAAI,CAACF,wBAAwB,CAACtK,QAAQ,CAAC;MAC3C,CAAC,CAAC;IACN,CAAC;IACD0K,eAAe,EAAE,SAAAA,CAASzP,OAAO,EAAE;MAC/B,IAAI,CAAC8L,aAAa,CAAC,gBAAgB,EAAE9L,OAAO,CAAC;MAC7C,OAAOA,OAAO,CAACrE,MAAM;IACzB,CAAC;IACD+T,kBAAkB,EAAEtW,IAAI;IACxB4Q,0BAA0B,EAAE,SAAAA,CAAA,EAAW;MACnC,IAAI2F,cAAc,GAAG,IAAI,CAAC/P,MAAM,CAAC/F,kCAAkC,CAAC;MACpE,IAAI,CAAC7B,SAAS,CAAC2X,cAAc,CAAC,EAAE;QAC5B,OAAO,CAAC,CAAC;MACb;MACA,OAAO,IAAI,CAACvR,kBAAkB,CAACwR,qBAAqB,CAACD,cAAc,CAAC;IACxE,CAAC;IACDE,yBAAyB,EAAE,SAAAA,CAAS7R,KAAK,EAAEmL,MAAM,EAAE;MAC/C,IAAI2G,qBAAqB;MACzB,IAAI9J,cAAc,GAAG,IAAI,CAAC5H,kBAAkB,CAAC6H,iBAAiB,CAAC,CAAC;MAChE,IAAI,CAAC8J,kBAAkB,CAAC,IAAI,MAAMD,qBAAqB,GAAG9J,cAAc,CAAChI,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK8R,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACvX,IAAI,EAAE4Q,MAAM,CAAC;IACvK,CAAC;IACD4G,kBAAkB,EAAE,SAAAA,CAASxX,IAAI,EAAE4Q,MAAM,EAAE;MACvC,IAAIA,MAAM,EAAE;QACR,IAAI,CAAC3H,aAAa,CAAC3H,kCAAkC,EAAEtB,IAAI,CAAC;MAChE,CAAC,MAAM;QACH,IAAI,CAACqH,MAAM,CAAC/F,kCAAkC,EAAEtB,IAAI,CAAC;MACzD;IACJ,CAAC;IACDuP,oBAAoB,EAAE,SAAAA,CAAA,EAAW;MAC7B,IAAI,CAACiI,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC;IACvC,CAAC;IACDC,cAAc,EAAE,SAAAA,CAAA,EAAW;MACvB,IAAIL,cAAc,GAAG,IAAI,CAAC/P,MAAM,CAAC/F,kCAAkC,CAAC;MACpE,OAAO,IAAI,CAACoW,gBAAgB,CAACN,cAAc,CAAC;IAChD,CAAC;IACDM,gBAAgB,EAAE,SAAAA,CAAS1X,IAAI,EAAE;MAC7B,IAAIyN,cAAc,GAAG,IAAI,CAAC5H,kBAAkB,CAAC6H,iBAAiB,CAAC,CAAC;MAChE,IAAIiK,UAAU;MACdlY,SAAS,CAACO,IAAI,CAAC,IAAIyN,cAAc,CAAClI,IAAI,CAACd,MAAM,IAAI;QAC7C,IAAIA,MAAM,CAACzE,IAAI,KAAKA,IAAI,EAAE;UACtB2X,UAAU,GAAGlT,MAAM;UACnB,OAAO,IAAI;QACf;MACJ,CAAC,CAAC;MACF,OAAOkT,UAAU;IACrB,CAAC;IACDxG,uBAAuB,EAAE,SAAAA,CAASyG,UAAU,EAAE;MAC1C,IAAI7H,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAI8R,UAAU,GAAG,IAAI,CAACxQ,MAAM,CAAChG,8BAA8B,CAAC;MAC5D,IAAImL,QAAQ,GAAGuD,cAAc,CAAC7B,gBAAgB,CAAC2J,UAAU,CAAC;MAC1D,IAAI,CAAC,CAAC,KAAKrL,QAAQ,EAAE;QACjB,OAAOA,QAAQ;MACnB;MACA,OAAOA,QAAQ,GAAG,IAAI,CAACkD,0BAA0B,CAACkI,UAAU,CAAC;IACjE,CAAC;IACDlI,0BAA0B,EAAE,SAAAA,CAASkI,UAAU,EAAE;MAC7C,IAAID,UAAU,GAAGC,UAAU,GAAG,IAAI,CAACF,gBAAgB,CAACE,UAAU,CAAC,GAAG,IAAI,CAACH,cAAc,CAAC,CAAC;MACvF,IAAIK,cAAc,GAAG,gBAAgB,MAAM,IAAI,KAAKH,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACI,YAAY,CAAC;MAC3H,OAAOD,cAAc,GAAG,CAAC,GAAG,CAAC;IACjC,CAAC;IACDtI,gBAAgB,EAAE,SAAAA,CAAA,EAAW;MACzB,IAAI,CAACmB,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;IACnC,CAAC;IACDqH,iBAAiB,EAAE,SAAAA,CAAA,EAAW;MAC1B,IAAI,CAACzI,oBAAoB,CAAC,CAAC;MAC3B,IAAI,CAACC,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACDhE,OAAO,EAAE,SAAAA,CAASgB,QAAQ,EAAE;MACxB,IAAIyL,aAAa;MACjB,IAAIlI,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIgI,KAAK,GAAGgC,cAAc,CAAChC,KAAK,CAAC,CAAC;MAClC,IAAI3E,IAAI,GAAG2E,KAAK,CAACvB,QAAQ,CAAC;MAC1B,IAAIlD,MAAM,GAAG;QACTO,IAAI,EAAET,IAAI,IAAIA,IAAI,CAACS,IAAI;QACvBzG,MAAM,EAAE;MACZ,CAAC;MACD,IAAIuM,WAAW,GAAG,IAAI,CAACwB,uBAAuB,CAAC,CAAC;MAChD,IAAI,CAAC/H,IAAI,EAAE;QACP;MACJ;MACA,IAAIoD,QAAQ,KAAKmD,WAAW,EAAE;QAC1B,OAAO,IAAI;MACf;MACA,IAAI,KAAK,CAAC,KAAKvG,IAAI,CAACD,GAAG,EAAE;QACrB,IAAI,CAACpD,eAAe,CAACkL,SAAS,CAAC,OAAO,CAAC;QACvC;MACJ;MACA,IAAI,CAAC7H,IAAI,CAAC8J,QAAQ,EAAE;QAChB5J,MAAM,CAACH,GAAG,GAAGC,IAAI,CAACD,GAAG;MACzB;MACA,IAAI,IAAI,CAAC+N,eAAe,CAAC5N,MAAM,CAAC,EAAE;QAC9B;MACJ;MACA,IAAI,CAACP,YAAY,CAAC,CAAC;MACnB,IAAI,CAACnD,IAAI,CAAC,CAAC;MACX,IAAI,CAAC2J,oBAAoB,CAAC,CAAC;MAC3B,IAAI,CAACiB,UAAU,GAAGT,cAAc,CAACuC,SAAS,CAAC,CAAC;MAC5C,IAAI,CAACjJ,gBAAgB,CAAC;QAClBF,GAAG,EAAEC,IAAI,CAACD,GAAG;QACbQ,OAAO,EAAE,IAAI,MAAMsO,aAAa,GAAG7O,IAAI,CAACO,OAAO,CAAC,IAAI,KAAK,CAAC,KAAKsO,aAAa,GAAGA,aAAa,GAAG7O,IAAI,CAACS;MACxG,CAAC,CAAC;MACF,IAAI,CAAC8G,cAAc,CAACvH,IAAI,CAACD,GAAG,CAAC;IACjC,CAAC;IACD0G,yBAAyB,EAAE,SAAAA,CAASrD,QAAQ,EAAEmD,WAAW,EAAE;MACvD,IAAI6G,UAAU,GAAG,CAAC7G,WAAW,EAAEnD,QAAQ,CAAC;MACxC,IAAI,CAAC2K,kBAAkB,CAACX,UAAU,EAAEhK,QAAQ,EAAEmD,WAAW,CAAC;MAC1D,IAAI,CAACuI,6BAA6B,CAAC1B,UAAU,EAAEhK,QAAQ,CAAC;IAC5D,CAAC;IACD0L,6BAA6B,EAAE,SAAAA,CAAS1B,UAAU,EAAEhK,QAAQ,EAAE2L,gBAAgB,EAAE;MAC5E,IAAI,CAACC,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACrS,eAAe,CAACmK,WAAW,CAAC;QAC7BwC,UAAU,EAAE,QAAQ;QACpB8D,UAAU,EAAEA,UAAU;QACtBpT,MAAM,EAAE+U;MACZ,CAAC,CAAC;IACN,CAAC;IACDE,kBAAkB,EAAExX,IAAI;IACxByX,cAAc,EAAEzX,IAAI;IACpB0X,iBAAiB,EAAE1X,IAAI;IACvB2X,0BAA0B,EAAE,SAAAA,CAAA,EAAW;MACnC,OAAOrM,CAAC,IAAI;QACR,IAAI,IAAI,CAAC3H,SAAS,CAAC,CAAC,EAAE;UAClB,IAAI,CAACsL,cAAc,CAAC,CAAC;QACzB;MACJ,CAAC;IACL,CAAC;IACD2I,yBAAyB,EAAE5X,IAAI;IAC/B6X,oBAAoB,EAAE,SAAAA,CAAA,EAAW;MAC7B,OAAO;QACH1M,IAAI,EAAE,IAAI,CAAC3E,MAAM,CAAC,8BAA8B,CAAC;QACjD6E,OAAO,EAAE,IAAI,CAACyM,YAAY,CAAClS,IAAI,CAAC,IAAI;MACxC,CAAC;IACL,CAAC;IACDmS,sBAAsB,EAAE,SAAAA,CAAA,EAAW;MAC/B,OAAO;QACH5M,IAAI,EAAE,IAAI,CAAC3E,MAAM,CAAC,gCAAgC,CAAC;QACnD6E,OAAO,EAAE,IAAI,CAAC4D,cAAc,CAACrJ,IAAI,CAAC,IAAI;MAC1C,CAAC;IACL,CAAC;IACDoS,mBAAmB,EAAE,SAAAA,CAAS1P,GAAG,EAAE;MAC/B,IAAII,YAAY,GAAG,IAAI,CAACL,gBAAgB,CAACC,GAAG,CAAC;MAC7C,IAAI1D,KAAK,GAAG,IAAI,CAACuB,cAAc,CAACM,OAAO,CAACiC,YAAY,CAAC;MACrD,IAAI9D,KAAK,GAAG,CAAC,CAAC,EAAE;QACZ,IAAI,CAACuB,cAAc,CAAC6F,MAAM,CAACpH,KAAK,EAAE,CAAC,CAAC;MACxC;IACJ,CAAC;IACDqT,8BAA8B,EAAE,SAAAA,CAASpQ,OAAO,EAAEjD,KAAK,EAAE;MACrD,IAAIsT,YAAY,GAAGrQ,OAAO,CAACjD,KAAK,CAAC;MACjCiD,OAAO,CAACrC,OAAO,CAACuC,MAAM,IAAI;QACtB,IAAI2J,sBAAsB,GAAG,IAAI,CAACV,0BAA0B,CAACjJ,MAAM,CAAC;QACpE,IAAIhI,YAAY,CAAC2R,sBAAsB,EAAEwG,YAAY,CAAC5P,GAAG,CAAC,EAAE;UACxDP,MAAM,CAACnJ,SAAS,CAACmJ,MAAM,CAACoJ,cAAc,CAAC,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,IAAI,CAACH,0BAA0B,CAACkH,YAAY,CAAC;QACnI;MACJ,CAAC,CAAC;IACN,CAAC;IACDC,aAAa,EAAE,SAAAA,CAASvT,KAAK,EAAE;MAC3B,IAAIA,KAAK,IAAI,CAAC,EAAE;QACZ,IAAIiD,OAAO,GAAG,CAAC,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC,CAAC;QACpC,IAAIW,GAAG,GAAGT,OAAO,CAACjD,KAAK,CAAC,CAAC0D,GAAG;QAC5B,IAAI,CAAC0P,mBAAmB,CAAC1P,GAAG,CAAC;QAC7B,IAAI,CAAC2P,8BAA8B,CAACpQ,OAAO,EAAEjD,KAAK,CAAC;QACnDiD,OAAO,CAACmE,MAAM,CAACpH,KAAK,EAAE,CAAC,CAAC;QACxB,IAAI,CAACwD,aAAa,CAACpF,2BAA2B,EAAE6E,OAAO,CAAC;QACxD,IAAI9H,YAAY,CAAC,IAAI,CAACyG,MAAM,CAAChG,8BAA8B,CAAC,EAAE8H,GAAG,CAAC,EAAE;UAChE,IAAI,CAAC6O,iBAAiB,CAAC,CAAC;QAC5B;MACJ;IACJ,CAAC;IACDiB,gBAAgB,EAAE,SAAAA,CAASlV,QAAQ,EAAEmV,IAAI,EAAE;MACvC,IAAI,CAAChT,cAAc,IAAI,IAAI,CAACA,cAAc,CAAC9B,MAAM,CAAC,CAAC;MACnD,IAAI,CAAC8B,cAAc,GAAGnC,QAAQ;MAC9B,IAAI,CAACoV,yBAAyB,CAAC,CAAC,CAAC1F,IAAI,CAAC,MAAM;QACxC,IAAI,UAAU,KAAK1P,QAAQ,CAACqV,KAAK,CAAC,CAAC,EAAE;UACjC;QACJ;QACAF,IAAI,CAAC,CAAC;QACN,IAAI,CAAChT,cAAc,GAAG,IAAI;MAC9B,CAAC,CAAC,CAACyN,IAAI,CAAC,MAAM;QACV5P,QAAQ,CAACK,MAAM,CAAC,CAAC;QACjB,IAAI,CAAC8B,cAAc,GAAG,IAAI;MAC9B,CAAC,CAAC;IACN,CAAC;IACDiT,yBAAyB,EAAE,SAAAA,CAAA,EAAW;MAClC,OAAO1Y,IAAI,CAAC,GAAG,IAAI,CAAC2F,UAAU,CAAC;IACnC,CAAC;IACDiT,2BAA2B,EAAExY,IAAI;IACjCyY,gBAAgB,EAAE,SAAAA,CAAS7U,MAAM,EAAE8U,SAAS,EAAEhE,eAAe,EAAE;MAC3D,IAAI,CAAC6C,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAAC3T,MAAM,IAAI,CAACA,MAAM,CAACM,gBAAgB,IAAIwU,SAAS,IAAI,CAACA,SAAS,CAACxU,gBAAgB,EAAE;QACjF,IAAI,CAACiS,mBAAmB,GAAG,IAAI;QAC/B,IAAI,CAAClR,aAAa,CAAC,eAAe,CAAC,CAAC0T,SAAS,CAAC,CAAC;QAC/C,IAAI,CAACzT,eAAe,CAACmK,WAAW,CAAC;UAC7BwC,UAAU,EAAE,QAAQ;UACpB8D,UAAU,EAAE,CAACjB,eAAe,EAAE,IAAI,CAACpE,uBAAuB,CAAC,CAAC;QAChE,CAAC,CAAC;MACN,CAAC,MAAM,IAAI1M,MAAM,KAAK8U,SAAS,EAAE;QAC7B,IAAI,CAACxT,eAAe,CAACmK,WAAW,CAAC;UAC7BwC,UAAU,EAAE,QAAQ;UACpB8D,UAAU,EAAE;QAChB,CAAC,CAAC;MACN;IACJ,CAAC;IACDS,kBAAkB,EAAE,SAAAA,CAASwC,KAAK,EAAEC,mBAAmB,EAAEC,6BAA6B,EAAE;MACpF,IAAIC,UAAU,GAAGA,CAAA,KAAM;QACnB,IAAIF,mBAAmB,EAAE;UACrBA,mBAAmB,CAAC,CAAC;QACzB;QACA,IAAID,KAAK,EAAE;UACP,IAAII,iBAAiB,GAAGJ,KAAK,CAACK,IAAI,CAACrY,0BAA0B,CAAC,CAACsY,KAAK,CAAC,CAAC;UACtE5Z,aAAa,CAAC6Z,qBAAqB,CAAC,IAAI,EAAEH,iBAAiB,CAAC;QAChE;QACA,IAAI,CAACI,oBAAoB,GAAG,IAAI;MACpC,CAAC;MACD,IAAIzZ,OAAO,CAAC0Z,IAAI,CAAC,CAAC,CAACC,GAAG,IAAI3Z,OAAO,CAAC0Z,IAAI,CAAC,CAAC,CAACE,OAAO,EAAE;QAC9CR,UAAU,CAAC,CAAC;MAChB,CAAC,MAAM;QACH,IAAI,IAAI,CAACK,oBAAoB,EAAE;UAC3B,IAAI,CAACA,oBAAoB,CAAC,CAAC;QAC/B;QACA5L,YAAY,CAAC,IAAI,CAACC,oBAAoB,CAAC;QACvC,IAAIqL,6BAA6B,EAAE;UAC/B,IAAI,CAACM,oBAAoB,GAAGP,mBAAmB;QACnD;QACA,IAAI,CAACpL,oBAAoB,GAAG/B,UAAU,CAACqN,UAAU,CAAC;MACtD;IACJ,CAAC;IACD9I,iBAAiB,EAAE,SAAAA,CAAS4I,mBAAmB,EAAEW,SAAS,EAAEV,6BAA6B,EAAE;MACvF,IAAI/L,QAAQ,GAAG,IAAI,CAAC3H,OAAO,CAAC,UAAU,CAAC;MACvC,IAAIqU,eAAe,GAAG,IAAI,CAAC7I,0BAA0B,CAAC,CAAC;MACvD4I,SAAS,GAAGA,SAAS,IAAIzM,QAAQ,IAAIA,QAAQ,CAACC,eAAe,CAAC,IAAI,CAACsD,uBAAuB,CAAC,CAAC,EAAEmJ,eAAe,CAAC;MAC9G,IAAID,SAAS,EAAE;QACX,IAAI,CAACpD,kBAAkB,CAACoD,SAAS,EAAEX,mBAAmB,EAAEC,6BAA6B,CAAC;MAC1F;IACJ,CAAC;IACDjO,SAAS,EAAE,SAAAA,CAASc,QAAQ,EAAE;MAC1B,IAAI,CAAC+N,kBAAkB,CAAC/N,QAAQ,CAAC;IACrC,CAAC;IACD+N,kBAAkB,EAAE,SAAAA,CAAS/N,QAAQ,EAAE;MACnC,IAAIX,cAAc,GAAG,IAAI,CAACxE,MAAM,CAAC,SAAS,CAAC;MAC3C,IAAIgE,YAAY,GAAG,IAAI,KAAKQ,cAAc,IAAI,KAAK,CAAC,KAAKA,cAAc,GAAG,KAAK,CAAC,GAAGA,cAAc,CAAC2O,KAAK;MACvG,IAAIC,aAAa,GAAG,IAAI,KAAK5O,cAAc,IAAI,KAAK,CAAC,KAAKA,cAAc,GAAG,KAAK,CAAC,GAAGA,cAAc,CAAC4O,aAAa;MAChH,IAAIC,oBAAoB,GAAG,IAAI,KAAKrP,YAAY,IAAI,KAAK,CAAC,KAAKA,YAAY,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACqP,oBAAoB;MACxH,IAAItR,IAAI,GAAG,IAAI,CAACrD,eAAe,CAACgI,KAAK,CAAC,CAAC,CAACvB,QAAQ,CAAC;MACjD,IAAI5B,aAAa,GAAG,CAAC,IAAI,CAACpG,SAAS,CAAC,CAAC,IAAI4E,IAAI,CAAC8J,QAAQ;MACtD,IAAI9J,IAAI,IAAIwB,aAAa,EAAE;QACvB,IAAI,CAAC6P,aAAa,IAAI,CAACC,oBAAoB,EAAE;UACzC,IAAI,CAACC,cAAc,CAACnO,QAAQ,CAAC;QACjC,CAAC,MAAM;UACH,IAAIoO,kBAAkB,GAAGvP,YAAY,IAAIA,YAAY,CAACuP,kBAAkB;UACxE,IAAIC,eAAe,GAAGpb,SAAS,CAACmb,kBAAkB,CAAC,IAAIA,kBAAkB,CAAC9R,MAAM,GAAG,CAAC;UACpFxI,OAAO,CAACoa,oBAAoB,EAAEE,kBAAkB,EAAEC,eAAe,CAAC,CAACpH,IAAI,CAACqH,aAAa,IAAI;YACrF,IAAIA,aAAa,EAAE;cACf,IAAI,CAACH,cAAc,CAACnO,QAAQ,CAAC;YACjC;UACJ,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;IACDmO,cAAc,EAAE,SAAAA,CAASnO,QAAQ,EAAE;MAC/B,IAAIuD,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIqD,IAAI,GAAG2G,cAAc,CAAChC,KAAK,CAAC,CAAC,CAACvB,QAAQ,CAAC;MAC3C,IAAIrD,GAAG,GAAGC,IAAI,IAAIA,IAAI,CAACD,GAAG;MAC1B,IAAIoM,eAAe,GAAG,IAAI,CAACpE,uBAAuB,CAAC,CAAC;MACpD,IAAI,CAACZ,OAAO,CAAC,CAAC;MACd,IAAI7H,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;MAC/B,IAAIuB,SAAS,GAAG5J,aAAa,CAAC6J,aAAa,CAACb,GAAG,EAAET,OAAO,CAAC;MACzD,IAAIqB,SAAS,IAAI,CAAC,EAAE;QAChB,IAAIrB,OAAO,CAACqB,SAAS,CAAC,CAAClB,IAAI,KAAK3H,0BAA0B,EAAE;UACxD,IAAI,CAAC8X,aAAa,CAACjP,SAAS,CAAC;QACjC,CAAC,MAAM;UACH,IAAI,CAACiM,UAAU,CAAC;YACZ7M,GAAG,EAAEA,GAAG;YACRN,IAAI,EAAE1H;UACV,CAAC,CAAC;QACN;MACJ,CAAC,MAAM;QACH,IAAI,CAAC6U,UAAU,CAAC;UACZ7M,GAAG,EAAEA,GAAG;UACRQ,OAAO,EAAEP,IAAI,CAACS,IAAI;UAClBhB,IAAI,EAAE1H;QACV,CAAC,CAAC;MACN;MACA,OAAO,IAAI,CAAC4Z,eAAe,CAACvO,QAAQ,EAAE+I,eAAe,CAAC;IAC1D,CAAC;IACDwF,eAAe,EAAE,SAAAA,CAASvO,QAAQ,EAAE+I,eAAe,EAAE;MACjD,OAAO,IAAI,CAACoD,YAAY,CAAC,CAAC;IAC9B,CAAC;IACDlN,WAAW,EAAE,SAAAA,CAASe,QAAQ,EAAE;MAC5B,IAAIuD,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIqD,IAAI,GAAG2G,cAAc,CAAChC,KAAK,CAAC,CAAC,CAACvB,QAAQ,CAAC;MAC3C,IAAI+I,eAAe,GAAG,IAAI,CAACpE,uBAAuB,CAAC,CAAC;MACpD,IAAIhI,GAAG,GAAGC,IAAI,IAAIA,IAAI,CAACD,GAAG;MAC1B,IAAIT,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;MAC/B,IAAIY,IAAI,EAAE;QACN,IAAIW,SAAS,GAAG5J,aAAa,CAAC6J,aAAa,CAACb,GAAG,EAAET,OAAO,CAAC;QACzD,IAAIqB,SAAS,IAAI,CAAC,EAAE;UAChB,IAAI;YACAF,IAAI,EAAEA;UACV,CAAC,GAAGnB,OAAO,CAACqB,SAAS,CAAC;UACtB,IAAInK,aAAa,CAACiK,IAAI,CAAC,EAAE;YACrB,IAAI,CAACmP,aAAa,CAACjP,SAAS,CAAC;UACjC,CAAC,MAAM;YACH,IAAI,CAACiM,UAAU,CAAC;cACZ7M,GAAG,EAAEA,GAAG;cACRN,IAAI,EAAE7F;YACV,CAAC,CAAC;UACN;UACA+M,cAAc,CAACG,WAAW,CAAC;YACvBwC,UAAU,EAAE,QAAQ;YACpB8D,UAAU,EAAE,CAACjB,eAAe,EAAE/I,QAAQ;UAC1C,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;IACDwO,aAAa,EAAE,SAAAA,CAAA,EAAW;MACtB,IAAIC,cAAc,GAAG;QACjB7X,MAAM,EAAE,KAAK;QACboQ,OAAO,EAAE,IAAI;QACb9K,OAAO,EAAE,CAAC,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;MAClC,CAAC;MACD,IAAI,CAAC+K,aAAa,CAAC,UAAU,EAAE0H,cAAc,CAAC;MAC9C,IAAI3U,CAAC,GAAG,IAAI5F,QAAQ,CAAD,CAAC;MACpBD,IAAI,CAACE,WAAW,CAACsa,cAAc,CAACzH,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;QACjDnN,CAAC,CAACoN,OAAO,CAACuH,cAAc,CAAC;MAC7B,CAAC,CAAC,CAACtH,IAAI,CAAC3P,GAAG,IAAI;QACXF,oBAAoB,CAACwC,CAAC,CAAC;QACvB,IAAI,CAAC8D,sBAAsB,CAACpG,GAAG,CAAC;QAChCsC,CAAC,CAACoN,OAAO,CAAC;UACNtQ,MAAM,EAAE;QACZ,CAAC,CAAC;MACN,CAAC,CAAC;MACF,OAAOkD,CAAC;IACZ,CAAC;IACD4U,qBAAqB,EAAE,SAAAA,CAASpP,UAAU,EAAExC,MAAM,EAAE4P,IAAI,EAAE;MACtD,IAAI,IAAI,CAACjS,SAAS,CAACkU,SAAS,EAAE;QAC1B,OAAO,IAAI;MACf;MACA,IAAIpX,QAAQ,GAAG,IAAIrD,QAAQ,CAAD,CAAC;MAC3B,IAAI,CAAC6S,aAAa,CAACzH,UAAU,EAAExC,MAAM,CAAC;MACtC7I,IAAI,CAACE,WAAW,CAAC2I,MAAM,CAAClG,MAAM,CAAC,CAAC,CAACqQ,IAAI,CAAE,UAASrQ,MAAM,EAAE;QACpD,IAAIA,MAAM,EAAE;UACRmJ,UAAU,CAAE,YAAW;YACnBxI,QAAQ,CAAC2P,OAAO,CAAC,QAAQ,CAAC;UAC9B,CAAE,CAAC;QACP,CAAC,MAAM;UACHwF,IAAI,CAAC5P,MAAM,CAAC,CAACmK,IAAI,CAAC1P,QAAQ,CAAC2P,OAAO,CAAC,CAACC,IAAI,CAAC7P,oBAAoB,CAACC,QAAQ,CAAC,CAAC;QAC5E;MACJ,CAAE,CAAC,CAAC4P,IAAI,CAAC7P,oBAAoB,CAACC,QAAQ,CAAC,CAAC;MACxC,OAAOA,QAAQ;IACnB,CAAC;IACDqX,eAAe,EAAE,SAAAA,CAASC,SAAS,EAAEC,OAAO,EAAEC,WAAW,EAAE7S,OAAO,EAAE;MAChE,IAAIyM,KAAK,GAAG,IAAI,CAACpP,eAAe,CAACoP,KAAK,CAAC,CAAC;MACxCtV,IAAI,CAAC6I,OAAO,EAAE,CAACjD,KAAK,EAAEmD,MAAM,KAAK;QAC7B,IAAIe,OAAO,GAAG,IAAI,CAACF,WAAW,CAACb,MAAM,CAACO,GAAG,CAAC;QAC1C,IAAI;UACAU,IAAI,EAAEA,IAAI;UACVhB,IAAI,EAAEA;QACV,CAAC,GAAGD,MAAM;QACV,IAAI4S,UAAU,GAAGrc,QAAQ,CAAC,CAAC,CAAC,EAAEyJ,MAAM,CAAC;QACrC,IAAI7E,QAAQ;QACZ,IAAIuF,MAAM;QACV,IAAI,IAAI,CAACmS,mBAAmB,CAAC7S,MAAM,EAAEnD,KAAK,CAAC,EAAE;UACzC;QACJ;QACA,QAAQoD,IAAI;UACR,KAAK1H,0BAA0B;YAC3BmI,MAAM,GAAG;cACLO,IAAI,EAAEF,OAAO;cACbR,GAAG,EAAEP,MAAM,CAACO,GAAG;cACf/F,MAAM,EAAE;YACZ,CAAC;YACDW,QAAQ,GAAG,IAAI,CAACmX,qBAAqB,CAAC,eAAe,EAAE5R,MAAM,EAAG,YAAW;cACvE,OAAO6L,KAAK,CAACuG,MAAM,CAAC9S,MAAM,CAACO,GAAG,CAAC,CAACsK,IAAI,CAAE,UAAStK,GAAG,EAAE;gBAChDoS,WAAW,CAAC/R,IAAI,CAAC;kBACbX,IAAI,EAAE,QAAQ;kBACdM,GAAG,EAAEA;gBACT,CAAC,CAAC;cACN,CAAE,CAAC;YACP,CAAE,CAAC;YACH;UACJ,KAAKjI,0BAA0B;YAC3BoI,MAAM,GAAG;cACLO,IAAI,EAAEA,IAAI;cACVzG,MAAM,EAAE;YACZ,CAAC;YACDW,QAAQ,GAAG,IAAI,CAACmX,qBAAqB,CAAC,gBAAgB,EAAE5R,MAAM,EAAG,YAAW;cACxE,OAAO6L,KAAK,CAACwG,MAAM,CAACrS,MAAM,CAACO,IAAI,CAAC,CAAC4J,IAAI,CAAE,UAAS5J,IAAI,EAAEV,GAAG,EAAE;gBACvD,IAAI1J,SAAS,CAAC0J,GAAG,CAAC,EAAE;kBAChBqS,UAAU,CAACrS,GAAG,GAAGA,GAAG;gBACxB;gBACA,IAAIU,IAAI,IAAInK,QAAQ,CAACmK,IAAI,CAAC,IAAIA,IAAI,KAAKP,MAAM,CAACO,IAAI,EAAE;kBAChD2R,UAAU,CAAC3R,IAAI,GAAGA,IAAI;gBAC1B;gBACA0R,WAAW,CAAC/R,IAAI,CAAC;kBACbX,IAAI,EAAE,QAAQ;kBACdgB,IAAI,EAAEA,IAAI;kBACVpE,KAAK,EAAE;gBACX,CAAC,CAAC;cACN,CAAE,CAAC;YACP,CAAE,CAAC;YACH;UACJ,KAAKzC,0BAA0B;YAC3BsG,MAAM,GAAG;cACLsS,OAAO,EAAE/R,IAAI;cACbF,OAAO,EAAEA,OAAO;cAChBR,GAAG,EAAEP,MAAM,CAACO,GAAG;cACf/F,MAAM,EAAE;YACZ,CAAC;YACDW,QAAQ,GAAG,IAAI,CAACmX,qBAAqB,CAAC,eAAe,EAAE5R,MAAM,EAAG,YAAW;cACvE,OAAO6L,KAAK,CAACxC,MAAM,CAAC/J,MAAM,CAACO,GAAG,EAAEG,MAAM,CAACsS,OAAO,CAAC,CAACnI,IAAI,CAAE,UAAS5J,IAAI,EAAEV,GAAG,EAAE;gBACtE,IAAIU,IAAI,IAAInK,QAAQ,CAACmK,IAAI,CAAC,IAAIA,IAAI,KAAKP,MAAM,CAACsS,OAAO,EAAE;kBACnDJ,UAAU,CAAC3R,IAAI,GAAGA,IAAI;gBAC1B;gBACA0R,WAAW,CAAC/R,IAAI,CAAC;kBACbX,IAAI,EAAE,QAAQ;kBACdM,GAAG,EAAEA,GAAG;kBACRU,IAAI,EAAEA;gBACV,CAAC,CAAC;cACN,CAAE,CAAC;YACP,CAAE,CAAC;QACX;QACAnB,OAAO,CAACjD,KAAK,CAAC,GAAG+V,UAAU;QAC3B,IAAIzX,QAAQ,EAAE;UACV,IAAI8X,YAAY,GAAG,IAAInb,QAAQ,CAAD,CAAC;UAC/BqD,QAAQ,CAAC+X,MAAM,CAAE,UAASjS,IAAI,EAAE;YAC5ByR,OAAO,CAAC9R,IAAI,CAAC;cACTL,GAAG,EAAEP,MAAM,CAACO,GAAG;cACf7D,MAAM,EAAEuE;YACZ,CAAC,CAAC;UACN,CAAE,CAAC,CAACiS,MAAM,CAACD,YAAY,CAACnI,OAAO,CAAC;UAChC2H,SAAS,CAAC7R,IAAI,CAACqS,YAAY,CAACrI,OAAO,CAAC,CAAC,CAAC;QAC1C;MACJ,CAAC,CAAC;IACN,CAAC;IACDuI,qBAAqB,EAAE,SAAAA,CAASrT,OAAO,EAAEqB,SAAS,EAAE;MAChD,IAAInB,MAAM,GAAGF,OAAO,CAACqB,SAAS,CAAC;MAC/B,IAAI,CAAC,IAAI,KAAKnB,MAAM,IAAI,KAAK,CAAC,KAAKA,MAAM,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACC,IAAI,MAAM1H,0BAA0B,EAAE;QAC9F,IAAI4I,SAAS,IAAI,CAAC,EAAE;UAChBrB,OAAO,CAACmE,MAAM,CAAC9C,SAAS,EAAE,CAAC,CAAC;QAChC;MACJ;MACA,OAAO,IAAI;IACf,CAAC;IACDiS,cAAc,EAAE,SAAAA,CAAStT,OAAO,EAAEqB,SAAS,EAAE3G,MAAM,EAAE;MACjD,IAAIwF,MAAM,GAAGF,OAAO,CAACqB,SAAS,CAAC;MAC/B,IAAI,CAAC3G,MAAM,IAAI,CAACwF,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAK1H,0BAA0B,EAAE;QAClE,OAAO,IAAI,CAAC8a,kBAAkB,CAACvT,OAAO,EAAEqB,SAAS,EAAE,CAAC3G,MAAM,IAAI,CAACwF,MAAM,CAAC;MAC1E;IACJ,CAAC;IACDqT,kBAAkB,EAAE,SAAAA,CAASvT,OAAO,EAAEqB,SAAS,EAAE;MAC7C,IAAIA,SAAS,IAAI,CAAC,EAAE;QAChBrB,OAAO,CAACmE,MAAM,CAAC9C,SAAS,EAAE,CAAC,CAAC;MAChC;MACA,OAAO,IAAI;IACf,CAAC;IACDmS,0BAA0B,EAAE,SAAAA,CAASZ,OAAO,EAAE;MAC1C,IAAIa,YAAY,GAAG,KAAK;MACxB,IAAIzT,OAAO,GAAG,CAAC,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC,CAAC;MACpC,IAAI4T,aAAa,GAAG1T,OAAO,CAACI,MAAM;MAClC,KAAK,IAAImF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqN,OAAO,CAACxS,MAAM,EAAEmF,CAAC,EAAE,EAAE;QACrC,IAAIjK,GAAG,GAAGsX,OAAO,CAACrN,CAAC,CAAC,CAAC3I,MAAM;QAC3B,IAAIlC,MAAM,GAAG,QAAQ,KAAKY,GAAG;QAC7B,IAAI+F,SAAS,GAAG5J,aAAa,CAAC6J,aAAa,CAACsR,OAAO,CAACrN,CAAC,CAAC,CAAC9E,GAAG,EAAET,OAAO,CAAC;QACpE,IAAIE,MAAM,GAAGF,OAAO,CAACqB,SAAS,CAAC;QAC/B,IAAIsS,OAAO,GAAGrY,GAAG,IAAIA,GAAG,YAAYE,KAAK;QACzC,IAAImY,OAAO,EAAE;UACT,IAAIzT,MAAM,EAAE;YACR,IAAI,CAACS,gBAAgB,CAAC;cAClBF,GAAG,EAAEP,MAAM,CAACO,GAAG;cACflF,KAAK,EAAED;YACX,CAAC,CAAC;UACN;UACA,IAAI,CAACoG,sBAAsB,CAACpG,GAAG,CAAC;UAChC,IAAI,IAAI,CAAC+X,qBAAqB,CAACrT,OAAO,EAAEqB,SAAS,CAAC,EAAE;YAChD;UACJ;QACJ,CAAC,MAAM,IAAI,IAAI,CAACiS,cAAc,CAACtT,OAAO,EAAEqB,SAAS,EAAE3G,MAAM,CAAC,EAAE;UACxD+Y,YAAY,GAAG,CAAC/Y,MAAM;QAC1B;MACJ;MACA,IAAIsF,OAAO,CAACI,MAAM,GAAGsT,aAAa,EAAE;QAChC,IAAI,CAACnT,aAAa,CAACpF,2BAA2B,EAAE6E,OAAO,CAAC;MAC5D;MACA,OAAOyT,YAAY;IACvB,CAAC;IACDG,uBAAuB,EAAE,SAAAA,CAAS5T,OAAO,EAAE;MACvC7I,IAAI,CAAC6I,OAAO,EAAE,CAAC6T,CAAC,EAAEC,IAAI,KAAK;QACvB,IAAI;UACA3S,IAAI,EAAEA,IAAI;UACVV,GAAG,EAAEA,GAAG;UACRN,IAAI,EAAEA;QACV,CAAC,GAAG2T,IAAI;QACR,IAAIjT,YAAY,GAAG,IAAI,CAACF,gBAAgB,CAAC;UACrCF,GAAG,EAAEA;QACT,CAAC,CAAC;QACF,IAAIG,MAAM,GAAG;UACTH,GAAG,EAAEA,GAAG;UACRU,IAAI,EAAEA;QACV,CAAC;QACD,IAAIN,YAAY,CAACtF,KAAK,EAAE;UACpBqF,MAAM,CAACrF,KAAK,GAAGsF,YAAY,CAACtF,KAAK;QACrC;QACA,QAAQ4E,IAAI;UACR,KAAK1H,0BAA0B;YAC3B,IAAI,CAACoS,aAAa,CAAC,cAAc,EAAEzT,MAAM,CAAC,CAAC,CAAC,EAAEwJ,MAAM,EAAE;cAClDO,IAAI,EAAEN,YAAY,CAACI;YACvB,CAAC,CAAC,CAAC;YACH;UACJ,KAAKzI,0BAA0B;YAC3B,IAAI,CAACqS,aAAa,CAAC,eAAe,EAAEjK,MAAM,CAAC;YAC3C;UACJ,KAAKtG,0BAA0B;YAC3B,IAAI,CAACuQ,aAAa,CAAC,cAAc,EAAEjK,MAAM,CAAC;QAClD;MACJ,CAAC,CAAC;MACF,IAAI,CAACiK,aAAa,CAAC,SAAS,EAAE;QAC1B7K,OAAO,EAAEA;MACb,CAAC,CAAC;IACN,CAAC;IACDiQ,YAAY,EAAE,SAAAA,CAAA,EAAW;MACrB,IAAI5U,QAAQ,GAAG,IAAIrD,QAAQ,CAAD,CAAC;MAC3B,IAAI,CAACyY,yBAAyB,CAAC,CAAC,CAAC1F,IAAI,CAAC,MAAM;QACxC,IAAI,IAAI,CAACgJ,QAAQ,CAAC,CAAC,EAAE;UACjB,IAAI,CAACC,iBAAiB,CAAC3Y,QAAQ,CAAC;UAChC;QACJ;QACAtD,IAAI,CAAC,IAAI,CAACgb,mBAAmB,CAAC,CAAC,CAAC,CAAChI,IAAI,CAACrQ,MAAM,IAAI;UAC5C,IAAIA,MAAM,EAAE;YACR,IAAI,CAACsZ,iBAAiB,CAAC3Y,QAAQ,EAAE;cAC7BX,MAAM,EAAEA;YACZ,CAAC,CAAC;YACF;UACJ;UACA,IAAI,CAACuZ,OAAO,GAAG,IAAI;UACnB,IAAI,CAACC,kBAAkB,CAAC,CAAC,CAACd,MAAM,CAAC,MAAM;YACnC,IAAI,CAACa,OAAO,GAAG,KAAK;YACpB,IAAI,IAAI,CAAC9L,gBAAgB,EAAE;cACvB,IAAI,CAACC,iBAAiB,CAAC,CAAC;YAC5B;UACJ,CAAC,CAAC,CAAC2C,IAAI,CAAC1P,QAAQ,CAAC2P,OAAO,CAAC,CAACC,IAAI,CAAC5P,QAAQ,CAACK,MAAM,CAAC;QACnD,CAAC,CAAC,CAACuP,IAAI,CAAC5P,QAAQ,CAACK,MAAM,CAAC;MAC5B,CAAC,CAAC,CAACuP,IAAI,CAAC5P,QAAQ,CAACK,MAAM,CAAC;MACxB,OAAOL,QAAQ,CAACyP,OAAO,CAAC,CAAC;IAC7B,CAAC;IACDkJ,iBAAiB,EAAE,SAAAA,CAAS3Y,QAAQ,EAAE;MAClC,IAAI;QACAX,MAAM,EAAEA,MAAM;QACda,KAAK,EAAEA;MACX,CAAC,GAAG6K,SAAS,CAAChG,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,KAAKgG,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACvErO,IAAI,CAAC,IAAI,CAACoc,kBAAkB,CAACzZ,MAAM,CAAC,CAAC,CAACqQ,IAAI,CAAE,YAAW;QACnD1P,QAAQ,CAAC2P,OAAO,CAACzP,KAAK,CAAC;MAC3B,CAAE,CAAC,CAAC0P,IAAI,CAAC5P,QAAQ,CAACK,MAAM,CAAC;IAC7B,CAAC;IACDwY,kBAAkB,EAAE,SAAAA,CAAA,EAAW;MAC3B,IAAItX,MAAM,GAAG,IAAI5E,QAAQ,CAAD,CAAC;MACzB,IAAI4a,OAAO,GAAG,EAAE;MAChB,IAAID,SAAS,GAAG,EAAE;MAClB,IAAIE,WAAW,GAAG,EAAE;MACpB,IAAIuB,UAAU,GAAG,IAAI,CAAC/W,eAAe,CAAC+W,UAAU,CAAC,CAAC;MAClDrc,IAAI,CAAC,IAAI,CAACua,aAAa,CAAC,CAAC,CAAC,CAACvH,IAAI,CAACsJ,KAAK,IAAI;QACrC,IAAI;UACA3Z,MAAM,EAAEA,MAAM;UACdsF,OAAO,EAAEA;QACb,CAAC,GAAGqU,KAAK;QACT,IAAI3Z,MAAM,EAAE;UACR,OAAOkC,MAAM,CAACoO,OAAO,CAAC,CAAC,CAACF,OAAO,CAAC,CAAC;QACrC;QACA,IAAI,CAAC4H,eAAe,CAACC,SAAS,EAAEC,OAAO,EAAEC,WAAW,EAAE7S,OAAO,CAAC;QAC9D,IAAI2S,SAAS,CAACvS,MAAM,EAAE;UAClB,IAAI,CAAC+H,gBAAgB,GAAG,IAAI;UAC5B,IAAI,KAAKiM,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACE,YAAY,CAAC,CAAC;UACjFvc,IAAI,CAAC,GAAG4a,SAAS,CAAC,CAAC5H,IAAI,CAAC,MAAM;YAC1B,IAAI,IAAI,CAACyI,0BAA0B,CAACZ,OAAO,CAAC,EAAE;cAC1C,IAAI,CAAC2B,UAAU,CAAC1B,WAAW,EAAE7S,OAAO,EAAEpD,MAAM,CAAC;YACjD,CAAC,MAAM;cACH,IAAI,KAAKwX,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACI,UAAU,CAAC,CAAC;cAC/E5X,MAAM,CAACoO,OAAO,CAAC,CAAC;YACpB;UACJ,CAAC,CAAC,CAACC,IAAI,CAAC1P,KAAK,IAAI;YACb,IAAI,KAAK6Y,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACI,UAAU,CAAC,CAAC;YAC/E5X,MAAM,CAACoO,OAAO,CAACzP,KAAK,CAAC;UACzB,CAAC,CAAC;UACF,OAAOqB,MAAM,CAACwW,MAAM,CAAC,MAAM;YACvB,IAAI,CAACjL,gBAAgB,GAAG,IAAI;UAChC,CAAC,CAAC,CAAC2C,OAAO,CAAC,CAAC;QAChB;QACA,IAAI,CAAC2J,aAAa,CAAC7X,MAAM,CAAC;MAC9B,CAAC,CAAC,CAACqO,IAAI,CAACrO,MAAM,CAAClB,MAAM,CAAC;MACtB,OAAOkB,MAAM,CAACkO,OAAO,CAAC,CAAC;IAC3B,CAAC;IACD4J,gBAAgB,EAAE,SAAAA,CAAS1U,OAAO,EAAE;MAChC,IAAI,CAACsP,iBAAiB,CAAC,CAAC;IAC5B,CAAC;IACDiF,UAAU,EAAE,SAAAA,CAAS1B,WAAW,EAAE7S,OAAO,EAAE3E,QAAQ,EAAE;MACjD,IAAI+Y,UAAU,GAAG,IAAI,CAAC/W,eAAe,CAAC+W,UAAU,CAAC,CAAC;MAClD,IAAI,CAACM,gBAAgB,CAAC1U,OAAO,CAAC;MAC9B,IAAI,KAAKoU,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACI,UAAU,CAAC,CAAC;MAC/E,IAAI,CAACG,qBAAqB,CAAC9B,WAAW,EAAE7S,OAAO,EAAE3E,QAAQ,CAAC;IAC9D,CAAC;IACDoZ,aAAa,EAAE,SAAAA,CAAS7X,MAAM,EAAE;MAC5B,IAAI,CAACiO,aAAa,CAAC,SAAS,EAAE;QAC1B7K,OAAO,EAAE;MACb,CAAC,CAAC;MACF,IAAI,CAACgU,iBAAiB,CAACpX,MAAM,CAAC;IAClC,CAAC;IACD+X,qBAAqB,EAAE,SAAAA,CAAS9B,WAAW,EAAE7S,OAAO,EAAE3E,QAAQ,EAAE;MAC5D,IAAIgM,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIuX,WAAW,GAAG,IAAI,CAACjW,MAAM,CAAC,qBAAqB,CAAC;MACpD,IAAIkW,aAAa,GAAG,SAAS,KAAKD,WAAW,IAAI,SAAS,KAAKA,WAAW;MAC1E,IAAI,CAACC,aAAa,EAAE;QAChBxN,cAAc,CAACvG,IAAI,CAAC+R,WAAW,CAAC;MACpC;MACA9a,IAAI,CAACsP,cAAc,CAACQ,OAAO,CAAC;QACxBiN,SAAS,EAAED,aAAa;QACxBE,MAAM,EAAEF,aAAa;QACrBG,IAAI,EAAE,SAAS,KAAKJ,WAAW;QAC/BK,WAAW,EAAE,IAAI,CAACtW,MAAM,CAAC,oBAAoB;MACjD,CAAC,CAAC,CAAC,CAACyU,MAAM,CAAC,MAAM;QACb,IAAI,CAACQ,uBAAuB,CAAC5T,OAAO,CAAC;MACzC,CAAC,CAAC,CAAC+K,IAAI,CAAC,MAAM;QACV,IAAI,CAACiJ,iBAAiB,CAAC3Y,QAAQ,CAAC;MACpC,CAAC,CAAC,CAAC4P,IAAI,CAAC1P,KAAK,IAAI;QACb,IAAI,CAACyY,iBAAiB,CAAC3Y,QAAQ,EAAE;UAC7BE,KAAK,EAAEA;QACX,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IACDwY,QAAQ,EAAE,SAAAA,CAAA,EAAW;MACjB,OAAO,IAAI,CAACE,OAAO;IACvB,CAAC;IACD7V,iBAAiB,EAAE,SAAAA,CAAA,EAAW;MAC1B,IAAI8W,mBAAmB,GAAG,IAAI,CAACC,oBAAoB,CAAC,CAAC;MACrD,IAAIC,QAAQ,GAAG,IAAI,CAACzW,MAAM,CAAC,kBAAkB,CAAC;MAC9C,IAAI4E,QAAQ,GAAGzJ,kBAAkB,IAAIsb,QAAQ,GAAG,GAAG,GAAGrb,6BAA6B,GAAG,EAAE,CAAC;MACzF,IAAI,CAACoD,kBAAkB,CAACkY,gBAAgB,CAAC;QACrClV,IAAI,EAAE,SAAS;QACfhE,OAAO,EAAE,MAAM;QACfiG,OAAO,EAAE8S,mBAAmB;QAC5B3R,QAAQ,EAAEA,QAAQ;QAClBhE,KAAK,EAAE,MAAM;QACb+V,SAAS,EAAE,QAAQ;QACnBC,YAAY,EAAE,IAAI,CAAChR,2BAA2B,CAAC,CAAC;QAChDiR,aAAa,EAAE;MACnB,CAAC,CAAC;MACF,IAAI,CAACrY,kBAAkB,CAACsY,YAAY,CAAC,cAAc,EAAE;QACjDrT,OAAO,EAAE8S,mBAAmB;QAC5B3R,QAAQ,EAAEA;MACd,CAAC,CAAC;IACN,CAAC;IACD4R,oBAAoB,EAAE,SAAAA,CAAA,EAAW;MAC7B,IAAIhS,cAAc,GAAG,IAAI,CAACxE,MAAM,CAAC,SAAS,CAAC;MAC3C,OAAOwE,cAAc,CAACjB,aAAa;IACvC,CAAC;IACDwT,qBAAqB,EAAE,SAAAA,CAAA,EAAW;MAC9B,IAAIpQ,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC,CAAC;MAClC,IAAIqQ,gBAAgB,GAAG5e,SAAS,CAAC,IAAI,CAAC4H,MAAM,CAAC,oBAAoB,CAAC,CAAC;MACnE,OAAO,EAAEgX,gBAAgB,IAAIrQ,UAAU,CAAC;IAC5C,CAAC;IACDjH,kBAAkB,EAAE,SAAAA,CAAA,EAAW;MAC3B,IAAIuX,WAAW,GAAG,IAAI,CAACrY,OAAO,CAAC,aAAa,CAAC;MAC7C,IAAIsY,gBAAgB,GAAG,IAAI,CAACH,qBAAqB,CAAC,CAAC;MACnD,IAAIE,WAAW,EAAE;QACbA,WAAW,CAACE,sBAAsB,CAAC,YAAY,EAAED,gBAAgB,CAAC;QAClED,WAAW,CAACE,sBAAsB,CAAC,cAAc,EAAED,gBAAgB,CAAC;MACxE;IACJ,CAAC;IACDE,cAAc,EAAE,SAAAA,CAASC,QAAQ,EAAE;MAC/BA,QAAQ,IAAIA,QAAQ,CAACC,QAAQ,CAAC9b,aAAa,CAAC;IAChD,CAAC;IACD+b,+BAA+B,EAAE/d,IAAI;IACrCiP,cAAc,EAAE,SAAAA,CAAA,EAAW;MACvB,IAAIpH,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;MAC/B,IAAIc,MAAM,GAAG;QACTlG,MAAM,EAAE,KAAK;QACbsF,OAAO,EAAEA;MACb,CAAC;MACD,IAAI,CAAC6K,aAAa,CAAC,iBAAiB,EAAEjK,MAAM,CAAC;MAC7C,IAAI,CAACA,MAAM,CAAClG,MAAM,EAAE;QAChB,IAAI,CAACyb,mBAAmB,CAAC,CAAC;QAC1B,IAAI,CAACtL,aAAa,CAAC,gBAAgB,EAAE;UACjC7K,OAAO,EAAEA;QACb,CAAC,CAAC;MACN;IACJ,CAAC;IACDmW,mBAAmB,EAAE,SAAAA,CAAA,EAAW;MAC5B,IAAIrS,QAAQ,GAAG,IAAI,CAAC2E,uBAAuB,CAAC,CAAC;MAC7C,IAAI,CAAC2N,qBAAqB,CAAC,CAAC;MAC5B,IAAI,CAAClZ,IAAI,CAAC,CAAC;MACX,IAAI,CAACmD,YAAY,CAAC,CAAC;MACnB,IAAI,CAACwG,oBAAoB,CAAC,CAAC;MAC3B,IAAI,CAACC,gBAAgB,CAAC,CAAC;MACvB,IAAI,CAACuP,oBAAoB,CAACvS,QAAQ,CAAC;IACvC,CAAC;IACDuS,oBAAoB,EAAE,SAAAA,CAASvS,QAAQ,EAAE;MACrC,IAAIuD,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzCgK,cAAc,CAACG,WAAW,CAAC;QACvBC,kBAAkB,EAAE,IAAI,CAAC9I,MAAM,CAAC,oBAAoB;MACxD,CAAC,CAAC;IACN,CAAC;IACD2X,cAAc,EAAEne,IAAI;IACpBoe,WAAW,EAAE,SAAAA,CAAA,EAAW;MACpB,OAAO,IAAI,CAACjR,UAAU,CAAC,CAAC;IAC5B,CAAC;IACD2E,MAAM,EAAE,SAAAA,CAASD,UAAU,EAAE;MACzB,IAAI3C,cAAc,GAAG,IAAI,CAAChK,eAAe;MACzC,IAAIgK,cAAc,IAAI,IAAI,CAACS,UAAU,KAAKT,cAAc,CAACuC,SAAS,CAAC,CAAC,EAAE;QAClE,IAAI,SAAS,KAAKI,UAAU,EAAE;UAC1B,IAAI,CAACnC,OAAO,CAAC;YACT2O,aAAa,EAAE;UACnB,CAAC,CAAC;QACN;QACA,IAAI,CAAC1O,UAAU,GAAGT,cAAc,CAACuC,SAAS,CAAC,CAAC;MAChD;MACA,IAAI,CAACvL,kBAAkB,CAAC,CAAC;IAC7B,CAAC;IACDoY,gCAAgC,EAAE,SAAAA,CAASpX,GAAG,EAAEqX,cAAc,EAAE;MAC5D,OAAOA,cAAc,GAAG,EAAE,GAAG,CAACrX,GAAG,CAACyE,QAAQ,CAAC;IAC/C,CAAC;IACD6S,WAAW,EAAE,SAAAA,CAAStb,QAAQ,EAAE;MAC5B,IAAI,IAAI,CAACqC,UAAU,CAACkB,OAAO,CAACvD,QAAQ,CAAC,GAAG,CAAC,EAAE;QACvC,IAAI,CAACqC,UAAU,CAACoD,IAAI,CAACzF,QAAQ,CAAC;QAC9BA,QAAQ,CAAC+X,MAAM,CAAC,MAAM;UAClB,IAAIrW,KAAK,GAAG,IAAI,CAACW,UAAU,CAACkB,OAAO,CAACvD,QAAQ,CAAC;UAC7C,IAAI0B,KAAK,IAAI,CAAC,EAAE;YACZ,IAAI,CAACW,UAAU,CAACyG,MAAM,CAACpH,KAAK,EAAE,CAAC,CAAC;UACpC;QACJ,CAAC,CAAC;MACN;IACJ,CAAC;IACD6Z,cAAc,EAAE,SAAAA,CAAS7X,OAAO,EAAEI,KAAK,EAAEmE,IAAI,EAAE;MAC3C,IAAIuT,YAAY;MAChB,IAAI3D,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIjS,OAAO,GAAG,IAAI,MAAM4V,YAAY,GAAG9X,OAAO,CAACM,GAAG,CAAC,IAAI,KAAK,CAAC,KAAKwX,YAAY,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAC1V,IAAI;MAC3G,IAAI2V,MAAM,GAAG/X,OAAO,CAAC0B,GAAG;MACxB,IAAIpF,QAAQ,GAAG,IAAIrD,QAAQ,CAAD,CAAC;MAC3B,IAAI,KAAK,CAAC,KAAK8e,MAAM,EAAE;QACnB/X,OAAO,CAACI,KAAK,GAAGA,KAAK;QACrB,IAAI4X,kBAAkB,GAAG9e,WAAW,CAAC8G,OAAO,CAAChD,MAAM,CAACib,YAAY,CAAC9D,OAAO,EAAE/T,KAAK,EAAE/H,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE6J,OAAO,CAAC,EAAEqC,IAAI,CAAC,CAAC;QAClHyT,kBAAkB,CAAChM,IAAI,CAAE,YAAW;UAChC1P,QAAQ,CAAC2P,OAAO,CAAC;YACb7J,IAAI,EAAE+R,OAAO;YACbzS,GAAG,EAAEqW,MAAM;YACX7V,OAAO,EAAEA,OAAO;YAChBd,IAAI,EAAE7F;UACV,CAAC,CAAC;QACN,CAAE,CAAC,CAAC2Q,IAAI,CAAC7P,oBAAoB,CAACC,QAAQ,CAAC,CAAC,CAAC4P,IAAI,CAAC3P,GAAG,IAAI,IAAI,CAACoG,sBAAsB,CAACpG,GAAG,CAAC,CAAC;QACtF,IAAIvE,SAAS,CAACuM,IAAI,CAAC,IAAIvE,OAAO,CAAChD,MAAM,CAACkb,eAAe,EAAE;UACnDlY,OAAO,CAAChD,MAAM,CAACkb,eAAe,CAAC9X,KAAK,CAAC,GAAGmE,IAAI;QAChD;QACA,IAAI,CAAC4T,gBAAgB,CAACnY,OAAO,CAAC;QAC9B,IAAI,CAAC4X,WAAW,CAACtb,QAAQ,CAAC;MAC9B;MACA,OAAOA,QAAQ;IACnB,CAAC;IACD6b,gBAAgB,EAAE,SAAAA,CAASnY,OAAO,EAAE;MAChC,IAAIA,OAAO,CAACoY,MAAM,EAAE;QAChB,IAAI9P,cAAc,GAAG,IAAI,CAAChK,eAAe;QACzC,IAAIyG,QAAQ,GAAGuD,cAAc,CAAC7B,gBAAgB,CAACzG,OAAO,CAAC0B,GAAG,CAAC;QAC3D,IAAIpB,GAAG,GAAGgI,cAAc,CAACwE,cAAc,CAAC,CAAC,CAAC/H,QAAQ,CAAC;QACnD,IAAIzE,GAAG,EAAE;UACLN,OAAO,CAACM,GAAG,CAAC8X,MAAM,GAAG9X,GAAG,CAAC8X,MAAM;UAC/BpY,OAAO,CAACoY,MAAM,GAAG9X,GAAG,CAAC8X,MAAM;QAC/B;QACApY,OAAO,CAACoY,MAAM,CAACpY,OAAO,CAAC+F,WAAW,CAAC,GAAG/F,OAAO,CAACI,KAAK;MACvD;IACJ,CAAC;IACDiY,gBAAgB,EAAE,SAAAA,CAASrY,OAAO,EAAEI,KAAK,EAAEmE,IAAI,EAAE+T,cAAc,EAAE;MAC7D,IAAIP,MAAM,GAAG/X,OAAO,CAAC0B,GAAG;MACxB,IAAIpF,QAAQ,GAAG,IAAIrD,QAAQ,CAAD,CAAC;MAC3B,IAAI,KAAK,CAAC,KAAK8e,MAAM,EAAE;QACnB,IAAI,CAACzZ,eAAe,CAACkL,SAAS,CAAC,OAAO,CAAC;MAC3C;MACA,IAAIxJ,OAAO,CAAChD,MAAM,CAACib,YAAY,EAAE;QAC7B,IAAI,CAACJ,cAAc,CAAC7X,OAAO,EAAEI,KAAK,EAAEmE,IAAI,CAAC,CAACyH,IAAI,CAACnK,MAAM,IAAI;UACrD7I,IAAI,CAAC,IAAI,CAACuf,YAAY,CAACvY,OAAO,EAAE6B,MAAM,EAAEyW,cAAc,CAAC,CAAC,CAACjE,MAAM,CAAC,MAAM;YAClE/X,QAAQ,CAAC2P,OAAO,CAAC,CAAC;UACtB,CAAC,CAAC;QACN,CAAC,CAAC;MACN,CAAC,MAAM;QACH3P,QAAQ,CAAC2P,OAAO,CAAC,CAAC;MACtB;MACA,OAAO3P,QAAQ,CAACyP,OAAO,CAAC,CAAC;IAC7B,CAAC;IACDyM,+BAA+B,EAAE,SAAAA,CAASxY,OAAO,EAAE;MAC/C,IAAI,IAAI,CAACwX,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC1N,UAAU,CAAC9J,OAAO,CAAC+E,QAAQ,EAAE/E,OAAO,CAAC+F,WAAW,CAAC,EAAE;QAC/E,IAAI,CAACsD,iBAAiB,CAAC,CAAC;QACxB,IAAI,CAACoP,cAAc,CAACzY,OAAO,CAACM,GAAG,EAAE,IAAI,CAAC;QACtC,OAAO,IAAI;MACf;IACJ,CAAC;IACDoY,cAAc,EAAE,SAAAA,CAAS1b,MAAM,EAAE;MAC7B,IAAIgJ,cAAc,GAAG,IAAI,CAAC5H,kBAAkB,CAAC6H,iBAAiB,CAAC,CAAC;MAChE,IAAI,CAACjJ,MAAM,EAAE;QACTA,MAAM,GAAG,IAAI,CAACgT,cAAc,CAAC,CAAC;MAClC;MACA,IAAI2I,oBAAoB,GAAG3b,MAAM,IAAIA,MAAM,CAACib,YAAY,KAAKjb,MAAM,CAAC4b,mBAAmB;MACvF,IAAIC,0BAA0B,GAAG7S,cAAc,CAAClI,IAAI,CAACgb,aAAa,IAAIA,aAAa,CAACC,kBAAkB,KAAKD,aAAa,CAACE,yBAAyB,CAAC;MACnJ,OAAOL,oBAAoB,IAAIE,0BAA0B;IAC7D,CAAC;IACDN,YAAY,EAAE,SAAAA,CAASvY,OAAO,EAAE6B,MAAM,EAAEyW,cAAc,EAAE;MACpD,IAAIW,aAAa,GAAGvhB,QAAQ,CAAC,CAAC,CAAC,EAAEsI,OAAO,EAAE;QACtCsY,cAAc,EAAEA;MACpB,CAAC,CAAC;MACF,IAAI,CAAC/J,UAAU,CAAC1M,MAAM,EAAEoX,aAAa,CAAC;MACtC,IAAI,CAAC3Z,kBAAkB,CAAC,CAAC;MACzB,OAAO,IAAI,CAAC4Z,gBAAgB,CAAClZ,OAAO,EAAEiZ,aAAa,CAACX,cAAc,CAAC;IACvE,CAAC;IACDY,gBAAgB,EAAE,SAAAA,CAASlZ,OAAO,EAAEsY,cAAc,EAAE;MAChD,IAAIK,oBAAoB,GAAG3Y,OAAO,CAAChD,MAAM,CAACib,YAAY,KAAKjY,OAAO,CAAChD,MAAM,CAAC4b,mBAAmB;MAC7F,IAAItY,GAAG,GAAGN,OAAO,CAACM,GAAG;MACrB,IAAIA,GAAG,EAAE;QACL,IAAIgY,cAAc,IAAIK,oBAAoB,EAAE;UACxC,IAAI,CAACF,cAAc,CAACnY,GAAG,EAAEgY,cAAc,EAAEK,oBAAoB,CAAC;QAClE,CAAC,MAAM,IAAIrY,GAAG,CAAC4K,MAAM,EAAE;UACnB5K,GAAG,CAAC4K,MAAM,CAAC,CAAC;QAChB;MACJ;IACJ,CAAC;IACDiO,kBAAkB,EAAE,SAAAA,CAAS7Y,GAAG,EAAEqX,cAAc,EAAEgB,oBAAoB,EAAE;MACpE,IAAI,CAACra,eAAe,CAACmK,WAAW,CAAC;QAC7BwC,UAAU,EAAE,QAAQ;QACpB8D,UAAU,EAAE,IAAI,CAAC2I,gCAAgC,CAACpX,GAAG,EAAEqX,cAAc;MACzE,CAAC,CAAC;IACN,CAAC;IACDc,cAAc,EAAE,SAAAA,CAASnY,GAAG,EAAEgY,cAAc,EAAEK,oBAAoB,EAAE;MAChE,IAAIL,cAAc,EAAE;QAChB,IAAI,CAACc,qBAAqB,CAAC9Y,GAAG,EAAEgY,cAAc,EAAEK,oBAAoB,CAAC;MACzE,CAAC,MAAM;QACH,IAAI,CAACU,mBAAmB,CAAC/Y,GAAG,EAAEqY,oBAAoB,CAAC;MACvD;IACJ,CAAC;IACDS,qBAAqB,EAAE,SAAAA,CAAS9Y,GAAG,EAAEgY,cAAc,EAAEK,oBAAoB,EAAE;MACvE,IAAI,CAACQ,kBAAkB,CAAC7Y,GAAG,EAAE,CAACgY,cAAc,EAAEK,oBAAoB,CAAC;MACnE,IAAI,CAACW,4BAA4B,CAAChZ,GAAG,EAAEqY,oBAAoB,CAAC;MAC5D,IAAI,CAACL,cAAc,EAAE;QACjB,IAAI,CAACjP,iBAAiB,CAAC,CAAC;MAC5B;IACJ,CAAC;IACDgQ,mBAAmB,EAAE,SAAAA,CAAS/Y,GAAG,EAAEqY,oBAAoB,EAAE;MACrD,IAAIrc,QAAQ,GAAG,IAAIrD,QAAQ,CAAD,CAAC;MAC3B,IAAI,CAAC2e,WAAW,CAACtb,QAAQ,CAAC;MAC1BwI,UAAU,CAAC,MAAM;QACb,IAAIyU,eAAe;QACnB,IAAIC,gBAAgB,GAAG,CAAC,IAAI,MAAMD,eAAe,GAAG,IAAI,CAACE,SAAS,CAAC,IAAI,KAAK,CAAC,KAAKF,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACG,OAAO,CAAC,CAAC,KAAK,IAAI,CAACla,SAAS,CAACyX,QAAQ,CAAC,CAAC,CAAC0C,GAAG,CAAC,CAAC,CAAC;QAC3K,IAAIC,eAAe,GAAGjiB,CAAC,CAACC,UAAU,CAACiiB,gBAAgB,CAACL,gBAAgB,CAAC,CAAC;QACtE,IAAIzT,WAAW,GAAG,IAAI,CAACxH,SAAS,CAACub,YAAY,CAACF,eAAe,EAAEtZ,GAAG,CAACyE,QAAQ,CAAC;QAC5E,IAAIgV,cAAc,GAAGH,eAAe,CAACD,GAAG,CAAC,CAAC,CAAC;QAC3C,IAAIK,cAAc,GAAGthB,aAAa,CAACuhB,iBAAiB,CAACF,cAAc,CAAC;QACpE,IAAI,CAACZ,kBAAkB,CAAC7Y,GAAG,EAAE,KAAK,EAAEqY,oBAAoB,CAAC;QACzD,IAAI,CAACW,4BAA4B,CAAChZ,GAAG,EAAEqY,oBAAoB,CAAC;QAC5D,IAAI5S,WAAW,IAAI,CAAC,EAAE;UAClB,IAAImU,YAAY,GAAG,IAAI,CAAC3b,SAAS,CAAC6H,eAAe,CAAC9F,GAAG,CAACyE,QAAQ,EAAEgB,WAAW,CAAC;UAC5E,IAAI,CAACyJ,kBAAkB,CAAC0K,YAAY,EAAE,MAAM;YACxCpV,UAAU,CAAC,MAAM;cACb,IAAIqV,qBAAqB;cACzBJ,cAAc,GAAGniB,UAAU,CAACiiB,gBAAgB,CAAC,IAAI,MAAMM,qBAAqB,GAAG,IAAI,CAAC3a,SAAS,CAACyX,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKkD,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACR,GAAG,CAAC,CAAC,CAAC,CAAC;cACtL,IAAIK,cAAc,CAACI,cAAc,IAAI,CAAC,EAAE;gBACpC1hB,aAAa,CAAC2hB,iBAAiB,CAACN,cAAc,EAAEC,cAAc,CAAC;cACnE;YACJ,CAAC,CAAC;UACN,CAAC,CAAC;QACN;QACA1d,QAAQ,CAAC2P,OAAO,CAAC,CAAC;MACtB,CAAC,CAAC;IACN,CAAC;IACDqN,4BAA4B,EAAElgB,IAAI;IAClCmV,UAAU,EAAE,SAAAA,CAAS+L,YAAY,EAAEta,OAAO,EAAE;MACxC,IAAIua,gBAAgB;MACpB,IAAIja,GAAG,GAAG,IAAI,KAAKN,OAAO,IAAI,KAAK,CAAC,KAAKA,OAAO,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACM,GAAG;MACvE,IAAIW,OAAO,GAAG,CAAC,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC,CAAC;MACpC,IAAI/C,KAAK,GAAGtF,aAAa,CAAC6J,aAAa,CAAC+X,YAAY,CAAC5Y,GAAG,EAAET,OAAO,CAAC;MAClE,IAAIjD,KAAK,GAAG,CAAC,EAAE;QACXA,KAAK,GAAGiD,OAAO,CAACI,MAAM;QACtB,IAAI,CAACO,gBAAgB,CAAC;UAClBF,GAAG,EAAE4Y,YAAY,CAAC5Y,GAAG;UACrBQ,OAAO,EAAEoY,YAAY,CAACpY;QAC1B,CAAC,CAAC;QACF,OAAOoY,YAAY,CAACpY,OAAO;QAC3BjB,OAAO,CAACc,IAAI,CAACuY,YAAY,CAAC;MAC9B;MACA,IAAInZ,MAAM,GAAGzJ,QAAQ,CAAC,CAAC,CAAC,EAAEuJ,OAAO,CAACjD,KAAK,CAAC,CAAC;MACzC,IAAImD,MAAM,EAAE;QACR,IAAImZ,YAAY,CAAClY,IAAI,EAAE;UACnBjB,MAAM,CAACiB,IAAI,GAAGzJ,uBAAuB,CAACwI,MAAM,CAACiB,IAAI,EAAEkY,YAAY,CAAClY,IAAI,CAAC;QACzE;QACA,IAAI,CAAC,CAACjB,MAAM,CAACC,IAAI,IAAI,CAACkZ,YAAY,CAAClY,IAAI,KAAKkY,YAAY,CAAClZ,IAAI,EAAE;UAC3DD,MAAM,CAACC,IAAI,GAAGkZ,YAAY,CAAClZ,IAAI;QACnC;QACA,IAAId,GAAG,EAAE;UACLA,GAAG,CAAC4B,OAAO,GAAG,IAAI,CAACF,WAAW,CAAC1B,GAAG,CAACoB,GAAG,CAAC;UACvCpB,GAAG,CAAC8B,IAAI,GAAGzJ,uBAAuB,CAAC2H,GAAG,CAAC8B,IAAI,EAAEkY,YAAY,CAAClY,IAAI,CAAC;QACnE;MACJ;MACAnB,OAAO,CAACjD,KAAK,CAAC,GAAGmD,MAAM;MACvB,IAAI,CAACK,aAAa,CAACpF,2BAA2B,EAAE6E,OAAO,CAAC;MACxD,IAAIjB,OAAO,IAAImB,MAAM,MAAM,IAAI,MAAMoZ,gBAAgB,GAAG,IAAI,CAACxZ,UAAU,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKwZ,gBAAgB,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACvc,KAAK,CAAC,CAAC,EAAE;QAC3IgC,OAAO,CAACsY,cAAc,GAAG,IAAI;MACjC;MACA,OAAOnX,MAAM;IACjB,CAAC;IACDqZ,wBAAwB,EAAE,SAAAA,CAAS1d,WAAW,EAAEE,MAAM,EAAE;MACpD,OAAOA,MAAM,CAACyd,gBAAgB,IAAI,IAAI,CAAC3a,yBAAyB,CAAC,CAAC;IACtE,CAAC;IACD4a,iBAAiB,EAAE,SAAAA,CAAS1a,OAAO,EAAE;MACjC,IAAIhD,MAAM,GAAGgD,OAAO,CAAChD,MAAM;MAC3B,IAAI+H,QAAQ,GAAG/E,OAAO,CAACM,GAAG,IAAIN,OAAO,CAACM,GAAG,CAACyE,QAAQ;MAClD,IAAI4V,QAAQ;MACZ,IAAIC,SAAS,GAAG,IAAI,CAAChV,kBAAkB,CAAC,CAAC;MACzC,IAAIiV,YAAY,GAAG,IAAI,CAAChe,SAAS,CAACkI,QAAQ,CAAC;MAC3C,IAAI+V,aAAa,GAAG,IAAI,CAAChR,UAAU,CAAC/E,QAAQ,EAAE/E,OAAO,CAAC+F,WAAW,CAAC;MAClE,IAAIgV,mBAAmB;MACvB,IAAI,CAAC/d,MAAM,CAACM,gBAAgB,IAAIN,MAAM,CAACib,YAAY,KAAK4C,YAAY,IAAI7d,MAAM,CAACC,YAAY,IAAI6d,aAAa,CAAC,MAAM,MAAM,KAAK9a,OAAO,CAACzC,OAAO,IAAI,gBAAgB,KAAKyC,OAAO,CAACzC,OAAO,CAAC,IAAI,CAACP,MAAM,CAACI,OAAO,EAAE;QACvM,IAAI4d,aAAa,GAAG,IAAI,CAACA,aAAa,CAAChb,OAAO,CAAC;QAC/C,IAAI,CAAC,CAACgb,aAAa,IAAIH,YAAY,KAAK7d,MAAM,CAACC,YAAY,IAAI6d,aAAa,MAAMD,YAAY,IAAI,CAACD,SAAS,CAAC,EAAE;UAC3G,IAAI5d,MAAM,CAACM,gBAAgB,IAAI,CAACsd,SAAS,EAAE;YACvCG,mBAAmB,GAAG;cAClBpf,MAAM,EAAE,KAAK;cACb+F,GAAG,EAAE1B,OAAO,CAACM,GAAG,CAACmL,QAAQ,GAAG,KAAK,CAAC,GAAGzL,OAAO,CAACM,GAAG,CAACoB,GAAG;cACpDU,IAAI,EAAEpC,OAAO,CAACM,GAAG,CAAC8B,IAAI;cACtBpF,MAAM,EAAEA;YACZ,CAAC;YACD,IAAI,CAACyS,eAAe,CAACsL,mBAAmB,CAAC;UAC7C;UACA,IAAI,CAACA,mBAAmB,IAAI,CAACA,mBAAmB,CAACpf,MAAM,EAAE;YACrDqE,OAAO,CAACK,QAAQ,GAAG,CAACD,KAAK,EAAEmE,IAAI,KAAK;cAChC,IAAI,CAAC8T,gBAAgB,CAACrY,OAAO,EAAEI,KAAK,EAAEmE,IAAI,CAAC;YAC/C,CAAC;UACL;QACJ;QACAoW,QAAQ,GAAG3d,MAAM,CAACyd,gBAAgB,IAAI,IAAI,CAAC3a,yBAAyB,CAAC,CAAC;MAC1E,CAAC,MAAM,IAAI,QAAQ,KAAK9C,MAAM,CAACI,OAAO,IAAI,QAAQ,KAAK4C,OAAO,CAACzC,OAAO,IAAIsd,YAAY,EAAE;QACpFF,QAAQ,GAAG,IAAI,KAAK,IAAI,IAAI,KAAK,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI,CAACM,mBAAmB,CAACjb,OAAO,CAAC;MAC5F;MACA,OAAO2a,QAAQ;IACnB,CAAC;IACDpV,aAAa,EAAE,SAAAA,CAASD,UAAU,EAAEvH,MAAM,EAAEiC,OAAO,EAAEmB,MAAM,EAAE;MACzD,IAAI+Z,IAAI,GAAGlf,eAAe,CAAC+B,MAAM,CAACxF,IAAI,CAAC;MACvC,IAAI8d,QAAQ,GAAG,IAAI,CAACzW,MAAM,CAAC,kBAAkB,CAAC;MAC9C,IAAIub,6BAA6B,GAAG,IAAI,CAACvb,MAAM,CAAC,+BAA+B,CAAC;MAChF,IAAIwb,OAAO,GAAGzjB,CAAC,CAAC,KAAK,CAAC,CAAC0jB,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAACnE,QAAQ,CAACtc,UAAU,CAAC,CAACsc,QAAQ,CAACnZ,MAAM,CAACyG,QAAQ,CAAC;MACvF,IAAIzG,MAAM,CAAC4c,QAAQ,IAAIQ,6BAA6B,EAAE;QAClD,IAAI,CAAC5c,SAAS,CAAC+c,cAAc,CAAChW,UAAU,EAAEvH,MAAM,CAAC4c,QAAQ,EAAE3a,OAAO,EAAE,IAAI,CAAC;MAC7E,CAAC,MAAM;QACH,IAAIjC,MAAM,CAAC4c,QAAQ,EAAE;UACjBS,OAAO,GAAGzjB,CAAC,CAAC,QAAQ,CAAC,CAACuf,QAAQ,CAACnZ,MAAM,CAACyG,QAAQ,CAAC;QACnD,CAAC,MAAM,IAAI6R,QAAQ,IAAI6E,IAAI,IAAInd,MAAM,CAACmd,IAAI,EAAE;UACxCA,IAAI,GAAGnd,MAAM,CAACmd,IAAI,IAAIA,IAAI;UAC1B,IAAIK,QAAQ,GAAGliB,SAAS,CAACmiB,kBAAkB,CAACN,IAAI,CAAC;UACjD,IAAI,OAAO,KAAKK,QAAQ,IAAI,KAAK,KAAKA,QAAQ,EAAE;YAC5CH,OAAO,GAAG/hB,SAAS,CAACoiB,iBAAiB,CAACP,IAAI,CAAC,CAAChE,QAAQ,CAACnZ,MAAM,CAACyG,QAAQ,CAAC;UACzE,CAAC,MAAM;YACH4W,OAAO,CAAClE,QAAQ,CAAC,SAAS,IAAI,QAAQ,KAAKqE,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC,GAAGL,IAAI,CAAC,CAACG,IAAI,CAAC,OAAO,EAAEtd,MAAM,CAACwG,IAAI,CAAC;UACvG;UACA6W,OAAO,CAAClE,QAAQ,CAAC,cAAc,CAAC;UAChC5R,UAAU,CAAC4R,QAAQ,CAAClc,6BAA6B,CAAC;UAClD,IAAI0gB,gBAAgB,GAAG,IAAI,CAACC,0BAA0B,CAAC,CAAC,CAAC5d,MAAM,CAACxF,IAAI,CAAC;UACrEmjB,gBAAgB,IAAIN,OAAO,CAACC,IAAI,CAAC,YAAY,EAAEviB,mBAAmB,CAAC8iB,MAAM,CAACF,gBAAgB,CAAC,CAAC;QAChG,CAAC,MAAM;UACHN,OAAO,CAAC7W,IAAI,CAACxG,MAAM,CAACwG,IAAI,CAAC;QAC7B;QACA,IAAIvM,SAAS,CAAC+F,MAAM,CAAC8d,IAAI,CAAC,EAAE;UACxBT,OAAO,CAACC,IAAI,CAAC,OAAO,EAAEtd,MAAM,CAAC8d,IAAI,CAAC;QACtC;QACA,IAAI,IAAI,CAACtY,iBAAiB,CAACxF,MAAM,EAAEiC,OAAO,CAAC,EAAE;UACzCob,OAAO,CAAClE,QAAQ,CAAC,mBAAmB,CAAC;QACzC,CAAC,MAAM,IAAI,CAACnZ,MAAM,CAAC4c,QAAQ,IAAI5c,MAAM,CAAC0G,OAAO,EAAE;UAC3C5M,YAAY,CAACikB,EAAE,CAACV,OAAO,EAAExiB,YAAY,CAAC,OAAO,EAAEyC,iBAAiB,CAAC,EAAE,IAAI,CAAC8D,YAAY,CAAE,UAASuF,CAAC,EAAE;YAC9F,IAAIqX,eAAe;YACnB,IAAI,MAAMA,eAAe,GAAGhe,MAAM,CAAC0G,OAAO,CAAC,IAAI,KAAK,CAAC,KAAKsX,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACzY,IAAI,CAACvF,MAAM,EAAE1F,MAAM,CAAC,CAAC,CAAC,EAAEqM,CAAC,EAAE;cAC5HpE,GAAG,EAAEN,OAAO,CAACM,GAAG;cAChBtD,MAAM,EAAEgD,OAAO,CAAChD;YACpB,CAAC,CAAC,CAAC;YACH0H,CAAC,CAACC,KAAK,CAACE,cAAc,CAAC,CAAC;YACxBH,CAAC,CAACC,KAAK,CAACC,eAAe,CAAC,CAAC;UAC7B,CAAE,CAAC,CAAC;QACR;QACAU,UAAU,CAAC0W,MAAM,CAACZ,OAAO,EAAE,QAAQ,CAAC;QACpC,IAAIrd,MAAM,CAAC4c,QAAQ,EAAE;UACjB,IAAI,CAACpc,SAAS,CAAC+c,cAAc,CAACF,OAAO,EAAErd,MAAM,CAAC4c,QAAQ,EAAEjjB,QAAQ,CAAC,CAAC,CAAC,EAAEsI,OAAO,EAAE;YAC1EhD,MAAM,EAAE,KAAK;UACjB,CAAC,CAAC,EAAE,IAAI,EAAEmE,MAAM,CAAC;QACrB;MACJ;IACJ,CAAC;IACDwa,0BAA0B,EAAEA,CAAA,MAAO;MAC/B/f,IAAI,EAAE,2BAA2B;MACjCF,IAAI,EAAE,kCAAkC;MACxCI,MAAM,EAAE,6BAA6B;MACrCD,QAAQ,EAAE,+BAA+B;MACzCF,MAAM,EAAE;IACZ,CAAC,CAAC;IACFsgB,iBAAiB,EAAE,SAAAA,CAASpF,WAAW,EAAEte,IAAI,EAAE4L,UAAU,EAAE+X,SAAS,EAAE;MAClE,IAAItY,YAAY,GAAG,IAAI,CAAChE,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;MACrD,IAAIuc,2BAA2B,GAAG;QAC9BC,MAAM,EAAExY,YAAY,CAACyY,gBAAgB;QACrC3gB,IAAI,EAAEkI,YAAY,CAAC0Y,cAAc;QACjC7O,MAAM,EAAE7J,YAAY,CAAC6J;MACzB,CAAC;MACD,IAAI8O,SAAS,GAAG;QACZH,MAAM,EAAE,QAAQ;QAChB1gB,IAAI,EAAE,MAAM;QACZ+R,MAAM,EAAE;MACZ,CAAC,CAAElV,IAAI,CAAC;MACR,IAAIikB,QAAQ,GAAGL,2BAA2B,CAAC5jB,IAAI,CAAC;MAChD,IAAIue,gBAAgB,GAAG,CAAC,MAAM,KAAKyF,SAAS,IAAI,QAAQ,KAAKA,SAAS,KAAK,IAAI,CAAC5F,qBAAqB,CAAC,CAAC;MACvG,OAAO;QACH8F,MAAM,EAAE,UAAU;QAClBzc,OAAO,EAAE;UACL0c,aAAa,EAAEhY,CAAC,IAAI;YAChB/M,CAAC,CAAC+M,CAAC,CAACgV,OAAO,CAAC,CAACxC,QAAQ,CAACL,WAAW,CAAC8F,sBAAsB,CAAC7hB,iBAAiB,GAAG,GAAG,GAAG,IAAI,CAAC8hB,eAAe,CAACL,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC;UACpI,CAAC;UACDrB,IAAI,EAAE,cAAc,GAAGqB,SAAS;UAChC/Y,QAAQ,EAAEsT,gBAAgB;UAC1BrS,OAAO,EAAEA,CAAA,KAAM;YACXK,UAAU,CAAC,MAAM;cACb,IAAI,CAACX,UAAU,CAAC,CAAC,CAAC;YACtB,CAAC,CAAC;UACN,CAAC;UACDI,IAAI,EAAEiY,QAAQ;UACdX,IAAI,EAAEW;QACV,CAAC;QACDK,QAAQ,EAAE,QAAQ;QAClBtkB,IAAI,EAAEA,IAAI,GAAG,QAAQ;QACrBukB,QAAQ,EAAE,OAAO;QACjBC,YAAY,EAAE,MAAM;QACpBb,SAAS,EAAEA;MACf,CAAC;IACL,CAAC;IACDc,kBAAkB,EAAE,SAAAA,CAASnG,WAAW,EAAE;MACtC,IAAIzS,cAAc,GAAG,IAAI,CAACxE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;MACjD,IAAIqd,WAAW,GAAG,EAAE;MACpB,IAAI7Y,cAAc,CAAC8Y,WAAW,EAAE;QAC5BD,WAAW,CAAClb,IAAI,CAAC,IAAI,CAACka,iBAAiB,CAACpF,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;MACjF;MACA,OAAOoG,WAAW;IACtB,CAAC;IACDE,iBAAiB,EAAE,SAAAA,CAASnL,KAAK,EAAEnQ,MAAM,EAAE;MACvC,IAAI,CAACub,mBAAmB,CAACvb,MAAM,CAAC,IAAImQ,KAAK,CAACkF,QAAQ,CAAC9b,aAAa,CAAC;IACrE,CAAC;IACD+T,eAAe,EAAE/V,IAAI;IACrB4a,mBAAmB,EAAE,SAAAA,CAAS7S,MAAM,EAAE;MAClC,IAAIA,MAAM,IAAI,CAACnJ,SAAS,CAACmJ,MAAM,CAACO,GAAG,CAAC,IAAI1J,SAAS,CAACmJ,MAAM,CAACC,IAAI,CAAC,EAAE;QAC5D,OAAO,IAAI;MACf;IACJ,CAAC;IACDgU,kBAAkB,EAAEhc,IAAI;IACxBie,qBAAqB,EAAEje,IAAI;IAC3BikB,gBAAgB,EAAE,SAAAA,CAAShZ,UAAU,EAAErE,OAAO,EAAE;MAC5C,IAAIsd,eAAe,GAAG,IAAI,CAAC1d,MAAM,CAAC,UAAU,GAAGyE,UAAU,CAAC;MAC1D,IAAInM,UAAU,CAAColB,eAAe,CAAC,EAAE;QAC7BA,eAAe,GAAGA,eAAe,CAAC;UAC9B9d,SAAS,EAAE,IAAI,CAACA,SAAS;UACzBc,GAAG,EAAEN,OAAO,CAACM;QACjB,CAAC,CAAC;MACN;MACA,OAAOgd,eAAe;IAC1B,CAAC;IACDtC,aAAa,EAAE,SAAAA,CAAShb,OAAO,EAAEud,SAAS,EAAE;MACxC,IAAIC,eAAe,GAAG,IAAI,CAAC5d,MAAM,CAAC,yBAAyB,CAAC,IAAIpE,yBAAyB;MACzF,IAAIiiB,YAAY,GAAGpW,SAAS,CAAChG,MAAM,GAAG,CAAC,GAAGmc,eAAe,KAAKD,SAAS,IAAI,MAAM,KAAKA,SAAS,GAAG,IAAI;MACtG,OAAOE,YAAY,IAAI,IAAI,CAACJ,gBAAgB,CAAC,eAAe,EAAErd,OAAO,CAAC;IAC1E,CAAC;IACDmD,aAAa,EAAE,SAAAA,CAASnD,OAAO,EAAE;MAC7B,OAAO,IAAI,CAACqd,gBAAgB,CAAC,eAAe,EAAErd,OAAO,CAAC;IAC1D,CAAC;IACD0d,cAAc,EAAE,SAAAA,CAASC,UAAU,EAAE;MACjC,IAAI5X,WAAW,GAAG4X,UAAU,CAAC5X,WAAW;MACxC,IAAI4F,cAAc,GAAGgS,UAAU,CAACrd,GAAG,KAAKqd,UAAU,CAACrd,GAAG,CAACmL,QAAQ,GAAGkS,UAAU,CAACrd,GAAG,CAAC8X,MAAM,GAAGuF,UAAU,CAACrd,GAAG,CAACqL,cAAc,CAAC;MACxH,OAAO,CAAC,CAACA,cAAc,IAAI,KAAK,CAAC,KAAKA,cAAc,CAAC5F,WAAW,CAAC;IACrE,CAAC;IACD6X,kBAAkB,EAAE,SAAAA,CAAA,EAAW;MAC3B,IAAIC,mBAAmB,GAAG,IAAI,CAACnU,uBAAuB,CAAC,CAAC;MACxD,IAAIoU,IAAI,GAAG,IAAI,CAACxf,eAAe,CAACgI,KAAK,CAAC,CAAC;MACvC,OAAOuX,mBAAmB,IAAI,CAAC,GAAGC,IAAI,CAACD,mBAAmB,CAAC,CAACpS,QAAQ,GAAG,KAAK;IAChF,CAAC;IACD2R,mBAAmB,EAAE,SAAAA,CAASO,UAAU,EAAE;MACtC,IAAII,YAAY,GAAG,IAAI,CAACL,cAAc,CAACC,UAAU,CAAC;MAClD,OAAOI,YAAY,IAAIJ,UAAU,CAAC3gB,MAAM,CAACib,YAAY,KAAK,IAAI,CAACvY,WAAW,CAAC,CAAC,KAAKzF,aAAa,IAAI,CAAC0jB,UAAU,CAACrd,GAAG,CAACvD,SAAS,CAAC;IAChI;EACJ,CAAC;EACD,OAAOmB,OAAO;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,OAAO,IAAI8f,aAAa,GAAG;EACvBC,cAAc,EAAE,SAAAA,CAAA,EAAW;IACvB,OAAO;MACHC,OAAO,EAAE;QACLC,IAAI,EAAE,KAAK;QACXtI,WAAW,EAAE,MAAM;QACnBhV,cAAc,EAAEpG,6BAA6B;QAC7CyiB,WAAW,EAAE,KAAK;QAClBlC,aAAa,EAAE,KAAK;QACpB7X,aAAa,EAAE,KAAK;QACpBkT,QAAQ,EAAE,KAAK;QACf+H,qBAAqB,EAAE,KAAK;QAC5BpL,aAAa,EAAE,IAAI;QACnBD,KAAK,EAAE;UACHhP,OAAO,EAAEjL,mBAAmB,CAAC8iB,MAAM,CAAC,2BAA2B,CAAC;UAChEU,cAAc,EAAExjB,mBAAmB,CAAC8iB,MAAM,CAAC,kCAAkC,CAAC;UAC9E/X,cAAc,EAAE/K,mBAAmB,CAAC8iB,MAAM,CAAC,kCAAkC,CAAC;UAC9ES,gBAAgB,EAAEvjB,mBAAmB,CAAC8iB,MAAM,CAAC,oCAAoC,CAAC;UAClF9X,gBAAgB,EAAEhL,mBAAmB,CAAC8iB,MAAM,CAAC,oCAAoC,CAAC;UAClFnO,MAAM,EAAE3U,mBAAmB,CAAC8iB,MAAM,CAAC,0BAA0B,CAAC;UAC9D3X,SAAS,EAAEnL,mBAAmB,CAAC8iB,MAAM,CAAC,6BAA6B,CAAC;UACpE5X,WAAW,EAAElL,mBAAmB,CAAC8iB,MAAM,CAAC,+BAA+B,CAAC;UACxE3I,oBAAoB,EAAEna,mBAAmB,CAAC8iB,MAAM,CAAC,wCAAwC,CAAC;UAC1FzI,kBAAkB,EAAE;QACxB,CAAC;QACDkL,IAAI,EAAE;UACFC,QAAQ,EAAE;QACd,CAAC;QACDC,KAAK,EAAE,CAAC,CAAC;QACTf,eAAe,EAAE,OAAO;QACxBpN,UAAU,EAAE,IAAI;QAChBT,cAAc,EAAE,IAAI;QACpB1O,OAAO,EAAE;MACb,CAAC;MACDka,6BAA6B,EAAE;IACnC,CAAC;EACL,CAAC;EACDqD,WAAW,EAAE;IACTN,OAAO,EAAE1gB;EACb,CAAC;EACDihB,SAAS,EAAE;IACPD,WAAW,EAAE;MACTpc,IAAI,EAAE;QACFjE,IAAI,EAAE,SAAAA,CAAA,EAAW;UACb,IAAI,CAACugB,kBAAkB,GAAG,IAAI,CAACrgB,aAAa,CAAC,SAAS,CAAC;UACvD,IAAI,CAACsI,QAAQ,CAAC,CAAC;QACnB,CAAC;QACDqP,MAAM,EAAE,SAAAA,CAAS2I,IAAI,EAAEjW,kBAAkB,EAAE;UACvC,CAACA,kBAAkB,IAAI,IAAI,CAACgW,kBAAkB,CAAC5V,OAAO,CAAC,CAAC;UACxD,OAAO,IAAI,CAACnC,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QAC/C,CAAC;QACDuX,WAAW,EAAE,SAAAA,CAAA,EAAW;UACpB,IAAI,IAAI,CAACvgB,aAAa,CAAC,SAAS,CAAC,CAAC2W,QAAQ,CAAC,CAAC,EAAE;YAC1C;UACJ;UACA,OAAO,IAAI,CAACrO,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QAC/C,CAAC;QACDoR,cAAc,EAAE,SAAAA,CAASnS,KAAK,EAAE;UAC5B,IAAI8J,UAAU,GAAG,IAAI,CAACxQ,MAAM,CAAChG,8BAA8B,CAAC;UAC5D,IAAI0U,YAAY,GAAG5V,aAAa,CAAC6J,aAAa,CAAC6N,UAAU,EAAE9J,KAAK,CAAC;UACjE,IAAI4G,QAAQ,GAAG5G,KAAK,CAACgI,YAAY,CAAC;UAClC,IAAIpB,QAAQ,EAAE;YACV,IAAI2R,qBAAqB;YACzB3R,QAAQ,CAACnQ,SAAS,GAAG,IAAI;YACzB,IAAI,MAAM8hB,qBAAqB,GAAG,IAAI,CAACC,eAAe,CAAC,IAAI,KAAK,CAAC,KAAKD,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACvb,IAAI,CAAC,IAAI,EAAE4J,QAAQ,CAAC;UACrJ;QACJ,CAAC;QACD6R,gBAAgB,EAAE,SAAAA,CAAS5d,MAAM,EAAE;UAC/B,IAAI,CAACwF,QAAQ,CAACxF,MAAM,CAAC;UACrB,IAAI,CAACsX,cAAc,CAAC,IAAI,CAACnS,KAAK,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;QACD0Y,kBAAkB,EAAE,SAAAA,CAAS7d,MAAM,EAAE;UACjC,IAAI,CAACsX,cAAc,CAACtX,MAAM,CAACmF,KAAK,CAAC;UACjC,IAAI,CAACK,QAAQ,CAACxF,MAAM,CAAC;QACzB,CAAC;QACD8d,iBAAiB,EAAE,SAAAA,CAAS9d,MAAM,EAAE;UAChC,IAAI,CAACsX,cAAc,CAACtX,MAAM,CAACmF,KAAK,CAAC;UACjC,IAAI,CAACK,QAAQ,CAACxF,MAAM,CAAC;QACzB,CAAC;QACD+d,aAAa,EAAE,SAAAA,CAAS5Y,KAAK,EAAEnF,MAAM,EAAE;UACnCmF,KAAK,GAAG,IAAI,CAACoY,kBAAkB,CAAC1T,YAAY,CAAC1E,KAAK,EAAEnF,MAAM,CAAC;UAC3D,OAAO,IAAI,CAACwF,QAAQ,CAACL,KAAK,EAAEnF,MAAM,CAAC;QACvC,CAAC;QACDge,gBAAgB,EAAE,SAAAA,CAASC,QAAQ,EAAEpf,OAAO,EAAE;UAC1C,IAAI,CAAC0e,kBAAkB,CAACrT,eAAe,CAAC+T,QAAQ,EAAEpf,OAAO,EAAE,IAAI,CAACsL,kBAAkB,CAAC;UACnF,OAAO,IAAI,CAAC3E,QAAQ,CAACyY,QAAQ,EAAEpf,OAAO,CAAC;QAC3C,CAAC;QACDqf,YAAY,EAAE,SAAAA,CAAS1d,IAAI,EAAE3B,OAAO,EAAE;UAClC2B,IAAI,GAAG,IAAI,CAACgF,QAAQ,CAAChF,IAAI,EAAE3B,OAAO,CAAC;UACnC,IAAI2B,IAAI,CAAC8J,QAAQ,EAAE;YACfzL,OAAO,CAACsf,SAAS,EAAE;YACnB,OAAO3d,IAAI,CAAC2d,SAAS;UACzB;UACA,OAAO3d,IAAI;QACf,CAAC;QACD4d,wBAAwB,EAAE,SAAAA,CAASC,OAAO,EAAEC,OAAO,EAAE1a,QAAQ,EAAE4D,YAAY,EAAE;UACzE,IAAI6W,OAAO,CAAC/T,QAAQ,KAAKgU,OAAO,CAAChU,QAAQ,IAAI+T,OAAO,CAAC5T,OAAO,KAAK6T,OAAO,CAAC7T,OAAO,EAAE;YAC9E;UACJ;UACA,OAAO,IAAI,CAACjF,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QAC/C,CAAC;QACDqY,cAAc,EAAE,SAAAA,CAASC,MAAM,EAAEC,MAAM,EAAE7V,eAAe,EAAEhE,WAAW,EAAE4C,YAAY,EAAE;UACjF,IAAIkX,iBAAiB,GAAG,IAAI,CAACxhB,aAAa,CAAC,SAAS,CAAC;UACrD,IAAIyhB,IAAI,GAAGH,MAAM,CAACI,KAAK,IAAIJ,MAAM,CAACI,KAAK,CAACha,WAAW,CAAC;UACpD,IAAIhJ,SAAS,GAAG8iB,iBAAiB,IAAIA,iBAAiB,CAAC/V,UAAU,CAACC,eAAe,EAAEhE,WAAW,CAAC;UAC/F,IAAI4C,YAAY,IAAI5L,SAAS,EAAE;YAC3B,OAAO,KAAK;UAChB;UACA,IAAI+iB,IAAI,IAAIA,IAAI,CAAC9iB,MAAM,IAAI,CAAC8iB,IAAI,CAAC9iB,MAAM,CAACM,gBAAgB,IAAIwiB,IAAI,CAAC/iB,SAAS,KAAKA,SAAS,EAAE;YACtF,OAAO,IAAI;UACf;UACA,OAAO,IAAI,CAAC4J,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QAC/C,CAAC;QACD2Y,+BAA+B,EAAE,SAAAA,CAASzY,IAAI,EAAE;UAC5C,IAAIsY,iBAAiB,GAAG,IAAI,CAACxhB,aAAa,CAAC,SAAS,CAAC;UACrD,IAAI4hB,gBAAgB,GAAGC,KAAK,CAACC,OAAO,CAAC5Y,IAAI,CAACnH,KAAK,CAAC,IAAImH,IAAI,CAACnH,KAAK,KAAKmH,IAAI,CAACY,aAAa,IAAI0X,iBAAiB,CAAC7K,QAAQ,CAAC,CAAC;UACrH,OAAO,CAACiL,gBAAgB;QAC5B,CAAC;QACDG,uBAAuBA,CAAC7Y,IAAI,EAAE;UAC1B,IAAI1J,MAAM,GAAG,IAAI,CAAC8I,QAAQ,CAACY,IAAI,CAAC;UAChC,IAAItG,OAAO,GAAG,IAAI,CAACrB,MAAM,CAAC,iBAAiB,CAAC;UAC5C,IAAIyV,UAAU,GAAG9N,IAAI,CAACnH,KAAK;UAC3B,IAAI8f,KAAK,CAACC,OAAO,CAAC9K,UAAU,CAAC,IAAIpU,OAAO,CAACI,MAAM,EAAE;YAC7C,IAAIgf,cAAc,GAAGhL,UAAU,CAAC5S,GAAG,CAACd,IAAI,IAAI,IAAI,CAACU,KAAK,CAACV,IAAI,CAAC,CAAC;YAC7D,IAAI2e,UAAU,GAAGrf,OAAO,CAACC,MAAM,CAACC,MAAM,IAAI,QAAQ,KAAKA,MAAM,CAACC,IAAI,IAAIif,cAAc,CAACviB,IAAI,CAAC4D,GAAG,IAAIvI,YAAY,CAACgI,MAAM,CAACO,GAAG,EAAEA,GAAG,CAAC,CAAC,CAAC;YAChI,IAAI4e,UAAU,CAACjf,MAAM,KAAKJ,OAAO,CAACI,MAAM,EAAE;cACtC,IAAI,CAACzB,MAAM,CAAC,iBAAiB,EAAE0gB,UAAU,CAAC;YAC9C;YACA,IAAIlQ,UAAU,GAAG,IAAI,CAACxQ,MAAM,CAAC,oBAAoB,CAAC;YAClD,IAAI2gB,aAAa,GAAGD,UAAU,CAACxiB,IAAI,CAACqD,MAAM,IAAI,QAAQ,KAAKA,MAAM,CAACC,IAAI,IAAIjI,YAAY,CAACiX,UAAU,EAAEjP,MAAM,CAACO,GAAG,CAAC,CAAC;YAC/G,IAAI,CAAC6e,aAAa,IAAIF,cAAc,CAACG,KAAK,CAAC9e,GAAG,IAAI,CAACvI,YAAY,CAACiX,UAAU,EAAE1O,GAAG,CAAC,CAAC,EAAE;cAC/E,IAAI,CAAC9B,MAAM,CAAC,oBAAoB,EAAE,IAAI,CAAC;YAC3C;UACJ;UACA,OAAO/B,MAAM;QACjB;MACJ;IACJ,CAAC;IACD4iB,KAAK,EAAE;MACHta,QAAQ,EAAE;QACNhI,IAAI,EAAE,SAAAA,CAAA,EAAW;UACb,IAAI,CAACwI,QAAQ,CAAC,CAAC;UACf,IAAI,CAAC+X,kBAAkB,GAAG,IAAI,CAACrgB,aAAa,CAAC,SAAS,CAAC;QAC3D,CAAC;QACDyb,YAAY,EAAE,SAAAA,CAAS9H,KAAK,EAAEjN,QAAQ,EAAE;UACpC,IAAI,CAACiN,KAAK,CAAC0O,EAAE,CAAC,IAAI,CAAC,IAAI3b,QAAQ,IAAI,CAAC,EAAE;YAClC,IAAI4b,aAAa,GAAG,IAAI,CAACC,eAAe,CAAC7b,QAAQ,CAAC;YAClD,IAAI8b,SAAS,GAAG,CAAC,CAAC;YAClBzoB,IAAI,CAACuoB,aAAa,EAAG,UAAS3iB,KAAK,EAAE8iB,WAAW,EAAE;cAC9C,IAAInpB,CAAC,CAACmpB,WAAW,CAAC,CAACzO,IAAI,CAACL,KAAK,CAAC,CAAC3Q,MAAM,EAAE;gBACnCwf,SAAS,GAAG7iB,KAAK;cACrB;YACJ,CAAE,CAAC;YACH,OAAO6iB,SAAS;UACpB;UACA,OAAO,IAAI,CAACla,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QAC/C,CAAC;QACDwB,aAAa,EAAE,SAAAA,CAAA,EAAW;UACtB,OAAO,IAAI,CAAClC,QAAQ,CAAC,CAAC,CAACoa,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC;QAChD,CAAC;QACDC,gBAAgB,EAAE,SAAAA,CAAShhB,OAAO,EAAE;UAChC,IAAI2a,QAAQ,GAAG,IAAI,CAAC+D,kBAAkB,CAAChE,iBAAiB,CAAC1a,OAAO,CAAC;UACjE,OAAO2a,QAAQ,IAAI,IAAI,CAAChU,QAAQ,CAAC3G,OAAO,CAAC;QAC7C,CAAC;QACDihB,UAAU,EAAE,SAAAA,CAAS3gB,GAAG,EAAE;UACtB,IAAI4gB,IAAI,GAAG,IAAI,CAACva,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UAC/C,IAAI/G,GAAG,EAAE;YACL,IAAI6gB,YAAY,GAAG,CAAC,CAAC7gB,GAAG,CAACsL,OAAO;YAChC,IAAIwV,aAAa,GAAG,CAAC,CAAC9gB,GAAG,CAACmL,QAAQ;YAClC,IAAI4V,aAAa,GAAG,CAAC,CAAC/gB,GAAG,CAACoL,QAAQ;YAClC0V,aAAa,IAAIF,IAAI,CAAChK,QAAQ,CAAChc,YAAY,CAAC;YAC5CmmB,aAAa,IAAIH,IAAI,CAAChK,QAAQ,CAAC/b,YAAY,CAAC;YAC5C,IAAIimB,aAAa,IAAID,YAAY,EAAE;cAC/BD,IAAI,CAACI,WAAW,CAACzmB,YAAY,CAAC;YAClC;UACJ;UACA,OAAOqmB,IAAI;QACf,CAAC;QACDK,wBAAwB,EAAE,SAAAA,CAAStK,QAAQ,EAAE;UACzC,IAAIuK,aAAa,GAAGvK,QAAQ,CAACwK,OAAO,CAAC,OAAO,CAAC;UAC7C,IAAIC,cAAc,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;UAC5C,OAAOH,aAAa,CAACngB,MAAM,IAAI,CAACqgB,cAAc,CAACxgB,MAAM,CAACsgB,aAAa,CAAC,CAACngB,MAAM,EAAE;YACzE4V,QAAQ,GAAGuK,aAAa,CAACC,OAAO,CAAC,IAAI,CAAC;YACtCD,aAAa,GAAGvK,QAAQ,CAACwK,OAAO,CAAC,OAAO,CAAC;UAC7C;UACA,OAAO,IAAI,CAACG,4BAA4B,CAAC3K,QAAQ,CAAC;QACtD,CAAC;QACD2K,4BAA4B,EAAE,SAAAA,CAAS3K,QAAQ,EAAE;UAC7C,IAAI4K,cAAc,GAAG5K,QAAQ,CAACwK,OAAO,CAAC,GAAG,GAAGloB,SAAS,GAAG,kCAAkC,CAAC;UAC3F,OAAO,IAAI,CAACugB,YAAY,CAAC+H,cAAc,CAAC;QAC5C,CAAC;QACDC,gBAAgB,EAAE,SAAAA,CAASpd,CAAC,EAAE6Y,SAAS,EAAE;UACrC,IAAIsC,iBAAiB,GAAG,IAAI,CAACnB,kBAAkB;UAC/C,IAAImD,cAAc,GAAGlqB,CAAC,CAAC+M,CAAC,CAACC,KAAK,CAACod,MAAM,CAAC;UACtC,IAAIhc,WAAW,GAAG,IAAI,CAACwb,wBAAwB,CAACM,cAAc,CAAC;UAC/D,IAAIvhB,GAAG,GAAG,IAAI,CAAChC,eAAe,CAACgI,KAAK,CAAC,CAAC,CAAC5B,CAAC,CAACK,QAAQ,CAAC;UAClD,IAAIiW,aAAa,GAAG6E,iBAAiB,CAAC7E,aAAa,CAAC;YAChD1a,GAAG,EAAEA;UACT,CAAC,EAAEid,SAAS,CAAC,IAAIjd,GAAG,IAAIA,GAAG,CAACmL,QAAQ;UACpC,IAAIzO,MAAM,GAAG,IAAI,CAACoB,kBAAkB,CAAC6H,iBAAiB,CAAC,CAAC,CAACF,WAAW,CAAC;UACrE,IAAIic,YAAY,GAAGnC,iBAAiB,CAAC/V,UAAU,CAACpF,CAAC,CAACK,QAAQ,EAAEgB,WAAW,CAAC;UACxE,IAAI9I,YAAY,GAAG+d,aAAa,IAAIhe,MAAM,KAAKA,MAAM,CAACC,YAAY,IAAI+kB,YAAY,CAAC;UACnF,IAAIxE,eAAe,GAAG,IAAI,CAAC5d,MAAM,CAAC,yBAAyB,CAAC,IAAI,OAAO;UACvE,IAAIqiB,kBAAkB,GAAGjlB,MAAM,IAAIA,MAAM,CAACM,gBAAgB;UAC1D,IAAI0kB,YAAY,EAAE;YACd,OAAO,IAAI;UACf;UACA,IAAI,MAAM,KAAKzE,SAAS,EAAE;YACtB,IAAIxkB,OAAO,CAAC0Z,IAAI,CAAC,CAAC,CAACC,GAAG,IAAI3Z,OAAO,CAAC0Z,IAAI,CAAC,CAAC,CAACE,OAAO,EAAE;cAC9C5a,kBAAkB,CAAC,CAAC;YACxB;YACA,OAAOkqB,kBAAkB,IAAIhlB,YAAY,IAAI4iB,iBAAiB,CAACqC,QAAQ,CAACxd,CAAC,CAACK,QAAQ,EAAEgB,WAAW,CAAC;UACpG;UACA,IAAI,OAAO,KAAKwX,SAAS,IAAI,UAAU,KAAKC,eAAe,EAAE;YACzD,IAAI2E,mBAAmB,GAAG,IAAI,KAAK7hB,GAAG,IAAI,KAAK,CAAC,KAAKA,GAAG,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACmL,QAAQ;YAChFoU,iBAAiB,CAACuC,aAAa,CAAC,KAAK,EAAED,mBAAmB,CAAC;UAC/D;UACA,IAAIllB,YAAY,IAAIsgB,SAAS,KAAKC,eAAe,EAAE;YAC/C,OAAOqC,iBAAiB,CAACqC,QAAQ,CAACxd,CAAC,CAACK,QAAQ,EAAEgB,WAAW,CAAC,IAAI8Z,iBAAiB,CAAChjB,SAAS,CAAC6H,CAAC,CAACK,QAAQ,CAAC;UACzG;QACJ,CAAC;QACDsd,eAAe,EAAE,SAAAA,CAAS3d,CAAC,EAAE;UACzB,IAAI,CAAC4d,mBAAmB,GAAGxd,UAAU,CAAC,MAAM;YACxC,IAAI,CAACgd,gBAAgB,CAACpd,CAAC,EAAE,MAAM,CAAC;UACpC,CAAC,CAAC;QACN,CAAC;QACD6d,SAAS,EAAE,SAAAA,CAAS7d,CAAC,EAAE;UACnB,IAAI8d,UAAU,GAAG7qB,CAAC,CAAC+M,CAAC,CAAC+d,UAAU,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC9F,eAAe,CAACpjB,eAAe,CAAC,CAAC;UAChFkL,CAAC,CAACC,KAAK,CAAC7K,qBAAqB,CAAC,GAAG,IAAI,CAAC0F,SAAS;UAC/C,IAAI,CAAC,IAAI,CAACsiB,gBAAgB,CAACpd,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC8d,UAAU,EAAE;YACnD,IAAI,CAAC7b,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACxC;QACJ,CAAC;QACDsb,YAAY,EAAE,SAAAA,CAASje,CAAC,EAAE;UACtB,IAAI,CAAC,IAAI,CAACod,gBAAgB,CAACpd,CAAC,EAAE,UAAU,CAAC,EAAE;YACvC,IAAI,CAACiC,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACxC;QACJ,CAAC;QACDub,aAAa,EAAE,SAAAA,CAAS5Q,KAAK,EAAE2L,UAAU,EAAE;UACvC,IAAIkF,kBAAkB;UACtB,IAAIhD,iBAAiB,GAAG,IAAI,CAACnB,kBAAkB;UAC/C,IAAIvhB,aAAa,GAAG,CAAC,CAACwgB,UAAU,CAAC3gB,MAAM,CAACI,OAAO;UAC/C,IAAI0lB,cAAc,GAAGnF,UAAU,CAACtd,QAAQ;UACxC,IAAIxD,SAAS,GAAGgjB,iBAAiB,CAAChjB,SAAS,CAAC8gB,UAAU,CAAC5Y,QAAQ,CAAC;UAChE,IAAIhI,SAAS,GAAGH,aAAa,CAACC,SAAS,EAAE8gB,UAAU,CAAC;UACpD,IAAIzgB,mCAAmC,CAACL,SAAS,EAAE8gB,UAAU,CAAC,EAAE;YAC5D,IAAIpH,SAAS,GAAGoH,UAAU,CAAC3gB,MAAM,CAACuZ,SAAS;YAC3CvE,KAAK,CAAC+Q,WAAW,CAAC,IAAI,CAACnG,eAAe,CAACjiB,cAAc,CAAC,EAAE,CAACmoB,cAAc,CAAC,CAACC,WAAW,CAACznB,yBAAyB,EAAE,CAACwnB,cAAc,CAAC;YAChI,IAAIvM,SAAS,EAAE;cACXvE,KAAK,CAACK,IAAI,CAACtY,sBAAsB,CAAC,CAACuY,KAAK,CAAC,CAAC,CAAC0Q,GAAG,CAAC,WAAW,EAAEzM,SAAS,CAAC;YAC1E;UACJ;UACA,IAAIxZ,SAAS,EAAE;YACX,IAAI,CAACkmB,iBAAiB,CAACjR,KAAK,CAAC;UACjC;UACA,IAAIkR,WAAW,GAAG,CAAC,EAAE,IAAI,MAAML,kBAAkB,GAAGlF,UAAU,CAAC3gB,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK6lB,kBAAkB,IAAIA,kBAAkB,CAACrM,YAAY,CAAC;UAC3I,IAAImH,UAAU,CAAC3gB,MAAM,IAAI,CAACG,aAAa,KAAK,CAAC+lB,WAAW,IAAIrD,iBAAiB,CAACzC,mBAAmB,CAACO,UAAU,CAAC,CAAC,EAAE;YAC5GkC,iBAAiB,CAAC1C,iBAAiB,CAACnL,KAAK,EAAE2L,UAAU,CAAC;UAC1D;UACA,IAAI,CAAChX,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QACxC,CAAC;QACD4b,iBAAiB,EAAE7pB,IAAI;QACvB+pB,iBAAiB,EAAE/pB,IAAI;QACvBgqB,eAAe,EAAE,SAAAA,CAASpjB,OAAO,EAAE;UAC/B,IAAIlD,WAAW,GAAG,IAAI,CAAC6J,QAAQ,CAAC3G,OAAO,CAAC;UACxClD,WAAW,CAACC,SAAS,GAAG,IAAI,CAAC2hB,kBAAkB,CAAC5U,UAAU,CAAChN,WAAW,CAACiI,QAAQ,EAAEjI,WAAW,CAACiJ,WAAW,CAAC;UACzG,OAAOjJ,WAAW;QACtB,CAAC;QACDumB,WAAW,EAAE,SAAAA,CAASrjB,OAAO,EAAE;UAC3B,IAAIgS,KAAK,GAAG,IAAI,CAACrL,QAAQ,CAAC3G,OAAO,CAAC;UAClC,IAAInD,SAAS,GAAG,IAAI,CAAC6hB,kBAAkB,CAAC7hB,SAAS,CAACmD,OAAO,CAAC+E,QAAQ,CAAC;UACnE7H,mCAAmC,CAACL,SAAS,EAAEmD,OAAO,CAAC,IAAIgS,KAAK,CAACkF,QAAQ,CAAC5d,iBAAiB,CAAC;UAC5F,OAAO0Y,KAAK;QAChB,CAAC;QACDsR,SAAS,EAAE,SAAAA,CAASve,QAAQ,EAAEwe,gBAAgB,EAAEnjB,KAAK,EAAEmE,IAAI,EAAE;UACzD,IAAIzH,WAAW,GAAG,IAAI,CAAC0mB,cAAc,CAACze,QAAQ,EAAEwe,gBAAgB,CAAC;UACjE,IAAIzmB,WAAW,EAAE;YACb,IAAI,KAAK,CAAC,KAAKsD,KAAK,EAAE;cAClB,OAAOtD,WAAW,CAACsD,KAAK;YAC5B,CAAC,MAAM;cACH,IAAI,CAACse,kBAAkB,CAACrG,gBAAgB,CAACvb,WAAW,EAAEsD,KAAK,EAAEmE,IAAI,EAAE,IAAI,CAAC;YAC5E;UACJ;QACJ,CAAC;QACDmC,OAAO,EAAE,SAAAA,CAAA,EAAW;UAChB,IAAI,CAACC,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACpCT,YAAY,CAAC,IAAI,CAAC0b,mBAAmB,CAAC;QAC1C,CAAC;QACDmB,WAAW,EAAE,SAAAA,CAAA,EAAW;UACpB,IAAI,CAAC9c,QAAQ,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;UACpC,OAAO,IAAI,CAAC4H,kBAAkB,CAAC,IAAI,CAAC,CAACjD,IAAI,CAAC,MAAM;YAC5C,IAAI,CAAC0S,kBAAkB,CAAC9N,kBAAkB,CAAC,CAAC;UAChD,CAAC,CAAC;QACN;MACJ,CAAC;MACDiG,WAAW,EAAE;QACT6M,gBAAgB,EAAE,SAAAA,CAAA,EAAW;UACzB,IAAIpd,KAAK,GAAG,IAAI,CAACK,QAAQ,CAAC,CAAC;UAC3B,IAAIgd,eAAe,GAAG,IAAI,CAACtlB,aAAa,CAAC,SAAS,CAAC,CAAC2e,kBAAkB,CAAC,IAAI,CAAC;UAC5E,OAAO2G,eAAe,CAAC5C,MAAM,CAACza,KAAK,CAAC;QACxC,CAAC;QACDgB,aAAa,EAAE,SAAAA,CAASC,IAAI,EAAE;UAC1B,IAAIC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;UAC5B,QAAQD,IAAI,CAAChP,IAAI;YACb,KAAK,SAAS;cACV,IAAIqrB,eAAe,GAAG,CAACjqB,yBAAyB,EAAEyC,2BAA2B,EAAEvC,kCAAkC,EAAED,8BAA8B,CAAC;cAClJ,IAAIiqB,gBAAgB,GAAGrc,QAAQ,IAAI,CAACoc,eAAe,CAAC9lB,IAAI,CAACgmB,UAAU,IAAIA,UAAU,KAAKtc,QAAQ,CAAC;cAC/Fqc,gBAAgB,IAAI,IAAI,CAACE,WAAW,CAAC,CAAC;cACtC,IAAI,CAACpd,QAAQ,CAACY,IAAI,CAAC;cACnB;YACJ,KAAK,+BAA+B;cAChCA,IAAI,CAACK,OAAO,GAAG,IAAI;cACnB;YACJ;cACI,IAAI,CAACjB,QAAQ,CAACY,IAAI,CAAC;UAC3B;QACJ,CAAC;QACDyc,SAAS,EAAE,SAAAA,CAAA,EAAW;UAClB,IAAI5f,cAAc,GAAG,IAAI,CAAC/F,aAAa,CAAC,SAAS,CAAC,CAACuB,MAAM,CAAC,SAAS,CAAC;UACpE,OAAO,IAAI,CAAC+G,QAAQ,CAAC,CAAC,KAAK,IAAI,KAAKvC,cAAc,IAAI,KAAK,CAAC,KAAKA,cAAc,GAAG,KAAK,CAAC,GAAGA,cAAc,CAAC8Y,WAAW,CAAC;QAC1H;MACJ;IACJ;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}