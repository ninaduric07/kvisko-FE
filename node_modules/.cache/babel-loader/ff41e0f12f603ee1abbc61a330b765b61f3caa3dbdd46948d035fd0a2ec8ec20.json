{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_row.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getOuterWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { normalizeKeyName } from \"../../events/utils/index\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport messageLocalization from \"../../localization/message\";\nimport Editor from \"../editor/editor\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport Menu from \"../menu\";\nimport { selectView } from \"../shared/accessibility\";\nimport { equalByValue } from \"../../core/utils/common\";\nvar OPERATION_ICONS = {\n  \"=\": \"filter-operation-equals\",\n  \"<>\": \"filter-operation-not-equals\",\n  \"<\": \"filter-operation-less\",\n  \"<=\": \"filter-operation-less-equal\",\n  \">\": \"filter-operation-greater\",\n  \">=\": \"filter-operation-greater-equal\",\n  default: \"filter-operation-default\",\n  notcontains: \"filter-operation-not-contains\",\n  contains: \"filter-operation-contains\",\n  startswith: \"filter-operation-starts-with\",\n  endswith: \"filter-operation-ends-with\",\n  between: \"filter-operation-between\"\n};\nvar OPERATION_DESCRIPTORS = {\n  \"=\": \"equal\",\n  \"<>\": \"notEqual\",\n  \"<\": \"lessThan\",\n  \"<=\": \"lessThanOrEqual\",\n  \">\": \"greaterThan\",\n  \">=\": \"greaterThanOrEqual\",\n  startswith: \"startsWith\",\n  contains: \"contains\",\n  notcontains: \"notContains\",\n  endswith: \"endsWith\",\n  between: \"between\"\n};\nvar FILTERING_TIMEOUT = 700;\nvar CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1;\nvar FILTER_ROW_CLASS = \"filter-row\";\nvar FILTER_RANGE_OVERLAY_CLASS = \"filter-range-overlay\";\nvar FILTER_RANGE_START_CLASS = \"filter-range-start\";\nvar FILTER_RANGE_END_CLASS = \"filter-range-end\";\nvar MENU_CLASS = \"dx-menu\";\nvar EDITOR_WITH_MENU_CLASS = \"dx-editor-with-menu\";\nvar EDITOR_CONTAINER_CLASS = \"dx-editor-container\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar FILTER_MENU = \"dx-filter-menu\";\nvar APPLY_BUTTON_CLASS = \"dx-apply-button\";\nvar HIGHLIGHT_OUTLINE_CLASS = \"dx-highlight-outline\";\nvar FOCUSED_CLASS = \"dx-focused\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FILTER_RANGE_CONTENT_CLASS = \"dx-filter-range-content\";\nvar FILTER_MODIFIED_CLASS = \"dx-filter-modified\";\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\nvar BETWEEN_OPERATION_DATA_TYPES = [\"date\", \"datetime\", \"number\"];\nfunction isOnClickApplyFilterMode(that) {\n  return \"onClick\" === that.option(\"filterRow.applyFilter\");\n}\nvar getEditorInstance = function ($editorContainer) {\n  var $editor = $editorContainer && $editorContainer.children();\n  var componentNames = $editor && $editor.data(\"dxComponents\");\n  var editor = componentNames && componentNames.length && $editor.data(componentNames[0]);\n  if (editor instanceof Editor) {\n    return editor;\n  }\n};\nvar ColumnHeadersViewFilterRowExtender = function () {\n  var getRangeTextByFilterValue = function (that, column) {\n    var result = \"\";\n    var rangeEnd = \"\";\n    var filterValue = getColumnFilterValue(that, column);\n    var formatOptions = gridCoreUtils.getFormatOptionsByColumn(column, \"filterRow\");\n    if (Array.isArray(filterValue)) {\n      result = gridCoreUtils.formatValue(filterValue[0], formatOptions);\n      rangeEnd = gridCoreUtils.formatValue(filterValue[1], formatOptions);\n      if (\"\" !== rangeEnd) {\n        result += \" - \" + rangeEnd;\n      }\n    } else if (isDefined(filterValue)) {\n      result = gridCoreUtils.formatValue(filterValue, formatOptions);\n    }\n    return result;\n  };\n  function getColumnFilterValue(that, column) {\n    if (column) {\n      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue;\n    }\n  }\n  var getColumnSelectedFilterOperation = function (that, column) {\n    if (column) {\n      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation;\n    }\n  };\n  var getFilterValue = function (that, columnIndex, $editorContainer) {\n    var column = that._columnsController.columnOption(columnIndex);\n    var filterValue = getColumnFilterValue(that, column);\n    var isFilterRange = $editorContainer.closest(\".\" + that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).length;\n    var isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS));\n    if (filterValue && Array.isArray(filterValue) && \"between\" === getColumnSelectedFilterOperation(that, column)) {\n      if (isRangeStart) {\n        return filterValue[0];\n      } else {\n        return filterValue[1];\n      }\n    }\n    return !isFilterRange && function (filterValue, column) {\n      if (column && BETWEEN_OPERATION_DATA_TYPES.indexOf(column.dataType) >= 0 && Array.isArray(filterValue)) {\n        return false;\n      }\n      return void 0 !== filterValue;\n    }(filterValue, column) ? filterValue : null;\n  };\n  var updateFilterValue = function (that, options) {\n    var value = \"\" === options.value ? null : options.value;\n    var $editorContainer = options.container;\n    var column = that._columnsController.columnOption(options.column.index);\n    var filterValue = getFilterValue(that, column.index, $editorContainer);\n    if (!isDefined(filterValue) && !isDefined(value)) {\n      return;\n    }\n    that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value);\n    var columnOptionName = isOnClickApplyFilterMode(that) ? \"bufferedFilterValue\" : \"filterValue\";\n    var normalizedValue = function (that, filterValue, column, $editorContainer) {\n      if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n        var columnFilterValue = getColumnFilterValue(that, column);\n        if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\n          return [filterValue, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0];\n        } else {\n          return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue];\n        }\n      }\n      return filterValue;\n    }(that, value, column, $editorContainer);\n    var isBetween = \"between\" === getColumnSelectedFilterOperation(that, column);\n    var notFireEvent = options.notFireEvent || isBetween && Array.isArray(normalizedValue) && normalizedValue.indexOf(void 0) >= 0;\n    that._columnsController.columnOption(column.index, columnOptionName, normalizedValue, notFireEvent);\n  };\n  return {\n    _updateEditorValue: function (column, $editorContainer) {\n      var editor = getEditorInstance($editorContainer);\n      editor && editor.option(\"value\", getFilterValue(this, column.index, $editorContainer));\n    },\n    _columnOptionChanged: function (e) {\n      var optionNames = e.optionNames;\n      var $cell;\n      var $editorContainer;\n      var $editorRangeElements;\n      var $menu;\n      if (gridCoreUtils.checkChanges(optionNames, [\"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"filterValues\", \"filterType\"]) && void 0 !== e.columnIndex) {\n        var visibleIndex = this._columnsController.getVisibleIndex(e.columnIndex);\n        var column = this._columnsController.columnOption(e.columnIndex);\n        $cell = this._getCellElement(this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index(), visibleIndex) || $();\n        $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\n        if (optionNames.filterValue || optionNames.bufferedFilterValue) {\n          this._updateEditorValue(column, $editorContainer);\n          var overlayInstance = $cell.find(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).data(\"dxOverlay\");\n          if (overlayInstance) {\n            $editorRangeElements = overlayInstance.$content().find(\".\" + EDITOR_CONTAINER_CLASS);\n            this._updateEditorValue(column, $editorRangeElements.first());\n            this._updateEditorValue(column, $editorRangeElements.last());\n          }\n          if (!overlayInstance || !overlayInstance.option(\"visible\")) {\n            this._updateFilterRangeContent($cell, getRangeTextByFilterValue(this, column));\n          }\n        }\n        if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {\n          if (visibleIndex >= 0 && column) {\n            $menu = $cell.find(\".\" + MENU_CLASS);\n            if ($menu.length) {\n              this._updateFilterOperationChooser($menu, column, $editorContainer);\n              if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\n                this._renderFilterRangeContent($cell, column);\n              } else if ($editorContainer.find(\".\" + FILTER_RANGE_CONTENT_CLASS).length) {\n                this._renderEditor($editorContainer, this._getEditorOptions($editorContainer, column));\n                this._hideFilterRange();\n              }\n            }\n          }\n        }\n        return;\n      }\n      this.callBase(e);\n    },\n    _renderCore: function () {\n      this._filterRangeOverlayInstance = null;\n      return this.callBase.apply(this, arguments);\n    },\n    _resizeCore: function () {\n      this.callBase.apply(this, arguments);\n      this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.repaint();\n    },\n    isFilterRowVisible: function () {\n      return this._isElementVisible(this.option(\"filterRow\"));\n    },\n    isVisible: function () {\n      return this.callBase() || this.isFilterRowVisible();\n    },\n    init: function () {\n      this.callBase();\n      this._applyFilterViewController = this.getController(\"applyFilter\");\n    },\n    _initFilterRangeOverlay: function ($cell, column) {\n      var that = this;\n      var sharedData = {};\n      var $editorContainer = $cell.find(\".dx-editor-container\");\n      var filterRangeOverlayClass = that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS);\n      var $overlay = $(\"<div>\").addClass(filterRangeOverlayClass).appendTo($cell);\n      return that._createComponent($overlay, Overlay, {\n        height: \"auto\",\n        shading: false,\n        showTitle: false,\n        focusStateEnabled: false,\n        hideOnOutsideClick: true,\n        wrapperAttr: {\n          class: filterRangeOverlayClass\n        },\n        animation: false,\n        position: {\n          my: \"top\",\n          at: \"top\",\n          of: $editorContainer.length && $editorContainer || $cell,\n          offset: \"0 -1\"\n        },\n        contentTemplate: function (contentElement) {\n          var editorOptions;\n          var $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_START_CLASS)).appendTo(contentElement);\n          column = that._columnsController.columnOption(column.index);\n          editorOptions = that._getEditorOptions($editor, column);\n          editorOptions.sharedData = sharedData;\n          that._renderEditor($editor, editorOptions);\n          eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", function (e) {\n            var $prevElement = $cell.find(\"[tabindex]\").not(e.target).first();\n            if (\"tab\" === normalizeKeyName(e) && e.shiftKey) {\n              e.preventDefault();\n              that._hideFilterRange();\n              if (!$prevElement.length) {\n                $prevElement = $cell.prev().find(\"[tabindex]\").last();\n              }\n              eventsEngine.trigger($prevElement, \"focus\");\n            }\n          });\n          $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_END_CLASS)).appendTo(contentElement);\n          editorOptions = that._getEditorOptions($editor, column);\n          editorOptions.sharedData = sharedData;\n          that._renderEditor($editor, editorOptions);\n          eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", function (e) {\n            if (\"tab\" === normalizeKeyName(e) && !e.shiftKey) {\n              e.preventDefault();\n              that._hideFilterRange();\n              eventsEngine.trigger($cell.next().find(\"[tabindex]\").first(), \"focus\");\n            }\n          });\n          return $(contentElement).addClass(that.getWidgetContainerClass());\n        },\n        onShown: function (e) {\n          var $editor = e.component.$content().find(\".\" + EDITOR_CONTAINER_CLASS).first();\n          eventsEngine.trigger($editor.find(EDITORS_INPUT_SELECTOR), \"focus\");\n        },\n        onHidden: function () {\n          column = that._columnsController.columnOption(column.index);\n          $cell.find(\".\" + MENU_CLASS).parent().addClass(EDITOR_WITH_MENU_CLASS);\n          if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n            that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n            that.component.updateDimensions();\n          }\n        }\n      });\n    },\n    _updateFilterRangeOverlay: function (options) {\n      var overlayInstance = this._filterRangeOverlayInstance;\n      overlayInstance && overlayInstance.option(options);\n    },\n    _showFilterRange: function ($cell, column) {\n      var $overlay = $cell.children(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS));\n      var overlayInstance = $overlay.length && $overlay.data(\"dxOverlay\");\n      if (!overlayInstance && column) {\n        overlayInstance = this._initFilterRangeOverlay($cell, column);\n      }\n      if (!overlayInstance.option(\"visible\")) {\n        this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.hide();\n        this._filterRangeOverlayInstance = overlayInstance;\n        this._updateFilterRangeOverlay({\n          width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\n        });\n        this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.show();\n      }\n    },\n    _hideFilterRange: function () {\n      var overlayInstance = this._filterRangeOverlayInstance;\n      overlayInstance && overlayInstance.hide();\n    },\n    getFilterRangeOverlayInstance: function () {\n      return this._filterRangeOverlayInstance;\n    },\n    _createRow: function (row) {\n      var $row = this.callBase(row);\n      if (\"filter\" === row.rowType) {\n        $row.addClass(this.addWidgetPrefix(FILTER_ROW_CLASS));\n        if (!this.option(\"useLegacyKeyboardNavigation\")) {\n          eventsEngine.on($row, \"keydown\", event => selectView(\"filterRow\", this, event));\n        }\n      }\n      return $row;\n    },\n    _getRows: function () {\n      var result = this.callBase();\n      if (this.isFilterRowVisible()) {\n        result.push({\n          rowType: \"filter\"\n        });\n      }\n      return result;\n    },\n    _renderFilterCell: function (cell, options) {\n      var column = options.column;\n      var $cell = $(cell);\n      if (this.component.option(\"showColumnHeaders\")) {\n        this.setAria(\"describedby\", column.headerId, $cell);\n      }\n      this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaFilterCell\"), $cell);\n      $cell.addClass(EDITOR_CELL_CLASS);\n      var $container = $(\"<div>\").appendTo($cell);\n      var $editorContainer = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS).appendTo($container);\n      if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\n        this._renderFilterRangeContent($cell, column);\n      } else {\n        var editorOptions = this._getEditorOptions($editorContainer, column);\n        this._renderEditor($editorContainer, editorOptions);\n      }\n      var alignment = column.alignment;\n      if (alignment && \"center\" !== alignment) {\n        $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", column.alignment);\n      }\n      if (column.filterOperations && column.filterOperations.length) {\n        this._renderFilterOperationChooser($container, column, $editorContainer);\n      }\n    },\n    _renderCellContent: function ($cell, options) {\n      var that = this;\n      var column = options.column;\n      if (\"filter\" === options.rowType) {\n        if (column.command) {\n          $cell.html(\"&nbsp;\");\n        } else if (column.allowFiltering) {\n          that.renderTemplate($cell, that._renderFilterCell.bind(that), options).done(() => {\n            that._updateCell($cell, options);\n          });\n          return;\n        }\n      }\n      this.callBase.apply(this, arguments);\n    },\n    _getEditorOptions: function ($editorContainer, column) {\n      var that = this;\n      var accessibilityOptions = {\n        editorOptions: {\n          inputAttr: that._getFilterInputAccessibilityAttributes(column)\n        }\n      };\n      var result = extend(accessibilityOptions, column, {\n        value: getFilterValue(that, column.index, $editorContainer),\n        parentType: \"filterRow\",\n        showAllText: that.option(\"filterRow.showAllText\"),\n        updateValueTimeout: \"onClick\" === that.option(\"filterRow.applyFilter\") ? 0 : FILTERING_TIMEOUT,\n        width: null,\n        setValue: function (value, notFireEvent) {\n          updateFilterValue(that, {\n            column: column,\n            value: value,\n            container: $editorContainer,\n            notFireEvent: notFireEvent\n          });\n        }\n      });\n      if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n        if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\n          result.placeholder = that.option(\"filterRow.betweenStartText\");\n        } else {\n          result.placeholder = that.option(\"filterRow.betweenEndText\");\n        }\n      }\n      return result;\n    },\n    _getFilterInputAccessibilityAttributes: function (column) {\n      var columnAriaLabel = messageLocalization.format(\"dxDataGrid-ariaFilterCell\");\n      if (this.component.option(\"showColumnHeaders\")) {\n        return {\n          \"aria-label\": columnAriaLabel,\n          \"aria-describedby\": column.headerId\n        };\n      }\n      return {\n        \"aria-label\": columnAriaLabel\n      };\n    },\n    _renderEditor: function ($editorContainer, options) {\n      $editorContainer.empty();\n      var $element = $(\"<div>\").appendTo($editorContainer);\n      var editorController = this.getController(\"editorFactory\");\n      var dataSource = this.getController(\"data\").dataSource();\n      var filterRowController = this.getController(\"applyFilter\");\n      if (options.lookup && this.option(\"syncLookupFilterValues\")) {\n        filterRowController.setCurrentColumnForFiltering(options);\n        var filter = this.getController(\"data\").getCombinedFilter();\n        filterRowController.setCurrentColumnForFiltering(null);\n        var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(options, dataSource, filter);\n        var lookupOptions = _extends({}, options, {\n          lookup: _extends({}, options.lookup, {\n            dataSource: lookupDataSource\n          })\n        });\n        return editorController.createEditor($element, lookupOptions);\n      } else {\n        return editorController.createEditor($element, options);\n      }\n    },\n    _renderFilterRangeContent: function ($cell, column) {\n      var that = this;\n      var $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\n      $editorContainer.empty();\n      var $filterRangeContent = $(\"<div>\").addClass(FILTER_RANGE_CONTENT_CLASS).attr(\"tabindex\", this.option(\"tabIndex\"));\n      eventsEngine.on($filterRangeContent, \"focusin\", function () {\n        that._showFilterRange($cell, column);\n      });\n      $filterRangeContent.appendTo($editorContainer);\n      that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n    },\n    _updateFilterRangeContent: function ($cell, value) {\n      var $filterRangeContent = $cell.find(\".\" + FILTER_RANGE_CONTENT_CLASS);\n      if ($filterRangeContent.length) {\n        if (\"\" === value) {\n          $filterRangeContent.html(\"&nbsp;\");\n        } else {\n          $filterRangeContent.text(value);\n        }\n      }\n    },\n    _updateFilterOperationChooser: function ($menu, column, $editorContainer) {\n      var that = this;\n      var isCellWasFocused;\n      var restoreFocus = function () {\n        var menu = Menu.getInstance($menu);\n        menu && menu.option(\"focusedElement\", null);\n        isCellWasFocused && that._focusEditor($editorContainer);\n      };\n      that._createComponent($menu, Menu, {\n        integrationOptions: {},\n        activeStateEnabled: false,\n        selectionMode: \"single\",\n        cssClass: that.getWidgetContainerClass() + \" \" + CELL_FOCUS_DISABLED_CLASS + \" \" + FILTER_MENU,\n        showFirstSubmenuMode: \"onHover\",\n        hideSubmenuOnMouseLeave: true,\n        items: [{\n          disabled: column.filterOperations && column.filterOperations.length ? false : true,\n          icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || \"default\"],\n          selectable: false,\n          items: that._getFilterOperationMenuItems(column)\n        }],\n        onItemClick: function (properties) {\n          var selectedFilterOperation = properties.itemData.name;\n          var columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column);\n          var notFocusEditor = false;\n          var isOnClickMode = isOnClickApplyFilterMode(that);\n          var options = {};\n          if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {\n            return;\n          }\n          if (selectedFilterOperation) {\n            options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = selectedFilterOperation;\n            if (\"between\" === selectedFilterOperation || \"between\" === columnSelectedFilterOperation) {\n              notFocusEditor = \"between\" === selectedFilterOperation;\n              options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n            }\n          } else {\n            options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n            options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = column.defaultSelectedFilterOperation || null;\n          }\n          that._columnsController.columnOption(column.index, options);\n          that._applyFilterViewController.setHighLight($editorContainer, true);\n          if (!selectedFilterOperation) {\n            var editor = getEditorInstance($editorContainer);\n            if (editor && \"dxDateBox\" === editor.NAME && !editor.option(\"isValid\")) {\n              editor.reset();\n              editor.option(\"isValid\", true);\n            }\n          }\n          if (!notFocusEditor) {\n            that._focusEditor($editorContainer);\n          } else {\n            that._showFilterRange($editorContainer.closest(\".\" + EDITOR_CELL_CLASS), column);\n          }\n        },\n        onSubmenuShowing: function () {\n          isCellWasFocused = that._isEditorFocused($editorContainer);\n          that.getController(\"editorFactory\").loseFocus();\n        },\n        onSubmenuHiding: function () {\n          eventsEngine.trigger($menu, \"blur\");\n          restoreFocus();\n        },\n        onContentReady: function (e) {\n          eventsEngine.on($menu, \"blur\", () => {\n            var menu = e.component;\n            menu._hideSubmenuAfterTimeout();\n            restoreFocus();\n          });\n        },\n        rtlEnabled: that.option(\"rtlEnabled\")\n      });\n    },\n    _isEditorFocused: function ($container) {\n      return $container.hasClass(FOCUSED_CLASS) || $container.parents(\".\" + FOCUSED_CLASS).length;\n    },\n    _focusEditor: function ($container) {\n      this.getController(\"editorFactory\").focus($container);\n      eventsEngine.trigger($container.find(EDITORS_INPUT_SELECTOR), \"focus\");\n    },\n    _renderFilterOperationChooser: function ($container, column, $editorContainer) {\n      var $menu;\n      if (this.option(\"filterRow.showOperationChooser\")) {\n        $container.addClass(EDITOR_WITH_MENU_CLASS);\n        $menu = $(\"<div>\").prependTo($container);\n        this._updateFilterOperationChooser($menu, column, $editorContainer);\n      }\n    },\n    _getFilterOperationMenuItems: function (column) {\n      var that = this;\n      var result = [{}];\n      var filterRowOptions = that.option(\"filterRow\");\n      var operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};\n      if (column.filterOperations && column.filterOperations.length) {\n        var availableFilterOperations = column.filterOperations.filter(function (value) {\n          return isDefined(OPERATION_DESCRIPTORS[value]);\n        });\n        result = map(availableFilterOperations, function (value) {\n          var descriptionName = OPERATION_DESCRIPTORS[value];\n          return {\n            name: value,\n            selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value,\n            text: operationDescriptions[descriptionName],\n            icon: OPERATION_ICONS[value]\n          };\n        });\n        result.push({\n          name: null,\n          text: filterRowOptions && filterRowOptions.resetOperationText,\n          icon: OPERATION_ICONS.default\n        });\n      }\n      return result;\n    },\n    _handleDataChanged: function (e) {\n      var _e$operationTypes, _e$operationTypes2;\n      this.callBase.apply(this, arguments);\n      if (null !== (_e$operationTypes = e.operationTypes) && void 0 !== _e$operationTypes && _e$operationTypes.filtering || null !== (_e$operationTypes2 = e.operationTypes) && void 0 !== _e$operationTypes2 && _e$operationTypes2.fullReload) {\n        var _e$operationTypes3;\n        this.updateLookupDataSource(null === (_e$operationTypes3 = e.operationTypes) || void 0 === _e$operationTypes3 ? void 0 : _e$operationTypes3.filtering);\n      }\n    },\n    updateLookupDataSource: function (filterChanged) {\n      if (!this.option(\"syncLookupFilterValues\")) {\n        return;\n      }\n      if (!this.element()) {\n        return;\n      }\n      var columns = this._columnsController.getVisibleColumns();\n      var dataSource = this._dataController.dataSource();\n      var applyFilterViewController = this._applyFilterViewController;\n      var rowIndex = this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index();\n      if (-1 === rowIndex) {\n        return;\n      }\n      columns.forEach((column, index) => {\n        if (!column.lookup || column.calculateCellValue !== column.defaultCalculateCellValue) {\n          return;\n        }\n        var $cell = this._getCellElement(rowIndex, index);\n        var editor = getEditorInstance(null === $cell || void 0 === $cell ? void 0 : $cell.find(\".dx-editor-container\"));\n        if (editor) {\n          applyFilterViewController.setCurrentColumnForFiltering(column);\n          var filter = this._dataController.getCombinedFilter() || null;\n          applyFilterViewController.setCurrentColumnForFiltering(null);\n          var editorDataSource = editor.option(\"dataSource\");\n          var shouldUpdateFilter = !filterChanged || !equalByValue(editorDataSource.__dataGridSourceFilter, filter);\n          if (shouldUpdateFilter) {\n            var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter);\n            editor.option(\"dataSource\", lookupDataSource);\n          }\n        }\n      });\n    },\n    optionChanged: function (args) {\n      switch (args.name) {\n        case \"filterRow\":\n        case \"showColumnLines\":\n          this._invalidate(true, true);\n          args.handled = true;\n          break;\n        case \"syncLookupFilterValues\":\n          if (args.value) {\n            this.updateLookupDataSource();\n          } else {\n            this.render();\n          }\n          args.handled = true;\n          break;\n        default:\n          this.callBase(args);\n      }\n    }\n  };\n}();\nvar DataControllerFilterRowExtender = {\n  skipCalculateColumnFilters: function () {\n    return false;\n  },\n  _calculateAdditionalFilter: function () {\n    if (this.skipCalculateColumnFilters()) {\n      return this.callBase();\n    }\n    var filters = [this.callBase()];\n    var columns = this._columnsController.getVisibleColumns(null, true);\n    var filterRowController = this.getController(\"applyFilter\");\n    each(columns, function () {\n      var _filterRowController$;\n      var shouldSkip = (null === (_filterRowController$ = filterRowController.getCurrentColumnForFiltering()) || void 0 === _filterRowController$ ? void 0 : _filterRowController$.index) === this.index;\n      if (this.allowFiltering && this.calculateFilterExpression && isDefined(this.filterValue) && !shouldSkip) {\n        var filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, \"filterRow\");\n        filters.push(filter);\n      }\n    });\n    return gridCoreUtils.combineFilters(filters);\n  }\n};\nvar ApplyFilterViewController = modules.ViewController.inherit({\n  _getHeaderPanel: function () {\n    if (!this._headerPanel) {\n      this._headerPanel = this.getView(\"headerPanel\");\n    }\n    return this._headerPanel;\n  },\n  setHighLight: function ($element, value) {\n    if (isOnClickApplyFilterMode(this)) {\n      $element && $element.toggleClass(HIGHLIGHT_OUTLINE_CLASS, value) && $element.closest(\".\" + EDITOR_CELL_CLASS).toggleClass(FILTER_MODIFIED_CLASS, value);\n      this._getHeaderPanel().enableApplyButton(value);\n    }\n  },\n  applyFilter: function () {\n    var columnsController = this.getController(\"columns\");\n    var columns = columnsController.getColumns();\n    columnsController.beginUpdate();\n    for (var i = 0; i < columns.length; i++) {\n      var column = columns[i];\n      if (void 0 !== column.bufferedFilterValue) {\n        columnsController.columnOption(i, \"filterValue\", column.bufferedFilterValue);\n        column.bufferedFilterValue = void 0;\n      }\n      if (void 0 !== column.bufferedSelectedFilterOperation) {\n        columnsController.columnOption(i, \"selectedFilterOperation\", column.bufferedSelectedFilterOperation);\n        column.bufferedSelectedFilterOperation = void 0;\n      }\n    }\n    columnsController.endUpdate();\n    this.removeHighLights();\n  },\n  removeHighLights: function () {\n    if (isOnClickApplyFilterMode(this)) {\n      var columnHeadersViewElement = this.getView(\"columnHeadersView\").element();\n      columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + HIGHLIGHT_OUTLINE_CLASS).removeClass(HIGHLIGHT_OUTLINE_CLASS);\n      columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + FILTER_MODIFIED_CLASS).removeClass(FILTER_MODIFIED_CLASS);\n      this._getHeaderPanel().enableApplyButton(false);\n    }\n  },\n  setCurrentColumnForFiltering: function (column) {\n    this._currentColumn = column;\n  },\n  getCurrentColumnForFiltering: function () {\n    return this._currentColumn;\n  }\n});\nexport var filterRowModule = {\n  defaultOptions: function () {\n    return {\n      syncLookupFilterValues: true,\n      filterRow: {\n        visible: false,\n        showOperationChooser: true,\n        showAllText: messageLocalization.format(\"dxDataGrid-filterRowShowAllText\"),\n        resetOperationText: messageLocalization.format(\"dxDataGrid-filterRowResetOperationText\"),\n        applyFilter: \"auto\",\n        applyFilterText: messageLocalization.format(\"dxDataGrid-applyFilterText\"),\n        operationDescriptions: {\n          equal: messageLocalization.format(\"dxDataGrid-filterRowOperationEquals\"),\n          notEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationNotEquals\"),\n          lessThan: messageLocalization.format(\"dxDataGrid-filterRowOperationLess\"),\n          lessThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationLessOrEquals\"),\n          greaterThan: messageLocalization.format(\"dxDataGrid-filterRowOperationGreater\"),\n          greaterThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationGreaterOrEquals\"),\n          startsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationStartsWith\"),\n          contains: messageLocalization.format(\"dxDataGrid-filterRowOperationContains\"),\n          notContains: messageLocalization.format(\"dxDataGrid-filterRowOperationNotContains\"),\n          endsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationEndsWith\"),\n          between: messageLocalization.format(\"dxDataGrid-filterRowOperationBetween\"),\n          isBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsBlank\"),\n          isNotBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\n        },\n        betweenStartText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenStartText\"),\n        betweenEndText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenEndText\")\n      }\n    };\n  },\n  controllers: {\n    applyFilter: ApplyFilterViewController\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterRowExtender,\n      columnsResizer: {\n        _startResizing: function () {\n          var that = this;\n          that.callBase.apply(that, arguments);\n          if (that.isResizing()) {\n            var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n            if (overlayInstance) {\n              var cellIndex = overlayInstance.$element().closest(\"td\").index();\n              if (cellIndex === that._targetPoint.columnIndex || cellIndex === that._targetPoint.columnIndex + 1) {\n                overlayInstance.$content().hide();\n              }\n            }\n          }\n        },\n        _endResizing: function () {\n          var that = this;\n          var $cell;\n          if (that.isResizing()) {\n            var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n            if (overlayInstance) {\n              $cell = overlayInstance.$element().closest(\"td\");\n              that._columnHeadersView._updateFilterRangeOverlay({\n                width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\n              });\n              overlayInstance.$content().show();\n            }\n          }\n          that.callBase.apply(that, arguments);\n        }\n      },\n      editing: {\n        updateFieldValue(options) {\n          if (options.column.lookup) {\n            this._needUpdateLookupDataSource = true;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _afterSaveEditData(cancel) {\n          if (this._needUpdateLookupDataSource && !cancel) {\n            var _this$getView;\n            null === (_this$getView = this.getView(\"columnHeadersView\")) || void 0 === _this$getView ? void 0 : _this$getView.updateLookupDataSource();\n          }\n          this._needUpdateLookupDataSource = false;\n          return this.callBase.apply(this, arguments);\n        },\n        _afterCancelEditData() {\n          this._needUpdateLookupDataSource = false;\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewFilterRowExtender,\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          var filterItem = this._prepareFilterItem(items);\n          return filterItem.concat(items);\n        },\n        _prepareFilterItem: function () {\n          var that = this;\n          var filterItem = [];\n          if (that._isShowApplyFilterButton()) {\n            var hintText = that.option(\"filterRow.applyFilterText\");\n            var columns = that._columnsController.getColumns();\n            var disabled = !columns.filter(function (column) {\n              return void 0 !== column.bufferedFilterValue;\n            }).length;\n            var toolbarItem = {\n              widget: \"dxButton\",\n              options: {\n                icon: \"apply-filter\",\n                disabled: disabled,\n                onClick: function () {\n                  that._applyFilterViewController.applyFilter();\n                },\n                hint: hintText,\n                text: hintText,\n                onInitialized: function (e) {\n                  $(e.element).addClass(that._getToolbarButtonClass(APPLY_BUTTON_CLASS));\n                }\n              },\n              showText: \"inMenu\",\n              name: \"applyFilterButton\",\n              location: \"after\",\n              locateInMenu: \"auto\",\n              sortIndex: 10\n            };\n            filterItem.push(toolbarItem);\n          }\n          return filterItem;\n        },\n        _isShowApplyFilterButton: function () {\n          var filterRowOptions = this.option(\"filterRow\");\n          return filterRowOptions && filterRowOptions.visible && \"onClick\" === filterRowOptions.applyFilter;\n        },\n        init: function () {\n          this.callBase();\n          this._dataController = this.getController(\"data\");\n          this._applyFilterViewController = this.getController(\"applyFilter\");\n        },\n        enableApplyButton: function (value) {\n          this.setToolbarItemDisabled(\"applyFilterButton\", !value);\n        },\n        isVisible: function () {\n          return this.callBase() || this._isShowApplyFilterButton();\n        },\n        optionChanged: function (args) {\n          if (\"filterRow\" === args.name) {\n            this._invalidate();\n            args.handled = true;\n          } else {\n            this.callBase(args);\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["_extends","getOuterWidth","$","eventsEngine","isDefined","extend","normalizeKeyName","each","map","modules","gridCoreUtils","messageLocalization","Editor","Overlay","Menu","selectView","equalByValue","OPERATION_ICONS","default","notcontains","contains","startswith","endswith","between","OPERATION_DESCRIPTORS","FILTERING_TIMEOUT","CORRECT_FILTER_RANGE_OVERLAY_WIDTH","FILTER_ROW_CLASS","FILTER_RANGE_OVERLAY_CLASS","FILTER_RANGE_START_CLASS","FILTER_RANGE_END_CLASS","MENU_CLASS","EDITOR_WITH_MENU_CLASS","EDITOR_CONTAINER_CLASS","EDITOR_CELL_CLASS","FILTER_MENU","APPLY_BUTTON_CLASS","HIGHLIGHT_OUTLINE_CLASS","FOCUSED_CLASS","CELL_FOCUS_DISABLED_CLASS","FILTER_RANGE_CONTENT_CLASS","FILTER_MODIFIED_CLASS","EDITORS_INPUT_SELECTOR","BETWEEN_OPERATION_DATA_TYPES","isOnClickApplyFilterMode","that","option","getEditorInstance","$editorContainer","$editor","children","componentNames","data","editor","length","ColumnHeadersViewFilterRowExtender","getRangeTextByFilterValue","column","result","rangeEnd","filterValue","getColumnFilterValue","formatOptions","getFormatOptionsByColumn","Array","isArray","formatValue","bufferedFilterValue","getColumnSelectedFilterOperation","bufferedSelectedFilterOperation","selectedFilterOperation","getFilterValue","columnIndex","_columnsController","columnOption","isFilterRange","closest","addWidgetPrefix","isRangeStart","hasClass","indexOf","dataType","updateFilterValue","options","value","container","index","_applyFilterViewController","setHighLight","columnOptionName","normalizedValue","columnFilterValue","isBetween","notFireEvent","_updateEditorValue","_columnOptionChanged","e","optionNames","$cell","$editorRangeElements","$menu","checkChanges","visibleIndex","getVisibleIndex","_getCellElement","element","find","first","overlayInstance","$content","last","_updateFilterRangeContent","_updateFilterOperationChooser","_renderFilterRangeContent","_renderEditor","_getEditorOptions","_hideFilterRange","callBase","_renderCore","_filterRangeOverlayInstance","apply","arguments","_resizeCore","repaint","isFilterRowVisible","_isElementVisible","isVisible","init","getController","_initFilterRangeOverlay","sharedData","filterRangeOverlayClass","$overlay","addClass","appendTo","_createComponent","height","shading","showTitle","focusStateEnabled","hideOnOutsideClick","wrapperAttr","class","animation","position","my","at","of","offset","contentTemplate","contentElement","editorOptions","on","$prevElement","not","target","shiftKey","preventDefault","prev","trigger","next","getWidgetContainerClass","onShown","component","onHidden","parent","updateDimensions","_updateFilterRangeOverlay","_showFilterRange","hide","width","show","getFilterRangeOverlayInstance","_createRow","row","$row","rowType","event","_getRows","push","_renderFilterCell","cell","setAria","headerId","format","$container","alignment","css","filterOperations","_renderFilterOperationChooser","_renderCellContent","command","html","allowFiltering","renderTemplate","bind","done","_updateCell","accessibilityOptions","inputAttr","_getFilterInputAccessibilityAttributes","parentType","showAllText","updateValueTimeout","setValue","placeholder","columnAriaLabel","empty","$element","editorController","dataSource","filterRowController","lookup","setCurrentColumnForFiltering","filter","getCombinedFilter","lookupDataSource","getWrappedLookupDataSource","lookupOptions","createEditor","$filterRangeContent","attr","text","isCellWasFocused","restoreFocus","menu","getInstance","_focusEditor","integrationOptions","activeStateEnabled","selectionMode","cssClass","showFirstSubmenuMode","hideSubmenuOnMouseLeave","items","disabled","icon","selectable","_getFilterOperationMenuItems","onItemClick","properties","itemData","name","columnSelectedFilterOperation","notFocusEditor","isOnClickMode","defaultSelectedFilterOperation","NAME","reset","onSubmenuShowing","_isEditorFocused","loseFocus","onSubmenuHiding","onContentReady","_hideSubmenuAfterTimeout","rtlEnabled","parents","focus","prependTo","filterRowOptions","operationDescriptions","availableFilterOperations","descriptionName","selected","defaultFilterOperation","resetOperationText","_handleDataChanged","_e$operationTypes","_e$operationTypes2","operationTypes","filtering","fullReload","_e$operationTypes3","updateLookupDataSource","filterChanged","columns","getVisibleColumns","_dataController","applyFilterViewController","rowIndex","forEach","calculateCellValue","defaultCalculateCellValue","editorDataSource","shouldUpdateFilter","__dataGridSourceFilter","optionChanged","args","_invalidate","handled","render","DataControllerFilterRowExtender","skipCalculateColumnFilters","_calculateAdditionalFilter","filters","_filterRowController$","shouldSkip","getCurrentColumnForFiltering","calculateFilterExpression","createFilterExpression","combineFilters","ApplyFilterViewController","ViewController","inherit","_getHeaderPanel","_headerPanel","getView","toggleClass","enableApplyButton","applyFilter","columnsController","getColumns","beginUpdate","i","endUpdate","removeHighLights","columnHeadersViewElement","removeClass","_currentColumn","filterRowModule","defaultOptions","syncLookupFilterValues","filterRow","visible","showOperationChooser","applyFilterText","equal","notEqual","lessThan","lessThanOrEqual","greaterThan","greaterThanOrEqual","startsWith","notContains","endsWith","isBlank","isNotBlank","betweenStartText","betweenEndText","controllers","extenders","columnsResizer","_startResizing","isResizing","_columnHeadersView","cellIndex","_targetPoint","_endResizing","editing","updateFieldValue","_needUpdateLookupDataSource","_afterSaveEditData","cancel","_this$getView","_afterCancelEditData","views","columnHeadersView","headerPanel","_getToolbarItems","filterItem","_prepareFilterItem","concat","_isShowApplyFilterButton","hintText","toolbarItem","widget","onClick","hint","onInitialized","_getToolbarButtonClass","showText","location","locateInMenu","sortIndex","setToolbarItemDisabled"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_row.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_row.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    getOuterWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    normalizeKeyName\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../core/utils/iterator\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Editor from \"../editor/editor\";\r\nimport Overlay from \"../overlay/ui.overlay\";\r\nimport Menu from \"../menu\";\r\nimport {\r\n    selectView\r\n} from \"../shared/accessibility\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nvar OPERATION_ICONS = {\r\n    \"=\": \"filter-operation-equals\",\r\n    \"<>\": \"filter-operation-not-equals\",\r\n    \"<\": \"filter-operation-less\",\r\n    \"<=\": \"filter-operation-less-equal\",\r\n    \">\": \"filter-operation-greater\",\r\n    \">=\": \"filter-operation-greater-equal\",\r\n    default: \"filter-operation-default\",\r\n    notcontains: \"filter-operation-not-contains\",\r\n    contains: \"filter-operation-contains\",\r\n    startswith: \"filter-operation-starts-with\",\r\n    endswith: \"filter-operation-ends-with\",\r\n    between: \"filter-operation-between\"\r\n};\r\nvar OPERATION_DESCRIPTORS = {\r\n    \"=\": \"equal\",\r\n    \"<>\": \"notEqual\",\r\n    \"<\": \"lessThan\",\r\n    \"<=\": \"lessThanOrEqual\",\r\n    \">\": \"greaterThan\",\r\n    \">=\": \"greaterThanOrEqual\",\r\n    startswith: \"startsWith\",\r\n    contains: \"contains\",\r\n    notcontains: \"notContains\",\r\n    endswith: \"endsWith\",\r\n    between: \"between\"\r\n};\r\nvar FILTERING_TIMEOUT = 700;\r\nvar CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1;\r\nvar FILTER_ROW_CLASS = \"filter-row\";\r\nvar FILTER_RANGE_OVERLAY_CLASS = \"filter-range-overlay\";\r\nvar FILTER_RANGE_START_CLASS = \"filter-range-start\";\r\nvar FILTER_RANGE_END_CLASS = \"filter-range-end\";\r\nvar MENU_CLASS = \"dx-menu\";\r\nvar EDITOR_WITH_MENU_CLASS = \"dx-editor-with-menu\";\r\nvar EDITOR_CONTAINER_CLASS = \"dx-editor-container\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar FILTER_MENU = \"dx-filter-menu\";\r\nvar APPLY_BUTTON_CLASS = \"dx-apply-button\";\r\nvar HIGHLIGHT_OUTLINE_CLASS = \"dx-highlight-outline\";\r\nvar FOCUSED_CLASS = \"dx-focused\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar FILTER_RANGE_CONTENT_CLASS = \"dx-filter-range-content\";\r\nvar FILTER_MODIFIED_CLASS = \"dx-filter-modified\";\r\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\r\nvar BETWEEN_OPERATION_DATA_TYPES = [\"date\", \"datetime\", \"number\"];\r\n\r\nfunction isOnClickApplyFilterMode(that) {\r\n    return \"onClick\" === that.option(\"filterRow.applyFilter\")\r\n}\r\nvar getEditorInstance = function($editorContainer) {\r\n    var $editor = $editorContainer && $editorContainer.children();\r\n    var componentNames = $editor && $editor.data(\"dxComponents\");\r\n    var editor = componentNames && componentNames.length && $editor.data(componentNames[0]);\r\n    if (editor instanceof Editor) {\r\n        return editor\r\n    }\r\n};\r\nvar ColumnHeadersViewFilterRowExtender = function() {\r\n    var getRangeTextByFilterValue = function(that, column) {\r\n        var result = \"\";\r\n        var rangeEnd = \"\";\r\n        var filterValue = getColumnFilterValue(that, column);\r\n        var formatOptions = gridCoreUtils.getFormatOptionsByColumn(column, \"filterRow\");\r\n        if (Array.isArray(filterValue)) {\r\n            result = gridCoreUtils.formatValue(filterValue[0], formatOptions);\r\n            rangeEnd = gridCoreUtils.formatValue(filterValue[1], formatOptions);\r\n            if (\"\" !== rangeEnd) {\r\n                result += \" - \" + rangeEnd\r\n            }\r\n        } else if (isDefined(filterValue)) {\r\n            result = gridCoreUtils.formatValue(filterValue, formatOptions)\r\n        }\r\n        return result\r\n    };\r\n\r\n    function getColumnFilterValue(that, column) {\r\n        if (column) {\r\n            return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue\r\n        }\r\n    }\r\n    var getColumnSelectedFilterOperation = function(that, column) {\r\n        if (column) {\r\n            return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation\r\n        }\r\n    };\r\n    var getFilterValue = function(that, columnIndex, $editorContainer) {\r\n        var column = that._columnsController.columnOption(columnIndex);\r\n        var filterValue = getColumnFilterValue(that, column);\r\n        var isFilterRange = $editorContainer.closest(\".\" + that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).length;\r\n        var isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS));\r\n        if (filterValue && Array.isArray(filterValue) && \"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n            if (isRangeStart) {\r\n                return filterValue[0]\r\n            } else {\r\n                return filterValue[1]\r\n            }\r\n        }\r\n        return !isFilterRange && function(filterValue, column) {\r\n            if (column && BETWEEN_OPERATION_DATA_TYPES.indexOf(column.dataType) >= 0 && Array.isArray(filterValue)) {\r\n                return false\r\n            }\r\n            return void 0 !== filterValue\r\n        }(filterValue, column) ? filterValue : null\r\n    };\r\n    var updateFilterValue = function(that, options) {\r\n        var value = \"\" === options.value ? null : options.value;\r\n        var $editorContainer = options.container;\r\n        var column = that._columnsController.columnOption(options.column.index);\r\n        var filterValue = getFilterValue(that, column.index, $editorContainer);\r\n        if (!isDefined(filterValue) && !isDefined(value)) {\r\n            return\r\n        }\r\n        that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value);\r\n        var columnOptionName = isOnClickApplyFilterMode(that) ? \"bufferedFilterValue\" : \"filterValue\";\r\n        var normalizedValue = function(that, filterValue, column, $editorContainer) {\r\n            if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n                var columnFilterValue = getColumnFilterValue(that, column);\r\n                if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\r\n                    return [filterValue, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0]\r\n                } else {\r\n                    return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue]\r\n                }\r\n            }\r\n            return filterValue\r\n        }(that, value, column, $editorContainer);\r\n        var isBetween = \"between\" === getColumnSelectedFilterOperation(that, column);\r\n        var notFireEvent = options.notFireEvent || isBetween && Array.isArray(normalizedValue) && normalizedValue.indexOf(void 0) >= 0;\r\n        that._columnsController.columnOption(column.index, columnOptionName, normalizedValue, notFireEvent)\r\n    };\r\n    return {\r\n        _updateEditorValue: function(column, $editorContainer) {\r\n            var editor = getEditorInstance($editorContainer);\r\n            editor && editor.option(\"value\", getFilterValue(this, column.index, $editorContainer))\r\n        },\r\n        _columnOptionChanged: function(e) {\r\n            var optionNames = e.optionNames;\r\n            var $cell;\r\n            var $editorContainer;\r\n            var $editorRangeElements;\r\n            var $menu;\r\n            if (gridCoreUtils.checkChanges(optionNames, [\"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"filterValues\", \"filterType\"]) && void 0 !== e.columnIndex) {\r\n                var visibleIndex = this._columnsController.getVisibleIndex(e.columnIndex);\r\n                var column = this._columnsController.columnOption(e.columnIndex);\r\n                $cell = this._getCellElement(this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index(), visibleIndex) || $();\r\n                $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\r\n                if (optionNames.filterValue || optionNames.bufferedFilterValue) {\r\n                    this._updateEditorValue(column, $editorContainer);\r\n                    var overlayInstance = $cell.find(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).data(\"dxOverlay\");\r\n                    if (overlayInstance) {\r\n                        $editorRangeElements = overlayInstance.$content().find(\".\" + EDITOR_CONTAINER_CLASS);\r\n                        this._updateEditorValue(column, $editorRangeElements.first());\r\n                        this._updateEditorValue(column, $editorRangeElements.last())\r\n                    }\r\n                    if (!overlayInstance || !overlayInstance.option(\"visible\")) {\r\n                        this._updateFilterRangeContent($cell, getRangeTextByFilterValue(this, column))\r\n                    }\r\n                }\r\n                if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {\r\n                    if (visibleIndex >= 0 && column) {\r\n                        $menu = $cell.find(\".\" + MENU_CLASS);\r\n                        if ($menu.length) {\r\n                            this._updateFilterOperationChooser($menu, column, $editorContainer);\r\n                            if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\r\n                                this._renderFilterRangeContent($cell, column)\r\n                            } else if ($editorContainer.find(\".\" + FILTER_RANGE_CONTENT_CLASS).length) {\r\n                                this._renderEditor($editorContainer, this._getEditorOptions($editorContainer, column));\r\n                                this._hideFilterRange()\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return\r\n            }\r\n            this.callBase(e)\r\n        },\r\n        _renderCore: function() {\r\n            this._filterRangeOverlayInstance = null;\r\n            return this.callBase.apply(this, arguments)\r\n        },\r\n        _resizeCore: function() {\r\n            this.callBase.apply(this, arguments);\r\n            this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.repaint()\r\n        },\r\n        isFilterRowVisible: function() {\r\n            return this._isElementVisible(this.option(\"filterRow\"))\r\n        },\r\n        isVisible: function() {\r\n            return this.callBase() || this.isFilterRowVisible()\r\n        },\r\n        init: function() {\r\n            this.callBase();\r\n            this._applyFilterViewController = this.getController(\"applyFilter\")\r\n        },\r\n        _initFilterRangeOverlay: function($cell, column) {\r\n            var that = this;\r\n            var sharedData = {};\r\n            var $editorContainer = $cell.find(\".dx-editor-container\");\r\n            var filterRangeOverlayClass = that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS);\r\n            var $overlay = $(\"<div>\").addClass(filterRangeOverlayClass).appendTo($cell);\r\n            return that._createComponent($overlay, Overlay, {\r\n                height: \"auto\",\r\n                shading: false,\r\n                showTitle: false,\r\n                focusStateEnabled: false,\r\n                hideOnOutsideClick: true,\r\n                wrapperAttr: {\r\n                    class: filterRangeOverlayClass\r\n                },\r\n                animation: false,\r\n                position: {\r\n                    my: \"top\",\r\n                    at: \"top\",\r\n                    of: $editorContainer.length && $editorContainer || $cell,\r\n                    offset: \"0 -1\"\r\n                },\r\n                contentTemplate: function(contentElement) {\r\n                    var editorOptions;\r\n                    var $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_START_CLASS)).appendTo(contentElement);\r\n                    column = that._columnsController.columnOption(column.index);\r\n                    editorOptions = that._getEditorOptions($editor, column);\r\n                    editorOptions.sharedData = sharedData;\r\n                    that._renderEditor($editor, editorOptions);\r\n                    eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", (function(e) {\r\n                        var $prevElement = $cell.find(\"[tabindex]\").not(e.target).first();\r\n                        if (\"tab\" === normalizeKeyName(e) && e.shiftKey) {\r\n                            e.preventDefault();\r\n                            that._hideFilterRange();\r\n                            if (!$prevElement.length) {\r\n                                $prevElement = $cell.prev().find(\"[tabindex]\").last()\r\n                            }\r\n                            eventsEngine.trigger($prevElement, \"focus\")\r\n                        }\r\n                    }));\r\n                    $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_END_CLASS)).appendTo(contentElement);\r\n                    editorOptions = that._getEditorOptions($editor, column);\r\n                    editorOptions.sharedData = sharedData;\r\n                    that._renderEditor($editor, editorOptions);\r\n                    eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", (function(e) {\r\n                        if (\"tab\" === normalizeKeyName(e) && !e.shiftKey) {\r\n                            e.preventDefault();\r\n                            that._hideFilterRange();\r\n                            eventsEngine.trigger($cell.next().find(\"[tabindex]\").first(), \"focus\")\r\n                        }\r\n                    }));\r\n                    return $(contentElement).addClass(that.getWidgetContainerClass())\r\n                },\r\n                onShown: function(e) {\r\n                    var $editor = e.component.$content().find(\".\" + EDITOR_CONTAINER_CLASS).first();\r\n                    eventsEngine.trigger($editor.find(EDITORS_INPUT_SELECTOR), \"focus\")\r\n                },\r\n                onHidden: function() {\r\n                    column = that._columnsController.columnOption(column.index);\r\n                    $cell.find(\".\" + MENU_CLASS).parent().addClass(EDITOR_WITH_MENU_CLASS);\r\n                    if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n                        that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\r\n                        that.component.updateDimensions()\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        _updateFilterRangeOverlay: function(options) {\r\n            var overlayInstance = this._filterRangeOverlayInstance;\r\n            overlayInstance && overlayInstance.option(options)\r\n        },\r\n        _showFilterRange: function($cell, column) {\r\n            var $overlay = $cell.children(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS));\r\n            var overlayInstance = $overlay.length && $overlay.data(\"dxOverlay\");\r\n            if (!overlayInstance && column) {\r\n                overlayInstance = this._initFilterRangeOverlay($cell, column)\r\n            }\r\n            if (!overlayInstance.option(\"visible\")) {\r\n                this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.hide();\r\n                this._filterRangeOverlayInstance = overlayInstance;\r\n                this._updateFilterRangeOverlay({\r\n                    width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\r\n                });\r\n                this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.show()\r\n            }\r\n        },\r\n        _hideFilterRange: function() {\r\n            var overlayInstance = this._filterRangeOverlayInstance;\r\n            overlayInstance && overlayInstance.hide()\r\n        },\r\n        getFilterRangeOverlayInstance: function() {\r\n            return this._filterRangeOverlayInstance\r\n        },\r\n        _createRow: function(row) {\r\n            var $row = this.callBase(row);\r\n            if (\"filter\" === row.rowType) {\r\n                $row.addClass(this.addWidgetPrefix(FILTER_ROW_CLASS));\r\n                if (!this.option(\"useLegacyKeyboardNavigation\")) {\r\n                    eventsEngine.on($row, \"keydown\", event => selectView(\"filterRow\", this, event))\r\n                }\r\n            }\r\n            return $row\r\n        },\r\n        _getRows: function() {\r\n            var result = this.callBase();\r\n            if (this.isFilterRowVisible()) {\r\n                result.push({\r\n                    rowType: \"filter\"\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        _renderFilterCell: function(cell, options) {\r\n            var column = options.column;\r\n            var $cell = $(cell);\r\n            if (this.component.option(\"showColumnHeaders\")) {\r\n                this.setAria(\"describedby\", column.headerId, $cell)\r\n            }\r\n            this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaFilterCell\"), $cell);\r\n            $cell.addClass(EDITOR_CELL_CLASS);\r\n            var $container = $(\"<div>\").appendTo($cell);\r\n            var $editorContainer = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS).appendTo($container);\r\n            if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\r\n                this._renderFilterRangeContent($cell, column)\r\n            } else {\r\n                var editorOptions = this._getEditorOptions($editorContainer, column);\r\n                this._renderEditor($editorContainer, editorOptions)\r\n            }\r\n            var alignment = column.alignment;\r\n            if (alignment && \"center\" !== alignment) {\r\n                $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", column.alignment)\r\n            }\r\n            if (column.filterOperations && column.filterOperations.length) {\r\n                this._renderFilterOperationChooser($container, column, $editorContainer)\r\n            }\r\n        },\r\n        _renderCellContent: function($cell, options) {\r\n            var that = this;\r\n            var column = options.column;\r\n            if (\"filter\" === options.rowType) {\r\n                if (column.command) {\r\n                    $cell.html(\"&nbsp;\")\r\n                } else if (column.allowFiltering) {\r\n                    that.renderTemplate($cell, that._renderFilterCell.bind(that), options).done(() => {\r\n                        that._updateCell($cell, options)\r\n                    });\r\n                    return\r\n                }\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _getEditorOptions: function($editorContainer, column) {\r\n            var that = this;\r\n            var accessibilityOptions = {\r\n                editorOptions: {\r\n                    inputAttr: that._getFilterInputAccessibilityAttributes(column)\r\n                }\r\n            };\r\n            var result = extend(accessibilityOptions, column, {\r\n                value: getFilterValue(that, column.index, $editorContainer),\r\n                parentType: \"filterRow\",\r\n                showAllText: that.option(\"filterRow.showAllText\"),\r\n                updateValueTimeout: \"onClick\" === that.option(\"filterRow.applyFilter\") ? 0 : FILTERING_TIMEOUT,\r\n                width: null,\r\n                setValue: function(value, notFireEvent) {\r\n                    updateFilterValue(that, {\r\n                        column: column,\r\n                        value: value,\r\n                        container: $editorContainer,\r\n                        notFireEvent: notFireEvent\r\n                    })\r\n                }\r\n            });\r\n            if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n                if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\r\n                    result.placeholder = that.option(\"filterRow.betweenStartText\")\r\n                } else {\r\n                    result.placeholder = that.option(\"filterRow.betweenEndText\")\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        _getFilterInputAccessibilityAttributes: function(column) {\r\n            var columnAriaLabel = messageLocalization.format(\"dxDataGrid-ariaFilterCell\");\r\n            if (this.component.option(\"showColumnHeaders\")) {\r\n                return {\r\n                    \"aria-label\": columnAriaLabel,\r\n                    \"aria-describedby\": column.headerId\r\n                }\r\n            }\r\n            return {\r\n                \"aria-label\": columnAriaLabel\r\n            }\r\n        },\r\n        _renderEditor: function($editorContainer, options) {\r\n            $editorContainer.empty();\r\n            var $element = $(\"<div>\").appendTo($editorContainer);\r\n            var editorController = this.getController(\"editorFactory\");\r\n            var dataSource = this.getController(\"data\").dataSource();\r\n            var filterRowController = this.getController(\"applyFilter\");\r\n            if (options.lookup && this.option(\"syncLookupFilterValues\")) {\r\n                filterRowController.setCurrentColumnForFiltering(options);\r\n                var filter = this.getController(\"data\").getCombinedFilter();\r\n                filterRowController.setCurrentColumnForFiltering(null);\r\n                var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(options, dataSource, filter);\r\n                var lookupOptions = _extends({}, options, {\r\n                    lookup: _extends({}, options.lookup, {\r\n                        dataSource: lookupDataSource\r\n                    })\r\n                });\r\n                return editorController.createEditor($element, lookupOptions)\r\n            } else {\r\n                return editorController.createEditor($element, options)\r\n            }\r\n        },\r\n        _renderFilterRangeContent: function($cell, column) {\r\n            var that = this;\r\n            var $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\r\n            $editorContainer.empty();\r\n            var $filterRangeContent = $(\"<div>\").addClass(FILTER_RANGE_CONTENT_CLASS).attr(\"tabindex\", this.option(\"tabIndex\"));\r\n            eventsEngine.on($filterRangeContent, \"focusin\", (function() {\r\n                that._showFilterRange($cell, column)\r\n            }));\r\n            $filterRangeContent.appendTo($editorContainer);\r\n            that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column))\r\n        },\r\n        _updateFilterRangeContent: function($cell, value) {\r\n            var $filterRangeContent = $cell.find(\".\" + FILTER_RANGE_CONTENT_CLASS);\r\n            if ($filterRangeContent.length) {\r\n                if (\"\" === value) {\r\n                    $filterRangeContent.html(\"&nbsp;\")\r\n                } else {\r\n                    $filterRangeContent.text(value)\r\n                }\r\n            }\r\n        },\r\n        _updateFilterOperationChooser: function($menu, column, $editorContainer) {\r\n            var that = this;\r\n            var isCellWasFocused;\r\n            var restoreFocus = function() {\r\n                var menu = Menu.getInstance($menu);\r\n                menu && menu.option(\"focusedElement\", null);\r\n                isCellWasFocused && that._focusEditor($editorContainer)\r\n            };\r\n            that._createComponent($menu, Menu, {\r\n                integrationOptions: {},\r\n                activeStateEnabled: false,\r\n                selectionMode: \"single\",\r\n                cssClass: that.getWidgetContainerClass() + \" \" + CELL_FOCUS_DISABLED_CLASS + \" \" + FILTER_MENU,\r\n                showFirstSubmenuMode: \"onHover\",\r\n                hideSubmenuOnMouseLeave: true,\r\n                items: [{\r\n                    disabled: column.filterOperations && column.filterOperations.length ? false : true,\r\n                    icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || \"default\"],\r\n                    selectable: false,\r\n                    items: that._getFilterOperationMenuItems(column)\r\n                }],\r\n                onItemClick: function(properties) {\r\n                    var selectedFilterOperation = properties.itemData.name;\r\n                    var columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column);\r\n                    var notFocusEditor = false;\r\n                    var isOnClickMode = isOnClickApplyFilterMode(that);\r\n                    var options = {};\r\n                    if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {\r\n                        return\r\n                    }\r\n                    if (selectedFilterOperation) {\r\n                        options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = selectedFilterOperation;\r\n                        if (\"between\" === selectedFilterOperation || \"between\" === columnSelectedFilterOperation) {\r\n                            notFocusEditor = \"between\" === selectedFilterOperation;\r\n                            options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null\r\n                        }\r\n                    } else {\r\n                        options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\r\n                        options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = column.defaultSelectedFilterOperation || null\r\n                    }\r\n                    that._columnsController.columnOption(column.index, options);\r\n                    that._applyFilterViewController.setHighLight($editorContainer, true);\r\n                    if (!selectedFilterOperation) {\r\n                        var editor = getEditorInstance($editorContainer);\r\n                        if (editor && \"dxDateBox\" === editor.NAME && !editor.option(\"isValid\")) {\r\n                            editor.reset();\r\n                            editor.option(\"isValid\", true)\r\n                        }\r\n                    }\r\n                    if (!notFocusEditor) {\r\n                        that._focusEditor($editorContainer)\r\n                    } else {\r\n                        that._showFilterRange($editorContainer.closest(\".\" + EDITOR_CELL_CLASS), column)\r\n                    }\r\n                },\r\n                onSubmenuShowing: function() {\r\n                    isCellWasFocused = that._isEditorFocused($editorContainer);\r\n                    that.getController(\"editorFactory\").loseFocus()\r\n                },\r\n                onSubmenuHiding: function() {\r\n                    eventsEngine.trigger($menu, \"blur\");\r\n                    restoreFocus()\r\n                },\r\n                onContentReady: function(e) {\r\n                    eventsEngine.on($menu, \"blur\", () => {\r\n                        var menu = e.component;\r\n                        menu._hideSubmenuAfterTimeout();\r\n                        restoreFocus()\r\n                    })\r\n                },\r\n                rtlEnabled: that.option(\"rtlEnabled\")\r\n            })\r\n        },\r\n        _isEditorFocused: function($container) {\r\n            return $container.hasClass(FOCUSED_CLASS) || $container.parents(\".\" + FOCUSED_CLASS).length\r\n        },\r\n        _focusEditor: function($container) {\r\n            this.getController(\"editorFactory\").focus($container);\r\n            eventsEngine.trigger($container.find(EDITORS_INPUT_SELECTOR), \"focus\")\r\n        },\r\n        _renderFilterOperationChooser: function($container, column, $editorContainer) {\r\n            var $menu;\r\n            if (this.option(\"filterRow.showOperationChooser\")) {\r\n                $container.addClass(EDITOR_WITH_MENU_CLASS);\r\n                $menu = $(\"<div>\").prependTo($container);\r\n                this._updateFilterOperationChooser($menu, column, $editorContainer)\r\n            }\r\n        },\r\n        _getFilterOperationMenuItems: function(column) {\r\n            var that = this;\r\n            var result = [{}];\r\n            var filterRowOptions = that.option(\"filterRow\");\r\n            var operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};\r\n            if (column.filterOperations && column.filterOperations.length) {\r\n                var availableFilterOperations = column.filterOperations.filter((function(value) {\r\n                    return isDefined(OPERATION_DESCRIPTORS[value])\r\n                }));\r\n                result = map(availableFilterOperations, (function(value) {\r\n                    var descriptionName = OPERATION_DESCRIPTORS[value];\r\n                    return {\r\n                        name: value,\r\n                        selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value,\r\n                        text: operationDescriptions[descriptionName],\r\n                        icon: OPERATION_ICONS[value]\r\n                    }\r\n                }));\r\n                result.push({\r\n                    name: null,\r\n                    text: filterRowOptions && filterRowOptions.resetOperationText,\r\n                    icon: OPERATION_ICONS.default\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        _handleDataChanged: function(e) {\r\n            var _e$operationTypes, _e$operationTypes2;\r\n            this.callBase.apply(this, arguments);\r\n            if (null !== (_e$operationTypes = e.operationTypes) && void 0 !== _e$operationTypes && _e$operationTypes.filtering || null !== (_e$operationTypes2 = e.operationTypes) && void 0 !== _e$operationTypes2 && _e$operationTypes2.fullReload) {\r\n                var _e$operationTypes3;\r\n                this.updateLookupDataSource(null === (_e$operationTypes3 = e.operationTypes) || void 0 === _e$operationTypes3 ? void 0 : _e$operationTypes3.filtering)\r\n            }\r\n        },\r\n        updateLookupDataSource: function(filterChanged) {\r\n            if (!this.option(\"syncLookupFilterValues\")) {\r\n                return\r\n            }\r\n            if (!this.element()) {\r\n                return\r\n            }\r\n            var columns = this._columnsController.getVisibleColumns();\r\n            var dataSource = this._dataController.dataSource();\r\n            var applyFilterViewController = this._applyFilterViewController;\r\n            var rowIndex = this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index();\r\n            if (-1 === rowIndex) {\r\n                return\r\n            }\r\n            columns.forEach((column, index) => {\r\n                if (!column.lookup || column.calculateCellValue !== column.defaultCalculateCellValue) {\r\n                    return\r\n                }\r\n                var $cell = this._getCellElement(rowIndex, index);\r\n                var editor = getEditorInstance(null === $cell || void 0 === $cell ? void 0 : $cell.find(\".dx-editor-container\"));\r\n                if (editor) {\r\n                    applyFilterViewController.setCurrentColumnForFiltering(column);\r\n                    var filter = this._dataController.getCombinedFilter() || null;\r\n                    applyFilterViewController.setCurrentColumnForFiltering(null);\r\n                    var editorDataSource = editor.option(\"dataSource\");\r\n                    var shouldUpdateFilter = !filterChanged || !equalByValue(editorDataSource.__dataGridSourceFilter, filter);\r\n                    if (shouldUpdateFilter) {\r\n                        var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter);\r\n                        editor.option(\"dataSource\", lookupDataSource)\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        optionChanged: function(args) {\r\n            switch (args.name) {\r\n                case \"filterRow\":\r\n                case \"showColumnLines\":\r\n                    this._invalidate(true, true);\r\n                    args.handled = true;\r\n                    break;\r\n                case \"syncLookupFilterValues\":\r\n                    if (args.value) {\r\n                        this.updateLookupDataSource()\r\n                    } else {\r\n                        this.render()\r\n                    }\r\n                    args.handled = true;\r\n                    break;\r\n                default:\r\n                    this.callBase(args)\r\n            }\r\n        }\r\n    }\r\n}();\r\nvar DataControllerFilterRowExtender = {\r\n    skipCalculateColumnFilters: function() {\r\n        return false\r\n    },\r\n    _calculateAdditionalFilter: function() {\r\n        if (this.skipCalculateColumnFilters()) {\r\n            return this.callBase()\r\n        }\r\n        var filters = [this.callBase()];\r\n        var columns = this._columnsController.getVisibleColumns(null, true);\r\n        var filterRowController = this.getController(\"applyFilter\");\r\n        each(columns, (function() {\r\n            var _filterRowController$;\r\n            var shouldSkip = (null === (_filterRowController$ = filterRowController.getCurrentColumnForFiltering()) || void 0 === _filterRowController$ ? void 0 : _filterRowController$.index) === this.index;\r\n            if (this.allowFiltering && this.calculateFilterExpression && isDefined(this.filterValue) && !shouldSkip) {\r\n                var filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, \"filterRow\");\r\n                filters.push(filter)\r\n            }\r\n        }));\r\n        return gridCoreUtils.combineFilters(filters)\r\n    }\r\n};\r\nvar ApplyFilterViewController = modules.ViewController.inherit({\r\n    _getHeaderPanel: function() {\r\n        if (!this._headerPanel) {\r\n            this._headerPanel = this.getView(\"headerPanel\")\r\n        }\r\n        return this._headerPanel\r\n    },\r\n    setHighLight: function($element, value) {\r\n        if (isOnClickApplyFilterMode(this)) {\r\n            $element && $element.toggleClass(HIGHLIGHT_OUTLINE_CLASS, value) && $element.closest(\".\" + EDITOR_CELL_CLASS).toggleClass(FILTER_MODIFIED_CLASS, value);\r\n            this._getHeaderPanel().enableApplyButton(value)\r\n        }\r\n    },\r\n    applyFilter: function() {\r\n        var columnsController = this.getController(\"columns\");\r\n        var columns = columnsController.getColumns();\r\n        columnsController.beginUpdate();\r\n        for (var i = 0; i < columns.length; i++) {\r\n            var column = columns[i];\r\n            if (void 0 !== column.bufferedFilterValue) {\r\n                columnsController.columnOption(i, \"filterValue\", column.bufferedFilterValue);\r\n                column.bufferedFilterValue = void 0\r\n            }\r\n            if (void 0 !== column.bufferedSelectedFilterOperation) {\r\n                columnsController.columnOption(i, \"selectedFilterOperation\", column.bufferedSelectedFilterOperation);\r\n                column.bufferedSelectedFilterOperation = void 0\r\n            }\r\n        }\r\n        columnsController.endUpdate();\r\n        this.removeHighLights()\r\n    },\r\n    removeHighLights: function() {\r\n        if (isOnClickApplyFilterMode(this)) {\r\n            var columnHeadersViewElement = this.getView(\"columnHeadersView\").element();\r\n            columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + HIGHLIGHT_OUTLINE_CLASS).removeClass(HIGHLIGHT_OUTLINE_CLASS);\r\n            columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + FILTER_MODIFIED_CLASS).removeClass(FILTER_MODIFIED_CLASS);\r\n            this._getHeaderPanel().enableApplyButton(false)\r\n        }\r\n    },\r\n    setCurrentColumnForFiltering: function(column) {\r\n        this._currentColumn = column\r\n    },\r\n    getCurrentColumnForFiltering: function() {\r\n        return this._currentColumn\r\n    }\r\n});\r\nexport var filterRowModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            syncLookupFilterValues: true,\r\n            filterRow: {\r\n                visible: false,\r\n                showOperationChooser: true,\r\n                showAllText: messageLocalization.format(\"dxDataGrid-filterRowShowAllText\"),\r\n                resetOperationText: messageLocalization.format(\"dxDataGrid-filterRowResetOperationText\"),\r\n                applyFilter: \"auto\",\r\n                applyFilterText: messageLocalization.format(\"dxDataGrid-applyFilterText\"),\r\n                operationDescriptions: {\r\n                    equal: messageLocalization.format(\"dxDataGrid-filterRowOperationEquals\"),\r\n                    notEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationNotEquals\"),\r\n                    lessThan: messageLocalization.format(\"dxDataGrid-filterRowOperationLess\"),\r\n                    lessThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationLessOrEquals\"),\r\n                    greaterThan: messageLocalization.format(\"dxDataGrid-filterRowOperationGreater\"),\r\n                    greaterThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationGreaterOrEquals\"),\r\n                    startsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationStartsWith\"),\r\n                    contains: messageLocalization.format(\"dxDataGrid-filterRowOperationContains\"),\r\n                    notContains: messageLocalization.format(\"dxDataGrid-filterRowOperationNotContains\"),\r\n                    endsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationEndsWith\"),\r\n                    between: messageLocalization.format(\"dxDataGrid-filterRowOperationBetween\"),\r\n                    isBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsBlank\"),\r\n                    isNotBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\r\n                },\r\n                betweenStartText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenStartText\"),\r\n                betweenEndText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenEndText\")\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        applyFilter: ApplyFilterViewController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: DataControllerFilterRowExtender,\r\n            columnsResizer: {\r\n                _startResizing: function() {\r\n                    var that = this;\r\n                    that.callBase.apply(that, arguments);\r\n                    if (that.isResizing()) {\r\n                        var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\r\n                        if (overlayInstance) {\r\n                            var cellIndex = overlayInstance.$element().closest(\"td\").index();\r\n                            if (cellIndex === that._targetPoint.columnIndex || cellIndex === that._targetPoint.columnIndex + 1) {\r\n                                overlayInstance.$content().hide()\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _endResizing: function() {\r\n                    var that = this;\r\n                    var $cell;\r\n                    if (that.isResizing()) {\r\n                        var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\r\n                        if (overlayInstance) {\r\n                            $cell = overlayInstance.$element().closest(\"td\");\r\n                            that._columnHeadersView._updateFilterRangeOverlay({\r\n                                width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\r\n                            });\r\n                            overlayInstance.$content().show()\r\n                        }\r\n                    }\r\n                    that.callBase.apply(that, arguments)\r\n                }\r\n            },\r\n            editing: {\r\n                updateFieldValue(options) {\r\n                    if (options.column.lookup) {\r\n                        this._needUpdateLookupDataSource = true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _afterSaveEditData(cancel) {\r\n                    if (this._needUpdateLookupDataSource && !cancel) {\r\n                        var _this$getView;\r\n                        null === (_this$getView = this.getView(\"columnHeadersView\")) || void 0 === _this$getView ? void 0 : _this$getView.updateLookupDataSource()\r\n                    }\r\n                    this._needUpdateLookupDataSource = false;\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _afterCancelEditData() {\r\n                    this._needUpdateLookupDataSource = false;\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            columnHeadersView: ColumnHeadersViewFilterRowExtender,\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var filterItem = this._prepareFilterItem(items);\r\n                    return filterItem.concat(items)\r\n                },\r\n                _prepareFilterItem: function() {\r\n                    var that = this;\r\n                    var filterItem = [];\r\n                    if (that._isShowApplyFilterButton()) {\r\n                        var hintText = that.option(\"filterRow.applyFilterText\");\r\n                        var columns = that._columnsController.getColumns();\r\n                        var disabled = !columns.filter((function(column) {\r\n                            return void 0 !== column.bufferedFilterValue\r\n                        })).length;\r\n                        var toolbarItem = {\r\n                            widget: \"dxButton\",\r\n                            options: {\r\n                                icon: \"apply-filter\",\r\n                                disabled: disabled,\r\n                                onClick: function() {\r\n                                    that._applyFilterViewController.applyFilter()\r\n                                },\r\n                                hint: hintText,\r\n                                text: hintText,\r\n                                onInitialized: function(e) {\r\n                                    $(e.element).addClass(that._getToolbarButtonClass(APPLY_BUTTON_CLASS))\r\n                                }\r\n                            },\r\n                            showText: \"inMenu\",\r\n                            name: \"applyFilterButton\",\r\n                            location: \"after\",\r\n                            locateInMenu: \"auto\",\r\n                            sortIndex: 10\r\n                        };\r\n                        filterItem.push(toolbarItem)\r\n                    }\r\n                    return filterItem\r\n                },\r\n                _isShowApplyFilterButton: function() {\r\n                    var filterRowOptions = this.option(\"filterRow\");\r\n                    return filterRowOptions && filterRowOptions.visible && \"onClick\" === filterRowOptions.applyFilter\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._dataController = this.getController(\"data\");\r\n                    this._applyFilterViewController = this.getController(\"applyFilter\")\r\n                },\r\n                enableApplyButton: function(value) {\r\n                    this.setToolbarItemDisabled(\"applyFilterButton\", !value)\r\n                },\r\n                isVisible: function() {\r\n                    return this.callBase() || this._isShowApplyFilterButton()\r\n                },\r\n                optionChanged: function(args) {\r\n                    if (\"filterRow\" === args.name) {\r\n                        this._invalidate();\r\n                        args.handled = true\r\n                    } else {\r\n                        this.callBase(args)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}