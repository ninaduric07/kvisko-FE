{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/excel_format_converter.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { format as stringFormat } from \"../core/utils/string\";\nimport numberFormatter from \"../localization/number\";\nimport dateLocalization from \"../localization/date\";\nimport { isDefined, isString } from \"../core/utils/type\";\nimport { getFormat } from \"../localization/ldml/date.format\";\nimport { getLanguageId } from \"../localization/language_codes\";\nimport \"../localization/currency\";\nvar ARABIC_ZERO_CODE = 1632;\nvar DEFINED_NUMBER_FORMTATS = {\n  thousands: \"#,##0{0},&quot;K&quot;\",\n  millions: \"#,##0{0},,&quot;M&quot;\",\n  billions: \"#,##0{0},,,&quot;B&quot;\",\n  trillions: \"#,##0{0},,,,&quot;T&quot;\",\n  percent: \"0{0}%\",\n  decimal: \"#{0}\",\n  fixedpoint: \"#,##0{0}\",\n  exponential: \"0{0}E+00\",\n  currency: \" \"\n};\nvar PERIOD_REGEXP = /a+/g;\nvar DAY_REGEXP = /E/g;\nvar DO_REGEXP = /dE+/g;\nvar STANDALONE_MONTH_REGEXP = /L/g;\nvar HOUR_REGEXP = /h/g;\nvar ANY_REGEXP = /./g;\nvar excelFormatConverter = {\n  _applyPrecision: function (format, precision) {\n    var result;\n    var i;\n    if (precision > 0) {\n      result = \"decimal\" !== format ? \".\" : \"\";\n      for (i = 0; i < precision; i++) {\n        result += \"0\";\n      }\n      return result;\n    }\n    return \"\";\n  },\n  _hasArabicDigits: function (text) {\n    var code;\n    for (var i = 0; i < text.length; i++) {\n      code = text.charCodeAt(i);\n      if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\n        return true;\n      }\n    }\n    return false;\n  },\n  _convertDateFormatToOpenXml: function (format) {\n    return format.split(\"/\").join(\"\\\\/\").split(\"'\").map(function (datePart, index) {\n      if (index % 2 === 0) {\n        return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").split(\"[\").join(\"\\\\[\").split(\"]\").join(\"\\\\]\");\n      }\n      if (datePart) {\n        return datePart.replace(ANY_REGEXP, \"\\\\$&\");\n      }\n      return \"'\";\n    }).join(\"\");\n  },\n  _convertDateFormat: function (format) {\n    var formattedValue = (dateLocalization.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\n    var result = getFormat(value => dateLocalization.format(value, format));\n    if (result) {\n      result = this._convertDateFormatToOpenXml(result);\n      result = this._getLanguageInfo(formattedValue) + result;\n    }\n    return result;\n  },\n  _getLanguageInfo: function (defaultPattern) {\n    var languageID = getLanguageId();\n    var languageIDStr = languageID ? languageID.toString(16) : \"\";\n    var languageInfo = \"\";\n    if (this._hasArabicDigits(defaultPattern)) {\n      while (languageIDStr.length < 3) {\n        languageIDStr = \"0\" + languageIDStr;\n      }\n      languageInfo = \"[$-2010\" + languageIDStr + \"]\";\n    } else if (languageIDStr) {\n      languageInfo = \"[$-\" + languageIDStr + \"]\";\n    }\n    return languageInfo;\n  },\n  _convertNumberFormat: function (format, precision, currency) {\n    var result;\n    var excelFormat;\n    if (\"currency\" === format) {\n      excelFormat = numberFormatter.getOpenXmlCurrencyFormat(currency);\n    } else {\n      excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()];\n    }\n    if (excelFormat) {\n      result = stringFormat(excelFormat, this._applyPrecision(format, precision));\n    }\n    return result;\n  },\n  convertFormat: function (format, precision, type, currency) {\n    if (isDefined(format)) {\n      if (\"date\" === type) {\n        return excelFormatConverter._convertDateFormat(format);\n      } else if (isString(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\n        return excelFormatConverter._convertNumberFormat(format, precision, currency);\n      }\n    }\n  }\n};\nexport default excelFormatConverter;","map":{"version":3,"names":["format","stringFormat","numberFormatter","dateLocalization","isDefined","isString","getFormat","getLanguageId","ARABIC_ZERO_CODE","DEFINED_NUMBER_FORMTATS","thousands","millions","billions","trillions","percent","decimal","fixedpoint","exponential","currency","PERIOD_REGEXP","DAY_REGEXP","DO_REGEXP","STANDALONE_MONTH_REGEXP","HOUR_REGEXP","ANY_REGEXP","excelFormatConverter","_applyPrecision","precision","result","i","_hasArabicDigits","text","code","length","charCodeAt","_convertDateFormatToOpenXml","split","join","map","datePart","index","replace","_convertDateFormat","formattedValue","Date","toString","value","_getLanguageInfo","defaultPattern","languageID","languageIDStr","languageInfo","_convertNumberFormat","excelFormat","getOpenXmlCurrencyFormat","toLowerCase","convertFormat","type"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/node_modules/devextreme/esm/exporter/excel_format_converter.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/exporter/excel_format_converter.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    format as stringFormat\r\n} from \"../core/utils/string\";\r\nimport numberFormatter from \"../localization/number\";\r\nimport dateLocalization from \"../localization/date\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../core/utils/type\";\r\nimport {\r\n    getFormat\r\n} from \"../localization/ldml/date.format\";\r\nimport {\r\n    getLanguageId\r\n} from \"../localization/language_codes\";\r\nimport \"../localization/currency\";\r\nvar ARABIC_ZERO_CODE = 1632;\r\nvar DEFINED_NUMBER_FORMTATS = {\r\n    thousands: \"#,##0{0},&quot;K&quot;\",\r\n    millions: \"#,##0{0},,&quot;M&quot;\",\r\n    billions: \"#,##0{0},,,&quot;B&quot;\",\r\n    trillions: \"#,##0{0},,,,&quot;T&quot;\",\r\n    percent: \"0{0}%\",\r\n    decimal: \"#{0}\",\r\n    fixedpoint: \"#,##0{0}\",\r\n    exponential: \"0{0}E+00\",\r\n    currency: \" \"\r\n};\r\nvar PERIOD_REGEXP = /a+/g;\r\nvar DAY_REGEXP = /E/g;\r\nvar DO_REGEXP = /dE+/g;\r\nvar STANDALONE_MONTH_REGEXP = /L/g;\r\nvar HOUR_REGEXP = /h/g;\r\nvar ANY_REGEXP = /./g;\r\nvar excelFormatConverter = {\r\n    _applyPrecision: function(format, precision) {\r\n        var result;\r\n        var i;\r\n        if (precision > 0) {\r\n            result = \"decimal\" !== format ? \".\" : \"\";\r\n            for (i = 0; i < precision; i++) {\r\n                result += \"0\"\r\n            }\r\n            return result\r\n        }\r\n        return \"\"\r\n    },\r\n    _hasArabicDigits: function(text) {\r\n        var code;\r\n        for (var i = 0; i < text.length; i++) {\r\n            code = text.charCodeAt(i);\r\n            if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    },\r\n    _convertDateFormatToOpenXml: function(format) {\r\n        return format.split(\"/\").join(\"\\\\/\").split(\"'\").map((function(datePart, index) {\r\n            if (index % 2 === 0) {\r\n                return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").split(\"[\").join(\"\\\\[\").split(\"]\").join(\"\\\\]\")\r\n            }\r\n            if (datePart) {\r\n                return datePart.replace(ANY_REGEXP, \"\\\\$&\")\r\n            }\r\n            return \"'\"\r\n        })).join(\"\")\r\n    },\r\n    _convertDateFormat: function(format) {\r\n        var formattedValue = (dateLocalization.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\r\n        var result = getFormat(value => dateLocalization.format(value, format));\r\n        if (result) {\r\n            result = this._convertDateFormatToOpenXml(result);\r\n            result = this._getLanguageInfo(formattedValue) + result\r\n        }\r\n        return result\r\n    },\r\n    _getLanguageInfo: function(defaultPattern) {\r\n        var languageID = getLanguageId();\r\n        var languageIDStr = languageID ? languageID.toString(16) : \"\";\r\n        var languageInfo = \"\";\r\n        if (this._hasArabicDigits(defaultPattern)) {\r\n            while (languageIDStr.length < 3) {\r\n                languageIDStr = \"0\" + languageIDStr\r\n            }\r\n            languageInfo = \"[$-2010\" + languageIDStr + \"]\"\r\n        } else if (languageIDStr) {\r\n            languageInfo = \"[$-\" + languageIDStr + \"]\"\r\n        }\r\n        return languageInfo\r\n    },\r\n    _convertNumberFormat: function(format, precision, currency) {\r\n        var result;\r\n        var excelFormat;\r\n        if (\"currency\" === format) {\r\n            excelFormat = numberFormatter.getOpenXmlCurrencyFormat(currency)\r\n        } else {\r\n            excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()]\r\n        }\r\n        if (excelFormat) {\r\n            result = stringFormat(excelFormat, this._applyPrecision(format, precision))\r\n        }\r\n        return result\r\n    },\r\n    convertFormat: function(format, precision, type, currency) {\r\n        if (isDefined(format)) {\r\n            if (\"date\" === type) {\r\n                return excelFormatConverter._convertDateFormat(format)\r\n            } else if (isString(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\r\n                return excelFormatConverter._convertNumberFormat(format, precision, currency)\r\n            }\r\n        }\r\n    }\r\n};\r\nexport default excelFormatConverter;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}