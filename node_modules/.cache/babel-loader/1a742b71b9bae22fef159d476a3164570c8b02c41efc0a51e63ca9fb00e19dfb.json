{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ninad/OneDrive/Radna povr\\u0161ina/zavrsni/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ninad/OneDrive/Radna povr\\u0161ina/zavrsni/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/ninad/OneDrive/Radna povr\\u0161ina/zavrsni/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"C:/Users/ninad/OneDrive/Radna povr\\u0161ina/zavrsni/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef, useMemo, useCallback, useDebugValue } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nimport { OBJECT, SWRConfig as SWRConfig$1, defaultConfig, withArgs, SWRGlobalState, serialize, createCacheHelper, isUndefined, getTimestamp, UNDEFINED, isFunction, revalidateEvents, internalMutate, useIsomorphicLayoutEffect, subscribeCallback, IS_SERVER, rAF, IS_REACT_LEGACY, mergeObjects } from 'swr/_internal';\nexport { mutate, preload, useSWRConfig } from 'swr/_internal';\nvar WITH_DEDUPE = {\n  dedupe: true\n};\nvar useSWRHandler = function useSWRHandler(_key, fetcher, config) {\n  var cache = config.cache,\n    compare = config.compare,\n    suspense = config.suspense,\n    fallbackData = config.fallbackData,\n    revalidateOnMount = config.revalidateOnMount,\n    revalidateIfStale = config.revalidateIfStale,\n    refreshInterval = config.refreshInterval,\n    refreshWhenHidden = config.refreshWhenHidden,\n    refreshWhenOffline = config.refreshWhenOffline,\n    keepPreviousData = config.keepPreviousData;\n  var _SWRGlobalState$get = SWRGlobalState.get(cache),\n    _SWRGlobalState$get2 = _slicedToArray(_SWRGlobalState$get, 3),\n    EVENT_REVALIDATORS = _SWRGlobalState$get2[0],\n    MUTATION = _SWRGlobalState$get2[1],\n    FETCH = _SWRGlobalState$get2[2];\n  // `key` is the identifier of the SWR internal state,\n  // `fnArg` is the argument/arguments parsed from the key, which will be passed\n  // to the fetcher.\n  // All of them are derived from `_key`.\n  var _serialize = serialize(_key),\n    _serialize2 = _slicedToArray(_serialize, 2),\n    key = _serialize2[0],\n    fnArg = _serialize2[1];\n  // If it's the initial render of this hook.\n  var initialMountedRef = useRef(false);\n  // If the hook is unmounted already. This will be used to prevent some effects\n  // to be called after unmounting.\n  var unmountedRef = useRef(false);\n  // Refs to keep the key and config.\n  var keyRef = useRef(key);\n  var fetcherRef = useRef(fetcher);\n  var configRef = useRef(config);\n  var getConfig = function getConfig() {\n    return configRef.current;\n  };\n  var isActive = function isActive() {\n    return getConfig().isVisible() && getConfig().isOnline();\n  };\n  var _createCacheHelper = createCacheHelper(cache, key),\n    _createCacheHelper2 = _slicedToArray(_createCacheHelper, 4),\n    getCache = _createCacheHelper2[0],\n    setCache = _createCacheHelper2[1],\n    subscribeCache = _createCacheHelper2[2],\n    getInitialCache = _createCacheHelper2[3];\n  var stateDependencies = useRef({}).current;\n  var fallback = isUndefined(fallbackData) ? config.fallback[key] : fallbackData;\n  var isEqual = function isEqual(prev, current) {\n    for (var _ in stateDependencies) {\n      var t = _;\n      if (t === 'data') {\n        if (!compare(prev[t], current[t])) {\n          if (!isUndefined(prev[t])) {\n            return false;\n          }\n          if (!compare(returnedData, current[t])) {\n            return false;\n          }\n        }\n      } else {\n        if (current[t] !== prev[t]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  var getSnapshot = useMemo(function () {\n    var shouldStartRequest = function () {\n      if (!key) return false;\n      if (!fetcher) return false;\n      // If `revalidateOnMount` is set, we take the value directly.\n      if (!isUndefined(revalidateOnMount)) return revalidateOnMount;\n      // If it's paused, we skip revalidation.\n      if (getConfig().isPaused()) return false;\n      if (suspense) return false;\n      if (!isUndefined(revalidateIfStale)) return revalidateIfStale;\n      return true;\n    }();\n    // Get the cache and merge it with expected states.\n    var getSelectedCache = function getSelectedCache(state) {\n      // We only select the needed fields from the state.\n      var snapshot = mergeObjects(state);\n      delete snapshot._k;\n      if (!shouldStartRequest) {\n        return snapshot;\n      }\n      return _objectSpread({\n        isValidating: true,\n        isLoading: true\n      }, snapshot);\n    };\n    var cachedData = getCache();\n    var initialData = getInitialCache();\n    var clientSnapshot = getSelectedCache(cachedData);\n    var serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n    // To make sure that we are returning the same object reference to avoid\n    // unnecessary re-renders, we keep the previous snapshot and use deep\n    // comparison to check if we need to return a new one.\n    var memorizedSnapshot = clientSnapshot;\n    return [function () {\n      var newSnapshot = getSelectedCache(getCache());\n      var compareResult = isEqual(newSnapshot, memorizedSnapshot);\n      if (compareResult) {\n        // Mentally, we should always return the `memorizedSnapshot` here\n        // as there's no change between the new and old snapshots.\n        // However, since the `isEqual` function only compares selected fields,\n        // the values of the unselected fields might be changed. That's\n        // simply because we didn't track them.\n        // To support the case in https://github.com/vercel/swr/pull/2576,\n        // we need to update these fields in the `memorizedSnapshot` too\n        // with direct mutations to ensure the snapshot is always up-to-date\n        // even for the unselected fields, but only trigger re-renders when\n        // the selected fields are changed.\n        memorizedSnapshot.data = newSnapshot.data;\n        memorizedSnapshot.isLoading = newSnapshot.isLoading;\n        memorizedSnapshot.isValidating = newSnapshot.isValidating;\n        memorizedSnapshot.error = newSnapshot.error;\n        return memorizedSnapshot;\n      } else {\n        memorizedSnapshot = newSnapshot;\n        return newSnapshot;\n      }\n    }, function () {\n      return serverSnapshot;\n    }];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cache, key]);\n  // Get the current state that SWR should return.\n  var cached = useSyncExternalStore(useCallback(function (callback) {\n    return subscribeCache(key, function (current, prev) {\n      if (!isEqual(prev, current)) callback();\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cache, key]), getSnapshot[0], getSnapshot[1]);\n  var isInitialMount = !initialMountedRef.current;\n  var hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n  var cachedData = cached.data;\n  var data = isUndefined(cachedData) ? fallback : cachedData;\n  var error = cached.error;\n  // Use a ref to store previously returned data. Use the initial data as its initial value.\n  var laggyDataRef = useRef(data);\n  var returnedData = keepPreviousData ? isUndefined(cachedData) ? laggyDataRef.current : cachedData : data;\n  // - Suspense mode and there's stale data for the initial render.\n  // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n  // - `revalidateIfStale` is enabled but `data` is not defined.\n  var shouldDoInitialRevalidation = function () {\n    // if a key already has revalidators and also has error, we should not trigger revalidation\n    if (hasRevalidator && !isUndefined(error)) return false;\n    // If `revalidateOnMount` is set, we take the value directly.\n    if (isInitialMount && !isUndefined(revalidateOnMount)) return revalidateOnMount;\n    // If it's paused, we skip revalidation.\n    if (getConfig().isPaused()) return false;\n    // Under suspense mode, it will always fetch on render if there is no\n    // stale data so no need to revalidate immediately mount it again.\n    // If data exists, only revalidate if `revalidateIfStale` is true.\n    if (suspense) return isUndefined(data) ? false : revalidateIfStale;\n    // If there is no stale data, we need to revalidate when mount;\n    // If `revalidateIfStale` is set to true, we will always revalidate.\n    return isUndefined(data) || revalidateIfStale;\n  }();\n  // Resolve the default validating state:\n  // If it's able to validate, and it should revalidate when mount, this will be true.\n  var defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n  var isValidating = isUndefined(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n  var isLoading = isUndefined(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n  // The revalidation function is a carefully crafted wrapper of the original\n  // `fetcher`, to correctly handle the many edge cases.\n  var revalidate = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(revalidateOpts) {\n      var currentFetcher, newData, startAt, loading, opts, shouldStartNewRequest, callbackSafeguard, finalState, finishRequestAndUpdateState, cleanupState, initialState, _FETCH$key, mutationInfo, cacheData, currentConfig, shouldRetryOnError;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            currentFetcher = fetcherRef.current;\n            if (!(!key || !currentFetcher || unmountedRef.current || getConfig().isPaused())) {\n              _context.next = 3;\n              break;\n            }\n            return _context.abrupt(\"return\", false);\n          case 3:\n            loading = true;\n            opts = revalidateOpts || {}; // If there is no ongoing concurrent request, or `dedupe` is not set, a\n            // new request should be initiated.\n            shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n            /*\n             For React 17\n             Do unmount check for calls:\n             If key has changed during the revalidation, or the component has been\n             unmounted, old dispatch and old event callbacks should not take any\n             effect\n             For React 18\n            only check if key has changed\n            https://github.com/reactwg/react-18/discussions/82\n            */\n            callbackSafeguard = function callbackSafeguard() {\n              if (IS_REACT_LEGACY) {\n                return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n              }\n              return key === keyRef.current;\n            }; // The final state object when the request finishes.\n            finalState = {\n              isValidating: false,\n              isLoading: false\n            };\n            finishRequestAndUpdateState = function finishRequestAndUpdateState() {\n              setCache(finalState);\n            };\n            cleanupState = function cleanupState() {\n              // Check if it's still the same request before deleting it.\n              var requestInfo = FETCH[key];\n              if (requestInfo && requestInfo[1] === startAt) {\n                delete FETCH[key];\n              }\n            }; // Start fetching. Change the `isValidating` state, update the cache.\n            initialState = {\n              isValidating: true\n            }; // It is in the `isLoading` state, if and only if there is no cached data.\n            // This bypasses fallback data and laggy data.\n            if (isUndefined(getCache().data)) {\n              initialState.isLoading = true;\n            }\n            _context.prev = 12;\n            if (shouldStartNewRequest) {\n              setCache(initialState);\n              // If no cache is being rendered currently (it shows a blank page),\n              // we trigger the loading slow event.\n              if (config.loadingTimeout && isUndefined(getCache().data)) {\n                setTimeout(function () {\n                  if (loading && callbackSafeguard()) {\n                    getConfig().onLoadingSlow(key, config);\n                  }\n                }, config.loadingTimeout);\n              }\n              // Start the request and save the timestamp.\n              // Key must be truthy if entering here.\n              FETCH[key] = [currentFetcher(fnArg), getTimestamp()];\n            }\n            _FETCH$key = _slicedToArray(FETCH[key], 2);\n            newData = _FETCH$key[0];\n            startAt = _FETCH$key[1];\n            _context.next = 19;\n            return newData;\n          case 19:\n            newData = _context.sent;\n            if (shouldStartNewRequest) {\n              // If the request isn't interrupted, clean it up after the\n              // deduplication interval.\n              setTimeout(cleanupState, config.dedupingInterval);\n            }\n            // If there're other ongoing request(s), started after the current one,\n            // we need to ignore the current one to avoid possible race conditions:\n            //   req1------------------>res1        (current one)\n            //        req2---------------->res2\n            // the request that fired later will always be kept.\n            // The timestamp maybe be `undefined` or a number\n            if (!(!FETCH[key] || FETCH[key][1] !== startAt)) {\n              _context.next = 24;\n              break;\n            }\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onDiscarded(key);\n              }\n            }\n            return _context.abrupt(\"return\", false);\n          case 24:\n            // Clear error.\n            finalState.error = UNDEFINED;\n            // If there're other mutations(s), that overlapped with the current revalidation:\n            // case 1:\n            //   req------------------>res\n            //       mutate------>end\n            // case 2:\n            //         req------------>res\n            //   mutate------>end\n            // case 3:\n            //   req------------------>res\n            //       mutate-------...---------->\n            // we have to ignore the revalidation result (res) because it's no longer fresh.\n            // meanwhile, a new revalidation should be triggered when the mutation ends.\n            mutationInfo = MUTATION[key];\n            if (!(!isUndefined(mutationInfo) && (\n            // case 1\n            startAt <= mutationInfo[0] ||\n            // case 2\n            startAt <= mutationInfo[1] ||\n            // case 3\n            mutationInfo[1] === 0))) {\n              _context.next = 30;\n              break;\n            }\n            finishRequestAndUpdateState();\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onDiscarded(key);\n              }\n            }\n            return _context.abrupt(\"return\", false);\n          case 30:\n            // Deep compare with the latest state to avoid extra re-renders.\n            // For local state, compare and assign.\n            cacheData = getCache().data; // Since the compare fn could be custom fn\n            // cacheData might be different from newData even when compare fn returns True\n            finalState.data = compare(cacheData, newData) ? cacheData : newData;\n            // Trigger the successful callback if it's the original request.\n            if (shouldStartNewRequest) {\n              if (callbackSafeguard()) {\n                getConfig().onSuccess(newData, key, config);\n              }\n            }\n            _context.next = 41;\n            break;\n          case 35:\n            _context.prev = 35;\n            _context.t0 = _context[\"catch\"](12);\n            cleanupState();\n            currentConfig = getConfig();\n            shouldRetryOnError = currentConfig.shouldRetryOnError; // Not paused, we continue handling the error. Otherwise, discard it.\n            if (!currentConfig.isPaused()) {\n              // Get a new error, don't use deep comparison for errors.\n              finalState.error = _context.t0;\n              // Error event and retry logic. Only for the actual request, not\n              // deduped ones.\n              if (shouldStartNewRequest && callbackSafeguard()) {\n                currentConfig.onError(_context.t0, key, currentConfig);\n                if (shouldRetryOnError === true || isFunction(shouldRetryOnError) && shouldRetryOnError(_context.t0)) {\n                  if (isActive()) {\n                    // If it's inactive, stop. It will auto-revalidate when\n                    // refocusing or reconnecting.\n                    // When retrying, deduplication is always enabled.\n                    currentConfig.onErrorRetry(_context.t0, key, currentConfig, function (_opts) {\n                      var revalidators = EVENT_REVALIDATORS[key];\n                      if (revalidators && revalidators[0]) {\n                        revalidators[0](revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                      }\n                    }, {\n                      retryCount: (opts.retryCount || 0) + 1,\n                      dedupe: true\n                    });\n                  }\n                }\n              }\n            }\n          case 41:\n            // Mark loading as stopped.\n            loading = false;\n            // Update the current hook's state.\n            finishRequestAndUpdateState();\n            return _context.abrupt(\"return\", true);\n          case 44:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[12, 35]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(),\n  // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n  // `keyValidating` are depending on `key`, so we can exclude them from\n  // the deps array.\n  //\n  // FIXME:\n  // `fn` and `config` might be changed during the lifecycle,\n  // but they might be changed every render like this.\n  // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n  // So we omit the values from the deps array\n  // even though it might cause unexpected behaviors.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [key, cache]);\n  // Similar to the global mutate but bound to the current cache and key.\n  // `cache` isn't allowed to change during the lifecycle.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  var boundMutate = useCallback(\n  // Use callback to make sure `keyRef.current` returns latest result every time\n  function () {\n    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return internalMutate.apply(void 0, [cache, keyRef.current].concat(args));\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  // The logic for updating refs.\n  useIsomorphicLayoutEffect(function () {\n    fetcherRef.current = fetcher;\n    configRef.current = config;\n    // Handle laggy data updates. If there's cached data of the current key,\n    // it'll be the correct reference.\n    if (!isUndefined(cachedData)) {\n      laggyDataRef.current = cachedData;\n    }\n  });\n  // After mounted or key changed.\n  useIsomorphicLayoutEffect(function () {\n    if (!key) return;\n    var softRevalidate = revalidate.bind(UNDEFINED, WITH_DEDUPE);\n    // Expose revalidators to global event listeners. So we can trigger\n    // revalidation from the outside.\n    var nextFocusRevalidatedAt = 0;\n    var onRevalidate = function onRevalidate(type) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (type == revalidateEvents.FOCUS_EVENT) {\n        var now = Date.now();\n        if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n          nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n          softRevalidate();\n        }\n      } else if (type == revalidateEvents.RECONNECT_EVENT) {\n        if (getConfig().revalidateOnReconnect && isActive()) {\n          softRevalidate();\n        }\n      } else if (type == revalidateEvents.MUTATE_EVENT) {\n        return revalidate();\n      } else if (type == revalidateEvents.ERROR_REVALIDATE_EVENT) {\n        return revalidate(opts);\n      }\n      return;\n    };\n    var unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate);\n    // Mark the component as mounted and update corresponding refs.\n    unmountedRef.current = false;\n    keyRef.current = key;\n    initialMountedRef.current = true;\n    // Keep the original key in the cache.\n    setCache({\n      _k: fnArg\n    });\n    // Trigger a revalidation.\n    if (shouldDoInitialRevalidation) {\n      if (isUndefined(data) || IS_SERVER) {\n        // Revalidate immediately.\n        softRevalidate();\n      } else {\n        // Delay the revalidate if we have data to return so we won't block\n        // rendering.\n        rAF(softRevalidate);\n      }\n    }\n    return function () {\n      // Mark it as unmounted.\n      unmountedRef.current = true;\n      unsubEvents();\n    };\n  }, [key]);\n  // Polling\n  useIsomorphicLayoutEffect(function () {\n    var timer;\n    function next() {\n      // Use the passed interval\n      // ...or invoke the function with the updated data to get the interval\n      var interval = isFunction(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n      // We only start the next interval if `refreshInterval` is not 0, and:\n      // - `force` is true, which is the start of polling\n      // - or `timer` is not 0, which means the effect wasn't canceled\n      if (interval && timer !== -1) {\n        timer = setTimeout(execute, interval);\n      }\n    }\n    function execute() {\n      // Check if it's OK to execute:\n      // Only revalidate when the page is visible, online, and not errored.\n      if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n        revalidate(WITH_DEDUPE).then(next);\n      } else {\n        // Schedule the next interval to check again.\n        next();\n      }\n    }\n    next();\n    return function () {\n      if (timer) {\n        clearTimeout(timer);\n        timer = -1;\n      }\n    };\n  }, [refreshInterval, refreshWhenHidden, refreshWhenOffline, key]);\n  // Display debug info in React DevTools.\n  useDebugValue(returnedData);\n  // In Suspense mode, we can't return the empty `data` state.\n  // If there is an `error`, the `error` needs to be thrown to the error boundary.\n  // If there is no `error`, the `revalidation` promise needs to be thrown to\n  // the suspense boundary.\n  if (suspense && isUndefined(data) && key) {\n    // SWR should throw when trying to use Suspense on the server with React 18,\n    // without providing any initial data. See:\n    // https://github.com/vercel/swr/issues/1832\n    if (!IS_REACT_LEGACY && IS_SERVER) {\n      throw new Error('Fallback data is required when using suspense in SSR.');\n    }\n    // Always update fetcher and config refs even with the Suspense mode.\n    fetcherRef.current = fetcher;\n    configRef.current = config;\n    unmountedRef.current = false;\n    throw isUndefined(error) ? revalidate(WITH_DEDUPE) : error;\n  }\n  return {\n    mutate: boundMutate,\n    get data() {\n      stateDependencies.data = true;\n      return returnedData;\n    },\n    get error() {\n      stateDependencies.error = true;\n      return error;\n    },\n    get isValidating() {\n      stateDependencies.isValidating = true;\n      return isValidating;\n    },\n    get isLoading() {\n      stateDependencies.isLoading = true;\n      return isLoading;\n    }\n  };\n};\nvar SWRConfig = OBJECT.defineProperty(SWRConfig$1, 'defaultValue', {\n  value: defaultConfig\n});\nvar unstable_serialize = function unstable_serialize(key) {\n  return serialize(key)[0];\n};\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (!data) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */\nvar useSWR = withArgs(useSWRHandler);\n\n// useSWR\n\nexport { SWRConfig, useSWR as default, unstable_serialize };","map":{"version":3,"names":["useRef","useMemo","useCallback","useDebugValue","useSyncExternalStore","OBJECT","SWRConfig","SWRConfig$1","defaultConfig","withArgs","SWRGlobalState","serialize","createCacheHelper","isUndefined","getTimestamp","UNDEFINED","isFunction","revalidateEvents","internalMutate","useIsomorphicLayoutEffect","subscribeCallback","IS_SERVER","rAF","IS_REACT_LEGACY","mergeObjects","mutate","preload","useSWRConfig","WITH_DEDUPE","dedupe","useSWRHandler","_key","fetcher","config","cache","compare","suspense","fallbackData","revalidateOnMount","revalidateIfStale","refreshInterval","refreshWhenHidden","refreshWhenOffline","keepPreviousData","_SWRGlobalState$get","get","_SWRGlobalState$get2","_slicedToArray","EVENT_REVALIDATORS","MUTATION","FETCH","_serialize","_serialize2","key","fnArg","initialMountedRef","unmountedRef","keyRef","fetcherRef","configRef","getConfig","current","isActive","isVisible","isOnline","_createCacheHelper","_createCacheHelper2","getCache","setCache","subscribeCache","getInitialCache","stateDependencies","fallback","isEqual","prev","_","t","returnedData","getSnapshot","shouldStartRequest","isPaused","getSelectedCache","state","snapshot","_k","_objectSpread","isValidating","isLoading","cachedData","initialData","clientSnapshot","serverSnapshot","memorizedSnapshot","newSnapshot","compareResult","data","error","cached","callback","isInitialMount","hasRevalidator","length","laggyDataRef","shouldDoInitialRevalidation","defaultValidatingState","revalidate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","revalidateOpts","currentFetcher","newData","startAt","loading","opts","shouldStartNewRequest","callbackSafeguard","finalState","finishRequestAndUpdateState","cleanupState","initialState","_FETCH$key","mutationInfo","cacheData","currentConfig","shouldRetryOnError","wrap","_callee$","_context","next","abrupt","requestInfo","loadingTimeout","setTimeout","onLoadingSlow","sent","dedupingInterval","onDiscarded","onSuccess","t0","onError","onErrorRetry","_opts","revalidators","ERROR_REVALIDATE_EVENT","retryCount","stop","_x","apply","arguments","boundMutate","_len","args","Array","_key2","concat","softRevalidate","bind","nextFocusRevalidatedAt","onRevalidate","type","undefined","FOCUS_EVENT","now","Date","revalidateOnFocus","focusThrottleInterval","RECONNECT_EVENT","revalidateOnReconnect","MUTATE_EVENT","unsubEvents","timer","interval","execute","then","clearTimeout","Error","defineProperty","value","unstable_serialize","useSWR","default"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/swr/core/dist/index.mjs"],"sourcesContent":["import { useRef, useMemo, useCallback, useDebugValue } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nimport { OBJECT, SWRConfig as SWRConfig$1, defaultConfig, withArgs, SWRGlobalState, serialize, createCacheHelper, isUndefined, getTimestamp, UNDEFINED, isFunction, revalidateEvents, internalMutate, useIsomorphicLayoutEffect, subscribeCallback, IS_SERVER, rAF, IS_REACT_LEGACY, mergeObjects } from 'swr/_internal';\nexport { mutate, preload, useSWRConfig } from 'swr/_internal';\n\nconst WITH_DEDUPE = {\n    dedupe: true\n};\nconst useSWRHandler = (_key, fetcher, config)=>{\n    const { cache , compare , suspense , fallbackData , revalidateOnMount , revalidateIfStale , refreshInterval , refreshWhenHidden , refreshWhenOffline , keepPreviousData  } = config;\n    const [EVENT_REVALIDATORS, MUTATION, FETCH] = SWRGlobalState.get(cache);\n    // `key` is the identifier of the SWR internal state,\n    // `fnArg` is the argument/arguments parsed from the key, which will be passed\n    // to the fetcher.\n    // All of them are derived from `_key`.\n    const [key, fnArg] = serialize(_key);\n    // If it's the initial render of this hook.\n    const initialMountedRef = useRef(false);\n    // If the hook is unmounted already. This will be used to prevent some effects\n    // to be called after unmounting.\n    const unmountedRef = useRef(false);\n    // Refs to keep the key and config.\n    const keyRef = useRef(key);\n    const fetcherRef = useRef(fetcher);\n    const configRef = useRef(config);\n    const getConfig = ()=>configRef.current;\n    const isActive = ()=>getConfig().isVisible() && getConfig().isOnline();\n    const [getCache, setCache, subscribeCache, getInitialCache] = createCacheHelper(cache, key);\n    const stateDependencies = useRef({}).current;\n    const fallback = isUndefined(fallbackData) ? config.fallback[key] : fallbackData;\n    const isEqual = (prev, current)=>{\n        for(const _ in stateDependencies){\n            const t = _;\n            if (t === 'data') {\n                if (!compare(prev[t], current[t])) {\n                    if (!isUndefined(prev[t])) {\n                        return false;\n                    }\n                    if (!compare(returnedData, current[t])) {\n                        return false;\n                    }\n                }\n            } else {\n                if (current[t] !== prev[t]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    const getSnapshot = useMemo(()=>{\n        const shouldStartRequest = (()=>{\n            if (!key) return false;\n            if (!fetcher) return false;\n            // If `revalidateOnMount` is set, we take the value directly.\n            if (!isUndefined(revalidateOnMount)) return revalidateOnMount;\n            // If it's paused, we skip revalidation.\n            if (getConfig().isPaused()) return false;\n            if (suspense) return false;\n            if (!isUndefined(revalidateIfStale)) return revalidateIfStale;\n            return true;\n        })();\n        // Get the cache and merge it with expected states.\n        const getSelectedCache = (state)=>{\n            // We only select the needed fields from the state.\n            const snapshot = mergeObjects(state);\n            delete snapshot._k;\n            if (!shouldStartRequest) {\n                return snapshot;\n            }\n            return {\n                isValidating: true,\n                isLoading: true,\n                ...snapshot\n            };\n        };\n        const cachedData = getCache();\n        const initialData = getInitialCache();\n        const clientSnapshot = getSelectedCache(cachedData);\n        const serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n        // To make sure that we are returning the same object reference to avoid\n        // unnecessary re-renders, we keep the previous snapshot and use deep\n        // comparison to check if we need to return a new one.\n        let memorizedSnapshot = clientSnapshot;\n        return [\n            ()=>{\n                const newSnapshot = getSelectedCache(getCache());\n                const compareResult = isEqual(newSnapshot, memorizedSnapshot);\n                if (compareResult) {\n                    // Mentally, we should always return the `memorizedSnapshot` here\n                    // as there's no change between the new and old snapshots.\n                    // However, since the `isEqual` function only compares selected fields,\n                    // the values of the unselected fields might be changed. That's\n                    // simply because we didn't track them.\n                    // To support the case in https://github.com/vercel/swr/pull/2576,\n                    // we need to update these fields in the `memorizedSnapshot` too\n                    // with direct mutations to ensure the snapshot is always up-to-date\n                    // even for the unselected fields, but only trigger re-renders when\n                    // the selected fields are changed.\n                    memorizedSnapshot.data = newSnapshot.data;\n                    memorizedSnapshot.isLoading = newSnapshot.isLoading;\n                    memorizedSnapshot.isValidating = newSnapshot.isValidating;\n                    memorizedSnapshot.error = newSnapshot.error;\n                    return memorizedSnapshot;\n                } else {\n                    memorizedSnapshot = newSnapshot;\n                    return newSnapshot;\n                }\n            },\n            ()=>serverSnapshot\n        ];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        cache,\n        key\n    ]);\n    // Get the current state that SWR should return.\n    const cached = useSyncExternalStore(useCallback((callback)=>subscribeCache(key, (current, prev)=>{\n            if (!isEqual(prev, current)) callback();\n        }), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        cache,\n        key\n    ]), getSnapshot[0], getSnapshot[1]);\n    const isInitialMount = !initialMountedRef.current;\n    const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n    const cachedData = cached.data;\n    const data = isUndefined(cachedData) ? fallback : cachedData;\n    const error = cached.error;\n    // Use a ref to store previously returned data. Use the initial data as its initial value.\n    const laggyDataRef = useRef(data);\n    const returnedData = keepPreviousData ? isUndefined(cachedData) ? laggyDataRef.current : cachedData : data;\n    // - Suspense mode and there's stale data for the initial render.\n    // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n    // - `revalidateIfStale` is enabled but `data` is not defined.\n    const shouldDoInitialRevalidation = (()=>{\n        // if a key already has revalidators and also has error, we should not trigger revalidation\n        if (hasRevalidator && !isUndefined(error)) return false;\n        // If `revalidateOnMount` is set, we take the value directly.\n        if (isInitialMount && !isUndefined(revalidateOnMount)) return revalidateOnMount;\n        // If it's paused, we skip revalidation.\n        if (getConfig().isPaused()) return false;\n        // Under suspense mode, it will always fetch on render if there is no\n        // stale data so no need to revalidate immediately mount it again.\n        // If data exists, only revalidate if `revalidateIfStale` is true.\n        if (suspense) return isUndefined(data) ? false : revalidateIfStale;\n        // If there is no stale data, we need to revalidate when mount;\n        // If `revalidateIfStale` is set to true, we will always revalidate.\n        return isUndefined(data) || revalidateIfStale;\n    })();\n    // Resolve the default validating state:\n    // If it's able to validate, and it should revalidate when mount, this will be true.\n    const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n    const isValidating = isUndefined(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n    const isLoading = isUndefined(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n    // The revalidation function is a carefully crafted wrapper of the original\n    // `fetcher`, to correctly handle the many edge cases.\n    const revalidate = useCallback(async (revalidateOpts)=>{\n        const currentFetcher = fetcherRef.current;\n        if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n            return false;\n        }\n        let newData;\n        let startAt;\n        let loading = true;\n        const opts = revalidateOpts || {};\n        // If there is no ongoing concurrent request, or `dedupe` is not set, a\n        // new request should be initiated.\n        const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n        /*\n         For React 17\n         Do unmount check for calls:\n         If key has changed during the revalidation, or the component has been\n         unmounted, old dispatch and old event callbacks should not take any\n         effect\n\n        For React 18\n        only check if key has changed\n        https://github.com/reactwg/react-18/discussions/82\n      */ const callbackSafeguard = ()=>{\n            if (IS_REACT_LEGACY) {\n                return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n            }\n            return key === keyRef.current;\n        };\n        // The final state object when the request finishes.\n        const finalState = {\n            isValidating: false,\n            isLoading: false\n        };\n        const finishRequestAndUpdateState = ()=>{\n            setCache(finalState);\n        };\n        const cleanupState = ()=>{\n            // Check if it's still the same request before deleting it.\n            const requestInfo = FETCH[key];\n            if (requestInfo && requestInfo[1] === startAt) {\n                delete FETCH[key];\n            }\n        };\n        // Start fetching. Change the `isValidating` state, update the cache.\n        const initialState = {\n            isValidating: true\n        };\n        // It is in the `isLoading` state, if and only if there is no cached data.\n        // This bypasses fallback data and laggy data.\n        if (isUndefined(getCache().data)) {\n            initialState.isLoading = true;\n        }\n        try {\n            if (shouldStartNewRequest) {\n                setCache(initialState);\n                // If no cache is being rendered currently (it shows a blank page),\n                // we trigger the loading slow event.\n                if (config.loadingTimeout && isUndefined(getCache().data)) {\n                    setTimeout(()=>{\n                        if (loading && callbackSafeguard()) {\n                            getConfig().onLoadingSlow(key, config);\n                        }\n                    }, config.loadingTimeout);\n                }\n                // Start the request and save the timestamp.\n                // Key must be truthy if entering here.\n                FETCH[key] = [\n                    currentFetcher(fnArg),\n                    getTimestamp()\n                ];\n            }\n            [newData, startAt] = FETCH[key];\n            newData = await newData;\n            if (shouldStartNewRequest) {\n                // If the request isn't interrupted, clean it up after the\n                // deduplication interval.\n                setTimeout(cleanupState, config.dedupingInterval);\n            }\n            // If there're other ongoing request(s), started after the current one,\n            // we need to ignore the current one to avoid possible race conditions:\n            //   req1------------------>res1        (current one)\n            //        req2---------------->res2\n            // the request that fired later will always be kept.\n            // The timestamp maybe be `undefined` or a number\n            if (!FETCH[key] || FETCH[key][1] !== startAt) {\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Clear error.\n            finalState.error = UNDEFINED;\n            // If there're other mutations(s), that overlapped with the current revalidation:\n            // case 1:\n            //   req------------------>res\n            //       mutate------>end\n            // case 2:\n            //         req------------>res\n            //   mutate------>end\n            // case 3:\n            //   req------------------>res\n            //       mutate-------...---------->\n            // we have to ignore the revalidation result (res) because it's no longer fresh.\n            // meanwhile, a new revalidation should be triggered when the mutation ends.\n            const mutationInfo = MUTATION[key];\n            if (!isUndefined(mutationInfo) && // case 1\n            (startAt <= mutationInfo[0] || // case 2\n            startAt <= mutationInfo[1] || // case 3\n            mutationInfo[1] === 0)) {\n                finishRequestAndUpdateState();\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Deep compare with the latest state to avoid extra re-renders.\n            // For local state, compare and assign.\n            const cacheData = getCache().data;\n            // Since the compare fn could be custom fn\n            // cacheData might be different from newData even when compare fn returns True\n            finalState.data = compare(cacheData, newData) ? cacheData : newData;\n            // Trigger the successful callback if it's the original request.\n            if (shouldStartNewRequest) {\n                if (callbackSafeguard()) {\n                    getConfig().onSuccess(newData, key, config);\n                }\n            }\n        } catch (err) {\n            cleanupState();\n            const currentConfig = getConfig();\n            const { shouldRetryOnError  } = currentConfig;\n            // Not paused, we continue handling the error. Otherwise, discard it.\n            if (!currentConfig.isPaused()) {\n                // Get a new error, don't use deep comparison for errors.\n                finalState.error = err;\n                // Error event and retry logic. Only for the actual request, not\n                // deduped ones.\n                if (shouldStartNewRequest && callbackSafeguard()) {\n                    currentConfig.onError(err, key, currentConfig);\n                    if (shouldRetryOnError === true || isFunction(shouldRetryOnError) && shouldRetryOnError(err)) {\n                        if (isActive()) {\n                            // If it's inactive, stop. It will auto-revalidate when\n                            // refocusing or reconnecting.\n                            // When retrying, deduplication is always enabled.\n                            currentConfig.onErrorRetry(err, key, currentConfig, (_opts)=>{\n                                const revalidators = EVENT_REVALIDATORS[key];\n                                if (revalidators && revalidators[0]) {\n                                    revalidators[0](revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                                }\n                            }, {\n                                retryCount: (opts.retryCount || 0) + 1,\n                                dedupe: true\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        // Mark loading as stopped.\n        loading = false;\n        // Update the current hook's state.\n        finishRequestAndUpdateState();\n        return true;\n    }, // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        key,\n        cache\n    ]);\n    // Similar to the global mutate but bound to the current cache and key.\n    // `cache` isn't allowed to change during the lifecycle.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const boundMutate = useCallback(// Use callback to make sure `keyRef.current` returns latest result every time\n    (...args)=>{\n        return internalMutate(cache, keyRef.current, ...args);\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // The logic for updating refs.\n    useIsomorphicLayoutEffect(()=>{\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        // Handle laggy data updates. If there's cached data of the current key,\n        // it'll be the correct reference.\n        if (!isUndefined(cachedData)) {\n            laggyDataRef.current = cachedData;\n        }\n    });\n    // After mounted or key changed.\n    useIsomorphicLayoutEffect(()=>{\n        if (!key) return;\n        const softRevalidate = revalidate.bind(UNDEFINED, WITH_DEDUPE);\n        // Expose revalidators to global event listeners. So we can trigger\n        // revalidation from the outside.\n        let nextFocusRevalidatedAt = 0;\n        const onRevalidate = (type, opts = {})=>{\n            if (type == revalidateEvents.FOCUS_EVENT) {\n                const now = Date.now();\n                if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n                    nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n                    softRevalidate();\n                }\n            } else if (type == revalidateEvents.RECONNECT_EVENT) {\n                if (getConfig().revalidateOnReconnect && isActive()) {\n                    softRevalidate();\n                }\n            } else if (type == revalidateEvents.MUTATE_EVENT) {\n                return revalidate();\n            } else if (type == revalidateEvents.ERROR_REVALIDATE_EVENT) {\n                return revalidate(opts);\n            }\n            return;\n        };\n        const unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate);\n        // Mark the component as mounted and update corresponding refs.\n        unmountedRef.current = false;\n        keyRef.current = key;\n        initialMountedRef.current = true;\n        // Keep the original key in the cache.\n        setCache({\n            _k: fnArg\n        });\n        // Trigger a revalidation.\n        if (shouldDoInitialRevalidation) {\n            if (isUndefined(data) || IS_SERVER) {\n                // Revalidate immediately.\n                softRevalidate();\n            } else {\n                // Delay the revalidate if we have data to return so we won't block\n                // rendering.\n                rAF(softRevalidate);\n            }\n        }\n        return ()=>{\n            // Mark it as unmounted.\n            unmountedRef.current = true;\n            unsubEvents();\n        };\n    }, [\n        key\n    ]);\n    // Polling\n    useIsomorphicLayoutEffect(()=>{\n        let timer;\n        function next() {\n            // Use the passed interval\n            // ...or invoke the function with the updated data to get the interval\n            const interval = isFunction(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n            // We only start the next interval if `refreshInterval` is not 0, and:\n            // - `force` is true, which is the start of polling\n            // - or `timer` is not 0, which means the effect wasn't canceled\n            if (interval && timer !== -1) {\n                timer = setTimeout(execute, interval);\n            }\n        }\n        function execute() {\n            // Check if it's OK to execute:\n            // Only revalidate when the page is visible, online, and not errored.\n            if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n                revalidate(WITH_DEDUPE).then(next);\n            } else {\n                // Schedule the next interval to check again.\n                next();\n            }\n        }\n        next();\n        return ()=>{\n            if (timer) {\n                clearTimeout(timer);\n                timer = -1;\n            }\n        };\n    }, [\n        refreshInterval,\n        refreshWhenHidden,\n        refreshWhenOffline,\n        key\n    ]);\n    // Display debug info in React DevTools.\n    useDebugValue(returnedData);\n    // In Suspense mode, we can't return the empty `data` state.\n    // If there is an `error`, the `error` needs to be thrown to the error boundary.\n    // If there is no `error`, the `revalidation` promise needs to be thrown to\n    // the suspense boundary.\n    if (suspense && isUndefined(data) && key) {\n        // SWR should throw when trying to use Suspense on the server with React 18,\n        // without providing any initial data. See:\n        // https://github.com/vercel/swr/issues/1832\n        if (!IS_REACT_LEGACY && IS_SERVER) {\n            throw new Error('Fallback data is required when using suspense in SSR.');\n        }\n        // Always update fetcher and config refs even with the Suspense mode.\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        unmountedRef.current = false;\n        throw isUndefined(error) ? revalidate(WITH_DEDUPE) : error;\n    }\n    return {\n        mutate: boundMutate,\n        get data () {\n            stateDependencies.data = true;\n            return returnedData;\n        },\n        get error () {\n            stateDependencies.error = true;\n            return error;\n        },\n        get isValidating () {\n            stateDependencies.isValidating = true;\n            return isValidating;\n        },\n        get isLoading () {\n            stateDependencies.isLoading = true;\n            return isLoading;\n        }\n    };\n};\nconst SWRConfig = OBJECT.defineProperty(SWRConfig$1, 'defaultValue', {\n    value: defaultConfig\n});\nconst unstable_serialize = (key)=>serialize(key)[0];\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (!data) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */ const useSWR = withArgs(useSWRHandler);\n\n// useSWR\n\nexport { SWRConfig, useSWR as default, unstable_serialize };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}