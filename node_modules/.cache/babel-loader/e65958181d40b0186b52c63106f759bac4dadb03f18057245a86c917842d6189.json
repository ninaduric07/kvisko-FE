{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_columns.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getOuterWidth } from \"../../core/utils/size\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport { createColumnsInfo } from \"./ui.grid_core.virtual_columns_core\";\nimport { isDefined } from \"../../core/utils/type\";\nvar DEFAULT_COLUMN_WIDTH = 50;\nvar VirtualScrollingRowsViewExtender = {\n  _resizeCore: function () {\n    this.callBase.apply(this, arguments);\n    this._columnsController.resize();\n  },\n  _handleScroll: function (e) {\n    var that = this;\n    var scrollable = this.getScrollable();\n    var left = e.scrollOffset.left;\n    that.callBase.apply(that, arguments);\n    if (that.option(\"rtlEnabled\") && scrollable) {\n      left = getWidth(scrollable.$content()) - getWidth(scrollable.$element()) - left;\n    }\n    that._columnsController.setScrollPosition(left);\n  }\n};\nvar HeaderViewExtender = {\n  _renderCore: function () {\n    var deferred = this.callBase.apply(this, arguments);\n    if (this._columnsController.isVirtualMode()) {\n      this._updateScrollLeftPosition();\n    }\n    return deferred;\n  }\n};\nvar ColumnsControllerExtender = function () {\n  var getWidths = function (columns) {\n    return columns.map(column => column.visibleWidth || parseFloat(column.width) || DEFAULT_COLUMN_WIDTH);\n  };\n  var members = {\n    init: function () {\n      var that = this;\n      that.callBase.apply(this, arguments);\n      that._beginPageIndex = null;\n      that._endPageIndex = null;\n      that._position = 0;\n      that._virtualVisibleColumns = {};\n    },\n    resetColumnsCache: function () {\n      this.callBase();\n      this._virtualVisibleColumns = {};\n    },\n    getBeginPageIndex: function (position) {\n      var visibleColumns = this.getVisibleColumns(void 0, true);\n      var widths = getWidths(visibleColumns);\n      var currentPosition = 0;\n      for (var index = 0; index < widths.length; index++) {\n        if (currentPosition >= position) {\n          return Math.floor(index / this.getColumnPageSize());\n        }\n        currentPosition += widths[index];\n      }\n      return 0;\n    },\n    getTotalWidth: function () {\n      var width = this.option(\"width\");\n      if (\"number\" === typeof width) {\n        return width;\n      }\n      return this.getController(\"resizing\")._lastWidth || getOuterWidth(this.component.$element());\n    },\n    getEndPageIndex: function (position) {\n      var visibleColumns = this.getVisibleColumns(void 0, true);\n      var widths = getWidths(visibleColumns);\n      var currentPosition = 0;\n      position += this.getTotalWidth();\n      for (var index = 0; index < widths.length; index++) {\n        if (currentPosition >= position) {\n          return Math.ceil(index / this.getColumnPageSize());\n        }\n        currentPosition += widths[index];\n      }\n      return Math.ceil(widths.length / this.getColumnPageSize());\n    },\n    getColumnPageSize: function () {\n      return this.option(\"scrolling.columnPageSize\");\n    },\n    _fireColumnsChanged: function () {\n      var date = new Date();\n      this.columnsChanged.fire({\n        optionNames: {\n          all: true,\n          length: 1\n        },\n        changeTypes: {\n          columns: true,\n          virtualColumnsScrolling: true,\n          length: 2\n        }\n      });\n      this._renderTime = new Date() - date;\n    },\n    getScrollingTimeout: function () {\n      var renderingThreshold = this.option(\"scrolling.columnRenderingThreshold\");\n      var renderAsync = this.option(\"scrolling.renderAsync\");\n      var scrollingTimeout = 0;\n      if (!isDefined(renderAsync) && this._renderTime > renderingThreshold || renderAsync) {\n        scrollingTimeout = this.option(\"scrolling.timeout\");\n      }\n      return scrollingTimeout;\n    },\n    setScrollPosition: function (position) {\n      var scrollingTimeout = this.getScrollingTimeout();\n      if (scrollingTimeout > 0) {\n        clearTimeout(this._changedTimeout);\n        this._changedTimeout = setTimeout(() => {\n          this._setScrollPositionCore(position);\n        }, scrollingTimeout);\n      } else {\n        this._setScrollPositionCore(position);\n      }\n    },\n    isVirtualMode: function () {\n      return hasWindow() && \"virtual\" === this.option(\"scrolling.columnRenderingMode\");\n    },\n    resize: function () {\n      this._setScrollPositionCore(this._position);\n    },\n    _setScrollPositionCore: function (position) {\n      if (this.isVirtualMode()) {\n        var beginPageIndex = this.getBeginPageIndex(position);\n        var endPageIndex = this.getEndPageIndex(position);\n        var needColumnsChanged = position < this._position ? this._beginPageIndex > beginPageIndex : this._endPageIndex < endPageIndex;\n        this._position = position;\n        if (needColumnsChanged) {\n          this._beginPageIndex = beginPageIndex;\n          this._endPageIndex = endPageIndex;\n          this._fireColumnsChanged();\n        }\n      }\n    },\n    getFixedColumns: function (rowIndex, isBase) {\n      var fixedColumns = this.callBase(rowIndex);\n      if (this.isVirtualMode() && !isBase && fixedColumns.length) {\n        var transparentColumnIndex = fixedColumns.map(c => c.command).indexOf(\"transparent\");\n        fixedColumns[transparentColumnIndex].colspan = this.getVisibleColumns().length - this.callBase().length + 1;\n        return fixedColumns;\n      }\n      return fixedColumns;\n    },\n    _compileVisibleColumns: function (rowIndex, isBase) {\n      var _this$_columns;\n      if (isBase || !this.isVirtualMode() || !this._shouldReturnVisibleColumns()) {\n        return this.callBase(rowIndex);\n      }\n      if (null !== (_this$_columns = this._columns) && void 0 !== _this$_columns && _this$_columns.length && !isDefined(this._beginPageIndex) && !isDefined(this._endPageIndex)) {\n        this._beginPageIndex = this.getBeginPageIndex(this._position);\n        this._endPageIndex = this.getEndPageIndex(this._position);\n      }\n      var beginPageIndex = this._beginPageIndex;\n      var endPageIndex = this._endPageIndex;\n      var visibleColumnsHash = rowIndex + \"-\" + beginPageIndex + \"-\" + endPageIndex;\n      if (this._virtualVisibleColumns[visibleColumnsHash]) {\n        return this._virtualVisibleColumns[visibleColumnsHash];\n      }\n      var visibleColumns = this.callBase();\n      var rowCount = this.getRowCount();\n      var pageSize = this.getColumnPageSize();\n      var startIndex = beginPageIndex * pageSize;\n      var endIndex = endPageIndex * pageSize;\n      var fixedColumns = this.getFixedColumns(void 0, true);\n      var transparentColumnIndex = fixedColumns.map(c => c.command).indexOf(\"transparent\");\n      var beginFixedColumnCount = fixedColumns.length ? transparentColumnIndex : 0;\n      var beginFixedColumns = visibleColumns.slice(0, beginFixedColumnCount);\n      var beginColumns = visibleColumns.slice(beginFixedColumnCount, startIndex);\n      var beginWidth = getWidths(beginColumns).reduce((a, b) => a + b, 0);\n      if (!beginWidth) {\n        startIndex = 0;\n      }\n      var endFixedColumnCount = fixedColumns.length ? fixedColumns.length - transparentColumnIndex - 1 : 0;\n      var endFixedColumns = visibleColumns.slice(visibleColumns.length - endFixedColumnCount);\n      var endColumns = visibleColumns.slice(endIndex, visibleColumns.length - endFixedColumnCount);\n      var endWidth = getWidths(endColumns).reduce((a, b) => a + b, 0);\n      if (!endWidth) {\n        endIndex = visibleColumns.length;\n      }\n      if (rowCount > 1 && \"number\" === typeof rowIndex) {\n        var columnsInfo = [];\n        for (var i = 0; i < rowCount; i++) {\n          columnsInfo.push(this.callBase(i));\n        }\n        beginFixedColumns = createColumnsInfo(columnsInfo, 0, beginFixedColumns.length)[rowIndex] || [];\n        endFixedColumns = createColumnsInfo(columnsInfo, visibleColumns.length - endFixedColumns.length, visibleColumns.length)[rowIndex] || [];\n        visibleColumns = createColumnsInfo(columnsInfo, startIndex, endIndex)[rowIndex] || [];\n      } else {\n        visibleColumns = visibleColumns.slice(startIndex, endIndex);\n      }\n      if (beginWidth) {\n        visibleColumns.unshift({\n          command: \"virtual\",\n          width: beginWidth\n        });\n        visibleColumns = beginFixedColumns.concat(visibleColumns);\n      }\n      if (endWidth) {\n        visibleColumns.push({\n          command: \"virtual\",\n          width: endWidth\n        });\n        visibleColumns = visibleColumns.concat(endFixedColumns);\n      }\n      this._virtualVisibleColumns[visibleColumnsHash] = visibleColumns;\n      return visibleColumns;\n    },\n    getColumnIndexOffset: function () {\n      var offset = 0;\n      if (this._beginPageIndex > 0) {\n        var fixedColumns = this.getFixedColumns();\n        var transparentColumnIndex = fixedColumns.map(c => c.command).indexOf(\"transparent\");\n        var leftFixedColumnCount = transparentColumnIndex >= 0 ? transparentColumnIndex : 0;\n        offset = this._beginPageIndex * this.getColumnPageSize() - leftFixedColumnCount - 1;\n      }\n      return offset > 0 ? offset : 0;\n    },\n    dispose: function () {\n      clearTimeout(this._changedTimeout);\n      this.callBase.apply(this, arguments);\n    }\n  };\n  return members;\n}();\nexport var virtualColumnsModule = {\n  defaultOptions: function () {\n    return {\n      scrolling: {\n        columnRenderingMode: \"standard\",\n        columnPageSize: 5,\n        columnRenderingThreshold: 300\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      columns: ColumnsControllerExtender\n    },\n    views: {\n      columnHeadersView: HeaderViewExtender,\n      rowsView: VirtualScrollingRowsViewExtender\n    }\n  }\n};","map":{"version":3,"names":["getWidth","getOuterWidth","hasWindow","createColumnsInfo","isDefined","DEFAULT_COLUMN_WIDTH","VirtualScrollingRowsViewExtender","_resizeCore","callBase","apply","arguments","_columnsController","resize","_handleScroll","e","that","scrollable","getScrollable","left","scrollOffset","option","$content","$element","setScrollPosition","HeaderViewExtender","_renderCore","deferred","isVirtualMode","_updateScrollLeftPosition","ColumnsControllerExtender","getWidths","columns","map","column","visibleWidth","parseFloat","width","members","init","_beginPageIndex","_endPageIndex","_position","_virtualVisibleColumns","resetColumnsCache","getBeginPageIndex","position","visibleColumns","getVisibleColumns","widths","currentPosition","index","length","Math","floor","getColumnPageSize","getTotalWidth","getController","_lastWidth","component","getEndPageIndex","ceil","_fireColumnsChanged","date","Date","columnsChanged","fire","optionNames","all","changeTypes","virtualColumnsScrolling","_renderTime","getScrollingTimeout","renderingThreshold","renderAsync","scrollingTimeout","clearTimeout","_changedTimeout","setTimeout","_setScrollPositionCore","beginPageIndex","endPageIndex","needColumnsChanged","getFixedColumns","rowIndex","isBase","fixedColumns","transparentColumnIndex","c","command","indexOf","colspan","_compileVisibleColumns","_this$_columns","_shouldReturnVisibleColumns","_columns","visibleColumnsHash","rowCount","getRowCount","pageSize","startIndex","endIndex","beginFixedColumnCount","beginFixedColumns","slice","beginColumns","beginWidth","reduce","a","b","endFixedColumnCount","endFixedColumns","endColumns","endWidth","columnsInfo","i","push","unshift","concat","getColumnIndexOffset","offset","leftFixedColumnCount","dispose","virtualColumnsModule","defaultOptions","scrolling","columnRenderingMode","columnPageSize","columnRenderingThreshold","extenders","controllers","views","columnHeadersView","rowsView"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_columns.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_columns.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWidth,\r\n    getOuterWidth\r\n} from \"../../core/utils/size\";\r\nimport {\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    createColumnsInfo\r\n} from \"./ui.grid_core.virtual_columns_core\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar DEFAULT_COLUMN_WIDTH = 50;\r\nvar VirtualScrollingRowsViewExtender = {\r\n    _resizeCore: function() {\r\n        this.callBase.apply(this, arguments);\r\n        this._columnsController.resize()\r\n    },\r\n    _handleScroll: function(e) {\r\n        var that = this;\r\n        var scrollable = this.getScrollable();\r\n        var left = e.scrollOffset.left;\r\n        that.callBase.apply(that, arguments);\r\n        if (that.option(\"rtlEnabled\") && scrollable) {\r\n            left = getWidth(scrollable.$content()) - getWidth(scrollable.$element()) - left\r\n        }\r\n        that._columnsController.setScrollPosition(left)\r\n    }\r\n};\r\nvar HeaderViewExtender = {\r\n    _renderCore: function() {\r\n        var deferred = this.callBase.apply(this, arguments);\r\n        if (this._columnsController.isVirtualMode()) {\r\n            this._updateScrollLeftPosition()\r\n        }\r\n        return deferred\r\n    }\r\n};\r\nvar ColumnsControllerExtender = function() {\r\n    var getWidths = function(columns) {\r\n        return columns.map(column => column.visibleWidth || parseFloat(column.width) || DEFAULT_COLUMN_WIDTH)\r\n    };\r\n    var members = {\r\n        init: function() {\r\n            var that = this;\r\n            that.callBase.apply(this, arguments);\r\n            that._beginPageIndex = null;\r\n            that._endPageIndex = null;\r\n            that._position = 0;\r\n            that._virtualVisibleColumns = {}\r\n        },\r\n        resetColumnsCache: function() {\r\n            this.callBase();\r\n            this._virtualVisibleColumns = {}\r\n        },\r\n        getBeginPageIndex: function(position) {\r\n            var visibleColumns = this.getVisibleColumns(void 0, true);\r\n            var widths = getWidths(visibleColumns);\r\n            var currentPosition = 0;\r\n            for (var index = 0; index < widths.length; index++) {\r\n                if (currentPosition >= position) {\r\n                    return Math.floor(index / this.getColumnPageSize())\r\n                }\r\n                currentPosition += widths[index]\r\n            }\r\n            return 0\r\n        },\r\n        getTotalWidth: function() {\r\n            var width = this.option(\"width\");\r\n            if (\"number\" === typeof width) {\r\n                return width\r\n            }\r\n            return this.getController(\"resizing\")._lastWidth || getOuterWidth(this.component.$element())\r\n        },\r\n        getEndPageIndex: function(position) {\r\n            var visibleColumns = this.getVisibleColumns(void 0, true);\r\n            var widths = getWidths(visibleColumns);\r\n            var currentPosition = 0;\r\n            position += this.getTotalWidth();\r\n            for (var index = 0; index < widths.length; index++) {\r\n                if (currentPosition >= position) {\r\n                    return Math.ceil(index / this.getColumnPageSize())\r\n                }\r\n                currentPosition += widths[index]\r\n            }\r\n            return Math.ceil(widths.length / this.getColumnPageSize())\r\n        },\r\n        getColumnPageSize: function() {\r\n            return this.option(\"scrolling.columnPageSize\")\r\n        },\r\n        _fireColumnsChanged: function() {\r\n            var date = new Date;\r\n            this.columnsChanged.fire({\r\n                optionNames: {\r\n                    all: true,\r\n                    length: 1\r\n                },\r\n                changeTypes: {\r\n                    columns: true,\r\n                    virtualColumnsScrolling: true,\r\n                    length: 2\r\n                }\r\n            });\r\n            this._renderTime = new Date - date\r\n        },\r\n        getScrollingTimeout: function() {\r\n            var renderingThreshold = this.option(\"scrolling.columnRenderingThreshold\");\r\n            var renderAsync = this.option(\"scrolling.renderAsync\");\r\n            var scrollingTimeout = 0;\r\n            if (!isDefined(renderAsync) && this._renderTime > renderingThreshold || renderAsync) {\r\n                scrollingTimeout = this.option(\"scrolling.timeout\")\r\n            }\r\n            return scrollingTimeout\r\n        },\r\n        setScrollPosition: function(position) {\r\n            var scrollingTimeout = this.getScrollingTimeout();\r\n            if (scrollingTimeout > 0) {\r\n                clearTimeout(this._changedTimeout);\r\n                this._changedTimeout = setTimeout(() => {\r\n                    this._setScrollPositionCore(position)\r\n                }, scrollingTimeout)\r\n            } else {\r\n                this._setScrollPositionCore(position)\r\n            }\r\n        },\r\n        isVirtualMode: function() {\r\n            return hasWindow() && \"virtual\" === this.option(\"scrolling.columnRenderingMode\")\r\n        },\r\n        resize: function() {\r\n            this._setScrollPositionCore(this._position)\r\n        },\r\n        _setScrollPositionCore: function(position) {\r\n            if (this.isVirtualMode()) {\r\n                var beginPageIndex = this.getBeginPageIndex(position);\r\n                var endPageIndex = this.getEndPageIndex(position);\r\n                var needColumnsChanged = position < this._position ? this._beginPageIndex > beginPageIndex : this._endPageIndex < endPageIndex;\r\n                this._position = position;\r\n                if (needColumnsChanged) {\r\n                    this._beginPageIndex = beginPageIndex;\r\n                    this._endPageIndex = endPageIndex;\r\n                    this._fireColumnsChanged()\r\n                }\r\n            }\r\n        },\r\n        getFixedColumns: function(rowIndex, isBase) {\r\n            var fixedColumns = this.callBase(rowIndex);\r\n            if (this.isVirtualMode() && !isBase && fixedColumns.length) {\r\n                var transparentColumnIndex = fixedColumns.map(c => c.command).indexOf(\"transparent\");\r\n                fixedColumns[transparentColumnIndex].colspan = this.getVisibleColumns().length - this.callBase().length + 1;\r\n                return fixedColumns\r\n            }\r\n            return fixedColumns\r\n        },\r\n        _compileVisibleColumns: function(rowIndex, isBase) {\r\n            var _this$_columns;\r\n            if (isBase || !this.isVirtualMode() || !this._shouldReturnVisibleColumns()) {\r\n                return this.callBase(rowIndex)\r\n            }\r\n            if (null !== (_this$_columns = this._columns) && void 0 !== _this$_columns && _this$_columns.length && !isDefined(this._beginPageIndex) && !isDefined(this._endPageIndex)) {\r\n                this._beginPageIndex = this.getBeginPageIndex(this._position);\r\n                this._endPageIndex = this.getEndPageIndex(this._position)\r\n            }\r\n            var beginPageIndex = this._beginPageIndex;\r\n            var endPageIndex = this._endPageIndex;\r\n            var visibleColumnsHash = rowIndex + \"-\" + beginPageIndex + \"-\" + endPageIndex;\r\n            if (this._virtualVisibleColumns[visibleColumnsHash]) {\r\n                return this._virtualVisibleColumns[visibleColumnsHash]\r\n            }\r\n            var visibleColumns = this.callBase();\r\n            var rowCount = this.getRowCount();\r\n            var pageSize = this.getColumnPageSize();\r\n            var startIndex = beginPageIndex * pageSize;\r\n            var endIndex = endPageIndex * pageSize;\r\n            var fixedColumns = this.getFixedColumns(void 0, true);\r\n            var transparentColumnIndex = fixedColumns.map(c => c.command).indexOf(\"transparent\");\r\n            var beginFixedColumnCount = fixedColumns.length ? transparentColumnIndex : 0;\r\n            var beginFixedColumns = visibleColumns.slice(0, beginFixedColumnCount);\r\n            var beginColumns = visibleColumns.slice(beginFixedColumnCount, startIndex);\r\n            var beginWidth = getWidths(beginColumns).reduce((a, b) => a + b, 0);\r\n            if (!beginWidth) {\r\n                startIndex = 0\r\n            }\r\n            var endFixedColumnCount = fixedColumns.length ? fixedColumns.length - transparentColumnIndex - 1 : 0;\r\n            var endFixedColumns = visibleColumns.slice(visibleColumns.length - endFixedColumnCount);\r\n            var endColumns = visibleColumns.slice(endIndex, visibleColumns.length - endFixedColumnCount);\r\n            var endWidth = getWidths(endColumns).reduce((a, b) => a + b, 0);\r\n            if (!endWidth) {\r\n                endIndex = visibleColumns.length\r\n            }\r\n            if (rowCount > 1 && \"number\" === typeof rowIndex) {\r\n                var columnsInfo = [];\r\n                for (var i = 0; i < rowCount; i++) {\r\n                    columnsInfo.push(this.callBase(i))\r\n                }\r\n                beginFixedColumns = createColumnsInfo(columnsInfo, 0, beginFixedColumns.length)[rowIndex] || [];\r\n                endFixedColumns = createColumnsInfo(columnsInfo, visibleColumns.length - endFixedColumns.length, visibleColumns.length)[rowIndex] || [];\r\n                visibleColumns = createColumnsInfo(columnsInfo, startIndex, endIndex)[rowIndex] || []\r\n            } else {\r\n                visibleColumns = visibleColumns.slice(startIndex, endIndex)\r\n            }\r\n            if (beginWidth) {\r\n                visibleColumns.unshift({\r\n                    command: \"virtual\",\r\n                    width: beginWidth\r\n                });\r\n                visibleColumns = beginFixedColumns.concat(visibleColumns)\r\n            }\r\n            if (endWidth) {\r\n                visibleColumns.push({\r\n                    command: \"virtual\",\r\n                    width: endWidth\r\n                });\r\n                visibleColumns = visibleColumns.concat(endFixedColumns)\r\n            }\r\n            this._virtualVisibleColumns[visibleColumnsHash] = visibleColumns;\r\n            return visibleColumns\r\n        },\r\n        getColumnIndexOffset: function() {\r\n            var offset = 0;\r\n            if (this._beginPageIndex > 0) {\r\n                var fixedColumns = this.getFixedColumns();\r\n                var transparentColumnIndex = fixedColumns.map(c => c.command).indexOf(\"transparent\");\r\n                var leftFixedColumnCount = transparentColumnIndex >= 0 ? transparentColumnIndex : 0;\r\n                offset = this._beginPageIndex * this.getColumnPageSize() - leftFixedColumnCount - 1\r\n            }\r\n            return offset > 0 ? offset : 0\r\n        },\r\n        dispose: function() {\r\n            clearTimeout(this._changedTimeout);\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    };\r\n    return members\r\n}();\r\nexport var virtualColumnsModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            scrolling: {\r\n                columnRenderingMode: \"standard\",\r\n                columnPageSize: 5,\r\n                columnRenderingThreshold: 300\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            columns: ColumnsControllerExtender\r\n        },\r\n        views: {\r\n            columnHeadersView: HeaderViewExtender,\r\n            rowsView: VirtualScrollingRowsViewExtender\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,QAAQ,EACRC,aAAa,QACV,uBAAuB;AAC9B,SACIC,SAAS,QACN,yBAAyB;AAChC,SACIC,iBAAiB,QACd,qCAAqC;AAC5C,SACIC,SAAS,QACN,uBAAuB;AAC9B,IAAIC,oBAAoB,GAAG,EAAE;AAC7B,IAAIC,gCAAgC,GAAG;EACnCC,WAAW,EAAE,SAAAA,CAAA,EAAW;IACpB,IAAI,CAACC,QAAQ,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACpC,IAAI,CAACC,kBAAkB,CAACC,MAAM,CAAC,CAAC;EACpC,CAAC;EACDC,aAAa,EAAE,SAAAA,CAASC,CAAC,EAAE;IACvB,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIC,UAAU,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;IACrC,IAAIC,IAAI,GAAGJ,CAAC,CAACK,YAAY,CAACD,IAAI;IAC9BH,IAAI,CAACP,QAAQ,CAACC,KAAK,CAACM,IAAI,EAAEL,SAAS,CAAC;IACpC,IAAIK,IAAI,CAACK,MAAM,CAAC,YAAY,CAAC,IAAIJ,UAAU,EAAE;MACzCE,IAAI,GAAGlB,QAAQ,CAACgB,UAAU,CAACK,QAAQ,CAAC,CAAC,CAAC,GAAGrB,QAAQ,CAACgB,UAAU,CAACM,QAAQ,CAAC,CAAC,CAAC,GAAGJ,IAAI;IACnF;IACAH,IAAI,CAACJ,kBAAkB,CAACY,iBAAiB,CAACL,IAAI,CAAC;EACnD;AACJ,CAAC;AACD,IAAIM,kBAAkB,GAAG;EACrBC,WAAW,EAAE,SAAAA,CAAA,EAAW;IACpB,IAAIC,QAAQ,GAAG,IAAI,CAAClB,QAAQ,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACnD,IAAI,IAAI,CAACC,kBAAkB,CAACgB,aAAa,CAAC,CAAC,EAAE;MACzC,IAAI,CAACC,yBAAyB,CAAC,CAAC;IACpC;IACA,OAAOF,QAAQ;EACnB;AACJ,CAAC;AACD,IAAIG,yBAAyB,GAAG,YAAW;EACvC,IAAIC,SAAS,GAAG,SAAAA,CAASC,OAAO,EAAE;IAC9B,OAAOA,OAAO,CAACC,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACC,YAAY,IAAIC,UAAU,CAACF,MAAM,CAACG,KAAK,CAAC,IAAI/B,oBAAoB,CAAC;EACzG,CAAC;EACD,IAAIgC,OAAO,GAAG;IACVC,IAAI,EAAE,SAAAA,CAAA,EAAW;MACb,IAAIvB,IAAI,GAAG,IAAI;MACfA,IAAI,CAACP,QAAQ,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MACpCK,IAAI,CAACwB,eAAe,GAAG,IAAI;MAC3BxB,IAAI,CAACyB,aAAa,GAAG,IAAI;MACzBzB,IAAI,CAAC0B,SAAS,GAAG,CAAC;MAClB1B,IAAI,CAAC2B,sBAAsB,GAAG,CAAC,CAAC;IACpC,CAAC;IACDC,iBAAiB,EAAE,SAAAA,CAAA,EAAW;MAC1B,IAAI,CAACnC,QAAQ,CAAC,CAAC;MACf,IAAI,CAACkC,sBAAsB,GAAG,CAAC,CAAC;IACpC,CAAC;IACDE,iBAAiB,EAAE,SAAAA,CAASC,QAAQ,EAAE;MAClC,IAAIC,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;MACzD,IAAIC,MAAM,GAAGlB,SAAS,CAACgB,cAAc,CAAC;MACtC,IAAIG,eAAe,GAAG,CAAC;MACvB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,MAAM,CAACG,MAAM,EAAED,KAAK,EAAE,EAAE;QAChD,IAAID,eAAe,IAAIJ,QAAQ,EAAE;UAC7B,OAAOO,IAAI,CAACC,KAAK,CAACH,KAAK,GAAG,IAAI,CAACI,iBAAiB,CAAC,CAAC,CAAC;QACvD;QACAL,eAAe,IAAID,MAAM,CAACE,KAAK,CAAC;MACpC;MACA,OAAO,CAAC;IACZ,CAAC;IACDK,aAAa,EAAE,SAAAA,CAAA,EAAW;MACtB,IAAInB,KAAK,GAAG,IAAI,CAAChB,MAAM,CAAC,OAAO,CAAC;MAChC,IAAI,QAAQ,KAAK,OAAOgB,KAAK,EAAE;QAC3B,OAAOA,KAAK;MAChB;MACA,OAAO,IAAI,CAACoB,aAAa,CAAC,UAAU,CAAC,CAACC,UAAU,IAAIxD,aAAa,CAAC,IAAI,CAACyD,SAAS,CAACpC,QAAQ,CAAC,CAAC,CAAC;IAChG,CAAC;IACDqC,eAAe,EAAE,SAAAA,CAASd,QAAQ,EAAE;MAChC,IAAIC,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;MACzD,IAAIC,MAAM,GAAGlB,SAAS,CAACgB,cAAc,CAAC;MACtC,IAAIG,eAAe,GAAG,CAAC;MACvBJ,QAAQ,IAAI,IAAI,CAACU,aAAa,CAAC,CAAC;MAChC,KAAK,IAAIL,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,MAAM,CAACG,MAAM,EAAED,KAAK,EAAE,EAAE;QAChD,IAAID,eAAe,IAAIJ,QAAQ,EAAE;UAC7B,OAAOO,IAAI,CAACQ,IAAI,CAACV,KAAK,GAAG,IAAI,CAACI,iBAAiB,CAAC,CAAC,CAAC;QACtD;QACAL,eAAe,IAAID,MAAM,CAACE,KAAK,CAAC;MACpC;MACA,OAAOE,IAAI,CAACQ,IAAI,CAACZ,MAAM,CAACG,MAAM,GAAG,IAAI,CAACG,iBAAiB,CAAC,CAAC,CAAC;IAC9D,CAAC;IACDA,iBAAiB,EAAE,SAAAA,CAAA,EAAW;MAC1B,OAAO,IAAI,CAAClC,MAAM,CAAC,0BAA0B,CAAC;IAClD,CAAC;IACDyC,mBAAmB,EAAE,SAAAA,CAAA,EAAW;MAC5B,IAAIC,IAAI,GAAG,IAAIC,IAAI,CAAD,CAAC;MACnB,IAAI,CAACC,cAAc,CAACC,IAAI,CAAC;QACrBC,WAAW,EAAE;UACTC,GAAG,EAAE,IAAI;UACThB,MAAM,EAAE;QACZ,CAAC;QACDiB,WAAW,EAAE;UACTrC,OAAO,EAAE,IAAI;UACbsC,uBAAuB,EAAE,IAAI;UAC7BlB,MAAM,EAAE;QACZ;MACJ,CAAC,CAAC;MACF,IAAI,CAACmB,WAAW,GAAG,IAAIP,IAAI,CAAD,CAAC,GAAGD,IAAI;IACtC,CAAC;IACDS,mBAAmB,EAAE,SAAAA,CAAA,EAAW;MAC5B,IAAIC,kBAAkB,GAAG,IAAI,CAACpD,MAAM,CAAC,oCAAoC,CAAC;MAC1E,IAAIqD,WAAW,GAAG,IAAI,CAACrD,MAAM,CAAC,uBAAuB,CAAC;MACtD,IAAIsD,gBAAgB,GAAG,CAAC;MACxB,IAAI,CAACtE,SAAS,CAACqE,WAAW,CAAC,IAAI,IAAI,CAACH,WAAW,GAAGE,kBAAkB,IAAIC,WAAW,EAAE;QACjFC,gBAAgB,GAAG,IAAI,CAACtD,MAAM,CAAC,mBAAmB,CAAC;MACvD;MACA,OAAOsD,gBAAgB;IAC3B,CAAC;IACDnD,iBAAiB,EAAE,SAAAA,CAASsB,QAAQ,EAAE;MAClC,IAAI6B,gBAAgB,GAAG,IAAI,CAACH,mBAAmB,CAAC,CAAC;MACjD,IAAIG,gBAAgB,GAAG,CAAC,EAAE;QACtBC,YAAY,CAAC,IAAI,CAACC,eAAe,CAAC;QAClC,IAAI,CAACA,eAAe,GAAGC,UAAU,CAAC,MAAM;UACpC,IAAI,CAACC,sBAAsB,CAACjC,QAAQ,CAAC;QACzC,CAAC,EAAE6B,gBAAgB,CAAC;MACxB,CAAC,MAAM;QACH,IAAI,CAACI,sBAAsB,CAACjC,QAAQ,CAAC;MACzC;IACJ,CAAC;IACDlB,aAAa,EAAE,SAAAA,CAAA,EAAW;MACtB,OAAOzB,SAAS,CAAC,CAAC,IAAI,SAAS,KAAK,IAAI,CAACkB,MAAM,CAAC,+BAA+B,CAAC;IACpF,CAAC;IACDR,MAAM,EAAE,SAAAA,CAAA,EAAW;MACf,IAAI,CAACkE,sBAAsB,CAAC,IAAI,CAACrC,SAAS,CAAC;IAC/C,CAAC;IACDqC,sBAAsB,EAAE,SAAAA,CAASjC,QAAQ,EAAE;MACvC,IAAI,IAAI,CAAClB,aAAa,CAAC,CAAC,EAAE;QACtB,IAAIoD,cAAc,GAAG,IAAI,CAACnC,iBAAiB,CAACC,QAAQ,CAAC;QACrD,IAAImC,YAAY,GAAG,IAAI,CAACrB,eAAe,CAACd,QAAQ,CAAC;QACjD,IAAIoC,kBAAkB,GAAGpC,QAAQ,GAAG,IAAI,CAACJ,SAAS,GAAG,IAAI,CAACF,eAAe,GAAGwC,cAAc,GAAG,IAAI,CAACvC,aAAa,GAAGwC,YAAY;QAC9H,IAAI,CAACvC,SAAS,GAAGI,QAAQ;QACzB,IAAIoC,kBAAkB,EAAE;UACpB,IAAI,CAAC1C,eAAe,GAAGwC,cAAc;UACrC,IAAI,CAACvC,aAAa,GAAGwC,YAAY;UACjC,IAAI,CAACnB,mBAAmB,CAAC,CAAC;QAC9B;MACJ;IACJ,CAAC;IACDqB,eAAe,EAAE,SAAAA,CAASC,QAAQ,EAAEC,MAAM,EAAE;MACxC,IAAIC,YAAY,GAAG,IAAI,CAAC7E,QAAQ,CAAC2E,QAAQ,CAAC;MAC1C,IAAI,IAAI,CAACxD,aAAa,CAAC,CAAC,IAAI,CAACyD,MAAM,IAAIC,YAAY,CAAClC,MAAM,EAAE;QACxD,IAAImC,sBAAsB,GAAGD,YAAY,CAACrD,GAAG,CAACuD,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAACC,OAAO,CAAC,aAAa,CAAC;QACpFJ,YAAY,CAACC,sBAAsB,CAAC,CAACI,OAAO,GAAG,IAAI,CAAC3C,iBAAiB,CAAC,CAAC,CAACI,MAAM,GAAG,IAAI,CAAC3C,QAAQ,CAAC,CAAC,CAAC2C,MAAM,GAAG,CAAC;QAC3G,OAAOkC,YAAY;MACvB;MACA,OAAOA,YAAY;IACvB,CAAC;IACDM,sBAAsB,EAAE,SAAAA,CAASR,QAAQ,EAAEC,MAAM,EAAE;MAC/C,IAAIQ,cAAc;MAClB,IAAIR,MAAM,IAAI,CAAC,IAAI,CAACzD,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAACkE,2BAA2B,CAAC,CAAC,EAAE;QACxE,OAAO,IAAI,CAACrF,QAAQ,CAAC2E,QAAQ,CAAC;MAClC;MACA,IAAI,IAAI,MAAMS,cAAc,GAAG,IAAI,CAACE,QAAQ,CAAC,IAAI,KAAK,CAAC,KAAKF,cAAc,IAAIA,cAAc,CAACzC,MAAM,IAAI,CAAC/C,SAAS,CAAC,IAAI,CAACmC,eAAe,CAAC,IAAI,CAACnC,SAAS,CAAC,IAAI,CAACoC,aAAa,CAAC,EAAE;QACvK,IAAI,CAACD,eAAe,GAAG,IAAI,CAACK,iBAAiB,CAAC,IAAI,CAACH,SAAS,CAAC;QAC7D,IAAI,CAACD,aAAa,GAAG,IAAI,CAACmB,eAAe,CAAC,IAAI,CAAClB,SAAS,CAAC;MAC7D;MACA,IAAIsC,cAAc,GAAG,IAAI,CAACxC,eAAe;MACzC,IAAIyC,YAAY,GAAG,IAAI,CAACxC,aAAa;MACrC,IAAIuD,kBAAkB,GAAGZ,QAAQ,GAAG,GAAG,GAAGJ,cAAc,GAAG,GAAG,GAAGC,YAAY;MAC7E,IAAI,IAAI,CAACtC,sBAAsB,CAACqD,kBAAkB,CAAC,EAAE;QACjD,OAAO,IAAI,CAACrD,sBAAsB,CAACqD,kBAAkB,CAAC;MAC1D;MACA,IAAIjD,cAAc,GAAG,IAAI,CAACtC,QAAQ,CAAC,CAAC;MACpC,IAAIwF,QAAQ,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;MACjC,IAAIC,QAAQ,GAAG,IAAI,CAAC5C,iBAAiB,CAAC,CAAC;MACvC,IAAI6C,UAAU,GAAGpB,cAAc,GAAGmB,QAAQ;MAC1C,IAAIE,QAAQ,GAAGpB,YAAY,GAAGkB,QAAQ;MACtC,IAAIb,YAAY,GAAG,IAAI,CAACH,eAAe,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;MACrD,IAAII,sBAAsB,GAAGD,YAAY,CAACrD,GAAG,CAACuD,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAACC,OAAO,CAAC,aAAa,CAAC;MACpF,IAAIY,qBAAqB,GAAGhB,YAAY,CAAClC,MAAM,GAAGmC,sBAAsB,GAAG,CAAC;MAC5E,IAAIgB,iBAAiB,GAAGxD,cAAc,CAACyD,KAAK,CAAC,CAAC,EAAEF,qBAAqB,CAAC;MACtE,IAAIG,YAAY,GAAG1D,cAAc,CAACyD,KAAK,CAACF,qBAAqB,EAAEF,UAAU,CAAC;MAC1E,IAAIM,UAAU,GAAG3E,SAAS,CAAC0E,YAAY,CAAC,CAACE,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;MACnE,IAAI,CAACH,UAAU,EAAE;QACbN,UAAU,GAAG,CAAC;MAClB;MACA,IAAIU,mBAAmB,GAAGxB,YAAY,CAAClC,MAAM,GAAGkC,YAAY,CAAClC,MAAM,GAAGmC,sBAAsB,GAAG,CAAC,GAAG,CAAC;MACpG,IAAIwB,eAAe,GAAGhE,cAAc,CAACyD,KAAK,CAACzD,cAAc,CAACK,MAAM,GAAG0D,mBAAmB,CAAC;MACvF,IAAIE,UAAU,GAAGjE,cAAc,CAACyD,KAAK,CAACH,QAAQ,EAAEtD,cAAc,CAACK,MAAM,GAAG0D,mBAAmB,CAAC;MAC5F,IAAIG,QAAQ,GAAGlF,SAAS,CAACiF,UAAU,CAAC,CAACL,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;MAC/D,IAAI,CAACI,QAAQ,EAAE;QACXZ,QAAQ,GAAGtD,cAAc,CAACK,MAAM;MACpC;MACA,IAAI6C,QAAQ,GAAG,CAAC,IAAI,QAAQ,KAAK,OAAOb,QAAQ,EAAE;QAC9C,IAAI8B,WAAW,GAAG,EAAE;QACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,QAAQ,EAAEkB,CAAC,EAAE,EAAE;UAC/BD,WAAW,CAACE,IAAI,CAAC,IAAI,CAAC3G,QAAQ,CAAC0G,CAAC,CAAC,CAAC;QACtC;QACAZ,iBAAiB,GAAGnG,iBAAiB,CAAC8G,WAAW,EAAE,CAAC,EAAEX,iBAAiB,CAACnD,MAAM,CAAC,CAACgC,QAAQ,CAAC,IAAI,EAAE;QAC/F2B,eAAe,GAAG3G,iBAAiB,CAAC8G,WAAW,EAAEnE,cAAc,CAACK,MAAM,GAAG2D,eAAe,CAAC3D,MAAM,EAAEL,cAAc,CAACK,MAAM,CAAC,CAACgC,QAAQ,CAAC,IAAI,EAAE;QACvIrC,cAAc,GAAG3C,iBAAiB,CAAC8G,WAAW,EAAEd,UAAU,EAAEC,QAAQ,CAAC,CAACjB,QAAQ,CAAC,IAAI,EAAE;MACzF,CAAC,MAAM;QACHrC,cAAc,GAAGA,cAAc,CAACyD,KAAK,CAACJ,UAAU,EAAEC,QAAQ,CAAC;MAC/D;MACA,IAAIK,UAAU,EAAE;QACZ3D,cAAc,CAACsE,OAAO,CAAC;UACnB5B,OAAO,EAAE,SAAS;UAClBpD,KAAK,EAAEqE;QACX,CAAC,CAAC;QACF3D,cAAc,GAAGwD,iBAAiB,CAACe,MAAM,CAACvE,cAAc,CAAC;MAC7D;MACA,IAAIkE,QAAQ,EAAE;QACVlE,cAAc,CAACqE,IAAI,CAAC;UAChB3B,OAAO,EAAE,SAAS;UAClBpD,KAAK,EAAE4E;QACX,CAAC,CAAC;QACFlE,cAAc,GAAGA,cAAc,CAACuE,MAAM,CAACP,eAAe,CAAC;MAC3D;MACA,IAAI,CAACpE,sBAAsB,CAACqD,kBAAkB,CAAC,GAAGjD,cAAc;MAChE,OAAOA,cAAc;IACzB,CAAC;IACDwE,oBAAoB,EAAE,SAAAA,CAAA,EAAW;MAC7B,IAAIC,MAAM,GAAG,CAAC;MACd,IAAI,IAAI,CAAChF,eAAe,GAAG,CAAC,EAAE;QAC1B,IAAI8C,YAAY,GAAG,IAAI,CAACH,eAAe,CAAC,CAAC;QACzC,IAAII,sBAAsB,GAAGD,YAAY,CAACrD,GAAG,CAACuD,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAACC,OAAO,CAAC,aAAa,CAAC;QACpF,IAAI+B,oBAAoB,GAAGlC,sBAAsB,IAAI,CAAC,GAAGA,sBAAsB,GAAG,CAAC;QACnFiC,MAAM,GAAG,IAAI,CAAChF,eAAe,GAAG,IAAI,CAACe,iBAAiB,CAAC,CAAC,GAAGkE,oBAAoB,GAAG,CAAC;MACvF;MACA,OAAOD,MAAM,GAAG,CAAC,GAAGA,MAAM,GAAG,CAAC;IAClC,CAAC;IACDE,OAAO,EAAE,SAAAA,CAAA,EAAW;MAChB9C,YAAY,CAAC,IAAI,CAACC,eAAe,CAAC;MAClC,IAAI,CAACpE,QAAQ,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACxC;EACJ,CAAC;EACD,OAAO2B,OAAO;AAClB,CAAC,CAAC,CAAC;AACH,OAAO,IAAIqF,oBAAoB,GAAG;EAC9BC,cAAc,EAAE,SAAAA,CAAA,EAAW;IACvB,OAAO;MACHC,SAAS,EAAE;QACPC,mBAAmB,EAAE,UAAU;QAC/BC,cAAc,EAAE,CAAC;QACjBC,wBAAwB,EAAE;MAC9B;IACJ,CAAC;EACL,CAAC;EACDC,SAAS,EAAE;IACPC,WAAW,EAAE;MACTlG,OAAO,EAAEF;IACb,CAAC;IACDqG,KAAK,EAAE;MACHC,iBAAiB,EAAE3G,kBAAkB;MACrC4G,QAAQ,EAAE9H;IACd;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}