{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/ldml/number.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { fitIntoRange, multiplyInExponentialForm } from \"../../core/utils/math\";\nimport { toFixed } from \"../utils\";\nvar DEFAULT_CONFIG = {\n  thousandsSeparator: \",\",\n  decimalSeparator: \".\"\n};\nvar ESCAPING_CHAR = \"'\";\nvar MAXIMUM_NUMBER_LENGTH = 15;\nvar PERCENT_EXPONENT_SHIFT = 2;\nfunction getGroupSizes(formatString) {\n  return formatString.split(\",\").slice(1).map(function (str) {\n    var singleQuotesLeft = 0;\n    return str.split(\"\").filter(function (char, index) {\n      singleQuotesLeft += \"'\" === char;\n      var isDigit = \"#\" === char || \"0\" === char;\n      var isInStub = singleQuotesLeft % 2;\n      return isDigit && !isInStub;\n    }).length;\n  });\n}\nfunction getSignParts(format) {\n  var signParts = format.split(\";\");\n  if (1 === signParts.length) {\n    signParts.push(\"-\" + signParts[0]);\n  }\n  return signParts;\n}\nfunction reverseString(str) {\n  return str.toString().split(\"\").reverse().join(\"\");\n}\nfunction isPercentFormat(format) {\n  return -1 !== format.indexOf(\"%\") && !format.match(/'[^']*%[^']*'/g);\n}\nfunction removeStubs(str) {\n  return str.replace(/'.+'/g, \"\");\n}\nfunction getNonRequiredDigitCount(floatFormat) {\n  if (!floatFormat) {\n    return 0;\n  }\n  var format = removeStubs(floatFormat);\n  return format.length - format.replace(/[#]/g, \"\").length;\n}\nfunction getRequiredDigitCount(floatFormat) {\n  if (!floatFormat) {\n    return 0;\n  }\n  var format = removeStubs(floatFormat);\n  return format.length - format.replace(/[0]/g, \"\").length;\n}\nfunction normalizeValueString(valuePart, minDigitCount, maxDigitCount) {\n  if (!valuePart) {\n    return \"\";\n  }\n  if (valuePart.length > maxDigitCount) {\n    valuePart = valuePart.substr(0, maxDigitCount);\n  }\n  while (valuePart.length > minDigitCount && \"0\" === valuePart.slice(-1)) {\n    valuePart = valuePart.substr(0, valuePart.length - 1);\n  }\n  while (valuePart.length < minDigitCount) {\n    valuePart += \"0\";\n  }\n  return valuePart;\n}\nfunction applyGroups(valueString, groupSizes, thousandsSeparator) {\n  if (!groupSizes.length) {\n    return valueString;\n  }\n  var groups = [];\n  var index = 0;\n  while (valueString) {\n    var groupSize = groupSizes[index];\n    if (!groupSize) {\n      break;\n    }\n    groups.push(valueString.slice(0, groupSize));\n    valueString = valueString.slice(groupSize);\n    if (index < groupSizes.length - 1) {\n      index++;\n    }\n  }\n  return groups.join(thousandsSeparator);\n}\nfunction formatNumberPart(format, valueString) {\n  return format.split(ESCAPING_CHAR).map(function (formatPart, escapeIndex) {\n    var isEscape = escapeIndex % 2;\n    if (!formatPart && isEscape) {\n      return ESCAPING_CHAR;\n    }\n    return isEscape ? formatPart : formatPart.replace(/[,#0]+/, valueString);\n  }).join(\"\");\n}\nfunction getFloatPointIndex(format) {\n  var isEscape = false;\n  for (var index = 0; index < format.length; index++) {\n    if (\"'\" === format[index]) {\n      isEscape = !isEscape;\n    }\n    if (\".\" === format[index] && !isEscape) {\n      return index;\n    }\n  }\n  return format.length;\n}\nexport function getFormatter(format, config) {\n  config = config || DEFAULT_CONFIG;\n  return function (value) {\n    if (\"number\" !== typeof value || isNaN(value)) {\n      return \"\";\n    }\n    var signFormatParts = getSignParts(format);\n    var isPositiveZero = 1 / value === 1 / 0;\n    var isPositive = value > 0 || isPositiveZero;\n    var numberFormat = signFormatParts[isPositive ? 0 : 1];\n    var floatPointIndex = getFloatPointIndex(numberFormat);\n    var floatFormatParts = [numberFormat.substr(0, floatPointIndex), numberFormat.substr(floatPointIndex + 1)];\n    var minFloatPrecision = getRequiredDigitCount(floatFormatParts[1]);\n    var maxFloatPrecision = minFloatPrecision + getNonRequiredDigitCount(floatFormatParts[1]);\n    if (isPercentFormat(numberFormat)) {\n      value = multiplyInExponentialForm(value, PERCENT_EXPONENT_SHIFT);\n    }\n    if (!isPositive) {\n      value = -value;\n    }\n    var minIntegerPrecision = getRequiredDigitCount(floatFormatParts[0]);\n    var maxIntegerPrecision = getNonRequiredDigitCount(floatFormatParts[0]) || config.unlimitedIntegerDigits ? void 0 : minIntegerPrecision;\n    var integerLength = Math.floor(value).toString().length;\n    var floatPrecision = fitIntoRange(maxFloatPrecision, 0, MAXIMUM_NUMBER_LENGTH - integerLength);\n    var groupSizes = getGroupSizes(floatFormatParts[0]).reverse();\n    var valueParts = toFixed(value, floatPrecision < 0 ? 0 : floatPrecision).split(\".\");\n    var valueIntegerPart = normalizeValueString(reverseString(valueParts[0]), minIntegerPrecision, maxIntegerPrecision);\n    var valueFloatPart = normalizeValueString(valueParts[1], minFloatPrecision, maxFloatPrecision);\n    valueIntegerPart = applyGroups(valueIntegerPart, groupSizes, config.thousandsSeparator);\n    var integerString = reverseString(formatNumberPart(reverseString(floatFormatParts[0]), valueIntegerPart));\n    var floatString = maxFloatPrecision ? formatNumberPart(floatFormatParts[1], valueFloatPart) : \"\";\n    var result = integerString + (floatString.match(/\\d/) ? config.decimalSeparator : \"\") + floatString;\n    return result;\n  };\n}\nfunction parseValue(text, isPercent, isNegative) {\n  var value = (isPercent ? .01 : 1) * parseFloat(text) || 0;\n  return isNegative ? -value : value;\n}\nfunction prepareValueText(valueText, formatter, isPercent, isIntegerPart) {\n  var nextValueText = valueText;\n  var char;\n  var text;\n  var nextText;\n  do {\n    if (nextText) {\n      char = text.length === nextText.length ? \"0\" : \"1\";\n      valueText = isIntegerPart ? char + valueText : valueText + char;\n    }\n    text = nextText || formatter(parseValue(nextValueText, isPercent));\n    nextValueText = isIntegerPart ? \"1\" + nextValueText : nextValueText + \"1\";\n    nextText = formatter(parseValue(nextValueText, isPercent));\n  } while (text !== nextText && (isIntegerPart ? text.length === nextText.length : text.length <= nextText.length));\n  if (isIntegerPart && nextText.length > text.length) {\n    var hasGroups = -1 === formatter(12345).indexOf(\"12345\");\n    do {\n      valueText = \"1\" + valueText;\n    } while (hasGroups && parseValue(valueText, isPercent) < 1e5);\n  }\n  return valueText;\n}\nfunction getFormatByValueText(valueText, formatter, isPercent, isNegative) {\n  var format = formatter(parseValue(valueText, isPercent, isNegative));\n  var valueTextParts = valueText.split(\".\");\n  var valueTextWithModifiedFloat = valueTextParts[0] + \".3\" + valueTextParts[1].slice(1);\n  var valueWithModifiedFloat = parseValue(valueTextWithModifiedFloat, isPercent, isNegative);\n  var decimalSeparatorIndex = formatter(valueWithModifiedFloat).indexOf(\"3\") - 1;\n  format = format.replace(/(\\d)\\D(\\d)/g, \"$1,$2\");\n  if (decimalSeparatorIndex >= 0) {\n    format = format.slice(0, decimalSeparatorIndex) + \".\" + format.slice(decimalSeparatorIndex + 1);\n  }\n  format = format.replace(/1+/, \"1\").replace(/1/g, \"#\");\n  if (!isPercent) {\n    format = format.replace(\"%\", \"'%'\");\n  }\n  return format;\n}\nexport function getFormat(formatter) {\n  var valueText = \".\";\n  var isPercent = formatter(1).indexOf(\"100\") >= 0;\n  valueText = prepareValueText(valueText, formatter, isPercent, true);\n  valueText = prepareValueText(valueText, formatter, isPercent, false);\n  var positiveFormat = getFormatByValueText(valueText, formatter, isPercent, false);\n  var negativeFormat = getFormatByValueText(valueText, formatter, isPercent, true);\n  return negativeFormat === \"-\" + positiveFormat ? positiveFormat : positiveFormat + \";\" + negativeFormat;\n}","map":{"version":3,"names":["fitIntoRange","multiplyInExponentialForm","toFixed","DEFAULT_CONFIG","thousandsSeparator","decimalSeparator","ESCAPING_CHAR","MAXIMUM_NUMBER_LENGTH","PERCENT_EXPONENT_SHIFT","getGroupSizes","formatString","split","slice","map","str","singleQuotesLeft","filter","char","index","isDigit","isInStub","length","getSignParts","format","signParts","push","reverseString","toString","reverse","join","isPercentFormat","indexOf","match","removeStubs","replace","getNonRequiredDigitCount","floatFormat","getRequiredDigitCount","normalizeValueString","valuePart","minDigitCount","maxDigitCount","substr","applyGroups","valueString","groupSizes","groups","groupSize","formatNumberPart","formatPart","escapeIndex","isEscape","getFloatPointIndex","getFormatter","config","value","isNaN","signFormatParts","isPositiveZero","isPositive","numberFormat","floatPointIndex","floatFormatParts","minFloatPrecision","maxFloatPrecision","minIntegerPrecision","maxIntegerPrecision","unlimitedIntegerDigits","integerLength","Math","floor","floatPrecision","valueParts","valueIntegerPart","valueFloatPart","integerString","floatString","result","parseValue","text","isPercent","isNegative","parseFloat","prepareValueText","valueText","formatter","isIntegerPart","nextValueText","nextText","hasGroups","getFormatByValueText","valueTextParts","valueTextWithModifiedFloat","valueWithModifiedFloat","decimalSeparatorIndex","getFormat","positiveFormat","negativeFormat"],"sources":["C:/Users/ninad/OneDrive/Radna povr≈°ina/zavrsni/client/node_modules/devextreme/esm/localization/ldml/number.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/localization/ldml/number.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    fitIntoRange,\r\n    multiplyInExponentialForm\r\n} from \"../../core/utils/math\";\r\nimport {\r\n    toFixed\r\n} from \"../utils\";\r\nvar DEFAULT_CONFIG = {\r\n    thousandsSeparator: \",\",\r\n    decimalSeparator: \".\"\r\n};\r\nvar ESCAPING_CHAR = \"'\";\r\nvar MAXIMUM_NUMBER_LENGTH = 15;\r\nvar PERCENT_EXPONENT_SHIFT = 2;\r\n\r\nfunction getGroupSizes(formatString) {\r\n    return formatString.split(\",\").slice(1).map((function(str) {\r\n        var singleQuotesLeft = 0;\r\n        return str.split(\"\").filter((function(char, index) {\r\n            singleQuotesLeft += \"'\" === char;\r\n            var isDigit = \"#\" === char || \"0\" === char;\r\n            var isInStub = singleQuotesLeft % 2;\r\n            return isDigit && !isInStub\r\n        })).length\r\n    }))\r\n}\r\n\r\nfunction getSignParts(format) {\r\n    var signParts = format.split(\";\");\r\n    if (1 === signParts.length) {\r\n        signParts.push(\"-\" + signParts[0])\r\n    }\r\n    return signParts\r\n}\r\n\r\nfunction reverseString(str) {\r\n    return str.toString().split(\"\").reverse().join(\"\")\r\n}\r\n\r\nfunction isPercentFormat(format) {\r\n    return -1 !== format.indexOf(\"%\") && !format.match(/'[^']*%[^']*'/g)\r\n}\r\n\r\nfunction removeStubs(str) {\r\n    return str.replace(/'.+'/g, \"\")\r\n}\r\n\r\nfunction getNonRequiredDigitCount(floatFormat) {\r\n    if (!floatFormat) {\r\n        return 0\r\n    }\r\n    var format = removeStubs(floatFormat);\r\n    return format.length - format.replace(/[#]/g, \"\").length\r\n}\r\n\r\nfunction getRequiredDigitCount(floatFormat) {\r\n    if (!floatFormat) {\r\n        return 0\r\n    }\r\n    var format = removeStubs(floatFormat);\r\n    return format.length - format.replace(/[0]/g, \"\").length\r\n}\r\n\r\nfunction normalizeValueString(valuePart, minDigitCount, maxDigitCount) {\r\n    if (!valuePart) {\r\n        return \"\"\r\n    }\r\n    if (valuePart.length > maxDigitCount) {\r\n        valuePart = valuePart.substr(0, maxDigitCount)\r\n    }\r\n    while (valuePart.length > minDigitCount && \"0\" === valuePart.slice(-1)) {\r\n        valuePart = valuePart.substr(0, valuePart.length - 1)\r\n    }\r\n    while (valuePart.length < minDigitCount) {\r\n        valuePart += \"0\"\r\n    }\r\n    return valuePart\r\n}\r\n\r\nfunction applyGroups(valueString, groupSizes, thousandsSeparator) {\r\n    if (!groupSizes.length) {\r\n        return valueString\r\n    }\r\n    var groups = [];\r\n    var index = 0;\r\n    while (valueString) {\r\n        var groupSize = groupSizes[index];\r\n        if (!groupSize) {\r\n            break\r\n        }\r\n        groups.push(valueString.slice(0, groupSize));\r\n        valueString = valueString.slice(groupSize);\r\n        if (index < groupSizes.length - 1) {\r\n            index++\r\n        }\r\n    }\r\n    return groups.join(thousandsSeparator)\r\n}\r\n\r\nfunction formatNumberPart(format, valueString) {\r\n    return format.split(ESCAPING_CHAR).map((function(formatPart, escapeIndex) {\r\n        var isEscape = escapeIndex % 2;\r\n        if (!formatPart && isEscape) {\r\n            return ESCAPING_CHAR\r\n        }\r\n        return isEscape ? formatPart : formatPart.replace(/[,#0]+/, valueString)\r\n    })).join(\"\")\r\n}\r\n\r\nfunction getFloatPointIndex(format) {\r\n    var isEscape = false;\r\n    for (var index = 0; index < format.length; index++) {\r\n        if (\"'\" === format[index]) {\r\n            isEscape = !isEscape\r\n        }\r\n        if (\".\" === format[index] && !isEscape) {\r\n            return index\r\n        }\r\n    }\r\n    return format.length\r\n}\r\nexport function getFormatter(format, config) {\r\n    config = config || DEFAULT_CONFIG;\r\n    return function(value) {\r\n        if (\"number\" !== typeof value || isNaN(value)) {\r\n            return \"\"\r\n        }\r\n        var signFormatParts = getSignParts(format);\r\n        var isPositiveZero = 1 / value === 1 / 0;\r\n        var isPositive = value > 0 || isPositiveZero;\r\n        var numberFormat = signFormatParts[isPositive ? 0 : 1];\r\n        var floatPointIndex = getFloatPointIndex(numberFormat);\r\n        var floatFormatParts = [numberFormat.substr(0, floatPointIndex), numberFormat.substr(floatPointIndex + 1)];\r\n        var minFloatPrecision = getRequiredDigitCount(floatFormatParts[1]);\r\n        var maxFloatPrecision = minFloatPrecision + getNonRequiredDigitCount(floatFormatParts[1]);\r\n        if (isPercentFormat(numberFormat)) {\r\n            value = multiplyInExponentialForm(value, PERCENT_EXPONENT_SHIFT)\r\n        }\r\n        if (!isPositive) {\r\n            value = -value\r\n        }\r\n        var minIntegerPrecision = getRequiredDigitCount(floatFormatParts[0]);\r\n        var maxIntegerPrecision = getNonRequiredDigitCount(floatFormatParts[0]) || config.unlimitedIntegerDigits ? void 0 : minIntegerPrecision;\r\n        var integerLength = Math.floor(value).toString().length;\r\n        var floatPrecision = fitIntoRange(maxFloatPrecision, 0, MAXIMUM_NUMBER_LENGTH - integerLength);\r\n        var groupSizes = getGroupSizes(floatFormatParts[0]).reverse();\r\n        var valueParts = toFixed(value, floatPrecision < 0 ? 0 : floatPrecision).split(\".\");\r\n        var valueIntegerPart = normalizeValueString(reverseString(valueParts[0]), minIntegerPrecision, maxIntegerPrecision);\r\n        var valueFloatPart = normalizeValueString(valueParts[1], minFloatPrecision, maxFloatPrecision);\r\n        valueIntegerPart = applyGroups(valueIntegerPart, groupSizes, config.thousandsSeparator);\r\n        var integerString = reverseString(formatNumberPart(reverseString(floatFormatParts[0]), valueIntegerPart));\r\n        var floatString = maxFloatPrecision ? formatNumberPart(floatFormatParts[1], valueFloatPart) : \"\";\r\n        var result = integerString + (floatString.match(/\\d/) ? config.decimalSeparator : \"\") + floatString;\r\n        return result\r\n    }\r\n}\r\n\r\nfunction parseValue(text, isPercent, isNegative) {\r\n    var value = (isPercent ? .01 : 1) * parseFloat(text) || 0;\r\n    return isNegative ? -value : value\r\n}\r\n\r\nfunction prepareValueText(valueText, formatter, isPercent, isIntegerPart) {\r\n    var nextValueText = valueText;\r\n    var char;\r\n    var text;\r\n    var nextText;\r\n    do {\r\n        if (nextText) {\r\n            char = text.length === nextText.length ? \"0\" : \"1\";\r\n            valueText = isIntegerPart ? char + valueText : valueText + char\r\n        }\r\n        text = nextText || formatter(parseValue(nextValueText, isPercent));\r\n        nextValueText = isIntegerPart ? \"1\" + nextValueText : nextValueText + \"1\";\r\n        nextText = formatter(parseValue(nextValueText, isPercent))\r\n    } while (text !== nextText && (isIntegerPart ? text.length === nextText.length : text.length <= nextText.length));\r\n    if (isIntegerPart && nextText.length > text.length) {\r\n        var hasGroups = -1 === formatter(12345).indexOf(\"12345\");\r\n        do {\r\n            valueText = \"1\" + valueText\r\n        } while (hasGroups && parseValue(valueText, isPercent) < 1e5)\r\n    }\r\n    return valueText\r\n}\r\n\r\nfunction getFormatByValueText(valueText, formatter, isPercent, isNegative) {\r\n    var format = formatter(parseValue(valueText, isPercent, isNegative));\r\n    var valueTextParts = valueText.split(\".\");\r\n    var valueTextWithModifiedFloat = valueTextParts[0] + \".3\" + valueTextParts[1].slice(1);\r\n    var valueWithModifiedFloat = parseValue(valueTextWithModifiedFloat, isPercent, isNegative);\r\n    var decimalSeparatorIndex = formatter(valueWithModifiedFloat).indexOf(\"3\") - 1;\r\n    format = format.replace(/(\\d)\\D(\\d)/g, \"$1,$2\");\r\n    if (decimalSeparatorIndex >= 0) {\r\n        format = format.slice(0, decimalSeparatorIndex) + \".\" + format.slice(decimalSeparatorIndex + 1)\r\n    }\r\n    format = format.replace(/1+/, \"1\").replace(/1/g, \"#\");\r\n    if (!isPercent) {\r\n        format = format.replace(\"%\", \"'%'\")\r\n    }\r\n    return format\r\n}\r\nexport function getFormat(formatter) {\r\n    var valueText = \".\";\r\n    var isPercent = formatter(1).indexOf(\"100\") >= 0;\r\n    valueText = prepareValueText(valueText, formatter, isPercent, true);\r\n    valueText = prepareValueText(valueText, formatter, isPercent, false);\r\n    var positiveFormat = getFormatByValueText(valueText, formatter, isPercent, false);\r\n    var negativeFormat = getFormatByValueText(valueText, formatter, isPercent, true);\r\n    return negativeFormat === \"-\" + positiveFormat ? positiveFormat : positiveFormat + \";\" + negativeFormat\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}