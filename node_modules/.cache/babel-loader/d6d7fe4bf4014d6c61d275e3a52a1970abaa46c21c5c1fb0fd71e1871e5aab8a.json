{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/validation_engine.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../core/class\";\nimport { extend } from \"../core/utils/extend\";\nimport { each } from \"../core/utils/iterator\";\nimport { EventsStrategy } from \"../core/events_strategy\";\nimport errors from \"../core/errors\";\nimport { grep } from \"../core/utils/common\";\nimport { isDefined, isString, isDate, isBoolean, isObject, isFunction, isPromise, isNumeric } from \"../core/utils/type\";\nimport numberLocalization from \"../localization/number\";\nimport messageLocalization from \"../localization/message\";\nimport { fromPromise, Deferred } from \"../core/utils/deferred\";\nvar STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\nclass BaseRuleValidator {\n  constructor() {\n    this.NAME = \"base\";\n  }\n  defaultMessage(value) {\n    return messageLocalization.getFormatter(\"validation-\".concat(this.NAME))(value);\n  }\n  defaultFormattedMessage(value) {\n    return messageLocalization.getFormatter(\"validation-\".concat(this.NAME, \"-formatted\"))(value);\n  }\n  _isValueEmpty(value) {\n    return !rulesValidators.required.validate(value, {});\n  }\n  validate(value, rule) {\n    var valueArray = Array.isArray(value) ? value : [value];\n    var result = true;\n    if (valueArray.length) {\n      valueArray.every(itemValue => {\n        result = this._validate(itemValue, rule);\n        return result;\n      });\n    } else {\n      result = this._validate(null, rule);\n    }\n    return result;\n  }\n}\nclass RequiredRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"required\";\n  }\n  _validate(value, rule) {\n    if (!isDefined(value)) {\n      return false;\n    }\n    if (false === value) {\n      return false;\n    }\n    value = String(value);\n    if (rule.trim || !isDefined(rule.trim)) {\n      value = value.trim();\n    }\n    return \"\" !== value;\n  }\n}\nclass NumericRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"numeric\";\n  }\n  _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n    if (rule.useCultureSettings && isString(value)) {\n      return !isNaN(numberLocalization.parse(value));\n    } else {\n      return isNumeric(value);\n    }\n  }\n}\nclass RangeRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"range\";\n  }\n  _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n    var validNumber = rulesValidators.numeric.validate(value, rule);\n    var validValue = isDefined(value) && \"\" !== value;\n    var number = validNumber ? parseFloat(value) : validValue && value.valueOf();\n    var min = rule.min;\n    var max = rule.max;\n    if (!(validNumber || isDate(value)) && !validValue) {\n      return false;\n    }\n    if (isDefined(min)) {\n      if (isDefined(max)) {\n        return number >= min && number <= max;\n      }\n      return number >= min;\n    } else if (isDefined(max)) {\n      return number <= max;\n    } else {\n      throw errors.Error(\"E0101\");\n    }\n  }\n}\nclass StringLengthRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"stringLength\";\n  }\n  _validate(value, rule) {\n    var _value;\n    value = String(null !== (_value = value) && void 0 !== _value ? _value : \"\");\n    if (rule.trim || !isDefined(rule.trim)) {\n      value = value.trim();\n    }\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n    return rulesValidators.range.validate(value.length, extend({}, rule));\n  }\n}\nclass CustomRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"custom\";\n  }\n  validate(value, rule) {\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n    var validator = rule.validator;\n    var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\n    var extraParams = isFunction(dataGetter) && dataGetter();\n    var params = {\n      value: value,\n      validator: validator,\n      rule: rule\n    };\n    if (extraParams) {\n      extend(params, extraParams);\n    }\n    return rule.validationCallback(params);\n  }\n}\nclass AsyncRuleValidator extends CustomRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"async\";\n  }\n  validate(value, rule) {\n    if (!isDefined(rule.reevaluate)) {\n      extend(rule, {\n        reevaluate: true\n      });\n    }\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n    var validator = rule.validator;\n    var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\n    var extraParams = isFunction(dataGetter) && dataGetter();\n    var params = {\n      value: value,\n      validator: validator,\n      rule: rule\n    };\n    if (extraParams) {\n      extend(params, extraParams);\n    }\n    var callbackResult = rule.validationCallback(params);\n    if (!isPromise(callbackResult)) {\n      throw errors.Error(\"E0103\");\n    }\n    return this._getWrappedPromise(fromPromise(callbackResult).promise());\n  }\n  _getWrappedPromise(promise) {\n    var deferred = new Deferred();\n    promise.then(function (res) {\n      deferred.resolve(res);\n    }, function (err) {\n      var res = {\n        isValid: false\n      };\n      if (isDefined(err)) {\n        if (isString(err)) {\n          res.message = err;\n        } else if (isObject(err) && isDefined(err.message) && isString(err.message)) {\n          res.message = err.message;\n        }\n      }\n      deferred.resolve(res);\n    });\n    return deferred.promise();\n  }\n}\nclass CompareRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"compare\";\n  }\n  _validate(value, rule) {\n    if (!rule.comparisonTarget) {\n      throw errors.Error(\"E0102\");\n    }\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n    extend(rule, {\n      reevaluate: true\n    });\n    var otherValue = rule.comparisonTarget();\n    var type = rule.comparisonType || \"==\";\n    switch (type) {\n      case \"==\":\n        return value == otherValue;\n      case \"!=\":\n        return value != otherValue;\n      case \"===\":\n        return value === otherValue;\n      case \"!==\":\n        return value !== otherValue;\n      case \">\":\n        return value > otherValue;\n      case \">=\":\n        return value >= otherValue;\n      case \"<\":\n        return value < otherValue;\n      case \"<=\":\n        return value <= otherValue;\n    }\n  }\n}\nclass PatternRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"pattern\";\n  }\n  _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n    var pattern = rule.pattern;\n    if (isString(pattern)) {\n      pattern = new RegExp(pattern);\n    }\n    return pattern.test(value);\n  }\n}\nclass EmailRuleValidator extends BaseRuleValidator {\n  constructor() {\n    super();\n    this.NAME = \"email\";\n  }\n  _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n    return rulesValidators.pattern.validate(value, extend({}, rule, {\n      pattern: /^[\\d\\w._-]+@[\\d\\w._-]+\\.[\\w]+$/i\n    }));\n  }\n}\nvar rulesValidators = {\n  required: new RequiredRuleValidator(),\n  numeric: new NumericRuleValidator(),\n  range: new RangeRuleValidator(),\n  stringLength: new StringLengthRuleValidator(),\n  custom: new CustomRuleValidator(),\n  async: new AsyncRuleValidator(),\n  compare: new CompareRuleValidator(),\n  pattern: new PatternRuleValidator(),\n  email: new EmailRuleValidator()\n};\nvar GroupConfig = Class.inherit({\n  ctor(group) {\n    this.group = group;\n    this.validators = [];\n    this._pendingValidators = [];\n    this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);\n    this._resetValidationInfo();\n    this._eventsStrategy = new EventsStrategy(this);\n  },\n  validate() {\n    var result = {\n      isValid: true,\n      brokenRules: [],\n      validators: [],\n      status: STATUS.valid,\n      complete: null\n    };\n    this._unsubscribeFromAllChangeEvents();\n    this._pendingValidators = [];\n    this._resetValidationInfo();\n    each(this.validators, (_, validator) => {\n      var validatorResult = validator.validate();\n      result.isValid = result.isValid && validatorResult.isValid;\n      if (validatorResult.brokenRules) {\n        result.brokenRules = result.brokenRules.concat(validatorResult.brokenRules);\n      }\n      result.validators.push(validator);\n      if (validatorResult.status === STATUS.pending) {\n        this._addPendingValidator(validator);\n      }\n      this._subscribeToChangeEvents(validator);\n    });\n    if (this._pendingValidators.length) {\n      result.status = STATUS.pending;\n    } else {\n      result.status = result.isValid ? STATUS.valid : STATUS.invalid;\n      this._unsubscribeFromAllChangeEvents();\n      this._raiseValidatedEvent(result);\n    }\n    this._updateValidationInfo(result);\n    return extend({}, this._validationInfo.result);\n  },\n  _subscribeToChangeEvents(validator) {\n    validator.on(\"validating\", this._onValidatorStatusChanged);\n    validator.on(\"validated\", this._onValidatorStatusChanged);\n  },\n  _unsubscribeFromChangeEvents(validator) {\n    validator.off(\"validating\", this._onValidatorStatusChanged);\n    validator.off(\"validated\", this._onValidatorStatusChanged);\n  },\n  _unsubscribeFromAllChangeEvents() {\n    each(this.validators, (_, validator) => {\n      this._unsubscribeFromChangeEvents(validator);\n    });\n  },\n  _updateValidationInfo(result) {\n    this._validationInfo.result = result;\n    if (result.status !== STATUS.pending) {\n      return;\n    }\n    if (!this._validationInfo.deferred) {\n      this._validationInfo.deferred = new Deferred();\n      this._validationInfo.result.complete = this._validationInfo.deferred.promise();\n    }\n  },\n  _addPendingValidator(validator) {\n    var foundValidator = grep(this._pendingValidators, function (val) {\n      return val === validator;\n    })[0];\n    if (!foundValidator) {\n      this._pendingValidators.push(validator);\n    }\n  },\n  _removePendingValidator(validator) {\n    var index = this._pendingValidators.indexOf(validator);\n    if (index >= 0) {\n      this._pendingValidators.splice(index, 1);\n    }\n  },\n  _orderBrokenRules(brokenRules) {\n    var orderedRules = [];\n    each(this.validators, function (_, validator) {\n      var foundRules = grep(brokenRules, function (rule) {\n        return rule.validator === validator;\n      });\n      if (foundRules.length) {\n        orderedRules = orderedRules.concat(foundRules);\n      }\n    });\n    return orderedRules;\n  },\n  _updateBrokenRules(result) {\n    if (!this._validationInfo.result) {\n      return;\n    }\n    var brokenRules = this._validationInfo.result.brokenRules;\n    var rules = grep(brokenRules, function (rule) {\n      return rule.validator !== result.validator;\n    });\n    if (result.brokenRules) {\n      brokenRules = rules.concat(result.brokenRules);\n    }\n    this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules);\n  },\n  _onValidatorStatusChanged(result) {\n    if (result.status === STATUS.pending) {\n      this._addPendingValidator(result.validator);\n      return;\n    }\n    this._resolveIfComplete(result);\n  },\n  _resolveIfComplete(result) {\n    this._removePendingValidator(result.validator);\n    this._updateBrokenRules(result);\n    if (!this._pendingValidators.length) {\n      this._unsubscribeFromAllChangeEvents();\n      if (!this._validationInfo.result) {\n        return;\n      }\n      this._validationInfo.result.status = 0 === this._validationInfo.result.brokenRules.length ? STATUS.valid : STATUS.invalid;\n      this._validationInfo.result.isValid = this._validationInfo.result.status === STATUS.valid;\n      var res = extend({}, this._validationInfo.result, {\n        complete: null\n      });\n      var deferred = this._validationInfo.deferred;\n      this._validationInfo.deferred = null;\n      this._raiseValidatedEvent(res);\n      deferred && setTimeout(() => {\n        deferred.resolve(res);\n      });\n    }\n  },\n  _raiseValidatedEvent(result) {\n    this._eventsStrategy.fireEvent(\"validated\", [result]);\n  },\n  _resetValidationInfo() {\n    this._validationInfo = {\n      result: null,\n      deferred: null\n    };\n  },\n  _synchronizeValidationInfo() {\n    if (this._validationInfo.result) {\n      this._validationInfo.result.validators = this.validators;\n    }\n  },\n  removeRegisteredValidator(validator) {\n    var index = this.validators.indexOf(validator);\n    if (index > -1) {\n      this.validators.splice(index, 1);\n      this._synchronizeValidationInfo();\n      this._resolveIfComplete({\n        validator: validator\n      });\n    }\n  },\n  registerValidator(validator) {\n    if (!this.validators.includes(validator)) {\n      this.validators.push(validator);\n      this._synchronizeValidationInfo();\n    }\n  },\n  reset() {\n    each(this.validators, function (_, validator) {\n      validator.reset();\n    });\n    this._pendingValidators = [];\n    this._resetValidationInfo();\n  },\n  on(eventName, eventHandler) {\n    this._eventsStrategy.on(eventName, eventHandler);\n    return this;\n  },\n  off(eventName, eventHandler) {\n    this._eventsStrategy.off(eventName, eventHandler);\n    return this;\n  }\n});\nvar ValidationEngine = {\n  groups: [],\n  getGroupConfig(group) {\n    var result = grep(this.groups, function (config) {\n      return config.group === group;\n    });\n    if (result.length) {\n      return result[0];\n    }\n  },\n  findGroup($element, model) {\n    var _$element$data, _$element$data$dxComp;\n    var hasValidationGroup = null === (_$element$data = $element.data()) || void 0 === _$element$data ? void 0 : null === (_$element$data$dxComp = _$element$data.dxComponents) || void 0 === _$element$data$dxComp ? void 0 : _$element$data$dxComp.includes(\"dxValidationGroup\");\n    var validationGroup = hasValidationGroup && $element.dxValidationGroup(\"instance\");\n    if (validationGroup) {\n      return validationGroup;\n    }\n    var $dxGroup = $element.parents(\".dx-validationgroup\").first();\n    if ($dxGroup.length) {\n      return $dxGroup.dxValidationGroup(\"instance\");\n    }\n    return model;\n  },\n  initGroups() {\n    this.groups = [];\n    this.addGroup();\n  },\n  addGroup(group) {\n    var config = this.getGroupConfig(group);\n    if (!config) {\n      config = new GroupConfig(group);\n      this.groups.push(config);\n    }\n    return config;\n  },\n  removeGroup(group) {\n    var config = this.getGroupConfig(group);\n    var index = this.groups.indexOf(config);\n    if (index > -1) {\n      this.groups.splice(index, 1);\n    }\n    return config;\n  },\n  _setDefaultMessage(info) {\n    var {\n      rule: rule,\n      validator: validator,\n      name: name\n    } = info;\n    if (!isDefined(rule.message)) {\n      if (validator.defaultFormattedMessage && isDefined(name)) {\n        rule.message = validator.defaultFormattedMessage(name);\n      } else {\n        rule.message = validator.defaultMessage();\n      }\n    }\n  },\n  _addBrokenRule(info) {\n    var {\n      result: result,\n      rule: rule\n    } = info;\n    if (!result.brokenRule) {\n      result.brokenRule = rule;\n    }\n    if (!result.brokenRules) {\n      result.brokenRules = [];\n    }\n    result.brokenRules.push(rule);\n  },\n  validate(value, rules, name) {\n    var _rules$;\n    var result = {\n      name: name,\n      value: value,\n      brokenRule: null,\n      brokenRules: null,\n      isValid: true,\n      validationRules: rules,\n      pendingRules: null,\n      status: STATUS.valid,\n      complete: null\n    };\n    var validator = null === rules || void 0 === rules ? void 0 : null === (_rules$ = rules[0]) || void 0 === _rules$ ? void 0 : _rules$.validator;\n    var asyncRuleItems = [];\n    each(rules || [], (_, rule) => {\n      var ruleValidator = rulesValidators[rule.type];\n      var ruleValidationResult;\n      if (ruleValidator) {\n        if (isDefined(rule.isValid) && rule.value === value && !rule.reevaluate) {\n          if (!rule.isValid) {\n            result.isValid = false;\n            this._addBrokenRule({\n              result: result,\n              rule: rule\n            });\n            return false;\n          }\n          return true;\n        }\n        rule.value = value;\n        if (\"async\" === rule.type) {\n          asyncRuleItems.push({\n            rule: rule,\n            ruleValidator: ruleValidator\n          });\n          return true;\n        }\n        ruleValidationResult = ruleValidator.validate(value, rule);\n        rule.isValid = ruleValidationResult;\n        if (!ruleValidationResult) {\n          result.isValid = false;\n          this._setDefaultMessage({\n            rule: rule,\n            validator: ruleValidator,\n            name: name\n          });\n          this._addBrokenRule({\n            result: result,\n            rule: rule\n          });\n        }\n        if (!rule.isValid) {\n          return false;\n        }\n      } else {\n        throw errors.Error(\"E0100\");\n      }\n    });\n    if (result.isValid && !result.brokenRules && asyncRuleItems.length) {\n      result = this._validateAsyncRules({\n        value: value,\n        items: asyncRuleItems,\n        result: result,\n        name: name\n      });\n    }\n    this._synchronizeGroupValidationInfo(validator, result);\n    result.status = result.pendingRules ? STATUS.pending : result.isValid ? STATUS.valid : STATUS.invalid;\n    return result;\n  },\n  _synchronizeGroupValidationInfo(validator, result) {\n    var _result$brokenRules;\n    if (!validator) {\n      return;\n    }\n    var groupConfig = ValidationEngine.getGroupConfig(validator._validationGroup);\n    groupConfig._updateBrokenRules.call(groupConfig, {\n      validator: validator,\n      brokenRules: null !== (_result$brokenRules = result.brokenRules) && void 0 !== _result$brokenRules ? _result$brokenRules : []\n    });\n  },\n  _validateAsyncRules(_ref) {\n    var {\n      result: result,\n      value: value,\n      items: items,\n      name: name\n    } = _ref;\n    var asyncResults = [];\n    each(items, (_, item) => {\n      var validateResult = item.ruleValidator.validate(value, item.rule);\n      if (!isPromise(validateResult)) {\n        this._updateRuleConfig({\n          rule: item.rule,\n          ruleResult: this._getPatchedRuleResult(validateResult),\n          validator: item.ruleValidator,\n          name: name\n        });\n      } else {\n        if (!result.pendingRules) {\n          result.pendingRules = [];\n        }\n        result.pendingRules.push(item.rule);\n        var asyncResult = validateResult.then(res => {\n          var ruleResult = this._getPatchedRuleResult(res);\n          this._updateRuleConfig({\n            rule: item.rule,\n            ruleResult: ruleResult,\n            validator: item.ruleValidator,\n            name: name\n          });\n          return ruleResult;\n        });\n        asyncResults.push(asyncResult);\n      }\n    });\n    if (asyncResults.length) {\n      result.complete = Promise.all(asyncResults).then(values => this._getAsyncRulesResult({\n        result: result,\n        values: values\n      }));\n    }\n    return result;\n  },\n  _updateRuleConfig(_ref2) {\n    var {\n      rule: rule,\n      ruleResult: ruleResult,\n      validator: validator,\n      name: name\n    } = _ref2;\n    rule.isValid = ruleResult.isValid;\n    if (!ruleResult.isValid) {\n      if (isDefined(ruleResult.message) && isString(ruleResult.message) && ruleResult.message.length) {\n        rule.message = ruleResult.message;\n      } else {\n        this._setDefaultMessage({\n          rule: rule,\n          validator: validator,\n          name: name\n        });\n      }\n    }\n  },\n  _getPatchedRuleResult(ruleResult) {\n    var result;\n    if (isObject(ruleResult)) {\n      result = extend({}, ruleResult);\n      if (!isDefined(result.isValid)) {\n        result.isValid = true;\n      }\n    } else {\n      result = {\n        isValid: isBoolean(ruleResult) ? ruleResult : true\n      };\n    }\n    return result;\n  },\n  _getAsyncRulesResult(_ref3) {\n    var {\n      values: values,\n      result: result\n    } = _ref3;\n    each(values, (index, val) => {\n      if (false === val.isValid) {\n        result.isValid = val.isValid;\n        var rule = result.pendingRules[index];\n        this._addBrokenRule({\n          result: result,\n          rule: rule\n        });\n      }\n    });\n    result.pendingRules = null;\n    result.complete = null;\n    result.status = result.isValid ? STATUS.valid : STATUS.invalid;\n    return result;\n  },\n  registerValidatorInGroup(group, validator) {\n    var groupConfig = ValidationEngine.addGroup(group);\n    groupConfig.registerValidator.call(groupConfig, validator);\n  },\n  _shouldRemoveGroup(group, validatorsInGroup) {\n    var isDefaultGroup = void 0 === group;\n    var isValidationGroupInstance = group && \"dxValidationGroup\" === group.NAME;\n    return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length;\n  },\n  removeRegisteredValidator(group, validator) {\n    var config = ValidationEngine.getGroupConfig(group);\n    if (config) {\n      config.removeRegisteredValidator.call(config, validator);\n      var validatorsInGroup = config.validators;\n      if (this._shouldRemoveGroup(group, validatorsInGroup)) {\n        this.removeGroup(group);\n      }\n    }\n  },\n  initValidationOptions(options) {\n    var initedOptions = {};\n    if (options) {\n      [\"isValid\", \"validationStatus\", \"validationError\", \"validationErrors\"].forEach(prop => {\n        if (prop in options) {\n          extend(initedOptions, this.synchronizeValidationOptions({\n            name: prop,\n            value: options[prop]\n          }, options));\n        }\n      });\n    }\n    return initedOptions;\n  },\n  synchronizeValidationOptions(_ref4, options) {\n    var {\n      name: name,\n      value: value\n    } = _ref4;\n    switch (name) {\n      case \"validationStatus\":\n        var isValid = value === STATUS.valid || value === STATUS.pending;\n        return options.isValid !== isValid ? {\n          isValid: isValid\n        } : {};\n      case \"isValid\":\n        var {\n          validationStatus: validationStatus\n        } = options;\n        var newStatus = validationStatus;\n        if (value && validationStatus === STATUS.invalid) {\n          newStatus = STATUS.valid;\n        } else if (!value && validationStatus !== STATUS.invalid) {\n          newStatus = STATUS.invalid;\n        }\n        return newStatus !== validationStatus ? {\n          validationStatus: newStatus\n        } : {};\n      case \"validationErrors\":\n        var validationError = !value || !value.length ? null : value[0];\n        return options.validationError !== validationError ? {\n          validationError: validationError\n        } : {};\n      case \"validationError\":\n        var {\n          validationErrors: validationErrors\n        } = options;\n        if (!value && validationErrors) {\n          return {\n            validationErrors: null\n          };\n        } else if (value && !validationErrors) {\n          return {\n            validationErrors: [value]\n          };\n        } else if (value && validationErrors && value !== validationErrors[0]) {\n          validationErrors[0] = value;\n          return {\n            validationErrors: validationErrors.slice()\n          };\n        }\n    }\n    return {};\n  },\n  validateGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n    if (!groupConfig) {\n      throw errors.Error(\"E0110\");\n    }\n    return groupConfig.validate();\n  },\n  resetGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n    if (!groupConfig) {\n      throw errors.Error(\"E0110\");\n    }\n    return groupConfig.reset();\n  }\n};\nValidationEngine.initGroups();\nexport default ValidationEngine;","map":{"version":3,"names":["Class","extend","each","EventsStrategy","errors","grep","isDefined","isString","isDate","isBoolean","isObject","isFunction","isPromise","isNumeric","numberLocalization","messageLocalization","fromPromise","Deferred","STATUS","valid","invalid","pending","BaseRuleValidator","constructor","NAME","defaultMessage","value","getFormatter","concat","defaultFormattedMessage","_isValueEmpty","rulesValidators","required","validate","rule","valueArray","Array","isArray","result","length","every","itemValue","_validate","RequiredRuleValidator","String","trim","NumericRuleValidator","ignoreEmptyValue","useCultureSettings","isNaN","parse","RangeRuleValidator","validNumber","numeric","validValue","number","parseFloat","valueOf","min","max","Error","StringLengthRuleValidator","_value","range","CustomRuleValidator","validator","dataGetter","option","extraParams","params","validationCallback","AsyncRuleValidator","reevaluate","callbackResult","_getWrappedPromise","promise","deferred","then","res","resolve","err","isValid","message","CompareRuleValidator","comparisonTarget","otherValue","type","comparisonType","PatternRuleValidator","pattern","RegExp","test","EmailRuleValidator","stringLength","custom","async","compare","email","GroupConfig","inherit","ctor","group","validators","_pendingValidators","_onValidatorStatusChanged","bind","_resetValidationInfo","_eventsStrategy","brokenRules","status","complete","_unsubscribeFromAllChangeEvents","_","validatorResult","push","_addPendingValidator","_subscribeToChangeEvents","_raiseValidatedEvent","_updateValidationInfo","_validationInfo","on","_unsubscribeFromChangeEvents","off","foundValidator","val","_removePendingValidator","index","indexOf","splice","_orderBrokenRules","orderedRules","foundRules","_updateBrokenRules","rules","_resolveIfComplete","setTimeout","fireEvent","_synchronizeValidationInfo","removeRegisteredValidator","registerValidator","includes","reset","eventName","eventHandler","ValidationEngine","groups","getGroupConfig","config","findGroup","$element","model","_$element$data","_$element$data$dxComp","hasValidationGroup","data","dxComponents","validationGroup","dxValidationGroup","$dxGroup","parents","first","initGroups","addGroup","removeGroup","_setDefaultMessage","info","name","_addBrokenRule","brokenRule","_rules$","validationRules","pendingRules","asyncRuleItems","ruleValidator","ruleValidationResult","_validateAsyncRules","items","_synchronizeGroupValidationInfo","_result$brokenRules","groupConfig","_validationGroup","call","_ref","asyncResults","item","validateResult","_updateRuleConfig","ruleResult","_getPatchedRuleResult","asyncResult","Promise","all","values","_getAsyncRulesResult","_ref2","_ref3","registerValidatorInGroup","_shouldRemoveGroup","validatorsInGroup","isDefaultGroup","isValidationGroupInstance","initValidationOptions","options","initedOptions","forEach","prop","synchronizeValidationOptions","_ref4","validationStatus","newStatus","validationError","validationErrors","slice","validateGroup","resetGroup"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/ui/validation_engine.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/validation_engine.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Class from \"../core/class\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../core/utils/iterator\";\r\nimport {\r\n    EventsStrategy\r\n} from \"../core/events_strategy\";\r\nimport errors from \"../core/errors\";\r\nimport {\r\n    grep\r\n} from \"../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isDate,\r\n    isBoolean,\r\n    isObject,\r\n    isFunction,\r\n    isPromise,\r\n    isNumeric\r\n} from \"../core/utils/type\";\r\nimport numberLocalization from \"../localization/number\";\r\nimport messageLocalization from \"../localization/message\";\r\nimport {\r\n    fromPromise,\r\n    Deferred\r\n} from \"../core/utils/deferred\";\r\nvar STATUS = {\r\n    valid: \"valid\",\r\n    invalid: \"invalid\",\r\n    pending: \"pending\"\r\n};\r\nclass BaseRuleValidator {\r\n    constructor() {\r\n        this.NAME = \"base\"\r\n    }\r\n    defaultMessage(value) {\r\n        return messageLocalization.getFormatter(\"validation-\".concat(this.NAME))(value)\r\n    }\r\n    defaultFormattedMessage(value) {\r\n        return messageLocalization.getFormatter(\"validation-\".concat(this.NAME, \"-formatted\"))(value)\r\n    }\r\n    _isValueEmpty(value) {\r\n        return !rulesValidators.required.validate(value, {})\r\n    }\r\n    validate(value, rule) {\r\n        var valueArray = Array.isArray(value) ? value : [value];\r\n        var result = true;\r\n        if (valueArray.length) {\r\n            valueArray.every(itemValue => {\r\n                result = this._validate(itemValue, rule);\r\n                return result\r\n            })\r\n        } else {\r\n            result = this._validate(null, rule)\r\n        }\r\n        return result\r\n    }\r\n}\r\nclass RequiredRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"required\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (!isDefined(value)) {\r\n            return false\r\n        }\r\n        if (false === value) {\r\n            return false\r\n        }\r\n        value = String(value);\r\n        if (rule.trim || !isDefined(rule.trim)) {\r\n            value = value.trim()\r\n        }\r\n        return \"\" !== value\r\n    }\r\n}\r\nclass NumericRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"numeric\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        if (rule.useCultureSettings && isString(value)) {\r\n            return !isNaN(numberLocalization.parse(value))\r\n        } else {\r\n            return isNumeric(value)\r\n        }\r\n    }\r\n}\r\nclass RangeRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"range\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var validNumber = rulesValidators.numeric.validate(value, rule);\r\n        var validValue = isDefined(value) && \"\" !== value;\r\n        var number = validNumber ? parseFloat(value) : validValue && value.valueOf();\r\n        var min = rule.min;\r\n        var max = rule.max;\r\n        if (!(validNumber || isDate(value)) && !validValue) {\r\n            return false\r\n        }\r\n        if (isDefined(min)) {\r\n            if (isDefined(max)) {\r\n                return number >= min && number <= max\r\n            }\r\n            return number >= min\r\n        } else if (isDefined(max)) {\r\n            return number <= max\r\n        } else {\r\n            throw errors.Error(\"E0101\")\r\n        }\r\n    }\r\n}\r\nclass StringLengthRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"stringLength\"\r\n    }\r\n    _validate(value, rule) {\r\n        var _value;\r\n        value = String(null !== (_value = value) && void 0 !== _value ? _value : \"\");\r\n        if (rule.trim || !isDefined(rule.trim)) {\r\n            value = value.trim()\r\n        }\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        return rulesValidators.range.validate(value.length, extend({}, rule))\r\n    }\r\n}\r\nclass CustomRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"custom\"\r\n    }\r\n    validate(value, rule) {\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var validator = rule.validator;\r\n        var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\r\n        var extraParams = isFunction(dataGetter) && dataGetter();\r\n        var params = {\r\n            value: value,\r\n            validator: validator,\r\n            rule: rule\r\n        };\r\n        if (extraParams) {\r\n            extend(params, extraParams)\r\n        }\r\n        return rule.validationCallback(params)\r\n    }\r\n}\r\nclass AsyncRuleValidator extends CustomRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"async\"\r\n    }\r\n    validate(value, rule) {\r\n        if (!isDefined(rule.reevaluate)) {\r\n            extend(rule, {\r\n                reevaluate: true\r\n            })\r\n        }\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var validator = rule.validator;\r\n        var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\r\n        var extraParams = isFunction(dataGetter) && dataGetter();\r\n        var params = {\r\n            value: value,\r\n            validator: validator,\r\n            rule: rule\r\n        };\r\n        if (extraParams) {\r\n            extend(params, extraParams)\r\n        }\r\n        var callbackResult = rule.validationCallback(params);\r\n        if (!isPromise(callbackResult)) {\r\n            throw errors.Error(\"E0103\")\r\n        }\r\n        return this._getWrappedPromise(fromPromise(callbackResult).promise())\r\n    }\r\n    _getWrappedPromise(promise) {\r\n        var deferred = new Deferred;\r\n        promise.then((function(res) {\r\n            deferred.resolve(res)\r\n        }), (function(err) {\r\n            var res = {\r\n                isValid: false\r\n            };\r\n            if (isDefined(err)) {\r\n                if (isString(err)) {\r\n                    res.message = err\r\n                } else if (isObject(err) && isDefined(err.message) && isString(err.message)) {\r\n                    res.message = err.message\r\n                }\r\n            }\r\n            deferred.resolve(res)\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n}\r\nclass CompareRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"compare\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (!rule.comparisonTarget) {\r\n            throw errors.Error(\"E0102\")\r\n        }\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        extend(rule, {\r\n            reevaluate: true\r\n        });\r\n        var otherValue = rule.comparisonTarget();\r\n        var type = rule.comparisonType || \"==\";\r\n        switch (type) {\r\n            case \"==\":\r\n                return value == otherValue;\r\n            case \"!=\":\r\n                return value != otherValue;\r\n            case \"===\":\r\n                return value === otherValue;\r\n            case \"!==\":\r\n                return value !== otherValue;\r\n            case \">\":\r\n                return value > otherValue;\r\n            case \">=\":\r\n                return value >= otherValue;\r\n            case \"<\":\r\n                return value < otherValue;\r\n            case \"<=\":\r\n                return value <= otherValue\r\n        }\r\n    }\r\n}\r\nclass PatternRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"pattern\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var pattern = rule.pattern;\r\n        if (isString(pattern)) {\r\n            pattern = new RegExp(pattern)\r\n        }\r\n        return pattern.test(value)\r\n    }\r\n}\r\nclass EmailRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"email\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        return rulesValidators.pattern.validate(value, extend({}, rule, {\r\n            pattern: /^[\\d\\w._-]+@[\\d\\w._-]+\\.[\\w]+$/i\r\n        }))\r\n    }\r\n}\r\nvar rulesValidators = {\r\n    required: new RequiredRuleValidator,\r\n    numeric: new NumericRuleValidator,\r\n    range: new RangeRuleValidator,\r\n    stringLength: new StringLengthRuleValidator,\r\n    custom: new CustomRuleValidator,\r\n    async: new AsyncRuleValidator,\r\n    compare: new CompareRuleValidator,\r\n    pattern: new PatternRuleValidator,\r\n    email: new EmailRuleValidator\r\n};\r\nvar GroupConfig = Class.inherit({\r\n    ctor(group) {\r\n        this.group = group;\r\n        this.validators = [];\r\n        this._pendingValidators = [];\r\n        this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);\r\n        this._resetValidationInfo();\r\n        this._eventsStrategy = new EventsStrategy(this)\r\n    },\r\n    validate() {\r\n        var result = {\r\n            isValid: true,\r\n            brokenRules: [],\r\n            validators: [],\r\n            status: STATUS.valid,\r\n            complete: null\r\n        };\r\n        this._unsubscribeFromAllChangeEvents();\r\n        this._pendingValidators = [];\r\n        this._resetValidationInfo();\r\n        each(this.validators, (_, validator) => {\r\n            var validatorResult = validator.validate();\r\n            result.isValid = result.isValid && validatorResult.isValid;\r\n            if (validatorResult.brokenRules) {\r\n                result.brokenRules = result.brokenRules.concat(validatorResult.brokenRules)\r\n            }\r\n            result.validators.push(validator);\r\n            if (validatorResult.status === STATUS.pending) {\r\n                this._addPendingValidator(validator)\r\n            }\r\n            this._subscribeToChangeEvents(validator)\r\n        });\r\n        if (this._pendingValidators.length) {\r\n            result.status = STATUS.pending\r\n        } else {\r\n            result.status = result.isValid ? STATUS.valid : STATUS.invalid;\r\n            this._unsubscribeFromAllChangeEvents();\r\n            this._raiseValidatedEvent(result)\r\n        }\r\n        this._updateValidationInfo(result);\r\n        return extend({}, this._validationInfo.result)\r\n    },\r\n    _subscribeToChangeEvents(validator) {\r\n        validator.on(\"validating\", this._onValidatorStatusChanged);\r\n        validator.on(\"validated\", this._onValidatorStatusChanged)\r\n    },\r\n    _unsubscribeFromChangeEvents(validator) {\r\n        validator.off(\"validating\", this._onValidatorStatusChanged);\r\n        validator.off(\"validated\", this._onValidatorStatusChanged)\r\n    },\r\n    _unsubscribeFromAllChangeEvents() {\r\n        each(this.validators, (_, validator) => {\r\n            this._unsubscribeFromChangeEvents(validator)\r\n        })\r\n    },\r\n    _updateValidationInfo(result) {\r\n        this._validationInfo.result = result;\r\n        if (result.status !== STATUS.pending) {\r\n            return\r\n        }\r\n        if (!this._validationInfo.deferred) {\r\n            this._validationInfo.deferred = new Deferred;\r\n            this._validationInfo.result.complete = this._validationInfo.deferred.promise()\r\n        }\r\n    },\r\n    _addPendingValidator(validator) {\r\n        var foundValidator = grep(this._pendingValidators, (function(val) {\r\n            return val === validator\r\n        }))[0];\r\n        if (!foundValidator) {\r\n            this._pendingValidators.push(validator)\r\n        }\r\n    },\r\n    _removePendingValidator(validator) {\r\n        var index = this._pendingValidators.indexOf(validator);\r\n        if (index >= 0) {\r\n            this._pendingValidators.splice(index, 1)\r\n        }\r\n    },\r\n    _orderBrokenRules(brokenRules) {\r\n        var orderedRules = [];\r\n        each(this.validators, (function(_, validator) {\r\n            var foundRules = grep(brokenRules, (function(rule) {\r\n                return rule.validator === validator\r\n            }));\r\n            if (foundRules.length) {\r\n                orderedRules = orderedRules.concat(foundRules)\r\n            }\r\n        }));\r\n        return orderedRules\r\n    },\r\n    _updateBrokenRules(result) {\r\n        if (!this._validationInfo.result) {\r\n            return\r\n        }\r\n        var brokenRules = this._validationInfo.result.brokenRules;\r\n        var rules = grep(brokenRules, (function(rule) {\r\n            return rule.validator !== result.validator\r\n        }));\r\n        if (result.brokenRules) {\r\n            brokenRules = rules.concat(result.brokenRules)\r\n        }\r\n        this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules)\r\n    },\r\n    _onValidatorStatusChanged(result) {\r\n        if (result.status === STATUS.pending) {\r\n            this._addPendingValidator(result.validator);\r\n            return\r\n        }\r\n        this._resolveIfComplete(result)\r\n    },\r\n    _resolveIfComplete(result) {\r\n        this._removePendingValidator(result.validator);\r\n        this._updateBrokenRules(result);\r\n        if (!this._pendingValidators.length) {\r\n            this._unsubscribeFromAllChangeEvents();\r\n            if (!this._validationInfo.result) {\r\n                return\r\n            }\r\n            this._validationInfo.result.status = 0 === this._validationInfo.result.brokenRules.length ? STATUS.valid : STATUS.invalid;\r\n            this._validationInfo.result.isValid = this._validationInfo.result.status === STATUS.valid;\r\n            var res = extend({}, this._validationInfo.result, {\r\n                complete: null\r\n            });\r\n            var deferred = this._validationInfo.deferred;\r\n            this._validationInfo.deferred = null;\r\n            this._raiseValidatedEvent(res);\r\n            deferred && setTimeout(() => {\r\n                deferred.resolve(res)\r\n            })\r\n        }\r\n    },\r\n    _raiseValidatedEvent(result) {\r\n        this._eventsStrategy.fireEvent(\"validated\", [result])\r\n    },\r\n    _resetValidationInfo() {\r\n        this._validationInfo = {\r\n            result: null,\r\n            deferred: null\r\n        }\r\n    },\r\n    _synchronizeValidationInfo() {\r\n        if (this._validationInfo.result) {\r\n            this._validationInfo.result.validators = this.validators\r\n        }\r\n    },\r\n    removeRegisteredValidator(validator) {\r\n        var index = this.validators.indexOf(validator);\r\n        if (index > -1) {\r\n            this.validators.splice(index, 1);\r\n            this._synchronizeValidationInfo();\r\n            this._resolveIfComplete({\r\n                validator: validator\r\n            })\r\n        }\r\n    },\r\n    registerValidator(validator) {\r\n        if (!this.validators.includes(validator)) {\r\n            this.validators.push(validator);\r\n            this._synchronizeValidationInfo()\r\n        }\r\n    },\r\n    reset() {\r\n        each(this.validators, (function(_, validator) {\r\n            validator.reset()\r\n        }));\r\n        this._pendingValidators = [];\r\n        this._resetValidationInfo()\r\n    },\r\n    on(eventName, eventHandler) {\r\n        this._eventsStrategy.on(eventName, eventHandler);\r\n        return this\r\n    },\r\n    off(eventName, eventHandler) {\r\n        this._eventsStrategy.off(eventName, eventHandler);\r\n        return this\r\n    }\r\n});\r\nvar ValidationEngine = {\r\n    groups: [],\r\n    getGroupConfig(group) {\r\n        var result = grep(this.groups, (function(config) {\r\n            return config.group === group\r\n        }));\r\n        if (result.length) {\r\n            return result[0]\r\n        }\r\n    },\r\n    findGroup($element, model) {\r\n        var _$element$data, _$element$data$dxComp;\r\n        var hasValidationGroup = null === (_$element$data = $element.data()) || void 0 === _$element$data ? void 0 : null === (_$element$data$dxComp = _$element$data.dxComponents) || void 0 === _$element$data$dxComp ? void 0 : _$element$data$dxComp.includes(\"dxValidationGroup\");\r\n        var validationGroup = hasValidationGroup && $element.dxValidationGroup(\"instance\");\r\n        if (validationGroup) {\r\n            return validationGroup\r\n        }\r\n        var $dxGroup = $element.parents(\".dx-validationgroup\").first();\r\n        if ($dxGroup.length) {\r\n            return $dxGroup.dxValidationGroup(\"instance\")\r\n        }\r\n        return model\r\n    },\r\n    initGroups() {\r\n        this.groups = [];\r\n        this.addGroup()\r\n    },\r\n    addGroup(group) {\r\n        var config = this.getGroupConfig(group);\r\n        if (!config) {\r\n            config = new GroupConfig(group);\r\n            this.groups.push(config)\r\n        }\r\n        return config\r\n    },\r\n    removeGroup(group) {\r\n        var config = this.getGroupConfig(group);\r\n        var index = this.groups.indexOf(config);\r\n        if (index > -1) {\r\n            this.groups.splice(index, 1)\r\n        }\r\n        return config\r\n    },\r\n    _setDefaultMessage(info) {\r\n        var {\r\n            rule: rule,\r\n            validator: validator,\r\n            name: name\r\n        } = info;\r\n        if (!isDefined(rule.message)) {\r\n            if (validator.defaultFormattedMessage && isDefined(name)) {\r\n                rule.message = validator.defaultFormattedMessage(name)\r\n            } else {\r\n                rule.message = validator.defaultMessage()\r\n            }\r\n        }\r\n    },\r\n    _addBrokenRule(info) {\r\n        var {\r\n            result: result,\r\n            rule: rule\r\n        } = info;\r\n        if (!result.brokenRule) {\r\n            result.brokenRule = rule\r\n        }\r\n        if (!result.brokenRules) {\r\n            result.brokenRules = []\r\n        }\r\n        result.brokenRules.push(rule)\r\n    },\r\n    validate(value, rules, name) {\r\n        var _rules$;\r\n        var result = {\r\n            name: name,\r\n            value: value,\r\n            brokenRule: null,\r\n            brokenRules: null,\r\n            isValid: true,\r\n            validationRules: rules,\r\n            pendingRules: null,\r\n            status: STATUS.valid,\r\n            complete: null\r\n        };\r\n        var validator = null === rules || void 0 === rules ? void 0 : null === (_rules$ = rules[0]) || void 0 === _rules$ ? void 0 : _rules$.validator;\r\n        var asyncRuleItems = [];\r\n        each(rules || [], (_, rule) => {\r\n            var ruleValidator = rulesValidators[rule.type];\r\n            var ruleValidationResult;\r\n            if (ruleValidator) {\r\n                if (isDefined(rule.isValid) && rule.value === value && !rule.reevaluate) {\r\n                    if (!rule.isValid) {\r\n                        result.isValid = false;\r\n                        this._addBrokenRule({\r\n                            result: result,\r\n                            rule: rule\r\n                        });\r\n                        return false\r\n                    }\r\n                    return true\r\n                }\r\n                rule.value = value;\r\n                if (\"async\" === rule.type) {\r\n                    asyncRuleItems.push({\r\n                        rule: rule,\r\n                        ruleValidator: ruleValidator\r\n                    });\r\n                    return true\r\n                }\r\n                ruleValidationResult = ruleValidator.validate(value, rule);\r\n                rule.isValid = ruleValidationResult;\r\n                if (!ruleValidationResult) {\r\n                    result.isValid = false;\r\n                    this._setDefaultMessage({\r\n                        rule: rule,\r\n                        validator: ruleValidator,\r\n                        name: name\r\n                    });\r\n                    this._addBrokenRule({\r\n                        result: result,\r\n                        rule: rule\r\n                    })\r\n                }\r\n                if (!rule.isValid) {\r\n                    return false\r\n                }\r\n            } else {\r\n                throw errors.Error(\"E0100\")\r\n            }\r\n        });\r\n        if (result.isValid && !result.brokenRules && asyncRuleItems.length) {\r\n            result = this._validateAsyncRules({\r\n                value: value,\r\n                items: asyncRuleItems,\r\n                result: result,\r\n                name: name\r\n            })\r\n        }\r\n        this._synchronizeGroupValidationInfo(validator, result);\r\n        result.status = result.pendingRules ? STATUS.pending : result.isValid ? STATUS.valid : STATUS.invalid;\r\n        return result\r\n    },\r\n    _synchronizeGroupValidationInfo(validator, result) {\r\n        var _result$brokenRules;\r\n        if (!validator) {\r\n            return\r\n        }\r\n        var groupConfig = ValidationEngine.getGroupConfig(validator._validationGroup);\r\n        groupConfig._updateBrokenRules.call(groupConfig, {\r\n            validator: validator,\r\n            brokenRules: null !== (_result$brokenRules = result.brokenRules) && void 0 !== _result$brokenRules ? _result$brokenRules : []\r\n        })\r\n    },\r\n    _validateAsyncRules(_ref) {\r\n        var {\r\n            result: result,\r\n            value: value,\r\n            items: items,\r\n            name: name\r\n        } = _ref;\r\n        var asyncResults = [];\r\n        each(items, (_, item) => {\r\n            var validateResult = item.ruleValidator.validate(value, item.rule);\r\n            if (!isPromise(validateResult)) {\r\n                this._updateRuleConfig({\r\n                    rule: item.rule,\r\n                    ruleResult: this._getPatchedRuleResult(validateResult),\r\n                    validator: item.ruleValidator,\r\n                    name: name\r\n                })\r\n            } else {\r\n                if (!result.pendingRules) {\r\n                    result.pendingRules = []\r\n                }\r\n                result.pendingRules.push(item.rule);\r\n                var asyncResult = validateResult.then(res => {\r\n                    var ruleResult = this._getPatchedRuleResult(res);\r\n                    this._updateRuleConfig({\r\n                        rule: item.rule,\r\n                        ruleResult: ruleResult,\r\n                        validator: item.ruleValidator,\r\n                        name: name\r\n                    });\r\n                    return ruleResult\r\n                });\r\n                asyncResults.push(asyncResult)\r\n            }\r\n        });\r\n        if (asyncResults.length) {\r\n            result.complete = Promise.all(asyncResults).then(values => this._getAsyncRulesResult({\r\n                result: result,\r\n                values: values\r\n            }))\r\n        }\r\n        return result\r\n    },\r\n    _updateRuleConfig(_ref2) {\r\n        var {\r\n            rule: rule,\r\n            ruleResult: ruleResult,\r\n            validator: validator,\r\n            name: name\r\n        } = _ref2;\r\n        rule.isValid = ruleResult.isValid;\r\n        if (!ruleResult.isValid) {\r\n            if (isDefined(ruleResult.message) && isString(ruleResult.message) && ruleResult.message.length) {\r\n                rule.message = ruleResult.message\r\n            } else {\r\n                this._setDefaultMessage({\r\n                    rule: rule,\r\n                    validator: validator,\r\n                    name: name\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _getPatchedRuleResult(ruleResult) {\r\n        var result;\r\n        if (isObject(ruleResult)) {\r\n            result = extend({}, ruleResult);\r\n            if (!isDefined(result.isValid)) {\r\n                result.isValid = true\r\n            }\r\n        } else {\r\n            result = {\r\n                isValid: isBoolean(ruleResult) ? ruleResult : true\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    _getAsyncRulesResult(_ref3) {\r\n        var {\r\n            values: values,\r\n            result: result\r\n        } = _ref3;\r\n        each(values, (index, val) => {\r\n            if (false === val.isValid) {\r\n                result.isValid = val.isValid;\r\n                var rule = result.pendingRules[index];\r\n                this._addBrokenRule({\r\n                    result: result,\r\n                    rule: rule\r\n                })\r\n            }\r\n        });\r\n        result.pendingRules = null;\r\n        result.complete = null;\r\n        result.status = result.isValid ? STATUS.valid : STATUS.invalid;\r\n        return result\r\n    },\r\n    registerValidatorInGroup(group, validator) {\r\n        var groupConfig = ValidationEngine.addGroup(group);\r\n        groupConfig.registerValidator.call(groupConfig, validator)\r\n    },\r\n    _shouldRemoveGroup(group, validatorsInGroup) {\r\n        var isDefaultGroup = void 0 === group;\r\n        var isValidationGroupInstance = group && \"dxValidationGroup\" === group.NAME;\r\n        return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length\r\n    },\r\n    removeRegisteredValidator(group, validator) {\r\n        var config = ValidationEngine.getGroupConfig(group);\r\n        if (config) {\r\n            config.removeRegisteredValidator.call(config, validator);\r\n            var validatorsInGroup = config.validators;\r\n            if (this._shouldRemoveGroup(group, validatorsInGroup)) {\r\n                this.removeGroup(group)\r\n            }\r\n        }\r\n    },\r\n    initValidationOptions(options) {\r\n        var initedOptions = {};\r\n        if (options) {\r\n            [\"isValid\", \"validationStatus\", \"validationError\", \"validationErrors\"].forEach(prop => {\r\n                if (prop in options) {\r\n                    extend(initedOptions, this.synchronizeValidationOptions({\r\n                        name: prop,\r\n                        value: options[prop]\r\n                    }, options))\r\n                }\r\n            })\r\n        }\r\n        return initedOptions\r\n    },\r\n    synchronizeValidationOptions(_ref4, options) {\r\n        var {\r\n            name: name,\r\n            value: value\r\n        } = _ref4;\r\n        switch (name) {\r\n            case \"validationStatus\":\r\n                var isValid = value === STATUS.valid || value === STATUS.pending;\r\n                return options.isValid !== isValid ? {\r\n                    isValid: isValid\r\n                } : {};\r\n            case \"isValid\":\r\n                var {\r\n                    validationStatus: validationStatus\r\n                } = options;\r\n                var newStatus = validationStatus;\r\n                if (value && validationStatus === STATUS.invalid) {\r\n                    newStatus = STATUS.valid\r\n                } else if (!value && validationStatus !== STATUS.invalid) {\r\n                    newStatus = STATUS.invalid\r\n                }\r\n                return newStatus !== validationStatus ? {\r\n                    validationStatus: newStatus\r\n                } : {};\r\n            case \"validationErrors\":\r\n                var validationError = !value || !value.length ? null : value[0];\r\n                return options.validationError !== validationError ? {\r\n                    validationError: validationError\r\n                } : {};\r\n            case \"validationError\":\r\n                var {\r\n                    validationErrors: validationErrors\r\n                } = options;\r\n                if (!value && validationErrors) {\r\n                    return {\r\n                        validationErrors: null\r\n                    }\r\n                } else if (value && !validationErrors) {\r\n                    return {\r\n                        validationErrors: [value]\r\n                    }\r\n                } else if (value && validationErrors && value !== validationErrors[0]) {\r\n                    validationErrors[0] = value;\r\n                    return {\r\n                        validationErrors: validationErrors.slice()\r\n                    }\r\n                }\r\n        }\r\n        return {}\r\n    },\r\n    validateGroup(group) {\r\n        var groupConfig = ValidationEngine.getGroupConfig(group);\r\n        if (!groupConfig) {\r\n            throw errors.Error(\"E0110\")\r\n        }\r\n        return groupConfig.validate()\r\n    },\r\n    resetGroup(group) {\r\n        var groupConfig = ValidationEngine.getGroupConfig(group);\r\n        if (!groupConfig) {\r\n            throw errors.Error(\"E0110\")\r\n        }\r\n        return groupConfig.reset()\r\n    }\r\n};\r\nValidationEngine.initGroups();\r\nexport default ValidationEngine;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}