{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/message.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dependencyInjector from \"../core/utils/dependency_injector\";\nimport { extend } from \"../core/utils/extend\";\nimport { format as stringFormat } from \"../core/utils/string\";\nimport { humanize } from \"../core/utils/inflector\";\nimport coreLocalization from \"./core\";\nimport { defaultMessages } from \"./default_messages\";\nvar baseDictionary = extend(true, {}, defaultMessages);\nvar getDataByLocale = (localeData, locale) => localeData[locale] || {};\nvar newMessages = {};\nvar messageLocalization = dependencyInjector({\n  engine: function () {\n    return \"base\";\n  },\n  _dictionary: baseDictionary,\n  load: function (messages) {\n    extend(true, this._dictionary, messages);\n  },\n  _localizablePrefix: \"@\",\n  setup: function (localizablePrefix) {\n    this._localizablePrefix = localizablePrefix;\n  },\n  localizeString: function (text) {\n    var that = this;\n    var regex = new RegExp(\"(^|[^a-zA-Z_0-9\" + that._localizablePrefix + \"-]+)(\" + that._localizablePrefix + \"{1,2})([a-zA-Z_0-9-]+)\", \"g\");\n    var escapeString = that._localizablePrefix + that._localizablePrefix;\n    return text.replace(regex, (str, prefix, escape, localizationKey) => {\n      var defaultResult = that._localizablePrefix + localizationKey;\n      var result;\n      if (escape !== escapeString) {\n        result = that.format(localizationKey);\n      }\n      if (!result) {\n        newMessages[localizationKey] = humanize(localizationKey);\n      }\n      return prefix + (result || defaultResult);\n    });\n  },\n  getMessagesByLocales: function () {\n    return this._dictionary;\n  },\n  getDictionary: function (onlyNew) {\n    if (onlyNew) {\n      return newMessages;\n    }\n    return extend({}, newMessages, this.getMessagesByLocales()[coreLocalization.locale()]);\n  },\n  getFormatter: function (key) {\n    return this._getFormatterBase(key) || this._getFormatterBase(key, \"en\");\n  },\n  _getFormatterBase: function (key, locale) {\n    var message = coreLocalization.getValueByClosestLocale(locale => getDataByLocale(this._dictionary, locale)[key]);\n    if (message) {\n      return function () {\n        var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);\n        args.unshift(message);\n        return stringFormat.apply(this, args);\n      };\n    }\n  },\n  format: function (key) {\n    var formatter = this.getFormatter(key);\n    var values = Array.prototype.slice.call(arguments, 1);\n    return formatter && formatter.apply(this, values) || \"\";\n  }\n});\nexport default messageLocalization;","map":{"version":3,"names":["dependencyInjector","extend","format","stringFormat","humanize","coreLocalization","defaultMessages","baseDictionary","getDataByLocale","localeData","locale","newMessages","messageLocalization","engine","_dictionary","load","messages","_localizablePrefix","setup","localizablePrefix","localizeString","text","that","regex","RegExp","escapeString","replace","str","prefix","escape","localizationKey","defaultResult","result","getMessagesByLocales","getDictionary","onlyNew","getFormatter","key","_getFormatterBase","message","getValueByClosestLocale","args","arguments","length","Array","isArray","slice","prototype","call","unshift","apply","formatter","values"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/node_modules/devextreme/esm/localization/message.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/localization/message.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dependencyInjector from \"../core/utils/dependency_injector\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    format as stringFormat\r\n} from \"../core/utils/string\";\r\nimport {\r\n    humanize\r\n} from \"../core/utils/inflector\";\r\nimport coreLocalization from \"./core\";\r\nimport {\r\n    defaultMessages\r\n} from \"./default_messages\";\r\nvar baseDictionary = extend(true, {}, defaultMessages);\r\nvar getDataByLocale = (localeData, locale) => localeData[locale] || {};\r\nvar newMessages = {};\r\nvar messageLocalization = dependencyInjector({\r\n    engine: function() {\r\n        return \"base\"\r\n    },\r\n    _dictionary: baseDictionary,\r\n    load: function(messages) {\r\n        extend(true, this._dictionary, messages)\r\n    },\r\n    _localizablePrefix: \"@\",\r\n    setup: function(localizablePrefix) {\r\n        this._localizablePrefix = localizablePrefix\r\n    },\r\n    localizeString: function(text) {\r\n        var that = this;\r\n        var regex = new RegExp(\"(^|[^a-zA-Z_0-9\" + that._localizablePrefix + \"-]+)(\" + that._localizablePrefix + \"{1,2})([a-zA-Z_0-9-]+)\", \"g\");\r\n        var escapeString = that._localizablePrefix + that._localizablePrefix;\r\n        return text.replace(regex, (str, prefix, escape, localizationKey) => {\r\n            var defaultResult = that._localizablePrefix + localizationKey;\r\n            var result;\r\n            if (escape !== escapeString) {\r\n                result = that.format(localizationKey)\r\n            }\r\n            if (!result) {\r\n                newMessages[localizationKey] = humanize(localizationKey)\r\n            }\r\n            return prefix + (result || defaultResult)\r\n        })\r\n    },\r\n    getMessagesByLocales: function() {\r\n        return this._dictionary\r\n    },\r\n    getDictionary: function(onlyNew) {\r\n        if (onlyNew) {\r\n            return newMessages\r\n        }\r\n        return extend({}, newMessages, this.getMessagesByLocales()[coreLocalization.locale()])\r\n    },\r\n    getFormatter: function(key) {\r\n        return this._getFormatterBase(key) || this._getFormatterBase(key, \"en\")\r\n    },\r\n    _getFormatterBase: function(key, locale) {\r\n        var message = coreLocalization.getValueByClosestLocale(locale => getDataByLocale(this._dictionary, locale)[key]);\r\n        if (message) {\r\n            return function() {\r\n                var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);\r\n                args.unshift(message);\r\n                return stringFormat.apply(this, args)\r\n            }\r\n        }\r\n    },\r\n    format: function(key) {\r\n        var formatter = this.getFormatter(key);\r\n        var values = Array.prototype.slice.call(arguments, 1);\r\n        return formatter && formatter.apply(this, values) || \"\"\r\n    }\r\n});\r\nexport default messageLocalization;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}