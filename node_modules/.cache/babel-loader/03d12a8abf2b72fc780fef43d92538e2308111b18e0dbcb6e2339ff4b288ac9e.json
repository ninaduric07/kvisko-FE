{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninad\\\\zavrsni\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [backendData, setBackendData] = useState([{}]);\n  const [isLoading, setIsLoading] = useState(true);\n  const refreshSession = async () => {\n    setIsLoading(true);\n    try {\n      const res = await axios.get(`${import.meta.env.VITE_API}/auth/session`, {\n        withCredentials: true\n      });\n      if (res.data) {\n        setSession({\n          exists: true,\n          ...res.data,\n          refresh: refreshSession\n        });\n      } else {\n        setSession({\n          exists: false,\n          refresh: refreshSession\n        });\n      }\n    } catch (err) {\n      setSession({\n        exists: false\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    // First session load\n    refreshSession();\n  }, []);\n\n  //////////////////////////////////////////////////////////////////////////////////\n\n  const [openErrorAlert, setOpenErrorAlert] = useState(false);\n  const [errorText, setErrorText] = useState(\"\");\n  const showError = text => {\n    setOpenErrorAlert(true);\n    setErrorText(text);\n  };\n  useEffect(() => {\n    fetch(\"/api\").then(response => response.json()).then(data => {\n      setBackendData(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nmQk/fZWYomPqkLtgujH8waMigU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","backendData","setBackendData","isLoading","setIsLoading","refreshSession","res","axios","get","import","meta","env","VITE_API","withCredentials","data","setSession","exists","refresh","err","openErrorAlert","setOpenErrorAlert","errorText","setErrorText","showError","text","fetch","then","response","json","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ninad/zavrsni/client/src/App.js"],"sourcesContent":["\nimport React, {useEffect, useState} from 'react'\n\nfunction App() {\n\n  const [backendData, setBackendData] = useState([{}])\n  const [isLoading, setIsLoading] = useState(true)\n\n  const refreshSession = async () => {\n    setIsLoading(true);\n\n    try {\n        const res = await axios.get(\n            `${import.meta.env.VITE_API}/auth/session`,\n            { withCredentials: true }\n        );\n        if (res.data) {\n            setSession({\n                exists: true,\n                ...res.data,\n                refresh: refreshSession,\n            });\n        } else {\n            setSession({ exists: false, refresh: refreshSession });\n        }\n    } catch (err) {\n        setSession({ exists: false });\n    } finally {\n        setIsLoading(false);\n    }\n};\n\nuseEffect(() => {\n    // First session load\n    refreshSession();\n}, []);\n\n//////////////////////////////////////////////////////////////////////////////////\n\nconst [openErrorAlert, setOpenErrorAlert] = useState(false);\nconst [errorText, setErrorText] = useState(\"\");\n\nconst showError = (text) => {\n    setOpenErrorAlert(true);\n    setErrorText(text);\n};\n\n  useEffect(() => {\n    fetch(\"/api\").then(\n      response => response.json()\n    ).then(\n      data => {\n        setBackendData(data)\n      }\n    )\n  }, [])\n\n  return(\n    <div>\n\n    </div>\n  )\n}\n\nexport default App;"],"mappings":";;AACA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCD,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACC,GAAG,CACtB,GAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,QAAS,eAAc,EAC1C;QAAEC,eAAe,EAAE;MAAK,CAC5B,CAAC;MACD,IAAIP,GAAG,CAACQ,IAAI,EAAE;QACVC,UAAU,CAAC;UACPC,MAAM,EAAE,IAAI;UACZ,GAAGV,GAAG,CAACQ,IAAI;UACXG,OAAO,EAAEZ;QACb,CAAC,CAAC;MACN,CAAC,MAAM;QACHU,UAAU,CAAC;UAAEC,MAAM,EAAE,KAAK;UAAEC,OAAO,EAAEZ;QAAe,CAAC,CAAC;MAC1D;IACJ,CAAC,CAAC,OAAOa,GAAG,EAAE;MACVH,UAAU,CAAC;QAAEC,MAAM,EAAE;MAAM,CAAC,CAAC;IACjC,CAAC,SAAS;MACNZ,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAEDT,SAAS,CAAC,MAAM;IACZ;IACAU,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAEA,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAM2B,SAAS,GAAIC,IAAI,IAAK;IACxBJ,iBAAiB,CAAC,IAAI,CAAC;IACvBE,YAAY,CAACE,IAAI,CAAC;EACtB,CAAC;EAEC7B,SAAS,CAAC,MAAM;IACd8B,KAAK,CAAC,MAAM,CAAC,CAACC,IAAI,CAChBC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC5B,CAAC,CAACF,IAAI,CACJZ,IAAI,IAAI;MACNZ,cAAc,CAACY,IAAI,CAAC;IACtB,CACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEV;AAAChC,EAAA,CA3DQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AA6DZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}