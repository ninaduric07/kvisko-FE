{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/data_grid/summary/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../../core/renderer\";\nimport { noop } from \"../../../../core/utils/common\";\nimport { isDefined, isPlainObject, isEmptyObject, isString, isFunction } from \"../../../../core/utils/type\";\nimport { each, map } from \"../../../../core/utils/iterator\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { compileGetter } from \"../../../../core/utils/data\";\nimport messageLocalization from \"../../../../localization/message\";\nimport { ColumnsView } from \"../../../../ui/grid_core/ui.grid_core.columns_view\";\nimport dataQuery from \"../../../../data/query\";\nimport storeHelper from \"../../../../data/store_helper\";\nimport { normalizeSortingInfo } from \"../../../../data/utils\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport AggregateCalculator from \"../module_aggregate_calculator\";\nimport dataSourceAdapter from \"../module_data_source_adapter\";\nimport gridCore from \"../module_core\";\nconst DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\nconst DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\nconst DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\nconst DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\nconst DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\nconst DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\nconst DATAGRID_FOOTER_ROW_CLASS = \"dx-footer-row\";\nconst DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\nconst DATAGRID_TOTAL_FOOTER_ROW_TYPE = \"totalFooter\";\nexport const renderSummaryCell = function (cell, options) {\n  const $cell = $(cell);\n  const {\n    column: column\n  } = options;\n  const {\n    summaryItems: summaryItems\n  } = options;\n  const $summaryItems = [];\n  if (!column.command && summaryItems) {\n    for (let i = 0; i < summaryItems.length; i++) {\n      const summaryItem = summaryItems[i];\n      $summaryItems.push($(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(\"dx-datagrid-summary-item\").addClass(\"dx-datagrid-text-content\").addClass(summaryItem.cssClass).toggleClass(\"dx-datagrid-group-text-content\", \"group\" === options.rowType).text(gridCore.getSummaryText(summaryItem, options.summaryTexts)));\n    }\n    $cell.append($summaryItems);\n  }\n};\nconst getSummaryCellOptions = function (that, options) {\n  const summaryTexts = that.option(\"summary.texts\") || {};\n  return {\n    totalItem: options.row,\n    summaryItems: options.row.summaryCells[options.columnIndex],\n    summaryTexts: summaryTexts\n  };\n};\nconst getGroupAggregates = function (data) {\n  return data.summary || data.aggregates || [];\n};\nconst recalculateWhileEditing = function (that) {\n  return that.option(\"summary.recalculateWhileEditing\");\n};\nexport const FooterView = ColumnsView.inherit({\n  _getRows() {\n    return this._dataController.footerItems();\n  },\n  _getCellOptions(options) {\n    return extend(this.callBase(options), getSummaryCellOptions(this, options));\n  },\n  _renderCellContent($cell, options) {\n    renderSummaryCell($cell, options);\n    this.callBase.apply(this, arguments);\n  },\n  _renderCore(change) {\n    let needUpdateScrollLeft = false;\n    const totalItem = this._dataController.footerItems()[0];\n    if (!change || !change.columnIndices) {\n      this.element().empty().addClass(\"dx-datagrid-total-footer\").toggleClass(\"dx-datagrid-nowrap\", !this.option(\"wordWrapEnabled\"));\n      needUpdateScrollLeft = true;\n    }\n    if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\n      this._updateContent(this._renderTable({\n        change: change\n      }), change);\n      needUpdateScrollLeft && this._updateScrollLeftPosition();\n    }\n  },\n  _updateContent($newTable, change) {\n    if (change && \"update\" === change.changeType && change.columnIndices) {\n      return this.waitAsyncTemplates().done(() => {\n        const $row = this.getTableElement().find(\".dx-row\");\n        const $newRow = $newTable.find(\".dx-row\");\n        this._updateCells($row, $newRow, change.columnIndices[0]);\n      });\n    }\n    return this.callBase.apply(this, arguments);\n  },\n  _rowClick(e) {\n    const item = this._dataController.footerItems()[e.rowIndex] || {};\n    this.executeAction(\"onRowClick\", extend({}, e, item));\n  },\n  _columnOptionChanged(e) {\n    const {\n      optionNames: optionNames\n    } = e;\n    if (e.changeTypes.grouping) {\n      return;\n    }\n    if (optionNames.width || optionNames.visibleWidth) {\n      this.callBase(e);\n    }\n  },\n  _handleDataChanged(e) {\n    const {\n      changeType: changeType\n    } = e;\n    if (\"update\" === e.changeType && e.repaintChangesOnly) {\n      if (!e.totalColumnIndices) {\n        this.render();\n      } else if (e.totalColumnIndices.length) {\n        this.render(null, {\n          changeType: \"update\",\n          columnIndices: [e.totalColumnIndices]\n        });\n      }\n    } else if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\n      this.render();\n    }\n  },\n  _createRow(row) {\n    const $row = this.callBase.apply(this, arguments);\n    if (\"totalFooter\" === row.rowType) {\n      $row.addClass(\"dx-footer-row\");\n    }\n    return $row;\n  },\n  getHeight() {\n    return this.getElementHeight();\n  },\n  isVisible() {\n    return !!this._dataController.footerItems().length;\n  }\n});\nconst SummaryDataSourceAdapterExtender = {\n  init() {\n    this.callBase.apply(this, arguments);\n    this._totalAggregates = [];\n    this._summaryGetter = noop;\n  },\n  summaryGetter(summaryGetter) {\n    if (!arguments.length) {\n      return this._summaryGetter;\n    }\n    if (isFunction(summaryGetter)) {\n      this._summaryGetter = summaryGetter;\n    }\n  },\n  summary(summary) {\n    if (!arguments.length) {\n      return this._summaryGetter();\n    }\n    this._summaryGetter = function () {\n      return summary;\n    };\n  },\n  totalAggregates() {\n    return this._totalAggregates;\n  },\n  isLastLevelGroupItemsPagingLocal() {\n    const summary = this.summary();\n    const sortByGroupsInfo = summary && summary.sortByGroups();\n    return sortByGroupsInfo && sortByGroupsInfo.length;\n  },\n  sortLastLevelGroupItems(items, groups, paths) {\n    const groupedItems = storeHelper.multiLevelGroup(dataQuery(items), groups).toArray();\n    let result = [];\n    paths.forEach(path => {\n      !function forEachGroup(groups, groupCount, callback, path) {\n        path = path || [];\n        for (let i = 0; i < groups.length; i++) {\n          path.push(groups[i].key);\n          if (1 === groupCount) {\n            callback(path, groups[i].items);\n          } else {\n            forEachGroup(groups[i].items, groupCount - 1, callback, path);\n          }\n          path.pop();\n        }\n      }(groupedItems, groups.length, (itemsPath, items) => {\n        if (path.toString() === itemsPath.toString()) {\n          result = result.concat(items);\n        }\n      });\n    });\n    return result;\n  }\n};\nconst SummaryDataSourceAdapterClientExtender = function () {\n  const applyAddedData = function (data, insertedData, groupLevel) {\n    if (groupLevel) {\n      return applyAddedData(data, insertedData.map(item => ({\n        items: [item]\n      }), groupLevel - 1));\n    }\n    return data.concat(insertedData);\n  };\n  const applyRemovedData = function (data, removedData, groupLevel) {\n    if (groupLevel) {\n      return data.map(data => {\n        const updatedData = {};\n        const updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\n        Object.defineProperty(updatedData, \"aggregates\", {\n          get: () => data.aggregates,\n          set: value => {\n            data.aggregates = value;\n          }\n        });\n        return extend(updatedData, data, {\n          items: updatedItems\n        });\n      });\n    }\n    return data.filter(data => removedData.indexOf(data) < 0);\n  };\n  const calculateAggregates = function (that, summary, data, groupLevel) {\n    let calculator;\n    if (recalculateWhileEditing(that)) {\n      const editingController = that.getController(\"editing\");\n      if (editingController) {\n        const insertedData = editingController.getInsertedData();\n        if (insertedData.length) {\n          data = applyAddedData(data, insertedData, groupLevel);\n        }\n        const removedData = editingController.getRemovedData();\n        if (removedData.length) {\n          data = applyRemovedData(data, removedData, groupLevel);\n        }\n      }\n    }\n    if (summary) {\n      calculator = new AggregateCalculator({\n        totalAggregates: summary.totalAggregates,\n        groupAggregates: summary.groupAggregates,\n        data: data,\n        groupLevel: groupLevel\n      });\n      calculator.calculate();\n    }\n    return calculator ? calculator.totalAggregates() : [];\n  };\n  const sortGroupsBySummaryCore = function (items, groups, sortByGroups) {\n    if (!items || !groups.length) {\n      return items;\n    }\n    const group = groups[0];\n    const sorts = sortByGroups[0];\n    let query;\n    if (group && sorts && sorts.length) {\n      query = dataQuery(items);\n      each(sorts, function (index) {\n        if (0 === index) {\n          query = query.sortBy(this.selector, this.desc);\n        } else {\n          query = query.thenBy(this.selector, this.desc);\n        }\n      });\n      query.enumerate().done(sortedItems => {\n        items = sortedItems;\n      });\n    }\n    groups = groups.slice(1);\n    sortByGroups = sortByGroups.slice(1);\n    if (groups.length && sortByGroups.length) {\n      each(items, function () {\n        this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups);\n      });\n    }\n    return items;\n  };\n  const sortGroupsBySummary = function (data, group, summary) {\n    const sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\n    if (sortByGroups && sortByGroups.length) {\n      return sortGroupsBySummaryCore(data, group, sortByGroups);\n    }\n    return data;\n  };\n  return {\n    _customizeRemoteOperations(options) {\n      const summary = this.summary();\n      if (summary) {\n        if (options.remoteOperations.summary) {\n          if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n            if (options.storeLoadOptions.group) {\n              if (options.remoteOperations.grouping) {\n                options.storeLoadOptions.groupSummary = summary.groupAggregates;\n              } else if (summary.groupAggregates.length) {\n                options.remoteOperations.paging = false;\n              }\n            }\n            options.storeLoadOptions.totalSummary = summary.totalAggregates;\n          }\n        } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\n          options.remoteOperations.paging = false;\n        }\n      }\n      this.callBase.apply(this, arguments);\n      const cachedExtra = options.cachedData.extra;\n      if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\n        options.storeLoadOptions.totalSummary = void 0;\n      }\n    },\n    _handleDataLoadedCore(options) {\n      var _a, _b;\n      const that = this;\n      const groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\n      const remoteOperations = options.remoteOperations || {};\n      const summary = that.summaryGetter()(remoteOperations);\n      if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n        if (remoteOperations.summary) {\n          if (!remoteOperations.paging && groups.length && summary) {\n            if (!remoteOperations.grouping) {\n              calculateAggregates(that, {\n                groupAggregates: summary.groupAggregates\n              }, options.data, groups.length);\n            }\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n          }\n        } else if (!remoteOperations.paging && summary) {\n          const operationTypes = options.operationTypes || {};\n          const hasOperations = Object.keys(operationTypes).some(type => operationTypes[type]);\n          if (!hasOperations || !(null === (_b = null === (_a = options.cachedData) || void 0 === _a ? void 0 : _a.extra) || void 0 === _b ? void 0 : _b.summary) || groups.length && summary.groupAggregates.length) {\n            const totalAggregates = calculateAggregates(that, summary, options.data, groups.length);\n            options.extra = isPlainObject(options.extra) ? options.extra : {};\n            options.extra.summary = totalAggregates;\n            if (options.cachedData) {\n              options.cachedData.extra = options.extra;\n            }\n          }\n          options.data = sortGroupsBySummary(options.data, groups, summary);\n        }\n      }\n      if (!options.isCustomLoading) {\n        that._totalAggregates = options.extra && options.extra.summary || that._totalAggregates;\n      }\n      that.callBase(options);\n    }\n  };\n}();\ndataSourceAdapter.extend(SummaryDataSourceAdapterExtender);\ndataSourceAdapter.extend(SummaryDataSourceAdapterClientExtender);\ngridCore.registerModule(\"summary\", {\n  defaultOptions: () => ({\n    summary: {\n      groupItems: void 0,\n      totalItems: void 0,\n      calculateCustomSummary: void 0,\n      skipEmptyValues: true,\n      recalculateWhileEditing: false,\n      texts: {\n        sum: messageLocalization.format(\"dxDataGrid-summarySum\"),\n        sumOtherColumn: messageLocalization.format(\"dxDataGrid-summarySumOtherColumn\"),\n        min: messageLocalization.format(\"dxDataGrid-summaryMin\"),\n        minOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMinOtherColumn\"),\n        max: messageLocalization.format(\"dxDataGrid-summaryMax\"),\n        maxOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMaxOtherColumn\"),\n        avg: messageLocalization.format(\"dxDataGrid-summaryAvg\"),\n        avgOtherColumn: messageLocalization.format(\"dxDataGrid-summaryAvgOtherColumn\"),\n        count: messageLocalization.format(\"dxDataGrid-summaryCount\")\n      }\n    },\n    sortByGroupSummaryInfo: void 0\n  }),\n  views: {\n    footerView: FooterView\n  },\n  extenders: {\n    controllers: {\n      data: {\n        _isDataColumn: column => column && (!isDefined(column.groupIndex) || column.showWhenGrouped),\n        _isGroupFooterVisible() {\n          const groupItems = this.option(\"summary.groupItems\") || [];\n          for (let i = 0; i < groupItems.length; i++) {\n            const groupItem = groupItems[i];\n            const column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\n            if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\n              return true;\n            }\n          }\n          return false;\n        },\n        _processGroupItems(items, groupCount, options) {\n          const data = options && options.data;\n          const result = this.callBase.apply(this, arguments);\n          if (options) {\n            if (void 0 === options.isGroupFooterVisible) {\n              options.isGroupFooterVisible = this._isGroupFooterVisible();\n            }\n            if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\n              result.push({\n                rowType: \"groupFooter\",\n                key: options.path.slice(),\n                data: data,\n                groupIndex: options.path.length - 1,\n                values: []\n              });\n            }\n          }\n          return result;\n        },\n        _processGroupItem(groupItem, options) {\n          const that = this;\n          if (!options.summaryGroupItems) {\n            options.summaryGroupItems = that.option(\"summary.groupItems\") || [];\n          }\n          if (\"group\" === groupItem.rowType) {\n            let groupColumnIndex = -1;\n            let afterGroupColumnIndex = -1;\n            each(options.visibleColumns, function (visibleIndex) {\n              const prevColumn = options.visibleColumns[visibleIndex - 1];\n              if (groupItem.groupIndex === this.groupIndex) {\n                groupColumnIndex = this.index;\n              }\n              if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\n                afterGroupColumnIndex = this.index;\n              }\n            });\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (summaryItem, column) => {\n              if (summaryItem.showInGroupFooter) {\n                return -1;\n              }\n              if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {\n                return column.index;\n              }\n              return groupColumnIndex;\n            }, true);\n          }\n          if (\"groupFooter\" === groupItem.rowType) {\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (summaryItem, column) => summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1);\n          }\n          return groupItem;\n        },\n        _calculateSummaryCells(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {\n          const that = this;\n          const summaryCells = [];\n          const summaryCellsByColumns = {};\n          each(summaryItems, (summaryIndex, summaryItem) => {\n            const column = that._columnsController.columnOption(summaryItem.column);\n            const showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\n            const columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\n            if (columnIndex >= 0) {\n              if (!summaryCellsByColumns[columnIndex]) {\n                summaryCellsByColumns[columnIndex] = [];\n              }\n              const aggregate = aggregates[summaryIndex];\n              if (aggregate === aggregate) {\n                let valueFormat;\n                if (isDefined(summaryItem.valueFormat)) {\n                  valueFormat = summaryItem.valueFormat;\n                } else if (\"count\" !== summaryItem.summaryType) {\n                  valueFormat = gridCore.getFormatByDataType(column && column.dataType);\n                }\n                summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {\n                  value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\n                  valueFormat: valueFormat,\n                  columnCaption: column && column.index !== columnIndex ? column.caption : void 0\n                }));\n              }\n            }\n          });\n          if (!isEmptyObject(summaryCellsByColumns)) {\n            visibleColumns.forEach((column, visibleIndex) => {\n              const prevColumn = visibleColumns[visibleIndex - 1];\n              const columnIndex = isGroupRow && (\"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || \"expand\" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;\n              summaryCells.push(summaryCellsByColumns[columnIndex] || []);\n            });\n          }\n          return summaryCells;\n        },\n        _getSummaryCells(summaryTotalItems, totalAggregates) {\n          const that = this;\n          const columnsController = that._columnsController;\n          return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), (summaryItem, column) => that._isDataColumn(column) ? column.index : -1);\n        },\n        _updateItemsCore(change) {\n          const that = this;\n          let summaryCells;\n          const dataSource = that._dataSource;\n          const footerItems = that._footerItems;\n          const oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\n          const summaryTotalItems = that.option(\"summary.totalItems\");\n          that._footerItems = [];\n          if (dataSource && summaryTotalItems && summaryTotalItems.length) {\n            const totalAggregates = dataSource.totalAggregates();\n            summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n            if (change && change.repaintChangesOnly && oldSummaryCells) {\n              change.totalColumnIndices = summaryCells.map((summaryCell, index) => {\n                if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\n                  return index;\n                }\n                return -1;\n              }).filter(index => index >= 0);\n            }\n            if (summaryCells.length) {\n              that._footerItems.push({\n                rowType: \"totalFooter\",\n                summaryCells: summaryCells\n              });\n            }\n          }\n          that.callBase(change);\n        },\n        _prepareUnsavedDataSelector(selector) {\n          const that = this;\n          if (recalculateWhileEditing(that)) {\n            const editingController = that.getController(\"editing\");\n            if (editingController) {\n              return function (data) {\n                data = editingController.getUpdatedData(data);\n                return selector(data);\n              };\n            }\n          }\n          return selector;\n        },\n        _prepareAggregateSelector(selector, aggregator) {\n          selector = this._prepareUnsavedDataSelector(selector);\n          if (\"avg\" === aggregator || \"sum\" === aggregator) {\n            return function (data) {\n              const value = selector(data);\n              return isDefined(value) ? Number(value) : value;\n            };\n          }\n          return selector;\n        },\n        _getAggregates(summaryItems, remoteOperations) {\n          const that = this;\n          const columnsController = that.getController(\"columns\");\n          let calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\n          const commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\n          return map(summaryItems || [], summaryItem => {\n            const column = columnsController.columnOption(summaryItem.column);\n            const calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);\n            let aggregator = summaryItem.summaryType || \"count\";\n            const skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\n            if (remoteOperations) {\n              return {\n                selector: summaryItem.column,\n                summaryType: aggregator\n              };\n            }\n            const selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\n            if (\"custom\" === aggregator) {\n              if (!calculateCustomSummary) {\n                errors.log(\"E1026\");\n                calculateCustomSummary = function () {};\n              }\n              const options = {\n                component: that.component,\n                name: summaryItem.name\n              };\n              calculateCustomSummary(options);\n              options.summaryProcess = \"calculate\";\n              aggregator = {\n                seed(groupIndex) {\n                  options.summaryProcess = \"start\";\n                  options.totalValue = void 0;\n                  options.groupIndex = groupIndex;\n                  delete options.value;\n                  calculateCustomSummary(options);\n                  return options.totalValue;\n                },\n                step(totalValue, value) {\n                  options.summaryProcess = \"calculate\";\n                  options.totalValue = totalValue;\n                  options.value = value;\n                  calculateCustomSummary(options);\n                  return options.totalValue;\n                },\n                finalize(totalValue) {\n                  options.summaryProcess = \"finalize\";\n                  options.totalValue = totalValue;\n                  delete options.value;\n                  calculateCustomSummary(options);\n                  return options.totalValue;\n                }\n              };\n            }\n            return {\n              selector: selector,\n              aggregator: aggregator,\n              skipEmptyValues: skipEmptyValues\n            };\n          });\n        },\n        _addSortInfo(sortByGroups, groupColumn, selector, sortOrder) {\n          if (groupColumn) {\n            const {\n              groupIndex: groupIndex\n            } = groupColumn;\n            sortOrder = sortOrder || groupColumn.sortOrder;\n            if (isDefined(groupIndex)) {\n              sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\n              sortByGroups[groupIndex].push({\n                selector: selector,\n                desc: \"desc\" === sortOrder\n              });\n            }\n          }\n        },\n        _findSummaryItem(summaryItems, name) {\n          let summaryItemIndex = -1;\n          if (isDefined(name)) {\n            each(summaryItems || [], function (index) {\n              if (this.name === name || index === name || this.summaryType === name || this.column === name || function (summaryItem) {\n                const {\n                  summaryType: summaryType\n                } = summaryItem;\n                const {\n                  column: column\n                } = summaryItem;\n                return summaryType && column && `${summaryType}_${column}`;\n              }(this) === name) {\n                summaryItemIndex = index;\n                return false;\n              }\n            });\n          }\n          return summaryItemIndex;\n        },\n        _getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems) {\n          const that = this;\n          const columnsController = that._columnsController;\n          const groupColumns = columnsController.getGroupColumns();\n          const sortByGroups = [];\n          if (!groupSummaryItems || !groupSummaryItems.length) {\n            return;\n          }\n          each(sortByGroupSummaryInfo || [], function () {\n            const {\n              sortOrder: sortOrder\n            } = this;\n            let {\n              groupColumn: groupColumn\n            } = this;\n            const summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\n            if (summaryItemIndex < 0) {\n              return;\n            }\n            const selector = function (data) {\n              return getGroupAggregates(data)[summaryItemIndex];\n            };\n            if (isDefined(groupColumn)) {\n              groupColumn = columnsController.columnOption(groupColumn);\n              that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n            } else {\n              each(groupColumns, (groupIndex, groupColumn) => {\n                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n              });\n            }\n          });\n          return sortByGroups;\n        },\n        _createDataSourceAdapterCore(dataSource, remoteOperations) {\n          const that = this;\n          const dataSourceAdapter = this.callBase(dataSource, remoteOperations);\n          dataSourceAdapter.summaryGetter(currentRemoteOperations => that._getSummaryOptions(currentRemoteOperations || remoteOperations));\n          return dataSourceAdapter;\n        },\n        _getSummaryOptions(remoteOperations) {\n          const that = this;\n          const groupSummaryItems = that.option(\"summary.groupItems\");\n          const totalSummaryItems = that.option(\"summary.totalItems\");\n          const sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\n          const groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\n          const totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\n          const sortByGroups = function () {\n            return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);\n          };\n          if (groupAggregates.length || totalAggregates.length) {\n            return {\n              groupAggregates: groupAggregates,\n              totalAggregates: totalAggregates,\n              sortByGroups: sortByGroups\n            };\n          }\n        },\n        publicMethods() {\n          const methods = this.callBase();\n          methods.push(\"getTotalSummaryValue\");\n          return methods;\n        },\n        getTotalSummaryValue(summaryItemName) {\n          const summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\n          const aggregates = this._dataSource.totalAggregates();\n          if (aggregates.length && summaryItemIndex > -1) {\n            return aggregates[summaryItemIndex];\n          }\n        },\n        optionChanged(args) {\n          if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\n            args.name = \"dataSource\";\n          }\n          this.callBase(args);\n        },\n        init() {\n          this._footerItems = [];\n          this.callBase();\n        },\n        footerItems() {\n          return this._footerItems;\n        }\n      },\n      editing: {\n        _refreshSummary() {\n          if (recalculateWhileEditing(this) && !this.isSaving()) {\n            this._dataController.refresh({\n              load: true,\n              changesOnly: true\n            });\n          }\n        },\n        _addChange(params) {\n          const result = this.callBase.apply(this, arguments);\n          if (params.type) {\n            this._refreshSummary();\n          }\n          return result;\n        },\n        _removeChange() {\n          const result = this.callBase.apply(this, arguments);\n          this._refreshSummary();\n          return result;\n        },\n        cancelEditData() {\n          const result = this.callBase.apply(this, arguments);\n          this._refreshSummary();\n          return result;\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow(row) {\n          const $row = this.callBase.apply(this, arguments);\n          row && $row.addClass(\"groupFooter\" === row.rowType ? \"dx-datagrid-group-footer\" : \"\");\n          return $row;\n        },\n        _renderCells($row, options) {\n          this.callBase.apply(this, arguments);\n          if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\n            this._renderGroupSummaryCells($row, options);\n          }\n        },\n        _hasAlignByColumnSummaryItems: (columnIndex, options) => !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length,\n        _getAlignByColumnCellCount(groupCellColSpan, options) {\n          let alignByColumnCellCount = 0;\n          for (let i = 1; i < groupCellColSpan; i++) {\n            const columnIndex = options.row.summaryCells.length - i;\n            alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount;\n          }\n          return alignByColumnCellCount;\n        },\n        _renderGroupSummaryCells($row, options) {\n          const $groupCell = $row.children().last();\n          const groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\n          const alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n          this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n        },\n        _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n          if (alignByColumnCellCount > 0) {\n            $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\n            for (let i = 0; i < alignByColumnCellCount; i++) {\n              const columnIndex = options.columns.length - alignByColumnCellCount + i;\n              this._renderCell($groupCell.parent(), extend({\n                column: options.columns[columnIndex],\n                columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\n              }, options));\n            }\n          }\n        },\n        _getSummaryCellIndex: columnIndex => columnIndex,\n        _getCellTemplate(options) {\n          if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\n            return renderSummaryCell;\n          }\n          return this.callBase(options);\n        },\n        _getCellOptions(options) {\n          const that = this;\n          const parameters = that.callBase(options);\n          if (options.row.summaryCells) {\n            return extend(parameters, getSummaryCellOptions(that, options));\n          }\n          return parameters;\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["$","noop","isDefined","isPlainObject","isEmptyObject","isString","isFunction","each","map","extend","compileGetter","messageLocalization","ColumnsView","dataQuery","storeHelper","normalizeSortingInfo","errors","AggregateCalculator","dataSourceAdapter","gridCore","DATAGRID_TOTAL_FOOTER_CLASS","DATAGRID_SUMMARY_ITEM_CLASS","DATAGRID_TEXT_CONTENT_CLASS","DATAGRID_GROUP_FOOTER_CLASS","DATAGRID_GROUP_TEXT_CONTENT_CLASS","DATAGRID_NOWRAP_CLASS","DATAGRID_FOOTER_ROW_CLASS","DATAGRID_GROUP_FOOTER_ROW_TYPE","DATAGRID_TOTAL_FOOTER_ROW_TYPE","renderSummaryCell","cell","options","$cell","column","summaryItems","$summaryItems","command","i","length","summaryItem","push","css","alignment","addClass","cssClass","toggleClass","rowType","text","getSummaryText","summaryTexts","append","getSummaryCellOptions","that","option","totalItem","row","summaryCells","columnIndex","getGroupAggregates","data","summary","aggregates","recalculateWhileEditing","FooterView","inherit","_getRows","_dataController","footerItems","_getCellOptions","callBase","_renderCellContent","apply","arguments","_renderCore","change","needUpdateScrollLeft","columnIndices","element","empty","_updateContent","_renderTable","_updateScrollLeftPosition","$newTable","changeType","waitAsyncTemplates","done","$row","getTableElement","find","$newRow","_updateCells","_rowClick","e","item","rowIndex","executeAction","_columnOptionChanged","optionNames","changeTypes","grouping","width","visibleWidth","_handleDataChanged","repaintChangesOnly","totalColumnIndices","render","_createRow","getHeight","getElementHeight","isVisible","SummaryDataSourceAdapterExtender","init","_totalAggregates","_summaryGetter","summaryGetter","totalAggregates","isLastLevelGroupItemsPagingLocal","sortByGroupsInfo","sortByGroups","sortLastLevelGroupItems","items","groups","paths","groupedItems","multiLevelGroup","toArray","result","forEach","path","forEachGroup","groupCount","callback","key","pop","itemsPath","toString","concat","SummaryDataSourceAdapterClientExtender","applyAddedData","insertedData","groupLevel","applyRemovedData","removedData","updatedData","updatedItems","Object","defineProperty","get","set","value","filter","indexOf","calculateAggregates","calculator","editingController","getController","getInsertedData","getRemovedData","groupAggregates","calculate","sortGroupsBySummaryCore","group","sorts","query","index","sortBy","selector","desc","thenBy","enumerate","sortedItems","slice","sortGroupsBySummary","_customizeRemoteOperations","remoteOperations","isCustomLoading","storeLoadOptions","isLoadingAll","groupSummary","paging","totalSummary","cachedExtra","cachedData","extra","_handleDataLoadedCore","_a","_b","loadOptions","operationTypes","hasOperations","keys","some","type","registerModule","defaultOptions","groupItems","totalItems","calculateCustomSummary","skipEmptyValues","texts","sum","format","sumOtherColumn","min","minOtherColumn","max","maxOtherColumn","avg","avgOtherColumn","count","sortByGroupSummaryInfo","views","footerView","extenders","controllers","_isDataColumn","groupIndex","showWhenGrouped","_isGroupFooterVisible","groupItem","_columnsController","columnOption","showInColumn","showInGroupFooter","_processGroupItems","isGroupFooterVisible","collectContinuationItems","isContinuationOnNextPage","values","_processGroupItem","summaryGroupItems","groupColumnIndex","afterGroupColumnIndex","visibleColumns","visibleIndex","prevColumn","_calculateSummaryCells","alignByColumn","calculateTargetColumnIndex","isGroupRow","summaryCellsByColumns","summaryIndex","aggregate","valueFormat","summaryType","getFormatByDataType","dataType","deserializeValue","columnCaption","caption","_getSummaryCells","summaryTotalItems","columnsController","getVisibleColumns","_updateItemsCore","dataSource","_dataSource","_footerItems","oldSummaryCells","summaryCell","JSON","stringify","_prepareUnsavedDataSelector","getUpdatedData","_prepareAggregateSelector","aggregator","Number","_getAggregates","commonSkipEmptyValues","calculateCellValue","bind","dataField","log","component","name","summaryProcess","seed","totalValue","step","finalize","_addSortInfo","groupColumn","sortOrder","_findSummaryItem","summaryItemIndex","_getSummarySortByGroups","groupSummaryItems","groupColumns","getGroupColumns","_createDataSourceAdapterCore","currentRemoteOperations","_getSummaryOptions","totalSummaryItems","publicMethods","methods","getTotalSummaryValue","summaryItemName","optionChanged","args","editing","_refreshSummary","isSaving","refresh","load","changesOnly","_addChange","params","_removeChange","cancelEditData","rowsView","_renderCells","_renderGroupSummaryCells","_hasAlignByColumnSummaryItems","columns","_getAlignByColumnCellCount","groupCellColSpan","alignByColumnCellCount","$groupCell","children","last","attr","_renderGroupSummaryCellsCore","_renderCell","parent","_getSummaryCellIndex","_getCellTemplate","parameters"],"sources":["C:/Users/ninad/OneDrive/Radna površina/zavrsni/client/node_modules/devextreme/esm/__internal/grids/data_grid/summary/module.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/data_grid/summary/module.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isPlainObject,\r\n    isEmptyObject,\r\n    isString,\r\n    isFunction\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../../core/utils/data\";\r\nimport messageLocalization from \"../../../../localization/message\";\r\nimport {\r\n    ColumnsView\r\n} from \"../../../../ui/grid_core/ui.grid_core.columns_view\";\r\nimport dataQuery from \"../../../../data/query\";\r\nimport storeHelper from \"../../../../data/store_helper\";\r\nimport {\r\n    normalizeSortingInfo\r\n} from \"../../../../data/utils\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport AggregateCalculator from \"../module_aggregate_calculator\";\r\nimport dataSourceAdapter from \"../module_data_source_adapter\";\r\nimport gridCore from \"../module_core\";\r\nconst DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\r\nconst DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\r\nconst DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\r\nconst DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\r\nconst DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\r\nconst DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\r\nconst DATAGRID_FOOTER_ROW_CLASS = \"dx-footer-row\";\r\nconst DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\r\nconst DATAGRID_TOTAL_FOOTER_ROW_TYPE = \"totalFooter\";\r\nexport const renderSummaryCell = function(cell, options) {\r\n    const $cell = $(cell);\r\n    const {\r\n        column: column\r\n    } = options;\r\n    const {\r\n        summaryItems: summaryItems\r\n    } = options;\r\n    const $summaryItems = [];\r\n    if (!column.command && summaryItems) {\r\n        for (let i = 0; i < summaryItems.length; i++) {\r\n            const summaryItem = summaryItems[i];\r\n            $summaryItems.push($(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(\"dx-datagrid-summary-item\").addClass(\"dx-datagrid-text-content\").addClass(summaryItem.cssClass).toggleClass(\"dx-datagrid-group-text-content\", \"group\" === options.rowType).text(gridCore.getSummaryText(summaryItem, options.summaryTexts)))\r\n        }\r\n        $cell.append($summaryItems)\r\n    }\r\n};\r\nconst getSummaryCellOptions = function(that, options) {\r\n    const summaryTexts = that.option(\"summary.texts\") || {};\r\n    return {\r\n        totalItem: options.row,\r\n        summaryItems: options.row.summaryCells[options.columnIndex],\r\n        summaryTexts: summaryTexts\r\n    }\r\n};\r\nconst getGroupAggregates = function(data) {\r\n    return data.summary || data.aggregates || []\r\n};\r\nconst recalculateWhileEditing = function(that) {\r\n    return that.option(\"summary.recalculateWhileEditing\")\r\n};\r\nexport const FooterView = ColumnsView.inherit({\r\n    _getRows() {\r\n        return this._dataController.footerItems()\r\n    },\r\n    _getCellOptions(options) {\r\n        return extend(this.callBase(options), getSummaryCellOptions(this, options))\r\n    },\r\n    _renderCellContent($cell, options) {\r\n        renderSummaryCell($cell, options);\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _renderCore(change) {\r\n        let needUpdateScrollLeft = false;\r\n        const totalItem = this._dataController.footerItems()[0];\r\n        if (!change || !change.columnIndices) {\r\n            this.element().empty().addClass(\"dx-datagrid-total-footer\").toggleClass(\"dx-datagrid-nowrap\", !this.option(\"wordWrapEnabled\"));\r\n            needUpdateScrollLeft = true\r\n        }\r\n        if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\r\n            this._updateContent(this._renderTable({\r\n                change: change\r\n            }), change);\r\n            needUpdateScrollLeft && this._updateScrollLeftPosition()\r\n        }\r\n    },\r\n    _updateContent($newTable, change) {\r\n        if (change && \"update\" === change.changeType && change.columnIndices) {\r\n            return this.waitAsyncTemplates().done(() => {\r\n                const $row = this.getTableElement().find(\".dx-row\");\r\n                const $newRow = $newTable.find(\".dx-row\");\r\n                this._updateCells($row, $newRow, change.columnIndices[0])\r\n            })\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _rowClick(e) {\r\n        const item = this._dataController.footerItems()[e.rowIndex] || {};\r\n        this.executeAction(\"onRowClick\", extend({}, e, item))\r\n    },\r\n    _columnOptionChanged(e) {\r\n        const {\r\n            optionNames: optionNames\r\n        } = e;\r\n        if (e.changeTypes.grouping) {\r\n            return\r\n        }\r\n        if (optionNames.width || optionNames.visibleWidth) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _handleDataChanged(e) {\r\n        const {\r\n            changeType: changeType\r\n        } = e;\r\n        if (\"update\" === e.changeType && e.repaintChangesOnly) {\r\n            if (!e.totalColumnIndices) {\r\n                this.render()\r\n            } else if (e.totalColumnIndices.length) {\r\n                this.render(null, {\r\n                    changeType: \"update\",\r\n                    columnIndices: [e.totalColumnIndices]\r\n                })\r\n            }\r\n        } else if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\r\n            this.render()\r\n        }\r\n    },\r\n    _createRow(row) {\r\n        const $row = this.callBase.apply(this, arguments);\r\n        if (\"totalFooter\" === row.rowType) {\r\n            $row.addClass(\"dx-footer-row\")\r\n        }\r\n        return $row\r\n    },\r\n    getHeight() {\r\n        return this.getElementHeight()\r\n    },\r\n    isVisible() {\r\n        return !!this._dataController.footerItems().length\r\n    }\r\n});\r\nconst SummaryDataSourceAdapterExtender = {\r\n    init() {\r\n        this.callBase.apply(this, arguments);\r\n        this._totalAggregates = [];\r\n        this._summaryGetter = noop\r\n    },\r\n    summaryGetter(summaryGetter) {\r\n        if (!arguments.length) {\r\n            return this._summaryGetter\r\n        }\r\n        if (isFunction(summaryGetter)) {\r\n            this._summaryGetter = summaryGetter\r\n        }\r\n    },\r\n    summary(summary) {\r\n        if (!arguments.length) {\r\n            return this._summaryGetter()\r\n        }\r\n        this._summaryGetter = function() {\r\n            return summary\r\n        }\r\n    },\r\n    totalAggregates() {\r\n        return this._totalAggregates\r\n    },\r\n    isLastLevelGroupItemsPagingLocal() {\r\n        const summary = this.summary();\r\n        const sortByGroupsInfo = summary && summary.sortByGroups();\r\n        return sortByGroupsInfo && sortByGroupsInfo.length\r\n    },\r\n    sortLastLevelGroupItems(items, groups, paths) {\r\n        const groupedItems = storeHelper.multiLevelGroup(dataQuery(items), groups).toArray();\r\n        let result = [];\r\n        paths.forEach(path => {\r\n            ! function forEachGroup(groups, groupCount, callback, path) {\r\n                path = path || [];\r\n                for (let i = 0; i < groups.length; i++) {\r\n                    path.push(groups[i].key);\r\n                    if (1 === groupCount) {\r\n                        callback(path, groups[i].items)\r\n                    } else {\r\n                        forEachGroup(groups[i].items, groupCount - 1, callback, path)\r\n                    }\r\n                    path.pop()\r\n                }\r\n            }(groupedItems, groups.length, (itemsPath, items) => {\r\n                if (path.toString() === itemsPath.toString()) {\r\n                    result = result.concat(items)\r\n                }\r\n            })\r\n        });\r\n        return result\r\n    }\r\n};\r\nconst SummaryDataSourceAdapterClientExtender = function() {\r\n    const applyAddedData = function(data, insertedData, groupLevel) {\r\n        if (groupLevel) {\r\n            return applyAddedData(data, insertedData.map(item => ({\r\n                items: [item]\r\n            }), groupLevel - 1))\r\n        }\r\n        return data.concat(insertedData)\r\n    };\r\n    const applyRemovedData = function(data, removedData, groupLevel) {\r\n        if (groupLevel) {\r\n            return data.map(data => {\r\n                const updatedData = {};\r\n                const updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\r\n                Object.defineProperty(updatedData, \"aggregates\", {\r\n                    get: () => data.aggregates,\r\n                    set: value => {\r\n                        data.aggregates = value\r\n                    }\r\n                });\r\n                return extend(updatedData, data, {\r\n                    items: updatedItems\r\n                })\r\n            })\r\n        }\r\n        return data.filter(data => removedData.indexOf(data) < 0)\r\n    };\r\n    const calculateAggregates = function(that, summary, data, groupLevel) {\r\n        let calculator;\r\n        if (recalculateWhileEditing(that)) {\r\n            const editingController = that.getController(\"editing\");\r\n            if (editingController) {\r\n                const insertedData = editingController.getInsertedData();\r\n                if (insertedData.length) {\r\n                    data = applyAddedData(data, insertedData, groupLevel)\r\n                }\r\n                const removedData = editingController.getRemovedData();\r\n                if (removedData.length) {\r\n                    data = applyRemovedData(data, removedData, groupLevel)\r\n                }\r\n            }\r\n        }\r\n        if (summary) {\r\n            calculator = new AggregateCalculator({\r\n                totalAggregates: summary.totalAggregates,\r\n                groupAggregates: summary.groupAggregates,\r\n                data: data,\r\n                groupLevel: groupLevel\r\n            });\r\n            calculator.calculate()\r\n        }\r\n        return calculator ? calculator.totalAggregates() : []\r\n    };\r\n    const sortGroupsBySummaryCore = function(items, groups, sortByGroups) {\r\n        if (!items || !groups.length) {\r\n            return items\r\n        }\r\n        const group = groups[0];\r\n        const sorts = sortByGroups[0];\r\n        let query;\r\n        if (group && sorts && sorts.length) {\r\n            query = dataQuery(items);\r\n            each(sorts, (function(index) {\r\n                if (0 === index) {\r\n                    query = query.sortBy(this.selector, this.desc)\r\n                } else {\r\n                    query = query.thenBy(this.selector, this.desc)\r\n                }\r\n            }));\r\n            query.enumerate().done(sortedItems => {\r\n                items = sortedItems\r\n            })\r\n        }\r\n        groups = groups.slice(1);\r\n        sortByGroups = sortByGroups.slice(1);\r\n        if (groups.length && sortByGroups.length) {\r\n            each(items, (function() {\r\n                this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups)\r\n            }))\r\n        }\r\n        return items\r\n    };\r\n    const sortGroupsBySummary = function(data, group, summary) {\r\n        const sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\r\n        if (sortByGroups && sortByGroups.length) {\r\n            return sortGroupsBySummaryCore(data, group, sortByGroups)\r\n        }\r\n        return data\r\n    };\r\n    return {\r\n        _customizeRemoteOperations(options) {\r\n            const summary = this.summary();\r\n            if (summary) {\r\n                if (options.remoteOperations.summary) {\r\n                    if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n                        if (options.storeLoadOptions.group) {\r\n                            if (options.remoteOperations.grouping) {\r\n                                options.storeLoadOptions.groupSummary = summary.groupAggregates\r\n                            } else if (summary.groupAggregates.length) {\r\n                                options.remoteOperations.paging = false\r\n                            }\r\n                        }\r\n                        options.storeLoadOptions.totalSummary = summary.totalAggregates\r\n                    }\r\n                } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\r\n                    options.remoteOperations.paging = false\r\n                }\r\n            }\r\n            this.callBase.apply(this, arguments);\r\n            const cachedExtra = options.cachedData.extra;\r\n            if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\r\n                options.storeLoadOptions.totalSummary = void 0\r\n            }\r\n        },\r\n        _handleDataLoadedCore(options) {\r\n            var _a, _b;\r\n            const that = this;\r\n            const groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\r\n            const remoteOperations = options.remoteOperations || {};\r\n            const summary = that.summaryGetter()(remoteOperations);\r\n            if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n                if (remoteOperations.summary) {\r\n                    if (!remoteOperations.paging && groups.length && summary) {\r\n                        if (!remoteOperations.grouping) {\r\n                            calculateAggregates(that, {\r\n                                groupAggregates: summary.groupAggregates\r\n                            }, options.data, groups.length)\r\n                        }\r\n                        options.data = sortGroupsBySummary(options.data, groups, summary)\r\n                    }\r\n                } else if (!remoteOperations.paging && summary) {\r\n                    const operationTypes = options.operationTypes || {};\r\n                    const hasOperations = Object.keys(operationTypes).some(type => operationTypes[type]);\r\n                    if (!hasOperations || !(null === (_b = null === (_a = options.cachedData) || void 0 === _a ? void 0 : _a.extra) || void 0 === _b ? void 0 : _b.summary) || groups.length && summary.groupAggregates.length) {\r\n                        const totalAggregates = calculateAggregates(that, summary, options.data, groups.length);\r\n                        options.extra = isPlainObject(options.extra) ? options.extra : {};\r\n                        options.extra.summary = totalAggregates;\r\n                        if (options.cachedData) {\r\n                            options.cachedData.extra = options.extra\r\n                        }\r\n                    }\r\n                    options.data = sortGroupsBySummary(options.data, groups, summary)\r\n                }\r\n            }\r\n            if (!options.isCustomLoading) {\r\n                that._totalAggregates = options.extra && options.extra.summary || that._totalAggregates\r\n            }\r\n            that.callBase(options)\r\n        }\r\n    }\r\n}();\r\ndataSourceAdapter.extend(SummaryDataSourceAdapterExtender);\r\ndataSourceAdapter.extend(SummaryDataSourceAdapterClientExtender);\r\ngridCore.registerModule(\"summary\", {\r\n    defaultOptions: () => ({\r\n        summary: {\r\n            groupItems: void 0,\r\n            totalItems: void 0,\r\n            calculateCustomSummary: void 0,\r\n            skipEmptyValues: true,\r\n            recalculateWhileEditing: false,\r\n            texts: {\r\n                sum: messageLocalization.format(\"dxDataGrid-summarySum\"),\r\n                sumOtherColumn: messageLocalization.format(\"dxDataGrid-summarySumOtherColumn\"),\r\n                min: messageLocalization.format(\"dxDataGrid-summaryMin\"),\r\n                minOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMinOtherColumn\"),\r\n                max: messageLocalization.format(\"dxDataGrid-summaryMax\"),\r\n                maxOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMaxOtherColumn\"),\r\n                avg: messageLocalization.format(\"dxDataGrid-summaryAvg\"),\r\n                avgOtherColumn: messageLocalization.format(\"dxDataGrid-summaryAvgOtherColumn\"),\r\n                count: messageLocalization.format(\"dxDataGrid-summaryCount\")\r\n            }\r\n        },\r\n        sortByGroupSummaryInfo: void 0\r\n    }),\r\n    views: {\r\n        footerView: FooterView\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                _isDataColumn: column => column && (!isDefined(column.groupIndex) || column.showWhenGrouped),\r\n                _isGroupFooterVisible() {\r\n                    const groupItems = this.option(\"summary.groupItems\") || [];\r\n                    for (let i = 0; i < groupItems.length; i++) {\r\n                        const groupItem = groupItems[i];\r\n                        const column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\r\n                        if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                _processGroupItems(items, groupCount, options) {\r\n                    const data = options && options.data;\r\n                    const result = this.callBase.apply(this, arguments);\r\n                    if (options) {\r\n                        if (void 0 === options.isGroupFooterVisible) {\r\n                            options.isGroupFooterVisible = this._isGroupFooterVisible()\r\n                        }\r\n                        if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\r\n                            result.push({\r\n                                rowType: \"groupFooter\",\r\n                                key: options.path.slice(),\r\n                                data: data,\r\n                                groupIndex: options.path.length - 1,\r\n                                values: []\r\n                            })\r\n                        }\r\n                    }\r\n                    return result\r\n                },\r\n                _processGroupItem(groupItem, options) {\r\n                    const that = this;\r\n                    if (!options.summaryGroupItems) {\r\n                        options.summaryGroupItems = that.option(\"summary.groupItems\") || []\r\n                    }\r\n                    if (\"group\" === groupItem.rowType) {\r\n                        let groupColumnIndex = -1;\r\n                        let afterGroupColumnIndex = -1;\r\n                        each(options.visibleColumns, (function(visibleIndex) {\r\n                            const prevColumn = options.visibleColumns[visibleIndex - 1];\r\n                            if (groupItem.groupIndex === this.groupIndex) {\r\n                                groupColumnIndex = this.index\r\n                            }\r\n                            if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\r\n                                afterGroupColumnIndex = this.index\r\n                            }\r\n                        }));\r\n                        groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (summaryItem, column) => {\r\n                            if (summaryItem.showInGroupFooter) {\r\n                                return -1\r\n                            }\r\n                            if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {\r\n                                return column.index\r\n                            }\r\n                            return groupColumnIndex\r\n                        }, true)\r\n                    }\r\n                    if (\"groupFooter\" === groupItem.rowType) {\r\n                        groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (summaryItem, column) => summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1)\r\n                    }\r\n                    return groupItem\r\n                },\r\n                _calculateSummaryCells(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {\r\n                    const that = this;\r\n                    const summaryCells = [];\r\n                    const summaryCellsByColumns = {};\r\n                    each(summaryItems, (summaryIndex, summaryItem) => {\r\n                        const column = that._columnsController.columnOption(summaryItem.column);\r\n                        const showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\r\n                        const columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\r\n                        if (columnIndex >= 0) {\r\n                            if (!summaryCellsByColumns[columnIndex]) {\r\n                                summaryCellsByColumns[columnIndex] = []\r\n                            }\r\n                            const aggregate = aggregates[summaryIndex];\r\n                            if (aggregate === aggregate) {\r\n                                let valueFormat;\r\n                                if (isDefined(summaryItem.valueFormat)) {\r\n                                    valueFormat = summaryItem.valueFormat\r\n                                } else if (\"count\" !== summaryItem.summaryType) {\r\n                                    valueFormat = gridCore.getFormatByDataType(column && column.dataType)\r\n                                }\r\n                                summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {\r\n                                    value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\r\n                                    valueFormat: valueFormat,\r\n                                    columnCaption: column && column.index !== columnIndex ? column.caption : void 0\r\n                                }))\r\n                            }\r\n                        }\r\n                    });\r\n                    if (!isEmptyObject(summaryCellsByColumns)) {\r\n                        visibleColumns.forEach((column, visibleIndex) => {\r\n                            const prevColumn = visibleColumns[visibleIndex - 1];\r\n                            const columnIndex = isGroupRow && (\"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || \"expand\" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;\r\n                            summaryCells.push(summaryCellsByColumns[columnIndex] || [])\r\n                        })\r\n                    }\r\n                    return summaryCells\r\n                },\r\n                _getSummaryCells(summaryTotalItems, totalAggregates) {\r\n                    const that = this;\r\n                    const columnsController = that._columnsController;\r\n                    return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), (summaryItem, column) => that._isDataColumn(column) ? column.index : -1)\r\n                },\r\n                _updateItemsCore(change) {\r\n                    const that = this;\r\n                    let summaryCells;\r\n                    const dataSource = that._dataSource;\r\n                    const footerItems = that._footerItems;\r\n                    const oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\r\n                    const summaryTotalItems = that.option(\"summary.totalItems\");\r\n                    that._footerItems = [];\r\n                    if (dataSource && summaryTotalItems && summaryTotalItems.length) {\r\n                        const totalAggregates = dataSource.totalAggregates();\r\n                        summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\r\n                        if (change && change.repaintChangesOnly && oldSummaryCells) {\r\n                            change.totalColumnIndices = summaryCells.map((summaryCell, index) => {\r\n                                if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\r\n                                    return index\r\n                                }\r\n                                return -1\r\n                            }).filter(index => index >= 0)\r\n                        }\r\n                        if (summaryCells.length) {\r\n                            that._footerItems.push({\r\n                                rowType: \"totalFooter\",\r\n                                summaryCells: summaryCells\r\n                            })\r\n                        }\r\n                    }\r\n                    that.callBase(change)\r\n                },\r\n                _prepareUnsavedDataSelector(selector) {\r\n                    const that = this;\r\n                    if (recalculateWhileEditing(that)) {\r\n                        const editingController = that.getController(\"editing\");\r\n                        if (editingController) {\r\n                            return function(data) {\r\n                                data = editingController.getUpdatedData(data);\r\n                                return selector(data)\r\n                            }\r\n                        }\r\n                    }\r\n                    return selector\r\n                },\r\n                _prepareAggregateSelector(selector, aggregator) {\r\n                    selector = this._prepareUnsavedDataSelector(selector);\r\n                    if (\"avg\" === aggregator || \"sum\" === aggregator) {\r\n                        return function(data) {\r\n                            const value = selector(data);\r\n                            return isDefined(value) ? Number(value) : value\r\n                        }\r\n                    }\r\n                    return selector\r\n                },\r\n                _getAggregates(summaryItems, remoteOperations) {\r\n                    const that = this;\r\n                    const columnsController = that.getController(\"columns\");\r\n                    let calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\r\n                    const commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\r\n                    return map(summaryItems || [], summaryItem => {\r\n                        const column = columnsController.columnOption(summaryItem.column);\r\n                        const calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);\r\n                        let aggregator = summaryItem.summaryType || \"count\";\r\n                        const skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\r\n                        if (remoteOperations) {\r\n                            return {\r\n                                selector: summaryItem.column,\r\n                                summaryType: aggregator\r\n                            }\r\n                        }\r\n                        const selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\r\n                        if (\"custom\" === aggregator) {\r\n                            if (!calculateCustomSummary) {\r\n                                errors.log(\"E1026\");\r\n                                calculateCustomSummary = function() {}\r\n                            }\r\n                            const options = {\r\n                                component: that.component,\r\n                                name: summaryItem.name\r\n                            };\r\n                            calculateCustomSummary(options);\r\n                            options.summaryProcess = \"calculate\";\r\n                            aggregator = {\r\n                                seed(groupIndex) {\r\n                                    options.summaryProcess = \"start\";\r\n                                    options.totalValue = void 0;\r\n                                    options.groupIndex = groupIndex;\r\n                                    delete options.value;\r\n                                    calculateCustomSummary(options);\r\n                                    return options.totalValue\r\n                                },\r\n                                step(totalValue, value) {\r\n                                    options.summaryProcess = \"calculate\";\r\n                                    options.totalValue = totalValue;\r\n                                    options.value = value;\r\n                                    calculateCustomSummary(options);\r\n                                    return options.totalValue\r\n                                },\r\n                                finalize(totalValue) {\r\n                                    options.summaryProcess = \"finalize\";\r\n                                    options.totalValue = totalValue;\r\n                                    delete options.value;\r\n                                    calculateCustomSummary(options);\r\n                                    return options.totalValue\r\n                                }\r\n                            }\r\n                        }\r\n                        return {\r\n                            selector: selector,\r\n                            aggregator: aggregator,\r\n                            skipEmptyValues: skipEmptyValues\r\n                        }\r\n                    })\r\n                },\r\n                _addSortInfo(sortByGroups, groupColumn, selector, sortOrder) {\r\n                    if (groupColumn) {\r\n                        const {\r\n                            groupIndex: groupIndex\r\n                        } = groupColumn;\r\n                        sortOrder = sortOrder || groupColumn.sortOrder;\r\n                        if (isDefined(groupIndex)) {\r\n                            sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\r\n                            sortByGroups[groupIndex].push({\r\n                                selector: selector,\r\n                                desc: \"desc\" === sortOrder\r\n                            })\r\n                        }\r\n                    }\r\n                },\r\n                _findSummaryItem(summaryItems, name) {\r\n                    let summaryItemIndex = -1;\r\n                    if (isDefined(name)) {\r\n                        each(summaryItems || [], (function(index) {\r\n                            if (this.name === name || index === name || this.summaryType === name || this.column === name || function(summaryItem) {\r\n                                    const {\r\n                                        summaryType: summaryType\r\n                                    } = summaryItem;\r\n                                    const {\r\n                                        column: column\r\n                                    } = summaryItem;\r\n                                    return summaryType && column && `${summaryType}_${column}`\r\n                                }(this) === name) {\r\n                                summaryItemIndex = index;\r\n                                return false\r\n                            }\r\n                        }))\r\n                    }\r\n                    return summaryItemIndex\r\n                },\r\n                _getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems) {\r\n                    const that = this;\r\n                    const columnsController = that._columnsController;\r\n                    const groupColumns = columnsController.getGroupColumns();\r\n                    const sortByGroups = [];\r\n                    if (!groupSummaryItems || !groupSummaryItems.length) {\r\n                        return\r\n                    }\r\n                    each(sortByGroupSummaryInfo || [], (function() {\r\n                        const {\r\n                            sortOrder: sortOrder\r\n                        } = this;\r\n                        let {\r\n                            groupColumn: groupColumn\r\n                        } = this;\r\n                        const summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\r\n                        if (summaryItemIndex < 0) {\r\n                            return\r\n                        }\r\n                        const selector = function(data) {\r\n                            return getGroupAggregates(data)[summaryItemIndex]\r\n                        };\r\n                        if (isDefined(groupColumn)) {\r\n                            groupColumn = columnsController.columnOption(groupColumn);\r\n                            that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n                        } else {\r\n                            each(groupColumns, (groupIndex, groupColumn) => {\r\n                                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n                            })\r\n                        }\r\n                    }));\r\n                    return sortByGroups\r\n                },\r\n                _createDataSourceAdapterCore(dataSource, remoteOperations) {\r\n                    const that = this;\r\n                    const dataSourceAdapter = this.callBase(dataSource, remoteOperations);\r\n                    dataSourceAdapter.summaryGetter(currentRemoteOperations => that._getSummaryOptions(currentRemoteOperations || remoteOperations));\r\n                    return dataSourceAdapter\r\n                },\r\n                _getSummaryOptions(remoteOperations) {\r\n                    const that = this;\r\n                    const groupSummaryItems = that.option(\"summary.groupItems\");\r\n                    const totalSummaryItems = that.option(\"summary.totalItems\");\r\n                    const sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\r\n                    const groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\r\n                    const totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\r\n                    const sortByGroups = function() {\r\n                        return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems)\r\n                    };\r\n                    if (groupAggregates.length || totalAggregates.length) {\r\n                        return {\r\n                            groupAggregates: groupAggregates,\r\n                            totalAggregates: totalAggregates,\r\n                            sortByGroups: sortByGroups\r\n                        }\r\n                    }\r\n                },\r\n                publicMethods() {\r\n                    const methods = this.callBase();\r\n                    methods.push(\"getTotalSummaryValue\");\r\n                    return methods\r\n                },\r\n                getTotalSummaryValue(summaryItemName) {\r\n                    const summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\r\n                    const aggregates = this._dataSource.totalAggregates();\r\n                    if (aggregates.length && summaryItemIndex > -1) {\r\n                        return aggregates[summaryItemIndex]\r\n                    }\r\n                },\r\n                optionChanged(args) {\r\n                    if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\r\n                        args.name = \"dataSource\"\r\n                    }\r\n                    this.callBase(args)\r\n                },\r\n                init() {\r\n                    this._footerItems = [];\r\n                    this.callBase()\r\n                },\r\n                footerItems() {\r\n                    return this._footerItems\r\n                }\r\n            },\r\n            editing: {\r\n                _refreshSummary() {\r\n                    if (recalculateWhileEditing(this) && !this.isSaving()) {\r\n                        this._dataController.refresh({\r\n                            load: true,\r\n                            changesOnly: true\r\n                        })\r\n                    }\r\n                },\r\n                _addChange(params) {\r\n                    const result = this.callBase.apply(this, arguments);\r\n                    if (params.type) {\r\n                        this._refreshSummary()\r\n                    }\r\n                    return result\r\n                },\r\n                _removeChange() {\r\n                    const result = this.callBase.apply(this, arguments);\r\n                    this._refreshSummary();\r\n                    return result\r\n                },\r\n                cancelEditData() {\r\n                    const result = this.callBase.apply(this, arguments);\r\n                    this._refreshSummary();\r\n                    return result\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createRow(row) {\r\n                    const $row = this.callBase.apply(this, arguments);\r\n                    row && $row.addClass(\"groupFooter\" === row.rowType ? \"dx-datagrid-group-footer\" : \"\");\r\n                    return $row\r\n                },\r\n                _renderCells($row, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\r\n                        this._renderGroupSummaryCells($row, options)\r\n                    }\r\n                },\r\n                _hasAlignByColumnSummaryItems: (columnIndex, options) => !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length,\r\n                _getAlignByColumnCellCount(groupCellColSpan, options) {\r\n                    let alignByColumnCellCount = 0;\r\n                    for (let i = 1; i < groupCellColSpan; i++) {\r\n                        const columnIndex = options.row.summaryCells.length - i;\r\n                        alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount\r\n                    }\r\n                    return alignByColumnCellCount\r\n                },\r\n                _renderGroupSummaryCells($row, options) {\r\n                    const $groupCell = $row.children().last();\r\n                    const groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\r\n                    const alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\r\n                    this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount)\r\n                },\r\n                _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\r\n                    if (alignByColumnCellCount > 0) {\r\n                        $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\r\n                        for (let i = 0; i < alignByColumnCellCount; i++) {\r\n                            const columnIndex = options.columns.length - alignByColumnCellCount + i;\r\n                            this._renderCell($groupCell.parent(), extend({\r\n                                column: options.columns[columnIndex],\r\n                                columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\r\n                            }, options))\r\n                        }\r\n                    }\r\n                },\r\n                _getSummaryCellIndex: columnIndex => columnIndex,\r\n                _getCellTemplate(options) {\r\n                    if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\r\n                        return renderSummaryCell\r\n                    }\r\n                    return this.callBase(options)\r\n                },\r\n                _getCellOptions(options) {\r\n                    const that = this;\r\n                    const parameters = that.callBase(options);\r\n                    if (options.row.summaryCells) {\r\n                        return extend(parameters, getSummaryCellOptions(that, options))\r\n                    }\r\n                    return parameters\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}