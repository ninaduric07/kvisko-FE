{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/excel/excel.file.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport tagHelper from \"./excel.tag_helper\";\nimport cellFormatHelper from \"./excel.cell_format_helper\";\nimport fillHelper from \"./excel.fill_helper\";\nimport fontHelper from \"./excel.font_helper\";\nimport numberFormatHelper from \"./excel.number_format_helper\";\nexport default class ExcelFile {\n  constructor() {\n    this._cellFormatTags = [];\n    this._fillTags = [];\n    this._fontTags = [];\n    this._numberFormatTags = [];\n    this._fillTags.push(fillHelper.tryCreateTag({\n      patternFill: {\n        patternType: \"none\"\n      }\n    }));\n  }\n  registerCellFormat(cellFormat) {\n    var result;\n    var cellFormatTag = cellFormatHelper.tryCreateTag(cellFormat, {\n      registerFill: this.registerFill.bind(this),\n      registerFont: this.registerFont.bind(this),\n      registerNumberFormat: this.registerNumberFormat.bind(this)\n    });\n    if (isDefined(cellFormatTag)) {\n      for (var i = 0; i < this._cellFormatTags.length; i++) {\n        if (cellFormatHelper.areEqual(this._cellFormatTags[i], cellFormatTag)) {\n          result = i;\n          break;\n        }\n      }\n      if (void 0 === result) {\n        result = this._cellFormatTags.push(cellFormatTag) - 1;\n      }\n    }\n    return result;\n  }\n  static copyCellFormat(source) {\n    return cellFormatHelper.copy(source);\n  }\n  generateCellFormatsXml() {\n    var cellFormatTagsAsXmlStringsArray = this._cellFormatTags.map(tag => cellFormatHelper.toXml(tag));\n    return tagHelper.toXml(\"cellXfs\", {\n      count: cellFormatTagsAsXmlStringsArray.length\n    }, cellFormatTagsAsXmlStringsArray.join(\"\"));\n  }\n  registerFill(fill) {\n    var result;\n    var fillTag = fillHelper.tryCreateTag(fill);\n    if (isDefined(fillTag)) {\n      for (var i = 0; i < this._fillTags.length; i++) {\n        if (fillHelper.areEqual(this._fillTags[i], fillTag)) {\n          result = i;\n          break;\n        }\n      }\n      if (void 0 === result) {\n        if (this._fillTags.length < 2) {\n          this._fillTags.push(fillHelper.tryCreateTag({\n            patternFill: {\n              patternType: \"Gray125\"\n            }\n          }));\n        }\n        result = this._fillTags.push(fillTag) - 1;\n      }\n    }\n    return result;\n  }\n  generateFillsXml() {\n    var tagsAsXmlStringsArray = this._fillTags.map(tag => fillHelper.toXml(tag));\n    return tagHelper.toXml(\"fills\", {\n      count: tagsAsXmlStringsArray.length\n    }, tagsAsXmlStringsArray.join(\"\"));\n  }\n  registerFont(font) {\n    var result;\n    var fontTag = fontHelper.tryCreateTag(font);\n    if (isDefined(fontTag)) {\n      for (var i = 0; i < this._fontTags.length; i++) {\n        if (fontHelper.areEqual(this._fontTags[i], fontTag)) {\n          result = i;\n          break;\n        }\n      }\n      if (void 0 === result) {\n        result = this._fontTags.push(fontTag) - 1;\n      }\n    }\n    return result;\n  }\n  generateFontsXml() {\n    var xmlStringsArray = this._fontTags.map(tag => fontHelper.toXml(tag));\n    return tagHelper.toXml(\"fonts\", {\n      count: xmlStringsArray.length\n    }, xmlStringsArray.join(\"\"));\n  }\n  _convertNumberFormatIndexToId(index) {\n    return 165 + index;\n  }\n  registerNumberFormat(numberFormat) {\n    var result;\n    var tag = numberFormatHelper.tryCreateTag(numberFormat);\n    if (isDefined(tag)) {\n      for (var i = 0; i < this._numberFormatTags.length; i++) {\n        if (numberFormatHelper.areEqual(this._numberFormatTags[i], tag)) {\n          result = this._numberFormatTags[i][numberFormatHelper.ID_PROPERTY_NAME];\n          break;\n        }\n      }\n      if (void 0 === result) {\n        tag[numberFormatHelper.ID_PROPERTY_NAME] = this._convertNumberFormatIndexToId(this._numberFormatTags.length);\n        result = tag[numberFormatHelper.ID_PROPERTY_NAME];\n        this._numberFormatTags.push(tag);\n      }\n    }\n    return result;\n  }\n  generateNumberFormatsXml() {\n    if (this._numberFormatTags.length > 0) {\n      var xmlStringsArray = this._numberFormatTags.map(tag => numberFormatHelper.toXml(tag));\n      return tagHelper.toXml(\"numFmts\", {\n        count: xmlStringsArray.length\n      }, xmlStringsArray.join(\"\"));\n    } else {\n      return \"\";\n    }\n  }\n}","map":{"version":3,"names":["isDefined","tagHelper","cellFormatHelper","fillHelper","fontHelper","numberFormatHelper","ExcelFile","constructor","_cellFormatTags","_fillTags","_fontTags","_numberFormatTags","push","tryCreateTag","patternFill","patternType","registerCellFormat","cellFormat","result","cellFormatTag","registerFill","bind","registerFont","registerNumberFormat","i","length","areEqual","copyCellFormat","source","copy","generateCellFormatsXml","cellFormatTagsAsXmlStringsArray","map","tag","toXml","count","join","fill","fillTag","generateFillsXml","tagsAsXmlStringsArray","font","fontTag","generateFontsXml","xmlStringsArray","_convertNumberFormatIndexToId","index","numberFormat","ID_PROPERTY_NAME","generateNumberFormatsXml"],"sources":["C:/Users/ninad/OneDrive/Radna povr≈°ina/zavrsni/client/node_modules/devextreme/esm/exporter/excel/excel.file.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/exporter/excel/excel.file.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport tagHelper from \"./excel.tag_helper\";\r\nimport cellFormatHelper from \"./excel.cell_format_helper\";\r\nimport fillHelper from \"./excel.fill_helper\";\r\nimport fontHelper from \"./excel.font_helper\";\r\nimport numberFormatHelper from \"./excel.number_format_helper\";\r\nexport default class ExcelFile {\r\n    constructor() {\r\n        this._cellFormatTags = [];\r\n        this._fillTags = [];\r\n        this._fontTags = [];\r\n        this._numberFormatTags = [];\r\n        this._fillTags.push(fillHelper.tryCreateTag({\r\n            patternFill: {\r\n                patternType: \"none\"\r\n            }\r\n        }))\r\n    }\r\n    registerCellFormat(cellFormat) {\r\n        var result;\r\n        var cellFormatTag = cellFormatHelper.tryCreateTag(cellFormat, {\r\n            registerFill: this.registerFill.bind(this),\r\n            registerFont: this.registerFont.bind(this),\r\n            registerNumberFormat: this.registerNumberFormat.bind(this)\r\n        });\r\n        if (isDefined(cellFormatTag)) {\r\n            for (var i = 0; i < this._cellFormatTags.length; i++) {\r\n                if (cellFormatHelper.areEqual(this._cellFormatTags[i], cellFormatTag)) {\r\n                    result = i;\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                result = this._cellFormatTags.push(cellFormatTag) - 1\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    static copyCellFormat(source) {\r\n        return cellFormatHelper.copy(source)\r\n    }\r\n    generateCellFormatsXml() {\r\n        var cellFormatTagsAsXmlStringsArray = this._cellFormatTags.map(tag => cellFormatHelper.toXml(tag));\r\n        return tagHelper.toXml(\"cellXfs\", {\r\n            count: cellFormatTagsAsXmlStringsArray.length\r\n        }, cellFormatTagsAsXmlStringsArray.join(\"\"))\r\n    }\r\n    registerFill(fill) {\r\n        var result;\r\n        var fillTag = fillHelper.tryCreateTag(fill);\r\n        if (isDefined(fillTag)) {\r\n            for (var i = 0; i < this._fillTags.length; i++) {\r\n                if (fillHelper.areEqual(this._fillTags[i], fillTag)) {\r\n                    result = i;\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                if (this._fillTags.length < 2) {\r\n                    this._fillTags.push(fillHelper.tryCreateTag({\r\n                        patternFill: {\r\n                            patternType: \"Gray125\"\r\n                        }\r\n                    }))\r\n                }\r\n                result = this._fillTags.push(fillTag) - 1\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    generateFillsXml() {\r\n        var tagsAsXmlStringsArray = this._fillTags.map(tag => fillHelper.toXml(tag));\r\n        return tagHelper.toXml(\"fills\", {\r\n            count: tagsAsXmlStringsArray.length\r\n        }, tagsAsXmlStringsArray.join(\"\"))\r\n    }\r\n    registerFont(font) {\r\n        var result;\r\n        var fontTag = fontHelper.tryCreateTag(font);\r\n        if (isDefined(fontTag)) {\r\n            for (var i = 0; i < this._fontTags.length; i++) {\r\n                if (fontHelper.areEqual(this._fontTags[i], fontTag)) {\r\n                    result = i;\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                result = this._fontTags.push(fontTag) - 1\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    generateFontsXml() {\r\n        var xmlStringsArray = this._fontTags.map(tag => fontHelper.toXml(tag));\r\n        return tagHelper.toXml(\"fonts\", {\r\n            count: xmlStringsArray.length\r\n        }, xmlStringsArray.join(\"\"))\r\n    }\r\n    _convertNumberFormatIndexToId(index) {\r\n        return 165 + index\r\n    }\r\n    registerNumberFormat(numberFormat) {\r\n        var result;\r\n        var tag = numberFormatHelper.tryCreateTag(numberFormat);\r\n        if (isDefined(tag)) {\r\n            for (var i = 0; i < this._numberFormatTags.length; i++) {\r\n                if (numberFormatHelper.areEqual(this._numberFormatTags[i], tag)) {\r\n                    result = this._numberFormatTags[i][numberFormatHelper.ID_PROPERTY_NAME];\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                tag[numberFormatHelper.ID_PROPERTY_NAME] = this._convertNumberFormatIndexToId(this._numberFormatTags.length);\r\n                result = tag[numberFormatHelper.ID_PROPERTY_NAME];\r\n                this._numberFormatTags.push(tag)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    generateNumberFormatsXml() {\r\n        if (this._numberFormatTags.length > 0) {\r\n            var xmlStringsArray = this._numberFormatTags.map(tag => numberFormatHelper.toXml(tag));\r\n            return tagHelper.toXml(\"numFmts\", {\r\n                count: xmlStringsArray.length\r\n            }, xmlStringsArray.join(\"\"))\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}