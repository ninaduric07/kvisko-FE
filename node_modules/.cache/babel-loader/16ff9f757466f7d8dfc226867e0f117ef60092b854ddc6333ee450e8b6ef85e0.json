{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/intl/number.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dxConfig from \"../../core/config\";\nimport localizationCoreUtils from \"../core\";\nimport openXmlCurrencyFormat from \"../open_xml_currency_format\";\nimport accountingFormats from \"../cldr-data/accounting_formats\";\nvar CURRENCY_STYLES = [\"standard\", \"accounting\"];\nvar MAX_FRACTION_DIGITS = 20;\nvar detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\nvar formattersCache = {};\nvar getFormatter = format => {\n  var key = localizationCoreUtils.locale() + \"/\" + JSON.stringify(format);\n  if (!formattersCache[key]) {\n    formattersCache[key] = new Intl.NumberFormat(localizationCoreUtils.locale(), format).format;\n  }\n  return formattersCache[key];\n};\nvar getCurrencyFormatter = currency => new Intl.NumberFormat(localizationCoreUtils.locale(), {\n  style: \"currency\",\n  currency: currency\n});\nexport default {\n  engine: function () {\n    return \"intl\";\n  },\n  _formatNumberCore: function (value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this.callBase.apply(this, arguments);\n    }\n    return getFormatter(this._normalizeFormatConfig(format, formatConfig, value))(value);\n  },\n  _normalizeFormatConfig: function (format, formatConfig, value) {\n    var config;\n    if (\"decimal\" === format) {\n      var fractionDigits = String(value).split(\".\")[1];\n      config = {\n        minimumIntegerDigits: formatConfig.precision || void 0,\n        useGrouping: false,\n        maximumFractionDigits: fractionDigits && fractionDigits.length,\n        round: value < 0 ? \"ceil\" : \"floor\"\n      };\n    } else {\n      config = this._getPrecisionConfig(formatConfig.precision);\n    }\n    if (\"percent\" === format) {\n      config.style = \"percent\";\n    } else if (\"currency\" === format) {\n      var _formatConfig$useCurr;\n      var useAccountingStyle = null !== (_formatConfig$useCurr = formatConfig.useCurrencyAccountingStyle) && void 0 !== _formatConfig$useCurr ? _formatConfig$useCurr : dxConfig().defaultUseCurrencyAccountingStyle;\n      config.style = \"currency\";\n      config.currency = formatConfig.currency || dxConfig().defaultCurrency;\n      config.currencySign = CURRENCY_STYLES[+useAccountingStyle];\n    }\n    return config;\n  },\n  _getPrecisionConfig: function (precision) {\n    var config;\n    if (null === precision) {\n      config = {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: MAX_FRACTION_DIGITS\n      };\n    } else {\n      config = {\n        minimumFractionDigits: precision || 0,\n        maximumFractionDigits: precision || 0\n      };\n    }\n    return config;\n  },\n  format: function (value, _format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n    _format = this._normalizeFormat(_format);\n    if (\"default\" === _format.currency) {\n      _format.currency = dxConfig().defaultCurrency;\n    }\n    if (!_format || \"function\" !== typeof _format && !_format.type && !_format.formatter) {\n      return getFormatter(_format)(value);\n    }\n    return this.callBase.apply(this, arguments);\n  },\n  _getCurrencySymbolInfo: function (currency) {\n    var formatter = getCurrencyFormatter(currency);\n    return this._extractCurrencySymbolInfo(formatter.format(0));\n  },\n  _extractCurrencySymbolInfo: function (currencyValueString) {\n    var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\n    var position = match[1] ? \"before\" : \"after\";\n    var symbol = match[1] || match[4] || \"\";\n    var delimiter = match[2] || match[3] || \"\";\n    return {\n      position: position,\n      symbol: symbol,\n      delimiter: delimiter\n    };\n  },\n  getCurrencySymbol: function (currency) {\n    if (!currency) {\n      currency = dxConfig().defaultCurrency;\n    }\n    var symbolInfo = this._getCurrencySymbolInfo(currency);\n    return {\n      symbol: symbolInfo.symbol\n    };\n  },\n  getOpenXmlCurrencyFormat: function (currency) {\n    var targetCurrency = currency || dxConfig().defaultCurrency;\n    var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;\n    var closestAccountingFormat = localizationCoreUtils.getValueByClosestLocale(locale => accountingFormats[locale]);\n    return openXmlCurrencyFormat(currencySymbol, closestAccountingFormat);\n  }\n};","map":{"version":3,"names":["dxConfig","localizationCoreUtils","openXmlCurrencyFormat","accountingFormats","CURRENCY_STYLES","MAX_FRACTION_DIGITS","detectCurrencySymbolRegex","formattersCache","getFormatter","format","key","locale","JSON","stringify","Intl","NumberFormat","getCurrencyFormatter","currency","style","engine","_formatNumberCore","value","formatConfig","callBase","apply","arguments","_normalizeFormatConfig","config","fractionDigits","String","split","minimumIntegerDigits","precision","useGrouping","maximumFractionDigits","length","round","_getPrecisionConfig","_formatConfig$useCurr","useAccountingStyle","useCurrencyAccountingStyle","defaultUseCurrencyAccountingStyle","defaultCurrency","currencySign","minimumFractionDigits","_format","_normalizeFormat","type","formatter","_getCurrencySymbolInfo","_extractCurrencySymbolInfo","currencyValueString","match","exec","position","symbol","delimiter","getCurrencySymbol","symbolInfo","getOpenXmlCurrencyFormat","targetCurrency","currencySymbol","closestAccountingFormat","getValueByClosestLocale"],"sources":["C:/Users/ninad/OneDrive/Radna povrÅ¡ina/zavrsni/client/node_modules/devextreme/esm/localization/intl/number.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/localization/intl/number.js)\r\n * Version: 22.2.6\r\n * Build date: Tue Apr 18 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dxConfig from \"../../core/config\";\r\nimport localizationCoreUtils from \"../core\";\r\nimport openXmlCurrencyFormat from \"../open_xml_currency_format\";\r\nimport accountingFormats from \"../cldr-data/accounting_formats\";\r\nvar CURRENCY_STYLES = [\"standard\", \"accounting\"];\r\nvar MAX_FRACTION_DIGITS = 20;\r\nvar detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\r\nvar formattersCache = {};\r\nvar getFormatter = format => {\r\n    var key = localizationCoreUtils.locale() + \"/\" + JSON.stringify(format);\r\n    if (!formattersCache[key]) {\r\n        formattersCache[key] = new Intl.NumberFormat(localizationCoreUtils.locale(), format).format\r\n    }\r\n    return formattersCache[key]\r\n};\r\nvar getCurrencyFormatter = currency => new Intl.NumberFormat(localizationCoreUtils.locale(), {\r\n    style: \"currency\",\r\n    currency: currency\r\n});\r\nexport default {\r\n    engine: function() {\r\n        return \"intl\"\r\n    },\r\n    _formatNumberCore: function(value, format, formatConfig) {\r\n        if (\"exponential\" === format) {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n        return getFormatter(this._normalizeFormatConfig(format, formatConfig, value))(value)\r\n    },\r\n    _normalizeFormatConfig: function(format, formatConfig, value) {\r\n        var config;\r\n        if (\"decimal\" === format) {\r\n            var fractionDigits = String(value).split(\".\")[1];\r\n            config = {\r\n                minimumIntegerDigits: formatConfig.precision || void 0,\r\n                useGrouping: false,\r\n                maximumFractionDigits: fractionDigits && fractionDigits.length,\r\n                round: value < 0 ? \"ceil\" : \"floor\"\r\n            }\r\n        } else {\r\n            config = this._getPrecisionConfig(formatConfig.precision)\r\n        }\r\n        if (\"percent\" === format) {\r\n            config.style = \"percent\"\r\n        } else if (\"currency\" === format) {\r\n            var _formatConfig$useCurr;\r\n            var useAccountingStyle = null !== (_formatConfig$useCurr = formatConfig.useCurrencyAccountingStyle) && void 0 !== _formatConfig$useCurr ? _formatConfig$useCurr : dxConfig().defaultUseCurrencyAccountingStyle;\r\n            config.style = \"currency\";\r\n            config.currency = formatConfig.currency || dxConfig().defaultCurrency;\r\n            config.currencySign = CURRENCY_STYLES[+useAccountingStyle]\r\n        }\r\n        return config\r\n    },\r\n    _getPrecisionConfig: function(precision) {\r\n        var config;\r\n        if (null === precision) {\r\n            config = {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: MAX_FRACTION_DIGITS\r\n            }\r\n        } else {\r\n            config = {\r\n                minimumFractionDigits: precision || 0,\r\n                maximumFractionDigits: precision || 0\r\n            }\r\n        }\r\n        return config\r\n    },\r\n    format: function(value, _format) {\r\n        if (\"number\" !== typeof value) {\r\n            return value\r\n        }\r\n        _format = this._normalizeFormat(_format);\r\n        if (\"default\" === _format.currency) {\r\n            _format.currency = dxConfig().defaultCurrency\r\n        }\r\n        if (!_format || \"function\" !== typeof _format && !_format.type && !_format.formatter) {\r\n            return getFormatter(_format)(value)\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _getCurrencySymbolInfo: function(currency) {\r\n        var formatter = getCurrencyFormatter(currency);\r\n        return this._extractCurrencySymbolInfo(formatter.format(0))\r\n    },\r\n    _extractCurrencySymbolInfo: function(currencyValueString) {\r\n        var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\r\n        var position = match[1] ? \"before\" : \"after\";\r\n        var symbol = match[1] || match[4] || \"\";\r\n        var delimiter = match[2] || match[3] || \"\";\r\n        return {\r\n            position: position,\r\n            symbol: symbol,\r\n            delimiter: delimiter\r\n        }\r\n    },\r\n    getCurrencySymbol: function(currency) {\r\n        if (!currency) {\r\n            currency = dxConfig().defaultCurrency\r\n        }\r\n        var symbolInfo = this._getCurrencySymbolInfo(currency);\r\n        return {\r\n            symbol: symbolInfo.symbol\r\n        }\r\n    },\r\n    getOpenXmlCurrencyFormat: function(currency) {\r\n        var targetCurrency = currency || dxConfig().defaultCurrency;\r\n        var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;\r\n        var closestAccountingFormat = localizationCoreUtils.getValueByClosestLocale(locale => accountingFormats[locale]);\r\n        return openXmlCurrencyFormat(currencySymbol, closestAccountingFormat)\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}