/**
 * DevExtreme (cjs/__internal/grids/tree_list/data_controller/module.js)
 * Version: 22.2.6
 * Build date: Tue Apr 18 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DataController = void 0;
var extend_1 = require("../../../../core/utils/extend");
var deferred_1 = require("../../../../core/utils/deferred");
var common_1 = require("../../../../core/utils/common");
var ui_grid_core_data_controller_1 = require("../../../../ui/grid_core/ui.grid_core.data_controller");
var module_core_1 = __importDefault(require("../module_core"));
var module_1 = __importDefault(require("../data_source_adapter/module"));
exports.DataController = ui_grid_core_data_controller_1.dataControllerModule.controllers.data.inherit({
    _getDataSourceAdapter: function() {
        return module_1.default
    },
    _getNodeLevel: function(node) {
        var level = -1;
        while (node.parent) {
            if (node.visible) {
                level++
            }
            node = node.parent
        }
        return level
    },
    _generateDataItem: function(node, options) {
        return {
            rowType: "data",
            node: node,
            key: node.key,
            data: node.data,
            isExpanded: this.isRowExpanded(node.key, options),
            level: this._getNodeLevel(node)
        }
    },
    _loadOnOptionChange: function() {
        this._dataSource.load()
    },
    _isItemEquals: function(item1, item2) {
        if (!this.callBase.apply(this, arguments)) {
            return false
        }
        if (item1.node && item2.node && item1.node.hasChildren !== item2.node.hasChildren) {
            return false
        }
        if (item1.level !== item2.level || item1.isExpanded !== item2.isExpanded) {
            return false
        }
        return true
    },
    init: function() {
        this.createAction("onRowExpanding");
        this.createAction("onRowExpanded");
        this.createAction("onRowCollapsing");
        this.createAction("onRowCollapsed");
        this.callBase.apply(this, arguments)
    },
    keyOf: function(data) {
        var dataSource = this._dataSource;
        if (dataSource) {
            return dataSource.keyOf(data)
        }
    },
    key: function() {
        var dataSource = this._dataSource;
        if (dataSource) {
            return dataSource.getKeyExpr()
        }
    },
    publicMethods: function() {
        return this.callBase().concat(["expandRow", "collapseRow", "isRowExpanded", "getRootNode", "getNodeByKey", "loadDescendants", "forEachNode"])
    },
    changeRowExpand: function(key) {
        var _this = this;
        if (this._dataSource) {
            var args_1 = {
                key: key
            };
            var isExpanded_1 = this.isRowExpanded(key);
            this.executeAction(isExpanded_1 ? "onRowCollapsing" : "onRowExpanding", args_1);
            if (!args_1.cancel) {
                return this._dataSource.changeRowExpand(key).done((function() {
                    _this.executeAction(isExpanded_1 ? "onRowCollapsed" : "onRowExpanded", args_1)
                }))
            }
        }
        return (new deferred_1.Deferred).resolve()
    },
    isRowExpanded: function(key, cache) {
        return this._dataSource && this._dataSource.isRowExpanded(key, cache)
    },
    expandRow: function(key) {
        if (!this.isRowExpanded(key)) {
            return this.changeRowExpand(key)
        }
        return (new deferred_1.Deferred).resolve()
    },
    collapseRow: function(key) {
        if (this.isRowExpanded(key)) {
            return this.changeRowExpand(key)
        }
        return (new deferred_1.Deferred).resolve()
    },
    getRootNode: function() {
        return this._dataSource && this._dataSource.getRootNode()
    },
    optionChanged: function(args) {
        switch (args.name) {
            case "rootValue":
            case "parentIdExpr":
            case "itemsExpr":
            case "filterMode":
            case "expandNodesOnFiltering":
            case "autoExpandAll":
            case "hasItemsExpr":
            case "dataStructure":
                this._columnsController.reset();
                this._items = [];
                this._refreshDataSource();
                args.handled = true;
                break;
            case "expandedRowKeys":
            case "onNodesInitialized":
                if (this._dataSource && !this._dataSource._isNodesInitializing && !common_1.equalByValue(args.value, args.previousValue)) {
                    this._loadOnOptionChange()
                }
                args.handled = true;
                break;
            case "maxFilterLengthInRequest":
                args.handled = true;
                break;
            default:
                this.callBase(args)
        }
    },
    getNodeByKey: function(key) {
        if (!this._dataSource) {
            return
        }
        return this._dataSource.getNodeByKey(key)
    },
    getChildNodeKeys: function(parentKey) {
        if (!this._dataSource) {
            return
        }
        return this._dataSource.getChildNodeKeys(parentKey)
    },
    loadDescendants: function(keys, childrenOnly) {
        if (!this._dataSource) {
            return
        }
        return this._dataSource.loadDescendants(keys, childrenOnly)
    },
    forEachNode: function() {
        this._dataSource.forEachNode.apply(this, arguments)
    }
});
module_core_1.default.registerModule("data", {
    defaultOptions: function() {
        return extend_1.extend({}, ui_grid_core_data_controller_1.dataControllerModule.defaultOptions(), {
            itemsExpr: "items",
            parentIdExpr: "parentId",
            rootValue: 0,
            dataStructure: "plain",
            expandedRowKeys: [],
            filterMode: "withAncestors",
            expandNodesOnFiltering: true,
            autoExpandAll: false,
            onNodesInitialized: null,
            maxFilterLengthInRequest: 1500,
            paging: {
                enabled: false
            }
        })
    },
    controllers: {
        data: exports.DataController
    }
});
