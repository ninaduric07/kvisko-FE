/**
 * DevExtreme (bundles/__internal/grids/grid_core/editor_factory/module.js)
 * Version: 22.2.6
 * Build date: Tue Apr 18 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.editorFactoryModule = void 0;
var size_1 = require("../../../../core/utils/size");
var renderer_1 = __importDefault(require("../../../../core/renderer"));
var dom_adapter_1 = __importDefault(require("../../../../core/dom_adapter"));
var events_engine_1 = __importDefault(require("../../../../events/core/events_engine"));
var click_1 = require("../../../../events/click");
var pointer_1 = __importDefault(require("../../../../events/pointer"));
var position_1 = __importDefault(require("../../../../animation/position"));
var index_1 = require("../../../../events/utils/index");
var browser_1 = __importDefault(require("../../../../core/utils/browser"));
var extend_1 = require("../../../../core/utils/extend");
var position_2 = require("../../../../core/utils/position");
var ui_editor_factory_mixin_1 = __importDefault(require("../../../../ui/shared/ui.editor_factory_mixin"));
var modules_1 = __importDefault(require("../modules"));
var module_utils_1 = __importDefault(require("../module_utils"));
var EDITOR_INLINE_BLOCK = "dx-editor-inline-block";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var FOCUS_OVERLAY_CLASS = "focus-overlay";
var CONTENT_CLASS = "content";
var FOCUSED_ELEMENT_CLASS = "dx-focused";
var ROW_CLASS = "dx-row";
var MODULE_NAMESPACE = "dxDataGridEditorFactory";
var UPDATE_FOCUS_EVENTS = index_1.addNamespace([pointer_1.default.down, "focusin", click_1.name].join(" "), MODULE_NAMESPACE);
var DX_HIDDEN = "dx-hidden";
var members = {
    _getFocusedElement: function($dataGridElement) {
        var rowSelector = this.option("focusedRowEnabled") ? "tr[tabindex]:focus" : "tr[tabindex]:not(.dx-data-row):focus";
        var focusedElementSelector = "td[tabindex]:focus, " + rowSelector + ", input:focus, textarea:focus, .dx-lookup-field:focus, .dx-checkbox:focus, .dx-switch:focus, .dx-dropdownbutton .dx-buttongroup:focus, .dx-adaptive-item-text:focus";
        var $focusedElement = $dataGridElement.find(focusedElementSelector);
        return this.elementIsInsideGrid($focusedElement) && $focusedElement
    },
    _getFocusCellSelector: function() {
        return ".dx-row > td"
    },
    _updateFocusCore: function() {
        var $dataGridElement = this.component && this.component.$element();
        if ($dataGridElement) {
            var $focus = this._getFocusedElement($dataGridElement);
            if ($focus && $focus.length) {
                var isHideBorder = void 0;
                if (!$focus.hasClass(CELL_FOCUS_DISABLED_CLASS) && !$focus.hasClass(ROW_CLASS)) {
                    var $focusCell = $focus.closest(this._getFocusCellSelector() + ", ." + CELL_FOCUS_DISABLED_CLASS);
                    if ($focusCell.get(0) !== $focus.get(0)) {
                        isHideBorder = this._needHideBorder($focusCell);
                        $focus = $focusCell
                    }
                }
                if ($focus.length && !$focus.hasClass(CELL_FOCUS_DISABLED_CLASS)) {
                    this.focus($focus, isHideBorder);
                    return
                }
            }
        }
        this.loseFocus()
    },
    _needHideBorder: function($element) {
        return $element.hasClass(EDITOR_INLINE_BLOCK)
    },
    _updateFocus: function(e) {
        var that = this;
        var isFocusOverlay = e && e.event && renderer_1.default(e.event.target).hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));
        that._isFocusOverlay = that._isFocusOverlay || isFocusOverlay;
        clearTimeout(that._updateFocusTimeoutID);
        that._updateFocusTimeoutID = setTimeout((function() {
            delete that._updateFocusTimeoutID;
            if (!that._isFocusOverlay) {
                that._updateFocusCore()
            }
            that._isFocusOverlay = false
        }))
    },
    _updateFocusOverlaySize: function($element, position) {
        $element.hide();
        var location = position_1.default.calculate($element, extend_1.extend({
            collision: "fit"
        }, position));
        if (location.h.oversize > 0) {
            size_1.setOuterWidth($element, size_1.getOuterWidth($element) - location.h.oversize)
        }
        if (location.v.oversize > 0) {
            size_1.setOuterHeight($element, size_1.getOuterHeight($element) - location.v.oversize)
        }
        $element.show()
    },
    callbackNames: function() {
        return ["focused"]
    },
    focus: function($element, isHideBorder) {
        var that = this;
        if (void 0 === $element) {
            return that._$focusedElement
        }
        if ($element) {
            if (!$element.is(that._$focusedElement)) {
                that._$focusedElement && that._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS)
            }
            that._$focusedElement = $element;
            clearTimeout(that._focusTimeoutID);
            that._focusTimeoutID = setTimeout((function() {
                delete that._focusTimeoutID;
                that.renderFocusOverlay($element, isHideBorder);
                $element.addClass(FOCUSED_ELEMENT_CLASS);
                that.focused.fire($element)
            }))
        }
    },
    refocus: function() {
        var $focus = this.focus();
        this.focus($focus)
    },
    renderFocusOverlay: function($element, isHideBorder) {
        if (!module_utils_1.default.isElementInCurrentGrid(this, $element)) {
            return
        }
        if (!this._$focusOverlay) {
            this._$focusOverlay = renderer_1.default("<div>").addClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS))
        }
        if (isHideBorder) {
            this._$focusOverlay.addClass(DX_HIDDEN)
        } else if ($element.length) {
            var align = browser_1.default.mozilla ? "right bottom" : "left top";
            var $content = $element.closest("." + this.addWidgetPrefix(CONTENT_CLASS));
            var elemCoord = position_2.getBoundingRect($element.get(0));
            this._$focusOverlay.removeClass(DX_HIDDEN).appendTo($content);
            size_1.setOuterHeight(this._$focusOverlay, elemCoord.bottom - elemCoord.top + 1);
            size_1.setOuterWidth(this._$focusOverlay, elemCoord.right - elemCoord.left + 1);
            var focusOverlayPosition = {
                precise: true,
                my: align,
                at: align,
                of: $element,
                boundary: $content.length && $content
            };
            this._updateFocusOverlaySize(this._$focusOverlay, focusOverlayPosition);
            position_1.default.setup(this._$focusOverlay, focusOverlayPosition);
            this._$focusOverlay.css("visibility", "visible")
        }
    },
    resize: function() {
        var $focusedElement = this._$focusedElement;
        if ($focusedElement) {
            this.focus($focusedElement)
        }
    },
    loseFocus: function() {
        this._$focusedElement && this._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);
        this._$focusedElement = null;
        this._$focusOverlay && this._$focusOverlay.addClass(DX_HIDDEN)
    },
    init: function() {
        this.createAction("onEditorPreparing", {
            excludeValidators: ["disabled", "readOnly"],
            category: "rendering"
        });
        this.createAction("onEditorPrepared", {
            excludeValidators: ["disabled", "readOnly"],
            category: "rendering"
        });
        this._updateFocusHandler = this._updateFocusHandler || this.createAction(this._updateFocus.bind(this));
        events_engine_1.default.on(this._getContainerRoot(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler);
        this._attachContainerEventHandlers()
    },
    _getContainerRoot: function() {
        var _a;
        var $container = null === (_a = this.component) || void 0 === _a ? void 0 : _a.$element();
        var root = dom_adapter_1.default.getRootNode(null === $container || void 0 === $container ? void 0 : $container.get(0));
        if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE && !root.host) {
            return dom_adapter_1.default.getDocument()
        }
        return root
    },
    _attachContainerEventHandlers: function() {
        var that = this;
        var $container = that.component && that.component.$element();
        if ($container) {
            events_engine_1.default.on($container, index_1.addNamespace("keydown", MODULE_NAMESPACE), (function(e) {
                if ("tab" === index_1.normalizeKeyName(e)) {
                    that._updateFocusHandler(e)
                }
            }))
        }
    },
    dispose: function() {
        clearTimeout(this._focusTimeoutID);
        clearTimeout(this._updateFocusTimeoutID);
        events_engine_1.default.off(this._getContainerRoot(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler)
    }
};
var EditorFactory = modules_1.default.ViewController.inherit(ui_editor_factory_mixin_1.default).inherit(members);
exports.editorFactoryModule = {
    defaultOptions: function() {
        return {}
    },
    controllers: {
        editorFactory: EditorFactory
    }
};
